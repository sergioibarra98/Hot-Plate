
HOT_PLATE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007484  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fb4  0800753c  0800753c  0001753c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084f0  080084f0  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  080084f0  080084f0  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  080084f0  080084f0  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084f0  080084f0  000184f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080084f4  080084f4  000184f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  080084f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000698  20000094  0800858c  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000072c  0800858c  0002072c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f72  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bf2  00000000  00000000  0003302e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  00035c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001068  00000000  00000000  00036de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017990  00000000  00000000  00037e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ef4  00000000  00000000  0004f7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000929f3  00000000  00000000  000646d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f70c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004548  00000000  00000000  000f7118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000094 	.word	0x20000094
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08007524 	.word	0x08007524

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000098 	.word	0x20000098
 80000fc:	08007524 	.word	0x08007524

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f806 	bl	8000228 <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__aeabi_idiv0>:
 8000228:	4770      	bx	lr
 800022a:	46c0      	nop			; (mov r8, r8)

0800022c <__aeabi_cfrcmple>:
 800022c:	4684      	mov	ip, r0
 800022e:	0008      	movs	r0, r1
 8000230:	4661      	mov	r1, ip
 8000232:	e7ff      	b.n	8000234 <__aeabi_cfcmpeq>

08000234 <__aeabi_cfcmpeq>:
 8000234:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000236:	f000 fa3d 	bl	80006b4 <__lesf2>
 800023a:	2800      	cmp	r0, #0
 800023c:	d401      	bmi.n	8000242 <__aeabi_cfcmpeq+0xe>
 800023e:	2100      	movs	r1, #0
 8000240:	42c8      	cmn	r0, r1
 8000242:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000244 <__aeabi_fcmpeq>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 f9c9 	bl	80005dc <__eqsf2>
 800024a:	4240      	negs	r0, r0
 800024c:	3001      	adds	r0, #1
 800024e:	bd10      	pop	{r4, pc}

08000250 <__aeabi_fcmplt>:
 8000250:	b510      	push	{r4, lr}
 8000252:	f000 fa2f 	bl	80006b4 <__lesf2>
 8000256:	2800      	cmp	r0, #0
 8000258:	db01      	blt.n	800025e <__aeabi_fcmplt+0xe>
 800025a:	2000      	movs	r0, #0
 800025c:	bd10      	pop	{r4, pc}
 800025e:	2001      	movs	r0, #1
 8000260:	bd10      	pop	{r4, pc}
 8000262:	46c0      	nop			; (mov r8, r8)

08000264 <__aeabi_fcmple>:
 8000264:	b510      	push	{r4, lr}
 8000266:	f000 fa25 	bl	80006b4 <__lesf2>
 800026a:	2800      	cmp	r0, #0
 800026c:	dd01      	ble.n	8000272 <__aeabi_fcmple+0xe>
 800026e:	2000      	movs	r0, #0
 8000270:	bd10      	pop	{r4, pc}
 8000272:	2001      	movs	r0, #1
 8000274:	bd10      	pop	{r4, pc}
 8000276:	46c0      	nop			; (mov r8, r8)

08000278 <__aeabi_fcmpgt>:
 8000278:	b510      	push	{r4, lr}
 800027a:	f000 f9d5 	bl	8000628 <__gesf2>
 800027e:	2800      	cmp	r0, #0
 8000280:	dc01      	bgt.n	8000286 <__aeabi_fcmpgt+0xe>
 8000282:	2000      	movs	r0, #0
 8000284:	bd10      	pop	{r4, pc}
 8000286:	2001      	movs	r0, #1
 8000288:	bd10      	pop	{r4, pc}
 800028a:	46c0      	nop			; (mov r8, r8)

0800028c <__aeabi_fcmpge>:
 800028c:	b510      	push	{r4, lr}
 800028e:	f000 f9cb 	bl	8000628 <__gesf2>
 8000292:	2800      	cmp	r0, #0
 8000294:	da01      	bge.n	800029a <__aeabi_fcmpge+0xe>
 8000296:	2000      	movs	r0, #0
 8000298:	bd10      	pop	{r4, pc}
 800029a:	2001      	movs	r0, #1
 800029c:	bd10      	pop	{r4, pc}
 800029e:	46c0      	nop			; (mov r8, r8)

080002a0 <__aeabi_fadd>:
 80002a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002a2:	46c6      	mov	lr, r8
 80002a4:	0243      	lsls	r3, r0, #9
 80002a6:	0a5b      	lsrs	r3, r3, #9
 80002a8:	024e      	lsls	r6, r1, #9
 80002aa:	0045      	lsls	r5, r0, #1
 80002ac:	004f      	lsls	r7, r1, #1
 80002ae:	00da      	lsls	r2, r3, #3
 80002b0:	0fc4      	lsrs	r4, r0, #31
 80002b2:	469c      	mov	ip, r3
 80002b4:	0a70      	lsrs	r0, r6, #9
 80002b6:	4690      	mov	r8, r2
 80002b8:	b500      	push	{lr}
 80002ba:	0e2d      	lsrs	r5, r5, #24
 80002bc:	0e3f      	lsrs	r7, r7, #24
 80002be:	0fc9      	lsrs	r1, r1, #31
 80002c0:	09b6      	lsrs	r6, r6, #6
 80002c2:	428c      	cmp	r4, r1
 80002c4:	d04b      	beq.n	800035e <__aeabi_fadd+0xbe>
 80002c6:	1bea      	subs	r2, r5, r7
 80002c8:	2a00      	cmp	r2, #0
 80002ca:	dd36      	ble.n	800033a <__aeabi_fadd+0x9a>
 80002cc:	2f00      	cmp	r7, #0
 80002ce:	d061      	beq.n	8000394 <__aeabi_fadd+0xf4>
 80002d0:	2dff      	cmp	r5, #255	; 0xff
 80002d2:	d100      	bne.n	80002d6 <__aeabi_fadd+0x36>
 80002d4:	e0ad      	b.n	8000432 <__aeabi_fadd+0x192>
 80002d6:	2380      	movs	r3, #128	; 0x80
 80002d8:	04db      	lsls	r3, r3, #19
 80002da:	431e      	orrs	r6, r3
 80002dc:	2a1b      	cmp	r2, #27
 80002de:	dc00      	bgt.n	80002e2 <__aeabi_fadd+0x42>
 80002e0:	e0d3      	b.n	800048a <__aeabi_fadd+0x1ea>
 80002e2:	2001      	movs	r0, #1
 80002e4:	4643      	mov	r3, r8
 80002e6:	1a18      	subs	r0, r3, r0
 80002e8:	0143      	lsls	r3, r0, #5
 80002ea:	d400      	bmi.n	80002ee <__aeabi_fadd+0x4e>
 80002ec:	e08c      	b.n	8000408 <__aeabi_fadd+0x168>
 80002ee:	0180      	lsls	r0, r0, #6
 80002f0:	0987      	lsrs	r7, r0, #6
 80002f2:	0038      	movs	r0, r7
 80002f4:	f000 fd64 	bl	8000dc0 <__clzsi2>
 80002f8:	3805      	subs	r0, #5
 80002fa:	4087      	lsls	r7, r0
 80002fc:	4285      	cmp	r5, r0
 80002fe:	dc00      	bgt.n	8000302 <__aeabi_fadd+0x62>
 8000300:	e0b6      	b.n	8000470 <__aeabi_fadd+0x1d0>
 8000302:	1a2d      	subs	r5, r5, r0
 8000304:	48b3      	ldr	r0, [pc, #716]	; (80005d4 <__aeabi_fadd+0x334>)
 8000306:	4038      	ands	r0, r7
 8000308:	0743      	lsls	r3, r0, #29
 800030a:	d004      	beq.n	8000316 <__aeabi_fadd+0x76>
 800030c:	230f      	movs	r3, #15
 800030e:	4003      	ands	r3, r0
 8000310:	2b04      	cmp	r3, #4
 8000312:	d000      	beq.n	8000316 <__aeabi_fadd+0x76>
 8000314:	3004      	adds	r0, #4
 8000316:	0143      	lsls	r3, r0, #5
 8000318:	d400      	bmi.n	800031c <__aeabi_fadd+0x7c>
 800031a:	e078      	b.n	800040e <__aeabi_fadd+0x16e>
 800031c:	1c6a      	adds	r2, r5, #1
 800031e:	2dfe      	cmp	r5, #254	; 0xfe
 8000320:	d065      	beq.n	80003ee <__aeabi_fadd+0x14e>
 8000322:	0180      	lsls	r0, r0, #6
 8000324:	0a43      	lsrs	r3, r0, #9
 8000326:	469c      	mov	ip, r3
 8000328:	b2d2      	uxtb	r2, r2
 800032a:	4663      	mov	r3, ip
 800032c:	05d0      	lsls	r0, r2, #23
 800032e:	4318      	orrs	r0, r3
 8000330:	07e4      	lsls	r4, r4, #31
 8000332:	4320      	orrs	r0, r4
 8000334:	bc80      	pop	{r7}
 8000336:	46b8      	mov	r8, r7
 8000338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800033a:	2a00      	cmp	r2, #0
 800033c:	d035      	beq.n	80003aa <__aeabi_fadd+0x10a>
 800033e:	1b7a      	subs	r2, r7, r5
 8000340:	2d00      	cmp	r5, #0
 8000342:	d000      	beq.n	8000346 <__aeabi_fadd+0xa6>
 8000344:	e0af      	b.n	80004a6 <__aeabi_fadd+0x206>
 8000346:	4643      	mov	r3, r8
 8000348:	2b00      	cmp	r3, #0
 800034a:	d100      	bne.n	800034e <__aeabi_fadd+0xae>
 800034c:	e0a7      	b.n	800049e <__aeabi_fadd+0x1fe>
 800034e:	1e53      	subs	r3, r2, #1
 8000350:	2a01      	cmp	r2, #1
 8000352:	d100      	bne.n	8000356 <__aeabi_fadd+0xb6>
 8000354:	e12f      	b.n	80005b6 <__aeabi_fadd+0x316>
 8000356:	2aff      	cmp	r2, #255	; 0xff
 8000358:	d069      	beq.n	800042e <__aeabi_fadd+0x18e>
 800035a:	001a      	movs	r2, r3
 800035c:	e0aa      	b.n	80004b4 <__aeabi_fadd+0x214>
 800035e:	1be9      	subs	r1, r5, r7
 8000360:	2900      	cmp	r1, #0
 8000362:	dd70      	ble.n	8000446 <__aeabi_fadd+0x1a6>
 8000364:	2f00      	cmp	r7, #0
 8000366:	d037      	beq.n	80003d8 <__aeabi_fadd+0x138>
 8000368:	2dff      	cmp	r5, #255	; 0xff
 800036a:	d062      	beq.n	8000432 <__aeabi_fadd+0x192>
 800036c:	2380      	movs	r3, #128	; 0x80
 800036e:	04db      	lsls	r3, r3, #19
 8000370:	431e      	orrs	r6, r3
 8000372:	291b      	cmp	r1, #27
 8000374:	dc00      	bgt.n	8000378 <__aeabi_fadd+0xd8>
 8000376:	e0b0      	b.n	80004da <__aeabi_fadd+0x23a>
 8000378:	2001      	movs	r0, #1
 800037a:	4440      	add	r0, r8
 800037c:	0143      	lsls	r3, r0, #5
 800037e:	d543      	bpl.n	8000408 <__aeabi_fadd+0x168>
 8000380:	3501      	adds	r5, #1
 8000382:	2dff      	cmp	r5, #255	; 0xff
 8000384:	d033      	beq.n	80003ee <__aeabi_fadd+0x14e>
 8000386:	2301      	movs	r3, #1
 8000388:	4a93      	ldr	r2, [pc, #588]	; (80005d8 <__aeabi_fadd+0x338>)
 800038a:	4003      	ands	r3, r0
 800038c:	0840      	lsrs	r0, r0, #1
 800038e:	4010      	ands	r0, r2
 8000390:	4318      	orrs	r0, r3
 8000392:	e7b9      	b.n	8000308 <__aeabi_fadd+0x68>
 8000394:	2e00      	cmp	r6, #0
 8000396:	d100      	bne.n	800039a <__aeabi_fadd+0xfa>
 8000398:	e083      	b.n	80004a2 <__aeabi_fadd+0x202>
 800039a:	1e51      	subs	r1, r2, #1
 800039c:	2a01      	cmp	r2, #1
 800039e:	d100      	bne.n	80003a2 <__aeabi_fadd+0x102>
 80003a0:	e0d8      	b.n	8000554 <__aeabi_fadd+0x2b4>
 80003a2:	2aff      	cmp	r2, #255	; 0xff
 80003a4:	d045      	beq.n	8000432 <__aeabi_fadd+0x192>
 80003a6:	000a      	movs	r2, r1
 80003a8:	e798      	b.n	80002dc <__aeabi_fadd+0x3c>
 80003aa:	27fe      	movs	r7, #254	; 0xfe
 80003ac:	1c6a      	adds	r2, r5, #1
 80003ae:	4217      	tst	r7, r2
 80003b0:	d000      	beq.n	80003b4 <__aeabi_fadd+0x114>
 80003b2:	e086      	b.n	80004c2 <__aeabi_fadd+0x222>
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d000      	beq.n	80003ba <__aeabi_fadd+0x11a>
 80003b8:	e0b7      	b.n	800052a <__aeabi_fadd+0x28a>
 80003ba:	4643      	mov	r3, r8
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d100      	bne.n	80003c2 <__aeabi_fadd+0x122>
 80003c0:	e0f3      	b.n	80005aa <__aeabi_fadd+0x30a>
 80003c2:	2200      	movs	r2, #0
 80003c4:	2e00      	cmp	r6, #0
 80003c6:	d0b0      	beq.n	800032a <__aeabi_fadd+0x8a>
 80003c8:	1b98      	subs	r0, r3, r6
 80003ca:	0143      	lsls	r3, r0, #5
 80003cc:	d400      	bmi.n	80003d0 <__aeabi_fadd+0x130>
 80003ce:	e0fa      	b.n	80005c6 <__aeabi_fadd+0x326>
 80003d0:	4643      	mov	r3, r8
 80003d2:	000c      	movs	r4, r1
 80003d4:	1af0      	subs	r0, r6, r3
 80003d6:	e797      	b.n	8000308 <__aeabi_fadd+0x68>
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d100      	bne.n	80003de <__aeabi_fadd+0x13e>
 80003dc:	e0c8      	b.n	8000570 <__aeabi_fadd+0x2d0>
 80003de:	1e4a      	subs	r2, r1, #1
 80003e0:	2901      	cmp	r1, #1
 80003e2:	d100      	bne.n	80003e6 <__aeabi_fadd+0x146>
 80003e4:	e0ae      	b.n	8000544 <__aeabi_fadd+0x2a4>
 80003e6:	29ff      	cmp	r1, #255	; 0xff
 80003e8:	d023      	beq.n	8000432 <__aeabi_fadd+0x192>
 80003ea:	0011      	movs	r1, r2
 80003ec:	e7c1      	b.n	8000372 <__aeabi_fadd+0xd2>
 80003ee:	2300      	movs	r3, #0
 80003f0:	22ff      	movs	r2, #255	; 0xff
 80003f2:	469c      	mov	ip, r3
 80003f4:	e799      	b.n	800032a <__aeabi_fadd+0x8a>
 80003f6:	21fe      	movs	r1, #254	; 0xfe
 80003f8:	1c6a      	adds	r2, r5, #1
 80003fa:	4211      	tst	r1, r2
 80003fc:	d077      	beq.n	80004ee <__aeabi_fadd+0x24e>
 80003fe:	2aff      	cmp	r2, #255	; 0xff
 8000400:	d0f5      	beq.n	80003ee <__aeabi_fadd+0x14e>
 8000402:	0015      	movs	r5, r2
 8000404:	4446      	add	r6, r8
 8000406:	0870      	lsrs	r0, r6, #1
 8000408:	0743      	lsls	r3, r0, #29
 800040a:	d000      	beq.n	800040e <__aeabi_fadd+0x16e>
 800040c:	e77e      	b.n	800030c <__aeabi_fadd+0x6c>
 800040e:	08c3      	lsrs	r3, r0, #3
 8000410:	2dff      	cmp	r5, #255	; 0xff
 8000412:	d00e      	beq.n	8000432 <__aeabi_fadd+0x192>
 8000414:	025b      	lsls	r3, r3, #9
 8000416:	0a5b      	lsrs	r3, r3, #9
 8000418:	469c      	mov	ip, r3
 800041a:	b2ea      	uxtb	r2, r5
 800041c:	e785      	b.n	800032a <__aeabi_fadd+0x8a>
 800041e:	2e00      	cmp	r6, #0
 8000420:	d007      	beq.n	8000432 <__aeabi_fadd+0x192>
 8000422:	2280      	movs	r2, #128	; 0x80
 8000424:	03d2      	lsls	r2, r2, #15
 8000426:	4213      	tst	r3, r2
 8000428:	d003      	beq.n	8000432 <__aeabi_fadd+0x192>
 800042a:	4210      	tst	r0, r2
 800042c:	d101      	bne.n	8000432 <__aeabi_fadd+0x192>
 800042e:	000c      	movs	r4, r1
 8000430:	0003      	movs	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d0db      	beq.n	80003ee <__aeabi_fadd+0x14e>
 8000436:	2080      	movs	r0, #128	; 0x80
 8000438:	03c0      	lsls	r0, r0, #15
 800043a:	4318      	orrs	r0, r3
 800043c:	0240      	lsls	r0, r0, #9
 800043e:	0a43      	lsrs	r3, r0, #9
 8000440:	469c      	mov	ip, r3
 8000442:	22ff      	movs	r2, #255	; 0xff
 8000444:	e771      	b.n	800032a <__aeabi_fadd+0x8a>
 8000446:	2900      	cmp	r1, #0
 8000448:	d0d5      	beq.n	80003f6 <__aeabi_fadd+0x156>
 800044a:	1b7a      	subs	r2, r7, r5
 800044c:	2d00      	cmp	r5, #0
 800044e:	d160      	bne.n	8000512 <__aeabi_fadd+0x272>
 8000450:	4643      	mov	r3, r8
 8000452:	2b00      	cmp	r3, #0
 8000454:	d024      	beq.n	80004a0 <__aeabi_fadd+0x200>
 8000456:	1e53      	subs	r3, r2, #1
 8000458:	2a01      	cmp	r2, #1
 800045a:	d073      	beq.n	8000544 <__aeabi_fadd+0x2a4>
 800045c:	2aff      	cmp	r2, #255	; 0xff
 800045e:	d0e7      	beq.n	8000430 <__aeabi_fadd+0x190>
 8000460:	001a      	movs	r2, r3
 8000462:	2a1b      	cmp	r2, #27
 8000464:	dc00      	bgt.n	8000468 <__aeabi_fadd+0x1c8>
 8000466:	e085      	b.n	8000574 <__aeabi_fadd+0x2d4>
 8000468:	2001      	movs	r0, #1
 800046a:	003d      	movs	r5, r7
 800046c:	1980      	adds	r0, r0, r6
 800046e:	e785      	b.n	800037c <__aeabi_fadd+0xdc>
 8000470:	2320      	movs	r3, #32
 8000472:	003a      	movs	r2, r7
 8000474:	1b45      	subs	r5, r0, r5
 8000476:	0038      	movs	r0, r7
 8000478:	3501      	adds	r5, #1
 800047a:	40ea      	lsrs	r2, r5
 800047c:	1b5d      	subs	r5, r3, r5
 800047e:	40a8      	lsls	r0, r5
 8000480:	1e43      	subs	r3, r0, #1
 8000482:	4198      	sbcs	r0, r3
 8000484:	2500      	movs	r5, #0
 8000486:	4310      	orrs	r0, r2
 8000488:	e73e      	b.n	8000308 <__aeabi_fadd+0x68>
 800048a:	2320      	movs	r3, #32
 800048c:	0030      	movs	r0, r6
 800048e:	1a9b      	subs	r3, r3, r2
 8000490:	0031      	movs	r1, r6
 8000492:	4098      	lsls	r0, r3
 8000494:	40d1      	lsrs	r1, r2
 8000496:	1e43      	subs	r3, r0, #1
 8000498:	4198      	sbcs	r0, r3
 800049a:	4308      	orrs	r0, r1
 800049c:	e722      	b.n	80002e4 <__aeabi_fadd+0x44>
 800049e:	000c      	movs	r4, r1
 80004a0:	0003      	movs	r3, r0
 80004a2:	0015      	movs	r5, r2
 80004a4:	e7b4      	b.n	8000410 <__aeabi_fadd+0x170>
 80004a6:	2fff      	cmp	r7, #255	; 0xff
 80004a8:	d0c1      	beq.n	800042e <__aeabi_fadd+0x18e>
 80004aa:	2380      	movs	r3, #128	; 0x80
 80004ac:	4640      	mov	r0, r8
 80004ae:	04db      	lsls	r3, r3, #19
 80004b0:	4318      	orrs	r0, r3
 80004b2:	4680      	mov	r8, r0
 80004b4:	2a1b      	cmp	r2, #27
 80004b6:	dd51      	ble.n	800055c <__aeabi_fadd+0x2bc>
 80004b8:	2001      	movs	r0, #1
 80004ba:	000c      	movs	r4, r1
 80004bc:	003d      	movs	r5, r7
 80004be:	1a30      	subs	r0, r6, r0
 80004c0:	e712      	b.n	80002e8 <__aeabi_fadd+0x48>
 80004c2:	4643      	mov	r3, r8
 80004c4:	1b9f      	subs	r7, r3, r6
 80004c6:	017b      	lsls	r3, r7, #5
 80004c8:	d42b      	bmi.n	8000522 <__aeabi_fadd+0x282>
 80004ca:	2f00      	cmp	r7, #0
 80004cc:	d000      	beq.n	80004d0 <__aeabi_fadd+0x230>
 80004ce:	e710      	b.n	80002f2 <__aeabi_fadd+0x52>
 80004d0:	2300      	movs	r3, #0
 80004d2:	2400      	movs	r4, #0
 80004d4:	2200      	movs	r2, #0
 80004d6:	469c      	mov	ip, r3
 80004d8:	e727      	b.n	800032a <__aeabi_fadd+0x8a>
 80004da:	2320      	movs	r3, #32
 80004dc:	0032      	movs	r2, r6
 80004de:	0030      	movs	r0, r6
 80004e0:	40ca      	lsrs	r2, r1
 80004e2:	1a59      	subs	r1, r3, r1
 80004e4:	4088      	lsls	r0, r1
 80004e6:	1e43      	subs	r3, r0, #1
 80004e8:	4198      	sbcs	r0, r3
 80004ea:	4310      	orrs	r0, r2
 80004ec:	e745      	b.n	800037a <__aeabi_fadd+0xda>
 80004ee:	2d00      	cmp	r5, #0
 80004f0:	d14a      	bne.n	8000588 <__aeabi_fadd+0x2e8>
 80004f2:	4643      	mov	r3, r8
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d063      	beq.n	80005c0 <__aeabi_fadd+0x320>
 80004f8:	2200      	movs	r2, #0
 80004fa:	2e00      	cmp	r6, #0
 80004fc:	d100      	bne.n	8000500 <__aeabi_fadd+0x260>
 80004fe:	e714      	b.n	800032a <__aeabi_fadd+0x8a>
 8000500:	0030      	movs	r0, r6
 8000502:	4440      	add	r0, r8
 8000504:	0143      	lsls	r3, r0, #5
 8000506:	d400      	bmi.n	800050a <__aeabi_fadd+0x26a>
 8000508:	e77e      	b.n	8000408 <__aeabi_fadd+0x168>
 800050a:	4b32      	ldr	r3, [pc, #200]	; (80005d4 <__aeabi_fadd+0x334>)
 800050c:	3501      	adds	r5, #1
 800050e:	4018      	ands	r0, r3
 8000510:	e77a      	b.n	8000408 <__aeabi_fadd+0x168>
 8000512:	2fff      	cmp	r7, #255	; 0xff
 8000514:	d08c      	beq.n	8000430 <__aeabi_fadd+0x190>
 8000516:	2380      	movs	r3, #128	; 0x80
 8000518:	4641      	mov	r1, r8
 800051a:	04db      	lsls	r3, r3, #19
 800051c:	4319      	orrs	r1, r3
 800051e:	4688      	mov	r8, r1
 8000520:	e79f      	b.n	8000462 <__aeabi_fadd+0x1c2>
 8000522:	4643      	mov	r3, r8
 8000524:	000c      	movs	r4, r1
 8000526:	1af7      	subs	r7, r6, r3
 8000528:	e6e3      	b.n	80002f2 <__aeabi_fadd+0x52>
 800052a:	4642      	mov	r2, r8
 800052c:	2a00      	cmp	r2, #0
 800052e:	d000      	beq.n	8000532 <__aeabi_fadd+0x292>
 8000530:	e775      	b.n	800041e <__aeabi_fadd+0x17e>
 8000532:	2e00      	cmp	r6, #0
 8000534:	d000      	beq.n	8000538 <__aeabi_fadd+0x298>
 8000536:	e77a      	b.n	800042e <__aeabi_fadd+0x18e>
 8000538:	2380      	movs	r3, #128	; 0x80
 800053a:	03db      	lsls	r3, r3, #15
 800053c:	2400      	movs	r4, #0
 800053e:	469c      	mov	ip, r3
 8000540:	22ff      	movs	r2, #255	; 0xff
 8000542:	e6f2      	b.n	800032a <__aeabi_fadd+0x8a>
 8000544:	0030      	movs	r0, r6
 8000546:	4440      	add	r0, r8
 8000548:	2501      	movs	r5, #1
 800054a:	0143      	lsls	r3, r0, #5
 800054c:	d400      	bmi.n	8000550 <__aeabi_fadd+0x2b0>
 800054e:	e75b      	b.n	8000408 <__aeabi_fadd+0x168>
 8000550:	2502      	movs	r5, #2
 8000552:	e718      	b.n	8000386 <__aeabi_fadd+0xe6>
 8000554:	4643      	mov	r3, r8
 8000556:	2501      	movs	r5, #1
 8000558:	1b98      	subs	r0, r3, r6
 800055a:	e6c5      	b.n	80002e8 <__aeabi_fadd+0x48>
 800055c:	2320      	movs	r3, #32
 800055e:	4644      	mov	r4, r8
 8000560:	4640      	mov	r0, r8
 8000562:	40d4      	lsrs	r4, r2
 8000564:	1a9a      	subs	r2, r3, r2
 8000566:	4090      	lsls	r0, r2
 8000568:	1e43      	subs	r3, r0, #1
 800056a:	4198      	sbcs	r0, r3
 800056c:	4320      	orrs	r0, r4
 800056e:	e7a4      	b.n	80004ba <__aeabi_fadd+0x21a>
 8000570:	000d      	movs	r5, r1
 8000572:	e74d      	b.n	8000410 <__aeabi_fadd+0x170>
 8000574:	2320      	movs	r3, #32
 8000576:	4641      	mov	r1, r8
 8000578:	4640      	mov	r0, r8
 800057a:	40d1      	lsrs	r1, r2
 800057c:	1a9a      	subs	r2, r3, r2
 800057e:	4090      	lsls	r0, r2
 8000580:	1e43      	subs	r3, r0, #1
 8000582:	4198      	sbcs	r0, r3
 8000584:	4308      	orrs	r0, r1
 8000586:	e770      	b.n	800046a <__aeabi_fadd+0x1ca>
 8000588:	4642      	mov	r2, r8
 800058a:	2a00      	cmp	r2, #0
 800058c:	d100      	bne.n	8000590 <__aeabi_fadd+0x2f0>
 800058e:	e74f      	b.n	8000430 <__aeabi_fadd+0x190>
 8000590:	2e00      	cmp	r6, #0
 8000592:	d100      	bne.n	8000596 <__aeabi_fadd+0x2f6>
 8000594:	e74d      	b.n	8000432 <__aeabi_fadd+0x192>
 8000596:	2280      	movs	r2, #128	; 0x80
 8000598:	03d2      	lsls	r2, r2, #15
 800059a:	4213      	tst	r3, r2
 800059c:	d100      	bne.n	80005a0 <__aeabi_fadd+0x300>
 800059e:	e748      	b.n	8000432 <__aeabi_fadd+0x192>
 80005a0:	4210      	tst	r0, r2
 80005a2:	d000      	beq.n	80005a6 <__aeabi_fadd+0x306>
 80005a4:	e745      	b.n	8000432 <__aeabi_fadd+0x192>
 80005a6:	0003      	movs	r3, r0
 80005a8:	e743      	b.n	8000432 <__aeabi_fadd+0x192>
 80005aa:	2e00      	cmp	r6, #0
 80005ac:	d090      	beq.n	80004d0 <__aeabi_fadd+0x230>
 80005ae:	000c      	movs	r4, r1
 80005b0:	4684      	mov	ip, r0
 80005b2:	2200      	movs	r2, #0
 80005b4:	e6b9      	b.n	800032a <__aeabi_fadd+0x8a>
 80005b6:	4643      	mov	r3, r8
 80005b8:	000c      	movs	r4, r1
 80005ba:	1af0      	subs	r0, r6, r3
 80005bc:	3501      	adds	r5, #1
 80005be:	e693      	b.n	80002e8 <__aeabi_fadd+0x48>
 80005c0:	4684      	mov	ip, r0
 80005c2:	2200      	movs	r2, #0
 80005c4:	e6b1      	b.n	800032a <__aeabi_fadd+0x8a>
 80005c6:	2800      	cmp	r0, #0
 80005c8:	d000      	beq.n	80005cc <__aeabi_fadd+0x32c>
 80005ca:	e71d      	b.n	8000408 <__aeabi_fadd+0x168>
 80005cc:	2300      	movs	r3, #0
 80005ce:	2400      	movs	r4, #0
 80005d0:	469c      	mov	ip, r3
 80005d2:	e6aa      	b.n	800032a <__aeabi_fadd+0x8a>
 80005d4:	fbffffff 	.word	0xfbffffff
 80005d8:	7dffffff 	.word	0x7dffffff

080005dc <__eqsf2>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	0042      	lsls	r2, r0, #1
 80005e0:	0245      	lsls	r5, r0, #9
 80005e2:	024e      	lsls	r6, r1, #9
 80005e4:	004c      	lsls	r4, r1, #1
 80005e6:	0fc3      	lsrs	r3, r0, #31
 80005e8:	0a6d      	lsrs	r5, r5, #9
 80005ea:	2001      	movs	r0, #1
 80005ec:	0e12      	lsrs	r2, r2, #24
 80005ee:	0a76      	lsrs	r6, r6, #9
 80005f0:	0e24      	lsrs	r4, r4, #24
 80005f2:	0fc9      	lsrs	r1, r1, #31
 80005f4:	2aff      	cmp	r2, #255	; 0xff
 80005f6:	d006      	beq.n	8000606 <__eqsf2+0x2a>
 80005f8:	2cff      	cmp	r4, #255	; 0xff
 80005fa:	d003      	beq.n	8000604 <__eqsf2+0x28>
 80005fc:	42a2      	cmp	r2, r4
 80005fe:	d101      	bne.n	8000604 <__eqsf2+0x28>
 8000600:	42b5      	cmp	r5, r6
 8000602:	d006      	beq.n	8000612 <__eqsf2+0x36>
 8000604:	bd70      	pop	{r4, r5, r6, pc}
 8000606:	2d00      	cmp	r5, #0
 8000608:	d1fc      	bne.n	8000604 <__eqsf2+0x28>
 800060a:	2cff      	cmp	r4, #255	; 0xff
 800060c:	d1fa      	bne.n	8000604 <__eqsf2+0x28>
 800060e:	2e00      	cmp	r6, #0
 8000610:	d1f8      	bne.n	8000604 <__eqsf2+0x28>
 8000612:	428b      	cmp	r3, r1
 8000614:	d006      	beq.n	8000624 <__eqsf2+0x48>
 8000616:	2001      	movs	r0, #1
 8000618:	2a00      	cmp	r2, #0
 800061a:	d1f3      	bne.n	8000604 <__eqsf2+0x28>
 800061c:	0028      	movs	r0, r5
 800061e:	1e43      	subs	r3, r0, #1
 8000620:	4198      	sbcs	r0, r3
 8000622:	e7ef      	b.n	8000604 <__eqsf2+0x28>
 8000624:	2000      	movs	r0, #0
 8000626:	e7ed      	b.n	8000604 <__eqsf2+0x28>

08000628 <__gesf2>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	0042      	lsls	r2, r0, #1
 800062c:	0245      	lsls	r5, r0, #9
 800062e:	024e      	lsls	r6, r1, #9
 8000630:	004c      	lsls	r4, r1, #1
 8000632:	0fc3      	lsrs	r3, r0, #31
 8000634:	0a6d      	lsrs	r5, r5, #9
 8000636:	0e12      	lsrs	r2, r2, #24
 8000638:	0a76      	lsrs	r6, r6, #9
 800063a:	0e24      	lsrs	r4, r4, #24
 800063c:	0fc8      	lsrs	r0, r1, #31
 800063e:	2aff      	cmp	r2, #255	; 0xff
 8000640:	d01b      	beq.n	800067a <__gesf2+0x52>
 8000642:	2cff      	cmp	r4, #255	; 0xff
 8000644:	d00e      	beq.n	8000664 <__gesf2+0x3c>
 8000646:	2a00      	cmp	r2, #0
 8000648:	d11b      	bne.n	8000682 <__gesf2+0x5a>
 800064a:	2c00      	cmp	r4, #0
 800064c:	d101      	bne.n	8000652 <__gesf2+0x2a>
 800064e:	2e00      	cmp	r6, #0
 8000650:	d01c      	beq.n	800068c <__gesf2+0x64>
 8000652:	2d00      	cmp	r5, #0
 8000654:	d00c      	beq.n	8000670 <__gesf2+0x48>
 8000656:	4283      	cmp	r3, r0
 8000658:	d01c      	beq.n	8000694 <__gesf2+0x6c>
 800065a:	2102      	movs	r1, #2
 800065c:	1e58      	subs	r0, r3, #1
 800065e:	4008      	ands	r0, r1
 8000660:	3801      	subs	r0, #1
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	2e00      	cmp	r6, #0
 8000666:	d122      	bne.n	80006ae <__gesf2+0x86>
 8000668:	2a00      	cmp	r2, #0
 800066a:	d1f4      	bne.n	8000656 <__gesf2+0x2e>
 800066c:	2d00      	cmp	r5, #0
 800066e:	d1f2      	bne.n	8000656 <__gesf2+0x2e>
 8000670:	2800      	cmp	r0, #0
 8000672:	d1f6      	bne.n	8000662 <__gesf2+0x3a>
 8000674:	2001      	movs	r0, #1
 8000676:	4240      	negs	r0, r0
 8000678:	e7f3      	b.n	8000662 <__gesf2+0x3a>
 800067a:	2d00      	cmp	r5, #0
 800067c:	d117      	bne.n	80006ae <__gesf2+0x86>
 800067e:	2cff      	cmp	r4, #255	; 0xff
 8000680:	d0f0      	beq.n	8000664 <__gesf2+0x3c>
 8000682:	2c00      	cmp	r4, #0
 8000684:	d1e7      	bne.n	8000656 <__gesf2+0x2e>
 8000686:	2e00      	cmp	r6, #0
 8000688:	d1e5      	bne.n	8000656 <__gesf2+0x2e>
 800068a:	e7e6      	b.n	800065a <__gesf2+0x32>
 800068c:	2000      	movs	r0, #0
 800068e:	2d00      	cmp	r5, #0
 8000690:	d0e7      	beq.n	8000662 <__gesf2+0x3a>
 8000692:	e7e2      	b.n	800065a <__gesf2+0x32>
 8000694:	42a2      	cmp	r2, r4
 8000696:	dc05      	bgt.n	80006a4 <__gesf2+0x7c>
 8000698:	dbea      	blt.n	8000670 <__gesf2+0x48>
 800069a:	42b5      	cmp	r5, r6
 800069c:	d802      	bhi.n	80006a4 <__gesf2+0x7c>
 800069e:	d3e7      	bcc.n	8000670 <__gesf2+0x48>
 80006a0:	2000      	movs	r0, #0
 80006a2:	e7de      	b.n	8000662 <__gesf2+0x3a>
 80006a4:	4243      	negs	r3, r0
 80006a6:	4158      	adcs	r0, r3
 80006a8:	0040      	lsls	r0, r0, #1
 80006aa:	3801      	subs	r0, #1
 80006ac:	e7d9      	b.n	8000662 <__gesf2+0x3a>
 80006ae:	2002      	movs	r0, #2
 80006b0:	4240      	negs	r0, r0
 80006b2:	e7d6      	b.n	8000662 <__gesf2+0x3a>

080006b4 <__lesf2>:
 80006b4:	b570      	push	{r4, r5, r6, lr}
 80006b6:	0042      	lsls	r2, r0, #1
 80006b8:	0245      	lsls	r5, r0, #9
 80006ba:	024e      	lsls	r6, r1, #9
 80006bc:	004c      	lsls	r4, r1, #1
 80006be:	0fc3      	lsrs	r3, r0, #31
 80006c0:	0a6d      	lsrs	r5, r5, #9
 80006c2:	0e12      	lsrs	r2, r2, #24
 80006c4:	0a76      	lsrs	r6, r6, #9
 80006c6:	0e24      	lsrs	r4, r4, #24
 80006c8:	0fc8      	lsrs	r0, r1, #31
 80006ca:	2aff      	cmp	r2, #255	; 0xff
 80006cc:	d00b      	beq.n	80006e6 <__lesf2+0x32>
 80006ce:	2cff      	cmp	r4, #255	; 0xff
 80006d0:	d00d      	beq.n	80006ee <__lesf2+0x3a>
 80006d2:	2a00      	cmp	r2, #0
 80006d4:	d11f      	bne.n	8000716 <__lesf2+0x62>
 80006d6:	2c00      	cmp	r4, #0
 80006d8:	d116      	bne.n	8000708 <__lesf2+0x54>
 80006da:	2e00      	cmp	r6, #0
 80006dc:	d114      	bne.n	8000708 <__lesf2+0x54>
 80006de:	2000      	movs	r0, #0
 80006e0:	2d00      	cmp	r5, #0
 80006e2:	d010      	beq.n	8000706 <__lesf2+0x52>
 80006e4:	e009      	b.n	80006fa <__lesf2+0x46>
 80006e6:	2d00      	cmp	r5, #0
 80006e8:	d10c      	bne.n	8000704 <__lesf2+0x50>
 80006ea:	2cff      	cmp	r4, #255	; 0xff
 80006ec:	d113      	bne.n	8000716 <__lesf2+0x62>
 80006ee:	2e00      	cmp	r6, #0
 80006f0:	d108      	bne.n	8000704 <__lesf2+0x50>
 80006f2:	2a00      	cmp	r2, #0
 80006f4:	d008      	beq.n	8000708 <__lesf2+0x54>
 80006f6:	4283      	cmp	r3, r0
 80006f8:	d012      	beq.n	8000720 <__lesf2+0x6c>
 80006fa:	2102      	movs	r1, #2
 80006fc:	1e58      	subs	r0, r3, #1
 80006fe:	4008      	ands	r0, r1
 8000700:	3801      	subs	r0, #1
 8000702:	e000      	b.n	8000706 <__lesf2+0x52>
 8000704:	2002      	movs	r0, #2
 8000706:	bd70      	pop	{r4, r5, r6, pc}
 8000708:	2d00      	cmp	r5, #0
 800070a:	d1f4      	bne.n	80006f6 <__lesf2+0x42>
 800070c:	2800      	cmp	r0, #0
 800070e:	d1fa      	bne.n	8000706 <__lesf2+0x52>
 8000710:	2001      	movs	r0, #1
 8000712:	4240      	negs	r0, r0
 8000714:	e7f7      	b.n	8000706 <__lesf2+0x52>
 8000716:	2c00      	cmp	r4, #0
 8000718:	d1ed      	bne.n	80006f6 <__lesf2+0x42>
 800071a:	2e00      	cmp	r6, #0
 800071c:	d1eb      	bne.n	80006f6 <__lesf2+0x42>
 800071e:	e7ec      	b.n	80006fa <__lesf2+0x46>
 8000720:	42a2      	cmp	r2, r4
 8000722:	dc05      	bgt.n	8000730 <__lesf2+0x7c>
 8000724:	dbf2      	blt.n	800070c <__lesf2+0x58>
 8000726:	42b5      	cmp	r5, r6
 8000728:	d802      	bhi.n	8000730 <__lesf2+0x7c>
 800072a:	d3ef      	bcc.n	800070c <__lesf2+0x58>
 800072c:	2000      	movs	r0, #0
 800072e:	e7ea      	b.n	8000706 <__lesf2+0x52>
 8000730:	4243      	negs	r3, r0
 8000732:	4158      	adcs	r0, r3
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	3801      	subs	r0, #1
 8000738:	e7e5      	b.n	8000706 <__lesf2+0x52>
 800073a:	46c0      	nop			; (mov r8, r8)

0800073c <__aeabi_fmul>:
 800073c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800073e:	464f      	mov	r7, r9
 8000740:	4646      	mov	r6, r8
 8000742:	46d6      	mov	lr, sl
 8000744:	0244      	lsls	r4, r0, #9
 8000746:	0045      	lsls	r5, r0, #1
 8000748:	b5c0      	push	{r6, r7, lr}
 800074a:	0a64      	lsrs	r4, r4, #9
 800074c:	1c0f      	adds	r7, r1, #0
 800074e:	0e2d      	lsrs	r5, r5, #24
 8000750:	0fc6      	lsrs	r6, r0, #31
 8000752:	2d00      	cmp	r5, #0
 8000754:	d100      	bne.n	8000758 <__aeabi_fmul+0x1c>
 8000756:	e08d      	b.n	8000874 <__aeabi_fmul+0x138>
 8000758:	2dff      	cmp	r5, #255	; 0xff
 800075a:	d100      	bne.n	800075e <__aeabi_fmul+0x22>
 800075c:	e092      	b.n	8000884 <__aeabi_fmul+0x148>
 800075e:	2300      	movs	r3, #0
 8000760:	2080      	movs	r0, #128	; 0x80
 8000762:	4699      	mov	r9, r3
 8000764:	469a      	mov	sl, r3
 8000766:	00e4      	lsls	r4, r4, #3
 8000768:	04c0      	lsls	r0, r0, #19
 800076a:	4304      	orrs	r4, r0
 800076c:	3d7f      	subs	r5, #127	; 0x7f
 800076e:	0278      	lsls	r0, r7, #9
 8000770:	0a43      	lsrs	r3, r0, #9
 8000772:	4698      	mov	r8, r3
 8000774:	007b      	lsls	r3, r7, #1
 8000776:	0e1b      	lsrs	r3, r3, #24
 8000778:	0fff      	lsrs	r7, r7, #31
 800077a:	2b00      	cmp	r3, #0
 800077c:	d100      	bne.n	8000780 <__aeabi_fmul+0x44>
 800077e:	e070      	b.n	8000862 <__aeabi_fmul+0x126>
 8000780:	2bff      	cmp	r3, #255	; 0xff
 8000782:	d100      	bne.n	8000786 <__aeabi_fmul+0x4a>
 8000784:	e086      	b.n	8000894 <__aeabi_fmul+0x158>
 8000786:	4642      	mov	r2, r8
 8000788:	00d0      	lsls	r0, r2, #3
 800078a:	2280      	movs	r2, #128	; 0x80
 800078c:	3b7f      	subs	r3, #127	; 0x7f
 800078e:	18ed      	adds	r5, r5, r3
 8000790:	2300      	movs	r3, #0
 8000792:	04d2      	lsls	r2, r2, #19
 8000794:	4302      	orrs	r2, r0
 8000796:	4690      	mov	r8, r2
 8000798:	469c      	mov	ip, r3
 800079a:	0031      	movs	r1, r6
 800079c:	464b      	mov	r3, r9
 800079e:	4079      	eors	r1, r7
 80007a0:	1c68      	adds	r0, r5, #1
 80007a2:	2b0f      	cmp	r3, #15
 80007a4:	d81c      	bhi.n	80007e0 <__aeabi_fmul+0xa4>
 80007a6:	4a76      	ldr	r2, [pc, #472]	; (8000980 <__aeabi_fmul+0x244>)
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	58d3      	ldr	r3, [r2, r3]
 80007ac:	469f      	mov	pc, r3
 80007ae:	0039      	movs	r1, r7
 80007b0:	4644      	mov	r4, r8
 80007b2:	46e2      	mov	sl, ip
 80007b4:	4653      	mov	r3, sl
 80007b6:	2b02      	cmp	r3, #2
 80007b8:	d00f      	beq.n	80007da <__aeabi_fmul+0x9e>
 80007ba:	2b03      	cmp	r3, #3
 80007bc:	d100      	bne.n	80007c0 <__aeabi_fmul+0x84>
 80007be:	e0d7      	b.n	8000970 <__aeabi_fmul+0x234>
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d137      	bne.n	8000834 <__aeabi_fmul+0xf8>
 80007c4:	2000      	movs	r0, #0
 80007c6:	2400      	movs	r4, #0
 80007c8:	05c0      	lsls	r0, r0, #23
 80007ca:	4320      	orrs	r0, r4
 80007cc:	07c9      	lsls	r1, r1, #31
 80007ce:	4308      	orrs	r0, r1
 80007d0:	bce0      	pop	{r5, r6, r7}
 80007d2:	46ba      	mov	sl, r7
 80007d4:	46b1      	mov	r9, r6
 80007d6:	46a8      	mov	r8, r5
 80007d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007da:	20ff      	movs	r0, #255	; 0xff
 80007dc:	2400      	movs	r4, #0
 80007de:	e7f3      	b.n	80007c8 <__aeabi_fmul+0x8c>
 80007e0:	0c26      	lsrs	r6, r4, #16
 80007e2:	0424      	lsls	r4, r4, #16
 80007e4:	0c22      	lsrs	r2, r4, #16
 80007e6:	4644      	mov	r4, r8
 80007e8:	0424      	lsls	r4, r4, #16
 80007ea:	0c24      	lsrs	r4, r4, #16
 80007ec:	4643      	mov	r3, r8
 80007ee:	0027      	movs	r7, r4
 80007f0:	0c1b      	lsrs	r3, r3, #16
 80007f2:	4357      	muls	r7, r2
 80007f4:	4374      	muls	r4, r6
 80007f6:	435a      	muls	r2, r3
 80007f8:	435e      	muls	r6, r3
 80007fa:	1912      	adds	r2, r2, r4
 80007fc:	0c3b      	lsrs	r3, r7, #16
 80007fe:	189b      	adds	r3, r3, r2
 8000800:	429c      	cmp	r4, r3
 8000802:	d903      	bls.n	800080c <__aeabi_fmul+0xd0>
 8000804:	2280      	movs	r2, #128	; 0x80
 8000806:	0252      	lsls	r2, r2, #9
 8000808:	4694      	mov	ip, r2
 800080a:	4466      	add	r6, ip
 800080c:	043f      	lsls	r7, r7, #16
 800080e:	041a      	lsls	r2, r3, #16
 8000810:	0c3f      	lsrs	r7, r7, #16
 8000812:	19d2      	adds	r2, r2, r7
 8000814:	0194      	lsls	r4, r2, #6
 8000816:	1e67      	subs	r7, r4, #1
 8000818:	41bc      	sbcs	r4, r7
 800081a:	0c1b      	lsrs	r3, r3, #16
 800081c:	0e92      	lsrs	r2, r2, #26
 800081e:	199b      	adds	r3, r3, r6
 8000820:	4314      	orrs	r4, r2
 8000822:	019b      	lsls	r3, r3, #6
 8000824:	431c      	orrs	r4, r3
 8000826:	011b      	lsls	r3, r3, #4
 8000828:	d400      	bmi.n	800082c <__aeabi_fmul+0xf0>
 800082a:	e09b      	b.n	8000964 <__aeabi_fmul+0x228>
 800082c:	2301      	movs	r3, #1
 800082e:	0862      	lsrs	r2, r4, #1
 8000830:	401c      	ands	r4, r3
 8000832:	4314      	orrs	r4, r2
 8000834:	0002      	movs	r2, r0
 8000836:	327f      	adds	r2, #127	; 0x7f
 8000838:	2a00      	cmp	r2, #0
 800083a:	dd64      	ble.n	8000906 <__aeabi_fmul+0x1ca>
 800083c:	0763      	lsls	r3, r4, #29
 800083e:	d004      	beq.n	800084a <__aeabi_fmul+0x10e>
 8000840:	230f      	movs	r3, #15
 8000842:	4023      	ands	r3, r4
 8000844:	2b04      	cmp	r3, #4
 8000846:	d000      	beq.n	800084a <__aeabi_fmul+0x10e>
 8000848:	3404      	adds	r4, #4
 800084a:	0123      	lsls	r3, r4, #4
 800084c:	d503      	bpl.n	8000856 <__aeabi_fmul+0x11a>
 800084e:	0002      	movs	r2, r0
 8000850:	4b4c      	ldr	r3, [pc, #304]	; (8000984 <__aeabi_fmul+0x248>)
 8000852:	3280      	adds	r2, #128	; 0x80
 8000854:	401c      	ands	r4, r3
 8000856:	2afe      	cmp	r2, #254	; 0xfe
 8000858:	dcbf      	bgt.n	80007da <__aeabi_fmul+0x9e>
 800085a:	01a4      	lsls	r4, r4, #6
 800085c:	0a64      	lsrs	r4, r4, #9
 800085e:	b2d0      	uxtb	r0, r2
 8000860:	e7b2      	b.n	80007c8 <__aeabi_fmul+0x8c>
 8000862:	4643      	mov	r3, r8
 8000864:	2b00      	cmp	r3, #0
 8000866:	d13d      	bne.n	80008e4 <__aeabi_fmul+0x1a8>
 8000868:	464a      	mov	r2, r9
 800086a:	3301      	adds	r3, #1
 800086c:	431a      	orrs	r2, r3
 800086e:	4691      	mov	r9, r2
 8000870:	469c      	mov	ip, r3
 8000872:	e792      	b.n	800079a <__aeabi_fmul+0x5e>
 8000874:	2c00      	cmp	r4, #0
 8000876:	d129      	bne.n	80008cc <__aeabi_fmul+0x190>
 8000878:	2304      	movs	r3, #4
 800087a:	4699      	mov	r9, r3
 800087c:	3b03      	subs	r3, #3
 800087e:	2500      	movs	r5, #0
 8000880:	469a      	mov	sl, r3
 8000882:	e774      	b.n	800076e <__aeabi_fmul+0x32>
 8000884:	2c00      	cmp	r4, #0
 8000886:	d11b      	bne.n	80008c0 <__aeabi_fmul+0x184>
 8000888:	2308      	movs	r3, #8
 800088a:	4699      	mov	r9, r3
 800088c:	3b06      	subs	r3, #6
 800088e:	25ff      	movs	r5, #255	; 0xff
 8000890:	469a      	mov	sl, r3
 8000892:	e76c      	b.n	800076e <__aeabi_fmul+0x32>
 8000894:	4643      	mov	r3, r8
 8000896:	35ff      	adds	r5, #255	; 0xff
 8000898:	2b00      	cmp	r3, #0
 800089a:	d10b      	bne.n	80008b4 <__aeabi_fmul+0x178>
 800089c:	2302      	movs	r3, #2
 800089e:	464a      	mov	r2, r9
 80008a0:	431a      	orrs	r2, r3
 80008a2:	4691      	mov	r9, r2
 80008a4:	469c      	mov	ip, r3
 80008a6:	e778      	b.n	800079a <__aeabi_fmul+0x5e>
 80008a8:	4653      	mov	r3, sl
 80008aa:	0031      	movs	r1, r6
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	d000      	beq.n	80008b2 <__aeabi_fmul+0x176>
 80008b0:	e783      	b.n	80007ba <__aeabi_fmul+0x7e>
 80008b2:	e792      	b.n	80007da <__aeabi_fmul+0x9e>
 80008b4:	2303      	movs	r3, #3
 80008b6:	464a      	mov	r2, r9
 80008b8:	431a      	orrs	r2, r3
 80008ba:	4691      	mov	r9, r2
 80008bc:	469c      	mov	ip, r3
 80008be:	e76c      	b.n	800079a <__aeabi_fmul+0x5e>
 80008c0:	230c      	movs	r3, #12
 80008c2:	4699      	mov	r9, r3
 80008c4:	3b09      	subs	r3, #9
 80008c6:	25ff      	movs	r5, #255	; 0xff
 80008c8:	469a      	mov	sl, r3
 80008ca:	e750      	b.n	800076e <__aeabi_fmul+0x32>
 80008cc:	0020      	movs	r0, r4
 80008ce:	f000 fa77 	bl	8000dc0 <__clzsi2>
 80008d2:	2576      	movs	r5, #118	; 0x76
 80008d4:	1f43      	subs	r3, r0, #5
 80008d6:	409c      	lsls	r4, r3
 80008d8:	2300      	movs	r3, #0
 80008da:	426d      	negs	r5, r5
 80008dc:	4699      	mov	r9, r3
 80008de:	469a      	mov	sl, r3
 80008e0:	1a2d      	subs	r5, r5, r0
 80008e2:	e744      	b.n	800076e <__aeabi_fmul+0x32>
 80008e4:	4640      	mov	r0, r8
 80008e6:	f000 fa6b 	bl	8000dc0 <__clzsi2>
 80008ea:	4642      	mov	r2, r8
 80008ec:	1f43      	subs	r3, r0, #5
 80008ee:	409a      	lsls	r2, r3
 80008f0:	2300      	movs	r3, #0
 80008f2:	1a2d      	subs	r5, r5, r0
 80008f4:	4690      	mov	r8, r2
 80008f6:	469c      	mov	ip, r3
 80008f8:	3d76      	subs	r5, #118	; 0x76
 80008fa:	e74e      	b.n	800079a <__aeabi_fmul+0x5e>
 80008fc:	2480      	movs	r4, #128	; 0x80
 80008fe:	2100      	movs	r1, #0
 8000900:	20ff      	movs	r0, #255	; 0xff
 8000902:	03e4      	lsls	r4, r4, #15
 8000904:	e760      	b.n	80007c8 <__aeabi_fmul+0x8c>
 8000906:	2301      	movs	r3, #1
 8000908:	1a9b      	subs	r3, r3, r2
 800090a:	2b1b      	cmp	r3, #27
 800090c:	dd00      	ble.n	8000910 <__aeabi_fmul+0x1d4>
 800090e:	e759      	b.n	80007c4 <__aeabi_fmul+0x88>
 8000910:	0022      	movs	r2, r4
 8000912:	309e      	adds	r0, #158	; 0x9e
 8000914:	40da      	lsrs	r2, r3
 8000916:	4084      	lsls	r4, r0
 8000918:	0013      	movs	r3, r2
 800091a:	1e62      	subs	r2, r4, #1
 800091c:	4194      	sbcs	r4, r2
 800091e:	431c      	orrs	r4, r3
 8000920:	0763      	lsls	r3, r4, #29
 8000922:	d004      	beq.n	800092e <__aeabi_fmul+0x1f2>
 8000924:	230f      	movs	r3, #15
 8000926:	4023      	ands	r3, r4
 8000928:	2b04      	cmp	r3, #4
 800092a:	d000      	beq.n	800092e <__aeabi_fmul+0x1f2>
 800092c:	3404      	adds	r4, #4
 800092e:	0163      	lsls	r3, r4, #5
 8000930:	d51a      	bpl.n	8000968 <__aeabi_fmul+0x22c>
 8000932:	2001      	movs	r0, #1
 8000934:	2400      	movs	r4, #0
 8000936:	e747      	b.n	80007c8 <__aeabi_fmul+0x8c>
 8000938:	2080      	movs	r0, #128	; 0x80
 800093a:	03c0      	lsls	r0, r0, #15
 800093c:	4204      	tst	r4, r0
 800093e:	d009      	beq.n	8000954 <__aeabi_fmul+0x218>
 8000940:	4643      	mov	r3, r8
 8000942:	4203      	tst	r3, r0
 8000944:	d106      	bne.n	8000954 <__aeabi_fmul+0x218>
 8000946:	4644      	mov	r4, r8
 8000948:	4304      	orrs	r4, r0
 800094a:	0264      	lsls	r4, r4, #9
 800094c:	0039      	movs	r1, r7
 800094e:	20ff      	movs	r0, #255	; 0xff
 8000950:	0a64      	lsrs	r4, r4, #9
 8000952:	e739      	b.n	80007c8 <__aeabi_fmul+0x8c>
 8000954:	2080      	movs	r0, #128	; 0x80
 8000956:	03c0      	lsls	r0, r0, #15
 8000958:	4304      	orrs	r4, r0
 800095a:	0264      	lsls	r4, r4, #9
 800095c:	0031      	movs	r1, r6
 800095e:	20ff      	movs	r0, #255	; 0xff
 8000960:	0a64      	lsrs	r4, r4, #9
 8000962:	e731      	b.n	80007c8 <__aeabi_fmul+0x8c>
 8000964:	0028      	movs	r0, r5
 8000966:	e765      	b.n	8000834 <__aeabi_fmul+0xf8>
 8000968:	01a4      	lsls	r4, r4, #6
 800096a:	2000      	movs	r0, #0
 800096c:	0a64      	lsrs	r4, r4, #9
 800096e:	e72b      	b.n	80007c8 <__aeabi_fmul+0x8c>
 8000970:	2080      	movs	r0, #128	; 0x80
 8000972:	03c0      	lsls	r0, r0, #15
 8000974:	4304      	orrs	r4, r0
 8000976:	0264      	lsls	r4, r4, #9
 8000978:	20ff      	movs	r0, #255	; 0xff
 800097a:	0a64      	lsrs	r4, r4, #9
 800097c:	e724      	b.n	80007c8 <__aeabi_fmul+0x8c>
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	0800756c 	.word	0x0800756c
 8000984:	f7ffffff 	.word	0xf7ffffff

08000988 <__aeabi_fsub>:
 8000988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800098a:	46ce      	mov	lr, r9
 800098c:	4647      	mov	r7, r8
 800098e:	0243      	lsls	r3, r0, #9
 8000990:	0a5b      	lsrs	r3, r3, #9
 8000992:	024e      	lsls	r6, r1, #9
 8000994:	00da      	lsls	r2, r3, #3
 8000996:	4694      	mov	ip, r2
 8000998:	0a72      	lsrs	r2, r6, #9
 800099a:	4691      	mov	r9, r2
 800099c:	0045      	lsls	r5, r0, #1
 800099e:	004a      	lsls	r2, r1, #1
 80009a0:	b580      	push	{r7, lr}
 80009a2:	0e2d      	lsrs	r5, r5, #24
 80009a4:	001f      	movs	r7, r3
 80009a6:	0fc4      	lsrs	r4, r0, #31
 80009a8:	0e12      	lsrs	r2, r2, #24
 80009aa:	0fc9      	lsrs	r1, r1, #31
 80009ac:	09b6      	lsrs	r6, r6, #6
 80009ae:	2aff      	cmp	r2, #255	; 0xff
 80009b0:	d05b      	beq.n	8000a6a <__aeabi_fsub+0xe2>
 80009b2:	2001      	movs	r0, #1
 80009b4:	4041      	eors	r1, r0
 80009b6:	428c      	cmp	r4, r1
 80009b8:	d039      	beq.n	8000a2e <__aeabi_fsub+0xa6>
 80009ba:	1aa8      	subs	r0, r5, r2
 80009bc:	2800      	cmp	r0, #0
 80009be:	dd5a      	ble.n	8000a76 <__aeabi_fsub+0xee>
 80009c0:	2a00      	cmp	r2, #0
 80009c2:	d06a      	beq.n	8000a9a <__aeabi_fsub+0x112>
 80009c4:	2dff      	cmp	r5, #255	; 0xff
 80009c6:	d100      	bne.n	80009ca <__aeabi_fsub+0x42>
 80009c8:	e0d9      	b.n	8000b7e <__aeabi_fsub+0x1f6>
 80009ca:	2280      	movs	r2, #128	; 0x80
 80009cc:	04d2      	lsls	r2, r2, #19
 80009ce:	4316      	orrs	r6, r2
 80009d0:	281b      	cmp	r0, #27
 80009d2:	dc00      	bgt.n	80009d6 <__aeabi_fsub+0x4e>
 80009d4:	e0e9      	b.n	8000baa <__aeabi_fsub+0x222>
 80009d6:	2001      	movs	r0, #1
 80009d8:	4663      	mov	r3, ip
 80009da:	1a18      	subs	r0, r3, r0
 80009dc:	0143      	lsls	r3, r0, #5
 80009de:	d400      	bmi.n	80009e2 <__aeabi_fsub+0x5a>
 80009e0:	e0b4      	b.n	8000b4c <__aeabi_fsub+0x1c4>
 80009e2:	0180      	lsls	r0, r0, #6
 80009e4:	0987      	lsrs	r7, r0, #6
 80009e6:	0038      	movs	r0, r7
 80009e8:	f000 f9ea 	bl	8000dc0 <__clzsi2>
 80009ec:	3805      	subs	r0, #5
 80009ee:	4087      	lsls	r7, r0
 80009f0:	4285      	cmp	r5, r0
 80009f2:	dc00      	bgt.n	80009f6 <__aeabi_fsub+0x6e>
 80009f4:	e0cc      	b.n	8000b90 <__aeabi_fsub+0x208>
 80009f6:	1a2d      	subs	r5, r5, r0
 80009f8:	48b5      	ldr	r0, [pc, #724]	; (8000cd0 <__aeabi_fsub+0x348>)
 80009fa:	4038      	ands	r0, r7
 80009fc:	0743      	lsls	r3, r0, #29
 80009fe:	d004      	beq.n	8000a0a <__aeabi_fsub+0x82>
 8000a00:	230f      	movs	r3, #15
 8000a02:	4003      	ands	r3, r0
 8000a04:	2b04      	cmp	r3, #4
 8000a06:	d000      	beq.n	8000a0a <__aeabi_fsub+0x82>
 8000a08:	3004      	adds	r0, #4
 8000a0a:	0143      	lsls	r3, r0, #5
 8000a0c:	d400      	bmi.n	8000a10 <__aeabi_fsub+0x88>
 8000a0e:	e0a0      	b.n	8000b52 <__aeabi_fsub+0x1ca>
 8000a10:	1c6a      	adds	r2, r5, #1
 8000a12:	2dfe      	cmp	r5, #254	; 0xfe
 8000a14:	d100      	bne.n	8000a18 <__aeabi_fsub+0x90>
 8000a16:	e08d      	b.n	8000b34 <__aeabi_fsub+0x1ac>
 8000a18:	0180      	lsls	r0, r0, #6
 8000a1a:	0a47      	lsrs	r7, r0, #9
 8000a1c:	b2d2      	uxtb	r2, r2
 8000a1e:	05d0      	lsls	r0, r2, #23
 8000a20:	4338      	orrs	r0, r7
 8000a22:	07e4      	lsls	r4, r4, #31
 8000a24:	4320      	orrs	r0, r4
 8000a26:	bcc0      	pop	{r6, r7}
 8000a28:	46b9      	mov	r9, r7
 8000a2a:	46b0      	mov	r8, r6
 8000a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a2e:	1aa8      	subs	r0, r5, r2
 8000a30:	4680      	mov	r8, r0
 8000a32:	2800      	cmp	r0, #0
 8000a34:	dd45      	ble.n	8000ac2 <__aeabi_fsub+0x13a>
 8000a36:	2a00      	cmp	r2, #0
 8000a38:	d070      	beq.n	8000b1c <__aeabi_fsub+0x194>
 8000a3a:	2dff      	cmp	r5, #255	; 0xff
 8000a3c:	d100      	bne.n	8000a40 <__aeabi_fsub+0xb8>
 8000a3e:	e09e      	b.n	8000b7e <__aeabi_fsub+0x1f6>
 8000a40:	2380      	movs	r3, #128	; 0x80
 8000a42:	04db      	lsls	r3, r3, #19
 8000a44:	431e      	orrs	r6, r3
 8000a46:	4643      	mov	r3, r8
 8000a48:	2b1b      	cmp	r3, #27
 8000a4a:	dc00      	bgt.n	8000a4e <__aeabi_fsub+0xc6>
 8000a4c:	e0d2      	b.n	8000bf4 <__aeabi_fsub+0x26c>
 8000a4e:	2001      	movs	r0, #1
 8000a50:	4460      	add	r0, ip
 8000a52:	0143      	lsls	r3, r0, #5
 8000a54:	d57a      	bpl.n	8000b4c <__aeabi_fsub+0x1c4>
 8000a56:	3501      	adds	r5, #1
 8000a58:	2dff      	cmp	r5, #255	; 0xff
 8000a5a:	d06b      	beq.n	8000b34 <__aeabi_fsub+0x1ac>
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	4a9d      	ldr	r2, [pc, #628]	; (8000cd4 <__aeabi_fsub+0x34c>)
 8000a60:	4003      	ands	r3, r0
 8000a62:	0840      	lsrs	r0, r0, #1
 8000a64:	4010      	ands	r0, r2
 8000a66:	4318      	orrs	r0, r3
 8000a68:	e7c8      	b.n	80009fc <__aeabi_fsub+0x74>
 8000a6a:	2e00      	cmp	r6, #0
 8000a6c:	d020      	beq.n	8000ab0 <__aeabi_fsub+0x128>
 8000a6e:	428c      	cmp	r4, r1
 8000a70:	d023      	beq.n	8000aba <__aeabi_fsub+0x132>
 8000a72:	0028      	movs	r0, r5
 8000a74:	38ff      	subs	r0, #255	; 0xff
 8000a76:	2800      	cmp	r0, #0
 8000a78:	d039      	beq.n	8000aee <__aeabi_fsub+0x166>
 8000a7a:	1b57      	subs	r7, r2, r5
 8000a7c:	2d00      	cmp	r5, #0
 8000a7e:	d000      	beq.n	8000a82 <__aeabi_fsub+0xfa>
 8000a80:	e09d      	b.n	8000bbe <__aeabi_fsub+0x236>
 8000a82:	4663      	mov	r3, ip
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d100      	bne.n	8000a8a <__aeabi_fsub+0x102>
 8000a88:	e0db      	b.n	8000c42 <__aeabi_fsub+0x2ba>
 8000a8a:	1e7b      	subs	r3, r7, #1
 8000a8c:	2f01      	cmp	r7, #1
 8000a8e:	d100      	bne.n	8000a92 <__aeabi_fsub+0x10a>
 8000a90:	e10d      	b.n	8000cae <__aeabi_fsub+0x326>
 8000a92:	2fff      	cmp	r7, #255	; 0xff
 8000a94:	d071      	beq.n	8000b7a <__aeabi_fsub+0x1f2>
 8000a96:	001f      	movs	r7, r3
 8000a98:	e098      	b.n	8000bcc <__aeabi_fsub+0x244>
 8000a9a:	2e00      	cmp	r6, #0
 8000a9c:	d100      	bne.n	8000aa0 <__aeabi_fsub+0x118>
 8000a9e:	e0a7      	b.n	8000bf0 <__aeabi_fsub+0x268>
 8000aa0:	1e42      	subs	r2, r0, #1
 8000aa2:	2801      	cmp	r0, #1
 8000aa4:	d100      	bne.n	8000aa8 <__aeabi_fsub+0x120>
 8000aa6:	e0e6      	b.n	8000c76 <__aeabi_fsub+0x2ee>
 8000aa8:	28ff      	cmp	r0, #255	; 0xff
 8000aaa:	d068      	beq.n	8000b7e <__aeabi_fsub+0x1f6>
 8000aac:	0010      	movs	r0, r2
 8000aae:	e78f      	b.n	80009d0 <__aeabi_fsub+0x48>
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	4041      	eors	r1, r0
 8000ab4:	42a1      	cmp	r1, r4
 8000ab6:	d000      	beq.n	8000aba <__aeabi_fsub+0x132>
 8000ab8:	e77f      	b.n	80009ba <__aeabi_fsub+0x32>
 8000aba:	20ff      	movs	r0, #255	; 0xff
 8000abc:	4240      	negs	r0, r0
 8000abe:	4680      	mov	r8, r0
 8000ac0:	44a8      	add	r8, r5
 8000ac2:	4640      	mov	r0, r8
 8000ac4:	2800      	cmp	r0, #0
 8000ac6:	d038      	beq.n	8000b3a <__aeabi_fsub+0x1b2>
 8000ac8:	1b51      	subs	r1, r2, r5
 8000aca:	2d00      	cmp	r5, #0
 8000acc:	d100      	bne.n	8000ad0 <__aeabi_fsub+0x148>
 8000ace:	e0ae      	b.n	8000c2e <__aeabi_fsub+0x2a6>
 8000ad0:	2aff      	cmp	r2, #255	; 0xff
 8000ad2:	d100      	bne.n	8000ad6 <__aeabi_fsub+0x14e>
 8000ad4:	e0df      	b.n	8000c96 <__aeabi_fsub+0x30e>
 8000ad6:	2380      	movs	r3, #128	; 0x80
 8000ad8:	4660      	mov	r0, ip
 8000ada:	04db      	lsls	r3, r3, #19
 8000adc:	4318      	orrs	r0, r3
 8000ade:	4684      	mov	ip, r0
 8000ae0:	291b      	cmp	r1, #27
 8000ae2:	dc00      	bgt.n	8000ae6 <__aeabi_fsub+0x15e>
 8000ae4:	e0d9      	b.n	8000c9a <__aeabi_fsub+0x312>
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	0015      	movs	r5, r2
 8000aea:	1980      	adds	r0, r0, r6
 8000aec:	e7b1      	b.n	8000a52 <__aeabi_fsub+0xca>
 8000aee:	20fe      	movs	r0, #254	; 0xfe
 8000af0:	1c6a      	adds	r2, r5, #1
 8000af2:	4210      	tst	r0, r2
 8000af4:	d171      	bne.n	8000bda <__aeabi_fsub+0x252>
 8000af6:	2d00      	cmp	r5, #0
 8000af8:	d000      	beq.n	8000afc <__aeabi_fsub+0x174>
 8000afa:	e0a6      	b.n	8000c4a <__aeabi_fsub+0x2c2>
 8000afc:	4663      	mov	r3, ip
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d100      	bne.n	8000b04 <__aeabi_fsub+0x17c>
 8000b02:	e0d9      	b.n	8000cb8 <__aeabi_fsub+0x330>
 8000b04:	2200      	movs	r2, #0
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	d100      	bne.n	8000b0c <__aeabi_fsub+0x184>
 8000b0a:	e788      	b.n	8000a1e <__aeabi_fsub+0x96>
 8000b0c:	1b98      	subs	r0, r3, r6
 8000b0e:	0143      	lsls	r3, r0, #5
 8000b10:	d400      	bmi.n	8000b14 <__aeabi_fsub+0x18c>
 8000b12:	e0e1      	b.n	8000cd8 <__aeabi_fsub+0x350>
 8000b14:	4663      	mov	r3, ip
 8000b16:	000c      	movs	r4, r1
 8000b18:	1af0      	subs	r0, r6, r3
 8000b1a:	e76f      	b.n	80009fc <__aeabi_fsub+0x74>
 8000b1c:	2e00      	cmp	r6, #0
 8000b1e:	d100      	bne.n	8000b22 <__aeabi_fsub+0x19a>
 8000b20:	e0b7      	b.n	8000c92 <__aeabi_fsub+0x30a>
 8000b22:	0002      	movs	r2, r0
 8000b24:	3a01      	subs	r2, #1
 8000b26:	2801      	cmp	r0, #1
 8000b28:	d100      	bne.n	8000b2c <__aeabi_fsub+0x1a4>
 8000b2a:	e09c      	b.n	8000c66 <__aeabi_fsub+0x2de>
 8000b2c:	28ff      	cmp	r0, #255	; 0xff
 8000b2e:	d026      	beq.n	8000b7e <__aeabi_fsub+0x1f6>
 8000b30:	4690      	mov	r8, r2
 8000b32:	e788      	b.n	8000a46 <__aeabi_fsub+0xbe>
 8000b34:	22ff      	movs	r2, #255	; 0xff
 8000b36:	2700      	movs	r7, #0
 8000b38:	e771      	b.n	8000a1e <__aeabi_fsub+0x96>
 8000b3a:	20fe      	movs	r0, #254	; 0xfe
 8000b3c:	1c6a      	adds	r2, r5, #1
 8000b3e:	4210      	tst	r0, r2
 8000b40:	d064      	beq.n	8000c0c <__aeabi_fsub+0x284>
 8000b42:	2aff      	cmp	r2, #255	; 0xff
 8000b44:	d0f6      	beq.n	8000b34 <__aeabi_fsub+0x1ac>
 8000b46:	0015      	movs	r5, r2
 8000b48:	4466      	add	r6, ip
 8000b4a:	0870      	lsrs	r0, r6, #1
 8000b4c:	0743      	lsls	r3, r0, #29
 8000b4e:	d000      	beq.n	8000b52 <__aeabi_fsub+0x1ca>
 8000b50:	e756      	b.n	8000a00 <__aeabi_fsub+0x78>
 8000b52:	08c3      	lsrs	r3, r0, #3
 8000b54:	2dff      	cmp	r5, #255	; 0xff
 8000b56:	d012      	beq.n	8000b7e <__aeabi_fsub+0x1f6>
 8000b58:	025b      	lsls	r3, r3, #9
 8000b5a:	0a5f      	lsrs	r7, r3, #9
 8000b5c:	b2ea      	uxtb	r2, r5
 8000b5e:	e75e      	b.n	8000a1e <__aeabi_fsub+0x96>
 8000b60:	4662      	mov	r2, ip
 8000b62:	2a00      	cmp	r2, #0
 8000b64:	d100      	bne.n	8000b68 <__aeabi_fsub+0x1e0>
 8000b66:	e096      	b.n	8000c96 <__aeabi_fsub+0x30e>
 8000b68:	2e00      	cmp	r6, #0
 8000b6a:	d008      	beq.n	8000b7e <__aeabi_fsub+0x1f6>
 8000b6c:	2280      	movs	r2, #128	; 0x80
 8000b6e:	03d2      	lsls	r2, r2, #15
 8000b70:	4213      	tst	r3, r2
 8000b72:	d004      	beq.n	8000b7e <__aeabi_fsub+0x1f6>
 8000b74:	4648      	mov	r0, r9
 8000b76:	4210      	tst	r0, r2
 8000b78:	d101      	bne.n	8000b7e <__aeabi_fsub+0x1f6>
 8000b7a:	000c      	movs	r4, r1
 8000b7c:	464b      	mov	r3, r9
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d0d8      	beq.n	8000b34 <__aeabi_fsub+0x1ac>
 8000b82:	2780      	movs	r7, #128	; 0x80
 8000b84:	03ff      	lsls	r7, r7, #15
 8000b86:	431f      	orrs	r7, r3
 8000b88:	027f      	lsls	r7, r7, #9
 8000b8a:	22ff      	movs	r2, #255	; 0xff
 8000b8c:	0a7f      	lsrs	r7, r7, #9
 8000b8e:	e746      	b.n	8000a1e <__aeabi_fsub+0x96>
 8000b90:	2320      	movs	r3, #32
 8000b92:	003a      	movs	r2, r7
 8000b94:	1b45      	subs	r5, r0, r5
 8000b96:	0038      	movs	r0, r7
 8000b98:	3501      	adds	r5, #1
 8000b9a:	40ea      	lsrs	r2, r5
 8000b9c:	1b5d      	subs	r5, r3, r5
 8000b9e:	40a8      	lsls	r0, r5
 8000ba0:	1e43      	subs	r3, r0, #1
 8000ba2:	4198      	sbcs	r0, r3
 8000ba4:	2500      	movs	r5, #0
 8000ba6:	4310      	orrs	r0, r2
 8000ba8:	e728      	b.n	80009fc <__aeabi_fsub+0x74>
 8000baa:	2320      	movs	r3, #32
 8000bac:	1a1b      	subs	r3, r3, r0
 8000bae:	0032      	movs	r2, r6
 8000bb0:	409e      	lsls	r6, r3
 8000bb2:	40c2      	lsrs	r2, r0
 8000bb4:	0030      	movs	r0, r6
 8000bb6:	1e43      	subs	r3, r0, #1
 8000bb8:	4198      	sbcs	r0, r3
 8000bba:	4310      	orrs	r0, r2
 8000bbc:	e70c      	b.n	80009d8 <__aeabi_fsub+0x50>
 8000bbe:	2aff      	cmp	r2, #255	; 0xff
 8000bc0:	d0db      	beq.n	8000b7a <__aeabi_fsub+0x1f2>
 8000bc2:	2380      	movs	r3, #128	; 0x80
 8000bc4:	4660      	mov	r0, ip
 8000bc6:	04db      	lsls	r3, r3, #19
 8000bc8:	4318      	orrs	r0, r3
 8000bca:	4684      	mov	ip, r0
 8000bcc:	2f1b      	cmp	r7, #27
 8000bce:	dd56      	ble.n	8000c7e <__aeabi_fsub+0x2f6>
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	000c      	movs	r4, r1
 8000bd4:	0015      	movs	r5, r2
 8000bd6:	1a30      	subs	r0, r6, r0
 8000bd8:	e700      	b.n	80009dc <__aeabi_fsub+0x54>
 8000bda:	4663      	mov	r3, ip
 8000bdc:	1b9f      	subs	r7, r3, r6
 8000bde:	017b      	lsls	r3, r7, #5
 8000be0:	d43d      	bmi.n	8000c5e <__aeabi_fsub+0x2d6>
 8000be2:	2f00      	cmp	r7, #0
 8000be4:	d000      	beq.n	8000be8 <__aeabi_fsub+0x260>
 8000be6:	e6fe      	b.n	80009e6 <__aeabi_fsub+0x5e>
 8000be8:	2400      	movs	r4, #0
 8000bea:	2200      	movs	r2, #0
 8000bec:	2700      	movs	r7, #0
 8000bee:	e716      	b.n	8000a1e <__aeabi_fsub+0x96>
 8000bf0:	0005      	movs	r5, r0
 8000bf2:	e7af      	b.n	8000b54 <__aeabi_fsub+0x1cc>
 8000bf4:	0032      	movs	r2, r6
 8000bf6:	4643      	mov	r3, r8
 8000bf8:	4641      	mov	r1, r8
 8000bfa:	40da      	lsrs	r2, r3
 8000bfc:	2320      	movs	r3, #32
 8000bfe:	1a5b      	subs	r3, r3, r1
 8000c00:	409e      	lsls	r6, r3
 8000c02:	0030      	movs	r0, r6
 8000c04:	1e43      	subs	r3, r0, #1
 8000c06:	4198      	sbcs	r0, r3
 8000c08:	4310      	orrs	r0, r2
 8000c0a:	e721      	b.n	8000a50 <__aeabi_fsub+0xc8>
 8000c0c:	2d00      	cmp	r5, #0
 8000c0e:	d1a7      	bne.n	8000b60 <__aeabi_fsub+0x1d8>
 8000c10:	4663      	mov	r3, ip
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d059      	beq.n	8000cca <__aeabi_fsub+0x342>
 8000c16:	2200      	movs	r2, #0
 8000c18:	2e00      	cmp	r6, #0
 8000c1a:	d100      	bne.n	8000c1e <__aeabi_fsub+0x296>
 8000c1c:	e6ff      	b.n	8000a1e <__aeabi_fsub+0x96>
 8000c1e:	0030      	movs	r0, r6
 8000c20:	4460      	add	r0, ip
 8000c22:	0143      	lsls	r3, r0, #5
 8000c24:	d592      	bpl.n	8000b4c <__aeabi_fsub+0x1c4>
 8000c26:	4b2a      	ldr	r3, [pc, #168]	; (8000cd0 <__aeabi_fsub+0x348>)
 8000c28:	3501      	adds	r5, #1
 8000c2a:	4018      	ands	r0, r3
 8000c2c:	e78e      	b.n	8000b4c <__aeabi_fsub+0x1c4>
 8000c2e:	4663      	mov	r3, ip
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d047      	beq.n	8000cc4 <__aeabi_fsub+0x33c>
 8000c34:	1e4b      	subs	r3, r1, #1
 8000c36:	2901      	cmp	r1, #1
 8000c38:	d015      	beq.n	8000c66 <__aeabi_fsub+0x2de>
 8000c3a:	29ff      	cmp	r1, #255	; 0xff
 8000c3c:	d02b      	beq.n	8000c96 <__aeabi_fsub+0x30e>
 8000c3e:	0019      	movs	r1, r3
 8000c40:	e74e      	b.n	8000ae0 <__aeabi_fsub+0x158>
 8000c42:	000c      	movs	r4, r1
 8000c44:	464b      	mov	r3, r9
 8000c46:	003d      	movs	r5, r7
 8000c48:	e784      	b.n	8000b54 <__aeabi_fsub+0x1cc>
 8000c4a:	4662      	mov	r2, ip
 8000c4c:	2a00      	cmp	r2, #0
 8000c4e:	d18b      	bne.n	8000b68 <__aeabi_fsub+0x1e0>
 8000c50:	2e00      	cmp	r6, #0
 8000c52:	d192      	bne.n	8000b7a <__aeabi_fsub+0x1f2>
 8000c54:	2780      	movs	r7, #128	; 0x80
 8000c56:	2400      	movs	r4, #0
 8000c58:	22ff      	movs	r2, #255	; 0xff
 8000c5a:	03ff      	lsls	r7, r7, #15
 8000c5c:	e6df      	b.n	8000a1e <__aeabi_fsub+0x96>
 8000c5e:	4663      	mov	r3, ip
 8000c60:	000c      	movs	r4, r1
 8000c62:	1af7      	subs	r7, r6, r3
 8000c64:	e6bf      	b.n	80009e6 <__aeabi_fsub+0x5e>
 8000c66:	0030      	movs	r0, r6
 8000c68:	4460      	add	r0, ip
 8000c6a:	2501      	movs	r5, #1
 8000c6c:	0143      	lsls	r3, r0, #5
 8000c6e:	d400      	bmi.n	8000c72 <__aeabi_fsub+0x2ea>
 8000c70:	e76c      	b.n	8000b4c <__aeabi_fsub+0x1c4>
 8000c72:	2502      	movs	r5, #2
 8000c74:	e6f2      	b.n	8000a5c <__aeabi_fsub+0xd4>
 8000c76:	4663      	mov	r3, ip
 8000c78:	2501      	movs	r5, #1
 8000c7a:	1b98      	subs	r0, r3, r6
 8000c7c:	e6ae      	b.n	80009dc <__aeabi_fsub+0x54>
 8000c7e:	2320      	movs	r3, #32
 8000c80:	4664      	mov	r4, ip
 8000c82:	4660      	mov	r0, ip
 8000c84:	40fc      	lsrs	r4, r7
 8000c86:	1bdf      	subs	r7, r3, r7
 8000c88:	40b8      	lsls	r0, r7
 8000c8a:	1e43      	subs	r3, r0, #1
 8000c8c:	4198      	sbcs	r0, r3
 8000c8e:	4320      	orrs	r0, r4
 8000c90:	e79f      	b.n	8000bd2 <__aeabi_fsub+0x24a>
 8000c92:	0005      	movs	r5, r0
 8000c94:	e75e      	b.n	8000b54 <__aeabi_fsub+0x1cc>
 8000c96:	464b      	mov	r3, r9
 8000c98:	e771      	b.n	8000b7e <__aeabi_fsub+0x1f6>
 8000c9a:	2320      	movs	r3, #32
 8000c9c:	4665      	mov	r5, ip
 8000c9e:	4660      	mov	r0, ip
 8000ca0:	40cd      	lsrs	r5, r1
 8000ca2:	1a59      	subs	r1, r3, r1
 8000ca4:	4088      	lsls	r0, r1
 8000ca6:	1e43      	subs	r3, r0, #1
 8000ca8:	4198      	sbcs	r0, r3
 8000caa:	4328      	orrs	r0, r5
 8000cac:	e71c      	b.n	8000ae8 <__aeabi_fsub+0x160>
 8000cae:	4663      	mov	r3, ip
 8000cb0:	000c      	movs	r4, r1
 8000cb2:	2501      	movs	r5, #1
 8000cb4:	1af0      	subs	r0, r6, r3
 8000cb6:	e691      	b.n	80009dc <__aeabi_fsub+0x54>
 8000cb8:	2e00      	cmp	r6, #0
 8000cba:	d095      	beq.n	8000be8 <__aeabi_fsub+0x260>
 8000cbc:	000c      	movs	r4, r1
 8000cbe:	464f      	mov	r7, r9
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	e6ac      	b.n	8000a1e <__aeabi_fsub+0x96>
 8000cc4:	464b      	mov	r3, r9
 8000cc6:	000d      	movs	r5, r1
 8000cc8:	e744      	b.n	8000b54 <__aeabi_fsub+0x1cc>
 8000cca:	464f      	mov	r7, r9
 8000ccc:	2200      	movs	r2, #0
 8000cce:	e6a6      	b.n	8000a1e <__aeabi_fsub+0x96>
 8000cd0:	fbffffff 	.word	0xfbffffff
 8000cd4:	7dffffff 	.word	0x7dffffff
 8000cd8:	2800      	cmp	r0, #0
 8000cda:	d000      	beq.n	8000cde <__aeabi_fsub+0x356>
 8000cdc:	e736      	b.n	8000b4c <__aeabi_fsub+0x1c4>
 8000cde:	2400      	movs	r4, #0
 8000ce0:	2700      	movs	r7, #0
 8000ce2:	e69c      	b.n	8000a1e <__aeabi_fsub+0x96>

08000ce4 <__aeabi_f2iz>:
 8000ce4:	0241      	lsls	r1, r0, #9
 8000ce6:	0042      	lsls	r2, r0, #1
 8000ce8:	0fc3      	lsrs	r3, r0, #31
 8000cea:	0a49      	lsrs	r1, r1, #9
 8000cec:	2000      	movs	r0, #0
 8000cee:	0e12      	lsrs	r2, r2, #24
 8000cf0:	2a7e      	cmp	r2, #126	; 0x7e
 8000cf2:	dd03      	ble.n	8000cfc <__aeabi_f2iz+0x18>
 8000cf4:	2a9d      	cmp	r2, #157	; 0x9d
 8000cf6:	dd02      	ble.n	8000cfe <__aeabi_f2iz+0x1a>
 8000cf8:	4a09      	ldr	r2, [pc, #36]	; (8000d20 <__aeabi_f2iz+0x3c>)
 8000cfa:	1898      	adds	r0, r3, r2
 8000cfc:	4770      	bx	lr
 8000cfe:	2080      	movs	r0, #128	; 0x80
 8000d00:	0400      	lsls	r0, r0, #16
 8000d02:	4301      	orrs	r1, r0
 8000d04:	2a95      	cmp	r2, #149	; 0x95
 8000d06:	dc07      	bgt.n	8000d18 <__aeabi_f2iz+0x34>
 8000d08:	2096      	movs	r0, #150	; 0x96
 8000d0a:	1a82      	subs	r2, r0, r2
 8000d0c:	40d1      	lsrs	r1, r2
 8000d0e:	4248      	negs	r0, r1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d1f3      	bne.n	8000cfc <__aeabi_f2iz+0x18>
 8000d14:	0008      	movs	r0, r1
 8000d16:	e7f1      	b.n	8000cfc <__aeabi_f2iz+0x18>
 8000d18:	3a96      	subs	r2, #150	; 0x96
 8000d1a:	4091      	lsls	r1, r2
 8000d1c:	e7f7      	b.n	8000d0e <__aeabi_f2iz+0x2a>
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	7fffffff 	.word	0x7fffffff

08000d24 <__aeabi_i2f>:
 8000d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d26:	2800      	cmp	r0, #0
 8000d28:	d013      	beq.n	8000d52 <__aeabi_i2f+0x2e>
 8000d2a:	17c3      	asrs	r3, r0, #31
 8000d2c:	18c6      	adds	r6, r0, r3
 8000d2e:	405e      	eors	r6, r3
 8000d30:	0fc4      	lsrs	r4, r0, #31
 8000d32:	0030      	movs	r0, r6
 8000d34:	f000 f844 	bl	8000dc0 <__clzsi2>
 8000d38:	239e      	movs	r3, #158	; 0x9e
 8000d3a:	0005      	movs	r5, r0
 8000d3c:	1a1b      	subs	r3, r3, r0
 8000d3e:	2b96      	cmp	r3, #150	; 0x96
 8000d40:	dc0f      	bgt.n	8000d62 <__aeabi_i2f+0x3e>
 8000d42:	2808      	cmp	r0, #8
 8000d44:	dd01      	ble.n	8000d4a <__aeabi_i2f+0x26>
 8000d46:	3d08      	subs	r5, #8
 8000d48:	40ae      	lsls	r6, r5
 8000d4a:	0276      	lsls	r6, r6, #9
 8000d4c:	0a76      	lsrs	r6, r6, #9
 8000d4e:	b2d8      	uxtb	r0, r3
 8000d50:	e002      	b.n	8000d58 <__aeabi_i2f+0x34>
 8000d52:	2400      	movs	r4, #0
 8000d54:	2000      	movs	r0, #0
 8000d56:	2600      	movs	r6, #0
 8000d58:	05c0      	lsls	r0, r0, #23
 8000d5a:	4330      	orrs	r0, r6
 8000d5c:	07e4      	lsls	r4, r4, #31
 8000d5e:	4320      	orrs	r0, r4
 8000d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d62:	2b99      	cmp	r3, #153	; 0x99
 8000d64:	dd0c      	ble.n	8000d80 <__aeabi_i2f+0x5c>
 8000d66:	2205      	movs	r2, #5
 8000d68:	0031      	movs	r1, r6
 8000d6a:	1a12      	subs	r2, r2, r0
 8000d6c:	40d1      	lsrs	r1, r2
 8000d6e:	000a      	movs	r2, r1
 8000d70:	0001      	movs	r1, r0
 8000d72:	0030      	movs	r0, r6
 8000d74:	311b      	adds	r1, #27
 8000d76:	4088      	lsls	r0, r1
 8000d78:	1e41      	subs	r1, r0, #1
 8000d7a:	4188      	sbcs	r0, r1
 8000d7c:	4302      	orrs	r2, r0
 8000d7e:	0016      	movs	r6, r2
 8000d80:	2d05      	cmp	r5, #5
 8000d82:	dc12      	bgt.n	8000daa <__aeabi_i2f+0x86>
 8000d84:	0031      	movs	r1, r6
 8000d86:	4f0d      	ldr	r7, [pc, #52]	; (8000dbc <__aeabi_i2f+0x98>)
 8000d88:	4039      	ands	r1, r7
 8000d8a:	0772      	lsls	r2, r6, #29
 8000d8c:	d009      	beq.n	8000da2 <__aeabi_i2f+0x7e>
 8000d8e:	200f      	movs	r0, #15
 8000d90:	4030      	ands	r0, r6
 8000d92:	2804      	cmp	r0, #4
 8000d94:	d005      	beq.n	8000da2 <__aeabi_i2f+0x7e>
 8000d96:	3104      	adds	r1, #4
 8000d98:	014a      	lsls	r2, r1, #5
 8000d9a:	d502      	bpl.n	8000da2 <__aeabi_i2f+0x7e>
 8000d9c:	239f      	movs	r3, #159	; 0x9f
 8000d9e:	4039      	ands	r1, r7
 8000da0:	1b5b      	subs	r3, r3, r5
 8000da2:	0189      	lsls	r1, r1, #6
 8000da4:	0a4e      	lsrs	r6, r1, #9
 8000da6:	b2d8      	uxtb	r0, r3
 8000da8:	e7d6      	b.n	8000d58 <__aeabi_i2f+0x34>
 8000daa:	1f6a      	subs	r2, r5, #5
 8000dac:	4096      	lsls	r6, r2
 8000dae:	0031      	movs	r1, r6
 8000db0:	4f02      	ldr	r7, [pc, #8]	; (8000dbc <__aeabi_i2f+0x98>)
 8000db2:	4039      	ands	r1, r7
 8000db4:	0772      	lsls	r2, r6, #29
 8000db6:	d0f4      	beq.n	8000da2 <__aeabi_i2f+0x7e>
 8000db8:	e7e9      	b.n	8000d8e <__aeabi_i2f+0x6a>
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	fbffffff 	.word	0xfbffffff

08000dc0 <__clzsi2>:
 8000dc0:	211c      	movs	r1, #28
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	041b      	lsls	r3, r3, #16
 8000dc6:	4298      	cmp	r0, r3
 8000dc8:	d301      	bcc.n	8000dce <__clzsi2+0xe>
 8000dca:	0c00      	lsrs	r0, r0, #16
 8000dcc:	3910      	subs	r1, #16
 8000dce:	0a1b      	lsrs	r3, r3, #8
 8000dd0:	4298      	cmp	r0, r3
 8000dd2:	d301      	bcc.n	8000dd8 <__clzsi2+0x18>
 8000dd4:	0a00      	lsrs	r0, r0, #8
 8000dd6:	3908      	subs	r1, #8
 8000dd8:	091b      	lsrs	r3, r3, #4
 8000dda:	4298      	cmp	r0, r3
 8000ddc:	d301      	bcc.n	8000de2 <__clzsi2+0x22>
 8000dde:	0900      	lsrs	r0, r0, #4
 8000de0:	3904      	subs	r1, #4
 8000de2:	a202      	add	r2, pc, #8	; (adr r2, 8000dec <__clzsi2+0x2c>)
 8000de4:	5c10      	ldrb	r0, [r2, r0]
 8000de6:	1840      	adds	r0, r0, r1
 8000de8:	4770      	bx	lr
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	02020304 	.word	0x02020304
 8000df0:	01010101 	.word	0x01010101
	...

08000dfc <FIRFilter_Init>:
//Fstop 10kHz
//Apass 0.1dB
//Astop 55dB
int16_t H_FIR[FIR_FILTER_LENGHT] = {0, 3, 11, 22, 30, 30, 22, 11, 3, 0};

void FIRFilter_Init(FIRFilter *fir) {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
	//Clear fiilter buffer
	for(int16_t n = 0; n < FIR_FILTER_LENGHT; n++) {
 8000e04:	230e      	movs	r3, #14
 8000e06:	18fb      	adds	r3, r7, r3
 8000e08:	2200      	movs	r2, #0
 8000e0a:	801a      	strh	r2, [r3, #0]
 8000e0c:	e010      	b.n	8000e30 <FIRFilter_Init+0x34>
		fir->buf[n] = 0;
 8000e0e:	200e      	movs	r0, #14
 8000e10:	183b      	adds	r3, r7, r0
 8000e12:	2200      	movs	r2, #0
 8000e14:	5e9a      	ldrsh	r2, [r3, r2]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	0052      	lsls	r2, r2, #1
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	52d1      	strh	r1, [r2, r3]
	for(int16_t n = 0; n < FIR_FILTER_LENGHT; n++) {
 8000e1e:	0001      	movs	r1, r0
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	2200      	movs	r2, #0
 8000e24:	5e9b      	ldrsh	r3, [r3, r2]
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	3301      	adds	r3, #1
 8000e2a:	b29a      	uxth	r2, r3
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	801a      	strh	r2, [r3, #0]
 8000e30:	230e      	movs	r3, #14
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	2200      	movs	r2, #0
 8000e36:	5e9b      	ldrsh	r3, [r3, r2]
 8000e38:	2b09      	cmp	r3, #9
 8000e3a:	dde8      	ble.n	8000e0e <FIRFilter_Init+0x12>
	}

	//Reset buffer Index
	fir->bufIndex = 0;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	829a      	strh	r2, [r3, #20]

	//Clear filter output
	fir->output = 0;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2200      	movs	r2, #0
 8000e46:	82da      	strh	r2, [r3, #22]
}
 8000e48:	46c0      	nop			; (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b004      	add	sp, #16
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <FIRFilter_Update>:

int16_t FIRFilter_Update(FIRFilter *fir, int16_t inp) {
 8000e50:	b590      	push	{r4, r7, lr}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	000a      	movs	r2, r1
 8000e5a:	1cbb      	adds	r3, r7, #2
 8000e5c:	801a      	strh	r2, [r3, #0]
	//Store latest sample in buffer in degrees and transformed to fixed point (8,7)
	inp = ((inp >> 5) - (inp >> 7) + (inp >> 9) - (inp >> 11) + 3) << 7;		//CSD 0.025027 * inp + 3.056846
 8000e5e:	1cbb      	adds	r3, r7, #2
 8000e60:	2200      	movs	r2, #0
 8000e62:	5e9b      	ldrsh	r3, [r3, r2]
 8000e64:	115b      	asrs	r3, r3, #5
 8000e66:	b21b      	sxth	r3, r3
 8000e68:	001a      	movs	r2, r3
 8000e6a:	1cbb      	adds	r3, r7, #2
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	5e5b      	ldrsh	r3, [r3, r1]
 8000e70:	11db      	asrs	r3, r3, #7
 8000e72:	b21b      	sxth	r3, r3
 8000e74:	1ad3      	subs	r3, r2, r3
 8000e76:	1cba      	adds	r2, r7, #2
 8000e78:	2100      	movs	r1, #0
 8000e7a:	5e52      	ldrsh	r2, [r2, r1]
 8000e7c:	1252      	asrs	r2, r2, #9
 8000e7e:	b212      	sxth	r2, r2
 8000e80:	189b      	adds	r3, r3, r2
 8000e82:	1cba      	adds	r2, r7, #2
 8000e84:	2100      	movs	r1, #0
 8000e86:	5e52      	ldrsh	r2, [r2, r1]
 8000e88:	12d2      	asrs	r2, r2, #11
 8000e8a:	b212      	sxth	r2, r2
 8000e8c:	1a9b      	subs	r3, r3, r2
 8000e8e:	3303      	adds	r3, #3
 8000e90:	01da      	lsls	r2, r3, #7
 8000e92:	1cbb      	adds	r3, r7, #2
 8000e94:	801a      	strh	r2, [r3, #0]

	fir->buf[fir->bufIndex] = inp;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2214      	movs	r2, #20
 8000e9a:	5e9b      	ldrsh	r3, [r3, r2]
 8000e9c:	001a      	movs	r2, r3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	0052      	lsls	r2, r2, #1
 8000ea2:	1cb9      	adds	r1, r7, #2
 8000ea4:	8809      	ldrh	r1, [r1, #0]
 8000ea6:	52d1      	strh	r1, [r2, r3]

	//Increment buffer index and wrap if necessary
	fir->bufIndex = fir->bufIndex + 1;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2214      	movs	r2, #20
 8000eac:	5e9b      	ldrsh	r3, [r3, r2]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	b21a      	sxth	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	829a      	strh	r2, [r3, #20]

	if (fir->bufIndex == FIR_FILTER_LENGHT) {
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2214      	movs	r2, #20
 8000ebe:	5e9b      	ldrsh	r3, [r3, r2]
 8000ec0:	2b0a      	cmp	r3, #10
 8000ec2:	d102      	bne.n	8000eca <FIRFilter_Update+0x7a>
		fir->bufIndex = 0;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	829a      	strh	r2, [r3, #20]
	}

	//Compute new output sample
	fir->output = 0;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	82da      	strh	r2, [r3, #22]

	int16_t sumIndex = fir->bufIndex;
 8000ed0:	230e      	movs	r3, #14
 8000ed2:	18fb      	adds	r3, r7, r3
 8000ed4:	687a      	ldr	r2, [r7, #4]
 8000ed6:	8a92      	ldrh	r2, [r2, #20]
 8000ed8:	801a      	strh	r2, [r3, #0]

	for (int16_t n = 1; n < FIR_FILTER_LENGHT>>1; n++) {	//n = 1 por coeficientes 0
 8000eda:	230c      	movs	r3, #12
 8000edc:	18fb      	adds	r3, r7, r3
 8000ede:	2201      	movs	r2, #1
 8000ee0:	801a      	strh	r2, [r3, #0]
 8000ee2:	e03e      	b.n	8000f62 <FIRFilter_Update+0x112>
		//Decrement Index and wrap if necessary
		if (sumIndex > 0) {
 8000ee4:	210e      	movs	r1, #14
 8000ee6:	187b      	adds	r3, r7, r1
 8000ee8:	2200      	movs	r2, #0
 8000eea:	5e9b      	ldrsh	r3, [r3, r2]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	dd08      	ble.n	8000f02 <FIRFilter_Update+0xb2>
			sumIndex--;
 8000ef0:	187b      	adds	r3, r7, r1
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	5e9b      	ldrsh	r3, [r3, r2]
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	3b01      	subs	r3, #1
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	187b      	adds	r3, r7, r1
 8000efe:	801a      	strh	r2, [r3, #0]
 8000f00:	e003      	b.n	8000f0a <FIRFilter_Update+0xba>
		} else {
			sumIndex = FIR_FILTER_LENGHT - 1;
 8000f02:	230e      	movs	r3, #14
 8000f04:	18fb      	adds	r3, r7, r3
 8000f06:	2209      	movs	r2, #9
 8000f08:	801a      	strh	r2, [r3, #0]
		}

		fir->output = fir->output + (((H_FIR[n] + H_FIR[FIR_FILTER_LENGHT - n - 1]) * fir->buf[sumIndex])>>7);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2216      	movs	r2, #22
 8000f0e:	5e9b      	ldrsh	r3, [r3, r2]
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	240c      	movs	r4, #12
 8000f14:	193b      	adds	r3, r7, r4
 8000f16:	2100      	movs	r1, #0
 8000f18:	5e59      	ldrsh	r1, [r3, r1]
 8000f1a:	4b1c      	ldr	r3, [pc, #112]	; (8000f8c <FIRFilter_Update+0x13c>)
 8000f1c:	0049      	lsls	r1, r1, #1
 8000f1e:	5ecb      	ldrsh	r3, [r1, r3]
 8000f20:	0018      	movs	r0, r3
 8000f22:	193b      	adds	r3, r7, r4
 8000f24:	2100      	movs	r1, #0
 8000f26:	5e5b      	ldrsh	r3, [r3, r1]
 8000f28:	2109      	movs	r1, #9
 8000f2a:	1ac9      	subs	r1, r1, r3
 8000f2c:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <FIRFilter_Update+0x13c>)
 8000f2e:	0049      	lsls	r1, r1, #1
 8000f30:	5ecb      	ldrsh	r3, [r1, r3]
 8000f32:	18c3      	adds	r3, r0, r3
 8000f34:	210e      	movs	r1, #14
 8000f36:	1879      	adds	r1, r7, r1
 8000f38:	2000      	movs	r0, #0
 8000f3a:	5e08      	ldrsh	r0, [r1, r0]
 8000f3c:	6879      	ldr	r1, [r7, #4]
 8000f3e:	0040      	lsls	r0, r0, #1
 8000f40:	5e41      	ldrsh	r1, [r0, r1]
 8000f42:	434b      	muls	r3, r1
 8000f44:	11db      	asrs	r3, r3, #7
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	18d3      	adds	r3, r2, r3
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	b21a      	sxth	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	82da      	strh	r2, [r3, #22]
	for (int16_t n = 1; n < FIR_FILTER_LENGHT>>1; n++) {	//n = 1 por coeficientes 0
 8000f52:	193b      	adds	r3, r7, r4
 8000f54:	2200      	movs	r2, #0
 8000f56:	5e9b      	ldrsh	r3, [r3, r2]
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	b29a      	uxth	r2, r3
 8000f5e:	193b      	adds	r3, r7, r4
 8000f60:	801a      	strh	r2, [r3, #0]
 8000f62:	230c      	movs	r3, #12
 8000f64:	18fb      	adds	r3, r7, r3
 8000f66:	2200      	movs	r2, #0
 8000f68:	5e9b      	ldrsh	r3, [r3, r2]
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	ddba      	ble.n	8000ee4 <FIRFilter_Update+0x94>
	}
	fir->output = fir->output >> 7;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2216      	movs	r2, #22
 8000f72:	5e9b      	ldrsh	r3, [r3, r2]
 8000f74:	11db      	asrs	r3, r3, #7
 8000f76:	b21a      	sxth	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	82da      	strh	r2, [r3, #22]

	//Return filter output
	return fir->output;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2216      	movs	r2, #22
 8000f80:	5e9b      	ldrsh	r3, [r3, r2]
}
 8000f82:	0018      	movs	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	b005      	add	sp, #20
 8000f88:	bd90      	pop	{r4, r7, pc}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	20000000 	.word	0x20000000

08000f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f90:	b590      	push	{r4, r7, lr}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f96:	f001 fb4d 	bl	8002634 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f9a:	f000 fa01 	bl	80013a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f9e:	f000 fc73 	bl	8001888 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000fa2:	f000 fac7 	bl	8001534 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000fa6:	f000 fb05 	bl	80015b4 <MX_I2C2_Init>
  MX_ADC1_Init();
 8000faa:	f000 fa55 	bl	8001458 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000fae:	f000 fbeb 	bl	8001788 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000fb2:	f000 fb3f 	bl	8001634 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //INITS
  ssd1306_Init();
 8000fb6:	f001 f901 	bl	80021bc <ssd1306_Init>
  FIRFilter_Init(&fir);
 8000fba:	4bd6      	ldr	r3, [pc, #856]	; (8001314 <main+0x384>)
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	f7ff ff1d 	bl	8000dfc <FIRFilter_Init>

  //PID
//  PID_Init();
	PI_temp.Up			= 0;
 8000fc2:	4bd5      	ldr	r3, [pc, #852]	; (8001318 <main+0x388>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	611a      	str	r2, [r3, #16]
	PI_temp.Ui			= 0;
 8000fc8:	4bd3      	ldr	r3, [pc, #844]	; (8001318 <main+0x388>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	615a      	str	r2, [r3, #20]
	PI_temp.Ud			= 0;
 8000fce:	4bd2      	ldr	r3, [pc, #840]	; (8001318 <main+0x388>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	619a      	str	r2, [r3, #24]
	PI_temp.OutPreSat	= 0;
 8000fd4:	4bd0      	ldr	r3, [pc, #832]	; (8001318 <main+0x388>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	61da      	str	r2, [r3, #28]
	PI_temp.Out			= 0;
 8000fda:	4bcf      	ldr	r3, [pc, #828]	; (8001318 <main+0x388>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	629a      	str	r2, [r3, #40]	; 0x28
	PI_temp.SatErr		= 0;
 8000fe0:	4bcd      	ldr	r3, [pc, #820]	; (8001318 <main+0x388>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	62da      	str	r2, [r3, #44]	; 0x2c
	PI_temp.Up1			= 0;
 8000fe6:	4bcc      	ldr	r3, [pc, #816]	; (8001318 <main+0x388>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	63da      	str	r2, [r3, #60]	; 0x3c
	PI_temp.Kp			= 0.0025; //0.25
 8000fec:	4bca      	ldr	r3, [pc, #808]	; (8001318 <main+0x388>)
 8000fee:	4acb      	ldr	r2, [pc, #812]	; (800131c <main+0x38c>)
 8000ff0:	60da      	str	r2, [r3, #12]
	PI_temp.Ki			= 0.001; //5e-6
 8000ff2:	4bc9      	ldr	r3, [pc, #804]	; (8001318 <main+0x388>)
 8000ff4:	4aca      	ldr	r2, [pc, #808]	; (8001320 <main+0x390>)
 8000ff6:	631a      	str	r2, [r3, #48]	; 0x30
	PI_temp.Kc			= 0.001;
 8000ff8:	4bc7      	ldr	r3, [pc, #796]	; (8001318 <main+0x388>)
 8000ffa:	4ac9      	ldr	r2, [pc, #804]	; (8001320 <main+0x390>)
 8000ffc:	635a      	str	r2, [r3, #52]	; 0x34
	PI_temp.Kd			= 0;
 8000ffe:	4bc6      	ldr	r3, [pc, #792]	; (8001318 <main+0x388>)
 8001000:	2200      	movs	r2, #0
 8001002:	639a      	str	r2, [r3, #56]	; 0x38
	PI_temp.OutMax		= 0.95;
 8001004:	4bc4      	ldr	r3, [pc, #784]	; (8001318 <main+0x388>)
 8001006:	4ac7      	ldr	r2, [pc, #796]	; (8001324 <main+0x394>)
 8001008:	621a      	str	r2, [r3, #32]
	PI_temp.OutMin		= 0.0;
 800100a:	4bc3      	ldr	r3, [pc, #780]	; (8001318 <main+0x388>)
 800100c:	2200      	movs	r2, #0
 800100e:	625a      	str	r2, [r3, #36]	; 0x24


  //ACD calibration and trigger
  while(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK);
 8001010:	46c0      	nop			; (mov r8, r8)
 8001012:	4bc5      	ldr	r3, [pc, #788]	; (8001328 <main+0x398>)
 8001014:	0018      	movs	r0, r3
 8001016:	f002 fb61 	bl	80036dc <HAL_ADCEx_Calibration_Start>
 800101a:	1e03      	subs	r3, r0, #0
 800101c:	d1f9      	bne.n	8001012 <main+0x82>
  HAL_ADC_Start_IT(&hadc1);
 800101e:	4bc2      	ldr	r3, [pc, #776]	; (8001328 <main+0x398>)
 8001020:	0018      	movs	r0, r3
 8001022:	f001 fe73 	bl	8002d0c <HAL_ADC_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001026:	4bc1      	ldr	r3, [pc, #772]	; (800132c <main+0x39c>)
 8001028:	2104      	movs	r1, #4
 800102a:	0018      	movs	r0, r3
 800102c:	f004 fc70 	bl	8005910 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //GUI
	  switch(state){
 8001030:	4bbf      	ldr	r3, [pc, #764]	; (8001330 <main+0x3a0>)
 8001032:	2200      	movs	r2, #0
 8001034:	5e9b      	ldrsh	r3, [r3, r2]
 8001036:	2b1f      	cmp	r3, #31
 8001038:	d900      	bls.n	800103c <main+0xac>
 800103a:	e0bd      	b.n	80011b8 <main+0x228>
 800103c:	009a      	lsls	r2, r3, #2
 800103e:	4bbd      	ldr	r3, [pc, #756]	; (8001334 <main+0x3a4>)
 8001040:	18d3      	adds	r3, r2, r3
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	469f      	mov	pc, r3
	  case 0:
		  ssd1306_WriteScreen(" HEATER ", Font_11x18);
 8001046:	4bbc      	ldr	r3, [pc, #752]	; (8001338 <main+0x3a8>)
 8001048:	48bc      	ldr	r0, [pc, #752]	; (800133c <main+0x3ac>)
 800104a:	6819      	ldr	r1, [r3, #0]
 800104c:	685a      	ldr	r2, [r3, #4]
 800104e:	f000 fca9 	bl	80019a4 <ssd1306_WriteScreen>
		  break;
 8001052:	e0b2      	b.n	80011ba <main+0x22a>
	  case 1:
		  ssd1306_WriteScreen("START", Font_11x18);
 8001054:	4bb8      	ldr	r3, [pc, #736]	; (8001338 <main+0x3a8>)
 8001056:	48ba      	ldr	r0, [pc, #744]	; (8001340 <main+0x3b0>)
 8001058:	6819      	ldr	r1, [r3, #0]
 800105a:	685a      	ldr	r2, [r3, #4]
 800105c:	f000 fca2 	bl	80019a4 <ssd1306_WriteScreen>
		  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8001060:	4bb8      	ldr	r3, [pc, #736]	; (8001344 <main+0x3b4>)
 8001062:	2104      	movs	r1, #4
 8001064:	0018      	movs	r0, r3
 8001066:	f004 fd2b 	bl	8005ac0 <HAL_TIM_PWM_Stop>
		  break;
 800106a:	e0a6      	b.n	80011ba <main+0x22a>
	  case 11:
		  //Start PWM
		  duty = _IQsat(PI_temp.Out*1600,1520,1);
 800106c:	4baa      	ldr	r3, [pc, #680]	; (8001318 <main+0x388>)
 800106e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001070:	49b5      	ldr	r1, [pc, #724]	; (8001348 <main+0x3b8>)
 8001072:	1c18      	adds	r0, r3, #0
 8001074:	f7ff fb62 	bl	800073c <__aeabi_fmul>
 8001078:	1c03      	adds	r3, r0, #0
 800107a:	49b4      	ldr	r1, [pc, #720]	; (800134c <main+0x3bc>)
 800107c:	1c18      	adds	r0, r3, #0
 800107e:	f7ff f8e7 	bl	8000250 <__aeabi_fcmplt>
 8001082:	1e03      	subs	r3, r0, #0
 8001084:	d013      	beq.n	80010ae <main+0x11e>
 8001086:	4ba4      	ldr	r3, [pc, #656]	; (8001318 <main+0x388>)
 8001088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800108a:	49af      	ldr	r1, [pc, #700]	; (8001348 <main+0x3b8>)
 800108c:	1c18      	adds	r0, r3, #0
 800108e:	f7ff fb55 	bl	800073c <__aeabi_fmul>
 8001092:	1c03      	adds	r3, r0, #0
 8001094:	2201      	movs	r2, #1
 8001096:	1c14      	adds	r4, r2, #0
 8001098:	21fe      	movs	r1, #254	; 0xfe
 800109a:	0589      	lsls	r1, r1, #22
 800109c:	1c18      	adds	r0, r3, #0
 800109e:	f7ff f8eb 	bl	8000278 <__aeabi_fcmpgt>
 80010a2:	1e03      	subs	r3, r0, #0
 80010a4:	d101      	bne.n	80010aa <main+0x11a>
 80010a6:	2300      	movs	r3, #0
 80010a8:	1c1c      	adds	r4, r3, #0
 80010aa:	b2e3      	uxtb	r3, r4
 80010ac:	e000      	b.n	80010b0 <main+0x120>
 80010ae:	2301      	movs	r3, #1
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d01c      	beq.n	80010ee <main+0x15e>
 80010b4:	4b98      	ldr	r3, [pc, #608]	; (8001318 <main+0x388>)
 80010b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b8:	49a3      	ldr	r1, [pc, #652]	; (8001348 <main+0x3b8>)
 80010ba:	1c18      	adds	r0, r3, #0
 80010bc:	f7ff fb3e 	bl	800073c <__aeabi_fmul>
 80010c0:	1c03      	adds	r3, r0, #0
 80010c2:	49a2      	ldr	r1, [pc, #648]	; (800134c <main+0x3bc>)
 80010c4:	1c18      	adds	r0, r3, #0
 80010c6:	f7ff f8c3 	bl	8000250 <__aeabi_fcmplt>
 80010ca:	1e03      	subs	r3, r0, #0
 80010cc:	d00c      	beq.n	80010e8 <main+0x158>
 80010ce:	4b92      	ldr	r3, [pc, #584]	; (8001318 <main+0x388>)
 80010d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d2:	499d      	ldr	r1, [pc, #628]	; (8001348 <main+0x3b8>)
 80010d4:	1c18      	adds	r0, r3, #0
 80010d6:	f7ff fb31 	bl	800073c <__aeabi_fmul>
 80010da:	1c03      	adds	r3, r0, #0
 80010dc:	1c18      	adds	r0, r3, #0
 80010de:	f7ff fe01 	bl	8000ce4 <__aeabi_f2iz>
 80010e2:	0003      	movs	r3, r0
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	e003      	b.n	80010f0 <main+0x160>
 80010e8:	23be      	movs	r3, #190	; 0xbe
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	e000      	b.n	80010f0 <main+0x160>
 80010ee:	2301      	movs	r3, #1
 80010f0:	4a97      	ldr	r2, [pc, #604]	; (8001350 <main+0x3c0>)
 80010f2:	8013      	strh	r3, [r2, #0]
		  TIM3->CCR2 = (TIM_CCR2_CCR2 & (duty-1));
 80010f4:	4b96      	ldr	r3, [pc, #600]	; (8001350 <main+0x3c0>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	5e9b      	ldrsh	r3, [r3, r2]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	001a      	movs	r2, r3
 80010fe:	4b95      	ldr	r3, [pc, #596]	; (8001354 <main+0x3c4>)
 8001100:	0412      	lsls	r2, r2, #16
 8001102:	0c12      	lsrs	r2, r2, #16
 8001104:	639a      	str	r2, [r3, #56]	; 0x38
		  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001106:	4b8f      	ldr	r3, [pc, #572]	; (8001344 <main+0x3b4>)
 8001108:	2104      	movs	r1, #4
 800110a:	0018      	movs	r0, r3
 800110c:	f004 fc00 	bl	8005910 <HAL_TIM_PWM_Start>
		  //Refresh Screen

		  sprintf(string, "%5d~C", temp);
 8001110:	4b91      	ldr	r3, [pc, #580]	; (8001358 <main+0x3c8>)
 8001112:	2200      	movs	r2, #0
 8001114:	5e9b      	ldrsh	r3, [r3, r2]
 8001116:	001a      	movs	r2, r3
 8001118:	4990      	ldr	r1, [pc, #576]	; (800135c <main+0x3cc>)
 800111a:	4b91      	ldr	r3, [pc, #580]	; (8001360 <main+0x3d0>)
 800111c:	0018      	movs	r0, r3
 800111e:	f005 fda1 	bl	8006c64 <siprintf>
		  ssd1306_WriteScreen(string, Font_11x18);
 8001122:	4b85      	ldr	r3, [pc, #532]	; (8001338 <main+0x3a8>)
 8001124:	488e      	ldr	r0, [pc, #568]	; (8001360 <main+0x3d0>)
 8001126:	6819      	ldr	r1, [r3, #0]
 8001128:	685a      	ldr	r2, [r3, #4]
 800112a:	f000 fc3b 	bl	80019a4 <ssd1306_WriteScreen>

		  break;
 800112e:	e044      	b.n	80011ba <main+0x22a>
	  case 2:
		  ssd1306_WriteScreen("CONFIG", Font_11x18);
 8001130:	4b81      	ldr	r3, [pc, #516]	; (8001338 <main+0x3a8>)
 8001132:	488c      	ldr	r0, [pc, #560]	; (8001364 <main+0x3d4>)
 8001134:	6819      	ldr	r1, [r3, #0]
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	f000 fc34 	bl	80019a4 <ssd1306_WriteScreen>
		  break;
 800113c:	e03d      	b.n	80011ba <main+0x22a>
	  case 3:
		  ssd1306_WriteScreen("VIEW", Font_11x18);
 800113e:	4b7e      	ldr	r3, [pc, #504]	; (8001338 <main+0x3a8>)
 8001140:	4889      	ldr	r0, [pc, #548]	; (8001368 <main+0x3d8>)
 8001142:	6819      	ldr	r1, [r3, #0]
 8001144:	685a      	ldr	r2, [r3, #4]
 8001146:	f000 fc2d 	bl	80019a4 <ssd1306_WriteScreen>
		  break;
 800114a:	e036      	b.n	80011ba <main+0x22a>
	  case 31:
		  HAL_I2C_Mem_Read(&hi2c1, I2C_PD_ADDRESS, I2C_PD_REG_VBUS, 2, tempVoltage, 2, HAL_MAX_DELAY);
 800114c:	2310      	movs	r3, #16
 800114e:	b299      	uxth	r1, r3
 8001150:	23d1      	movs	r3, #209	; 0xd1
 8001152:	011b      	lsls	r3, r3, #4
 8001154:	b29a      	uxth	r2, r3
 8001156:	4885      	ldr	r0, [pc, #532]	; (800136c <main+0x3dc>)
 8001158:	2301      	movs	r3, #1
 800115a:	425b      	negs	r3, r3
 800115c:	9302      	str	r3, [sp, #8]
 800115e:	2302      	movs	r3, #2
 8001160:	9301      	str	r3, [sp, #4]
 8001162:	4b83      	ldr	r3, [pc, #524]	; (8001370 <main+0x3e0>)
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	2302      	movs	r3, #2
 8001168:	f002 ffd6 	bl	8004118 <HAL_I2C_Mem_Read>
		  voltage = ((tempVoltage[1]<<8)+tempVoltage[0]) * (float)0.1;
 800116c:	4b80      	ldr	r3, [pc, #512]	; (8001370 <main+0x3e0>)
 800116e:	785b      	ldrb	r3, [r3, #1]
 8001170:	021b      	lsls	r3, r3, #8
 8001172:	4a7f      	ldr	r2, [pc, #508]	; (8001370 <main+0x3e0>)
 8001174:	7812      	ldrb	r2, [r2, #0]
 8001176:	189b      	adds	r3, r3, r2
 8001178:	0018      	movs	r0, r3
 800117a:	f7ff fdd3 	bl	8000d24 <__aeabi_i2f>
 800117e:	1c03      	adds	r3, r0, #0
 8001180:	497c      	ldr	r1, [pc, #496]	; (8001374 <main+0x3e4>)
 8001182:	1c18      	adds	r0, r3, #0
 8001184:	f7ff fada 	bl	800073c <__aeabi_fmul>
 8001188:	1c03      	adds	r3, r0, #0
 800118a:	1c18      	adds	r0, r3, #0
 800118c:	f7ff fdaa 	bl	8000ce4 <__aeabi_f2iz>
 8001190:	0003      	movs	r3, r0
 8001192:	b21a      	sxth	r2, r3
 8001194:	4b78      	ldr	r3, [pc, #480]	; (8001378 <main+0x3e8>)
 8001196:	801a      	strh	r2, [r3, #0]

		  sprintf(string, "%dV", voltage);
 8001198:	4b77      	ldr	r3, [pc, #476]	; (8001378 <main+0x3e8>)
 800119a:	2200      	movs	r2, #0
 800119c:	5e9b      	ldrsh	r3, [r3, r2]
 800119e:	001a      	movs	r2, r3
 80011a0:	4976      	ldr	r1, [pc, #472]	; (800137c <main+0x3ec>)
 80011a2:	4b6f      	ldr	r3, [pc, #444]	; (8001360 <main+0x3d0>)
 80011a4:	0018      	movs	r0, r3
 80011a6:	f005 fd5d 	bl	8006c64 <siprintf>
		  ssd1306_WriteScreen(string, Font_11x18);
 80011aa:	4b63      	ldr	r3, [pc, #396]	; (8001338 <main+0x3a8>)
 80011ac:	486c      	ldr	r0, [pc, #432]	; (8001360 <main+0x3d0>)
 80011ae:	6819      	ldr	r1, [r3, #0]
 80011b0:	685a      	ldr	r2, [r3, #4]
 80011b2:	f000 fbf7 	bl	80019a4 <ssd1306_WriteScreen>
		  break;
 80011b6:	e000      	b.n	80011ba <main+0x22a>
	  default:
		  break;
 80011b8:	46c0      	nop			; (mov r8, r8)
	  }

	  //NEXT STATE
	  if(btn != BTN_NONE){
 80011ba:	4b71      	ldr	r3, [pc, #452]	; (8001380 <main+0x3f0>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b03      	cmp	r3, #3
 80011c0:	d100      	bne.n	80011c4 <main+0x234>
 80011c2:	e735      	b.n	8001030 <main+0xa0>
		  switch (state){
 80011c4:	4b5a      	ldr	r3, [pc, #360]	; (8001330 <main+0x3a0>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	5e9b      	ldrsh	r3, [r3, r2]
 80011ca:	2b1f      	cmp	r3, #31
 80011cc:	d900      	bls.n	80011d0 <main+0x240>
 80011ce:	e0db      	b.n	8001388 <main+0x3f8>
 80011d0:	009a      	lsls	r2, r3, #2
 80011d2:	4b6c      	ldr	r3, [pc, #432]	; (8001384 <main+0x3f4>)
 80011d4:	18d3      	adds	r3, r2, r3
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	469f      	mov	pc, r3
		  case 0:
			  state = 1;
 80011da:	4b55      	ldr	r3, [pc, #340]	; (8001330 <main+0x3a0>)
 80011dc:	2201      	movs	r2, #1
 80011de:	801a      	strh	r2, [r3, #0]
			  break;
 80011e0:	e0d6      	b.n	8001390 <main+0x400>
		  case 1:
			  if(btn == BTN_OK){
 80011e2:	4b67      	ldr	r3, [pc, #412]	; (8001380 <main+0x3f0>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d103      	bne.n	80011f2 <main+0x262>
				  state = 11;
 80011ea:	4b51      	ldr	r3, [pc, #324]	; (8001330 <main+0x3a0>)
 80011ec:	220b      	movs	r2, #11
 80011ee:	801a      	strh	r2, [r3, #0]
			  } else if (btn == BTN_DOWN){
				  state = 3;
			  } else {
				  state = 0;
			  }
			  break;
 80011f0:	e0ce      	b.n	8001390 <main+0x400>
			  } else if (btn == BTN_UP){
 80011f2:	4b63      	ldr	r3, [pc, #396]	; (8001380 <main+0x3f0>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d103      	bne.n	8001202 <main+0x272>
				  state = 2;
 80011fa:	4b4d      	ldr	r3, [pc, #308]	; (8001330 <main+0x3a0>)
 80011fc:	2202      	movs	r2, #2
 80011fe:	801a      	strh	r2, [r3, #0]
			  break;
 8001200:	e0c6      	b.n	8001390 <main+0x400>
			  } else if (btn == BTN_DOWN){
 8001202:	4b5f      	ldr	r3, [pc, #380]	; (8001380 <main+0x3f0>)
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b02      	cmp	r3, #2
 8001208:	d103      	bne.n	8001212 <main+0x282>
				  state = 3;
 800120a:	4b49      	ldr	r3, [pc, #292]	; (8001330 <main+0x3a0>)
 800120c:	2203      	movs	r2, #3
 800120e:	801a      	strh	r2, [r3, #0]
			  break;
 8001210:	e0be      	b.n	8001390 <main+0x400>
				  state = 0;
 8001212:	4b47      	ldr	r3, [pc, #284]	; (8001330 <main+0x3a0>)
 8001214:	2200      	movs	r2, #0
 8001216:	801a      	strh	r2, [r3, #0]
			  break;
 8001218:	e0ba      	b.n	8001390 <main+0x400>
		  case 11:
			  if(btn == BTN_OK){
 800121a:	4b59      	ldr	r3, [pc, #356]	; (8001380 <main+0x3f0>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d103      	bne.n	800122a <main+0x29a>
				  state = 1;
 8001222:	4b43      	ldr	r3, [pc, #268]	; (8001330 <main+0x3a0>)
 8001224:	2201      	movs	r2, #1
 8001226:	801a      	strh	r2, [r3, #0]
			  } else if (btn == BTN_DOWN){
				  duty = duty - 4;
			  } else {
				  state = 0;
			  }
			  break;
 8001228:	e0b2      	b.n	8001390 <main+0x400>
			  } else if (btn == BTN_UP){
 800122a:	4b55      	ldr	r3, [pc, #340]	; (8001380 <main+0x3f0>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d109      	bne.n	8001246 <main+0x2b6>
				  duty = duty + 4;
 8001232:	4b47      	ldr	r3, [pc, #284]	; (8001350 <main+0x3c0>)
 8001234:	2200      	movs	r2, #0
 8001236:	5e9b      	ldrsh	r3, [r3, r2]
 8001238:	b29b      	uxth	r3, r3
 800123a:	3304      	adds	r3, #4
 800123c:	b29b      	uxth	r3, r3
 800123e:	b21a      	sxth	r2, r3
 8001240:	4b43      	ldr	r3, [pc, #268]	; (8001350 <main+0x3c0>)
 8001242:	801a      	strh	r2, [r3, #0]
			  break;
 8001244:	e0a4      	b.n	8001390 <main+0x400>
			  } else if (btn == BTN_DOWN){
 8001246:	4b4e      	ldr	r3, [pc, #312]	; (8001380 <main+0x3f0>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b02      	cmp	r3, #2
 800124c:	d109      	bne.n	8001262 <main+0x2d2>
				  duty = duty - 4;
 800124e:	4b40      	ldr	r3, [pc, #256]	; (8001350 <main+0x3c0>)
 8001250:	2200      	movs	r2, #0
 8001252:	5e9b      	ldrsh	r3, [r3, r2]
 8001254:	b29b      	uxth	r3, r3
 8001256:	3b04      	subs	r3, #4
 8001258:	b29b      	uxth	r3, r3
 800125a:	b21a      	sxth	r2, r3
 800125c:	4b3c      	ldr	r3, [pc, #240]	; (8001350 <main+0x3c0>)
 800125e:	801a      	strh	r2, [r3, #0]
			  break;
 8001260:	e096      	b.n	8001390 <main+0x400>
				  state = 0;
 8001262:	4b33      	ldr	r3, [pc, #204]	; (8001330 <main+0x3a0>)
 8001264:	2200      	movs	r2, #0
 8001266:	801a      	strh	r2, [r3, #0]
			  break;
 8001268:	e092      	b.n	8001390 <main+0x400>
		  case 2:
			  if(btn == BTN_OK){
 800126a:	4b45      	ldr	r3, [pc, #276]	; (8001380 <main+0x3f0>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d103      	bne.n	800127a <main+0x2ea>
				  state = 21;
 8001272:	4b2f      	ldr	r3, [pc, #188]	; (8001330 <main+0x3a0>)
 8001274:	2215      	movs	r2, #21
 8001276:	801a      	strh	r2, [r3, #0]
			  } else if (btn == BTN_DOWN){
				  state = 1;
			  } else {
				  state = 0;
			  }
			  break;
 8001278:	e08a      	b.n	8001390 <main+0x400>
			  } else if (btn == BTN_UP){
 800127a:	4b41      	ldr	r3, [pc, #260]	; (8001380 <main+0x3f0>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d103      	bne.n	800128a <main+0x2fa>
				  state = 3;
 8001282:	4b2b      	ldr	r3, [pc, #172]	; (8001330 <main+0x3a0>)
 8001284:	2203      	movs	r2, #3
 8001286:	801a      	strh	r2, [r3, #0]
			  break;
 8001288:	e082      	b.n	8001390 <main+0x400>
			  } else if (btn == BTN_DOWN){
 800128a:	4b3d      	ldr	r3, [pc, #244]	; (8001380 <main+0x3f0>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b02      	cmp	r3, #2
 8001290:	d103      	bne.n	800129a <main+0x30a>
				  state = 1;
 8001292:	4b27      	ldr	r3, [pc, #156]	; (8001330 <main+0x3a0>)
 8001294:	2201      	movs	r2, #1
 8001296:	801a      	strh	r2, [r3, #0]
			  break;
 8001298:	e07a      	b.n	8001390 <main+0x400>
				  state = 0;
 800129a:	4b25      	ldr	r3, [pc, #148]	; (8001330 <main+0x3a0>)
 800129c:	2200      	movs	r2, #0
 800129e:	801a      	strh	r2, [r3, #0]
			  break;
 80012a0:	e076      	b.n	8001390 <main+0x400>
		  case 3:
			  if(btn == BTN_OK){
 80012a2:	4b37      	ldr	r3, [pc, #220]	; (8001380 <main+0x3f0>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d103      	bne.n	80012b2 <main+0x322>
				  state = 31;
 80012aa:	4b21      	ldr	r3, [pc, #132]	; (8001330 <main+0x3a0>)
 80012ac:	221f      	movs	r2, #31
 80012ae:	801a      	strh	r2, [r3, #0]
			  } else if (btn == BTN_DOWN){
				  state = 2;
			  } else {
				  state = 0;
			  }
			  break;
 80012b0:	e06e      	b.n	8001390 <main+0x400>
			  } else if (btn == BTN_UP){
 80012b2:	4b33      	ldr	r3, [pc, #204]	; (8001380 <main+0x3f0>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d103      	bne.n	80012c2 <main+0x332>
				  state = 1;
 80012ba:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <main+0x3a0>)
 80012bc:	2201      	movs	r2, #1
 80012be:	801a      	strh	r2, [r3, #0]
			  break;
 80012c0:	e066      	b.n	8001390 <main+0x400>
			  } else if (btn == BTN_DOWN){
 80012c2:	4b2f      	ldr	r3, [pc, #188]	; (8001380 <main+0x3f0>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b02      	cmp	r3, #2
 80012c8:	d103      	bne.n	80012d2 <main+0x342>
				  state = 2;
 80012ca:	4b19      	ldr	r3, [pc, #100]	; (8001330 <main+0x3a0>)
 80012cc:	2202      	movs	r2, #2
 80012ce:	801a      	strh	r2, [r3, #0]
			  break;
 80012d0:	e05e      	b.n	8001390 <main+0x400>
				  state = 0;
 80012d2:	4b17      	ldr	r3, [pc, #92]	; (8001330 <main+0x3a0>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	801a      	strh	r2, [r3, #0]
			  break;
 80012d8:	e05a      	b.n	8001390 <main+0x400>
		  case 31:
			  if(btn == BTN_OK){
 80012da:	4b29      	ldr	r3, [pc, #164]	; (8001380 <main+0x3f0>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d103      	bne.n	80012ea <main+0x35a>
				  state = 3;
 80012e2:	4b13      	ldr	r3, [pc, #76]	; (8001330 <main+0x3a0>)
 80012e4:	2203      	movs	r2, #3
 80012e6:	801a      	strh	r2, [r3, #0]
			  } else if (btn == BTN_DOWN){
				  state = 3;
			  } else {
				  state = 0;
			  }
			  break;
 80012e8:	e052      	b.n	8001390 <main+0x400>
			  } else if (btn == BTN_UP){
 80012ea:	4b25      	ldr	r3, [pc, #148]	; (8001380 <main+0x3f0>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d103      	bne.n	80012fa <main+0x36a>
				  state = 3;
 80012f2:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <main+0x3a0>)
 80012f4:	2203      	movs	r2, #3
 80012f6:	801a      	strh	r2, [r3, #0]
			  break;
 80012f8:	e04a      	b.n	8001390 <main+0x400>
			  } else if (btn == BTN_DOWN){
 80012fa:	4b21      	ldr	r3, [pc, #132]	; (8001380 <main+0x3f0>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d103      	bne.n	800130a <main+0x37a>
				  state = 3;
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <main+0x3a0>)
 8001304:	2203      	movs	r2, #3
 8001306:	801a      	strh	r2, [r3, #0]
			  break;
 8001308:	e042      	b.n	8001390 <main+0x400>
				  state = 0;
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <main+0x3a0>)
 800130c:	2200      	movs	r2, #0
 800130e:	801a      	strh	r2, [r3, #0]
			  break;
 8001310:	e03e      	b.n	8001390 <main+0x400>
 8001312:	46c0      	nop			; (mov r8, r8)
 8001314:	20000254 	.word	0x20000254
 8001318:	2000026c 	.word	0x2000026c
 800131c:	3b23d70a 	.word	0x3b23d70a
 8001320:	3a83126f 	.word	0x3a83126f
 8001324:	3f733333 	.word	0x3f733333
 8001328:	200000b0 	.word	0x200000b0
 800132c:	200001bc 	.word	0x200001bc
 8001330:	200002ac 	.word	0x200002ac
 8001334:	080075ac 	.word	0x080075ac
 8001338:	20000020 	.word	0x20000020
 800133c:	0800753c 	.word	0x0800753c
 8001340:	08007548 	.word	0x08007548
 8001344:	20000208 	.word	0x20000208
 8001348:	44c80000 	.word	0x44c80000
 800134c:	44be0000 	.word	0x44be0000
 8001350:	20000016 	.word	0x20000016
 8001354:	40000400 	.word	0x40000400
 8001358:	200002b2 	.word	0x200002b2
 800135c:	08007550 	.word	0x08007550
 8001360:	200002b4 	.word	0x200002b4
 8001364:	08007558 	.word	0x08007558
 8001368:	08007560 	.word	0x08007560
 800136c:	20000114 	.word	0x20000114
 8001370:	200002b0 	.word	0x200002b0
 8001374:	3dcccccd 	.word	0x3dcccccd
 8001378:	200002ae 	.word	0x200002ae
 800137c:	08007568 	.word	0x08007568
 8001380:	20000014 	.word	0x20000014
 8001384:	0800762c 	.word	0x0800762c
		  default:
			  state = 0;
 8001388:	4b03      	ldr	r3, [pc, #12]	; (8001398 <main+0x408>)
 800138a:	2200      	movs	r2, #0
 800138c:	801a      	strh	r2, [r3, #0]
			  break;
 800138e:	46c0      	nop			; (mov r8, r8)
		  }

		  btn = BTN_NONE;
 8001390:	4b02      	ldr	r3, [pc, #8]	; (800139c <main+0x40c>)
 8001392:	2203      	movs	r2, #3
 8001394:	701a      	strb	r2, [r3, #0]
	  switch(state){
 8001396:	e64b      	b.n	8001030 <main+0xa0>
 8001398:	200002ac 	.word	0x200002ac
 800139c:	20000014 	.word	0x20000014

080013a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a0:	b590      	push	{r4, r7, lr}
 80013a2:	b093      	sub	sp, #76	; 0x4c
 80013a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013a6:	2414      	movs	r4, #20
 80013a8:	193b      	adds	r3, r7, r4
 80013aa:	0018      	movs	r0, r3
 80013ac:	2334      	movs	r3, #52	; 0x34
 80013ae:	001a      	movs	r2, r3
 80013b0:	2100      	movs	r1, #0
 80013b2:	f005 fc4e 	bl	8006c52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	0018      	movs	r0, r3
 80013ba:	2310      	movs	r3, #16
 80013bc:	001a      	movs	r2, r3
 80013be:	2100      	movs	r1, #0
 80013c0:	f005 fc47 	bl	8006c52 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013c4:	2380      	movs	r3, #128	; 0x80
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	0018      	movs	r0, r3
 80013ca:	f003 fb4d 	bl	8004a68 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013ce:	193b      	adds	r3, r7, r4
 80013d0:	2202      	movs	r2, #2
 80013d2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013d4:	193b      	adds	r3, r7, r4
 80013d6:	2280      	movs	r2, #128	; 0x80
 80013d8:	0052      	lsls	r2, r2, #1
 80013da:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80013dc:	0021      	movs	r1, r4
 80013de:	187b      	adds	r3, r7, r1
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013e4:	187b      	adds	r3, r7, r1
 80013e6:	2240      	movs	r2, #64	; 0x40
 80013e8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ea:	187b      	adds	r3, r7, r1
 80013ec:	2202      	movs	r2, #2
 80013ee:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013f0:	187b      	adds	r3, r7, r1
 80013f2:	2202      	movs	r2, #2
 80013f4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80013f6:	187b      	adds	r3, r7, r1
 80013f8:	2200      	movs	r2, #0
 80013fa:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80013fc:	187b      	adds	r3, r7, r1
 80013fe:	2208      	movs	r2, #8
 8001400:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001402:	187b      	adds	r3, r7, r1
 8001404:	2280      	movs	r2, #128	; 0x80
 8001406:	0292      	lsls	r2, r2, #10
 8001408:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800140a:	187b      	adds	r3, r7, r1
 800140c:	2280      	movs	r2, #128	; 0x80
 800140e:	0592      	lsls	r2, r2, #22
 8001410:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001412:	187b      	adds	r3, r7, r1
 8001414:	0018      	movs	r0, r3
 8001416:	f003 fb73 	bl	8004b00 <HAL_RCC_OscConfig>
 800141a:	1e03      	subs	r3, r0, #0
 800141c:	d001      	beq.n	8001422 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800141e:	f000 fbd9 	bl	8001bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	2207      	movs	r2, #7
 8001426:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	2202      	movs	r2, #2
 800142c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	2280      	movs	r2, #128	; 0x80
 8001432:	0112      	lsls	r2, r2, #4
 8001434:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001436:	1d3b      	adds	r3, r7, #4
 8001438:	2200      	movs	r2, #0
 800143a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	2101      	movs	r1, #1
 8001440:	0018      	movs	r0, r3
 8001442:	f003 fe6d 	bl	8005120 <HAL_RCC_ClockConfig>
 8001446:	1e03      	subs	r3, r0, #0
 8001448:	d001      	beq.n	800144e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800144a:	f000 fbc3 	bl	8001bd4 <Error_Handler>
  }
}
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	46bd      	mov	sp, r7
 8001452:	b013      	add	sp, #76	; 0x4c
 8001454:	bd90      	pop	{r4, r7, pc}
	...

08001458 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	0018      	movs	r0, r3
 8001462:	230c      	movs	r3, #12
 8001464:	001a      	movs	r2, r3
 8001466:	2100      	movs	r1, #0
 8001468:	f005 fbf3 	bl	8006c52 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800146c:	4b2e      	ldr	r3, [pc, #184]	; (8001528 <MX_ADC1_Init+0xd0>)
 800146e:	4a2f      	ldr	r2, [pc, #188]	; (800152c <MX_ADC1_Init+0xd4>)
 8001470:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001472:	4b2d      	ldr	r3, [pc, #180]	; (8001528 <MX_ADC1_Init+0xd0>)
 8001474:	2280      	movs	r2, #128	; 0x80
 8001476:	05d2      	lsls	r2, r2, #23
 8001478:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800147a:	4b2b      	ldr	r3, [pc, #172]	; (8001528 <MX_ADC1_Init+0xd0>)
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001480:	4b29      	ldr	r3, [pc, #164]	; (8001528 <MX_ADC1_Init+0xd0>)
 8001482:	2200      	movs	r2, #0
 8001484:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001486:	4b28      	ldr	r3, [pc, #160]	; (8001528 <MX_ADC1_Init+0xd0>)
 8001488:	2200      	movs	r2, #0
 800148a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800148c:	4b26      	ldr	r3, [pc, #152]	; (8001528 <MX_ADC1_Init+0xd0>)
 800148e:	2204      	movs	r2, #4
 8001490:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001492:	4b25      	ldr	r3, [pc, #148]	; (8001528 <MX_ADC1_Init+0xd0>)
 8001494:	2200      	movs	r2, #0
 8001496:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001498:	4b23      	ldr	r3, [pc, #140]	; (8001528 <MX_ADC1_Init+0xd0>)
 800149a:	2200      	movs	r2, #0
 800149c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800149e:	4b22      	ldr	r3, [pc, #136]	; (8001528 <MX_ADC1_Init+0xd0>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80014a4:	4b20      	ldr	r3, [pc, #128]	; (8001528 <MX_ADC1_Init+0xd0>)
 80014a6:	2201      	movs	r2, #1
 80014a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014aa:	4b1f      	ldr	r3, [pc, #124]	; (8001528 <MX_ADC1_Init+0xd0>)
 80014ac:	2220      	movs	r2, #32
 80014ae:	2100      	movs	r1, #0
 80014b0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO2;
 80014b2:	4b1d      	ldr	r3, [pc, #116]	; (8001528 <MX_ADC1_Init+0xd0>)
 80014b4:	2280      	movs	r2, #128	; 0x80
 80014b6:	00d2      	lsls	r2, r2, #3
 80014b8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80014ba:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <MX_ADC1_Init+0xd0>)
 80014bc:	2280      	movs	r2, #128	; 0x80
 80014be:	00d2      	lsls	r2, r2, #3
 80014c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014c2:	4b19      	ldr	r3, [pc, #100]	; (8001528 <MX_ADC1_Init+0xd0>)
 80014c4:	222c      	movs	r2, #44	; 0x2c
 80014c6:	2100      	movs	r1, #0
 80014c8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014ca:	4b17      	ldr	r3, [pc, #92]	; (8001528 <MX_ADC1_Init+0xd0>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80014d0:	4b15      	ldr	r3, [pc, #84]	; (8001528 <MX_ADC1_Init+0xd0>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80014d6:	4b14      	ldr	r3, [pc, #80]	; (8001528 <MX_ADC1_Init+0xd0>)
 80014d8:	2200      	movs	r2, #0
 80014da:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80014dc:	4b12      	ldr	r3, [pc, #72]	; (8001528 <MX_ADC1_Init+0xd0>)
 80014de:	223c      	movs	r2, #60	; 0x3c
 80014e0:	2100      	movs	r1, #0
 80014e2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80014e4:	4b10      	ldr	r3, [pc, #64]	; (8001528 <MX_ADC1_Init+0xd0>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014ea:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <MX_ADC1_Init+0xd0>)
 80014ec:	0018      	movs	r0, r3
 80014ee:	f001 fa65 	bl	80029bc <HAL_ADC_Init>
 80014f2:	1e03      	subs	r3, r0, #0
 80014f4:	d001      	beq.n	80014fa <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
 80014f6:	f000 fb6d 	bl	8001bd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	4a0c      	ldr	r2, [pc, #48]	; (8001530 <MX_ADC1_Init+0xd8>)
 80014fe:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	2200      	movs	r2, #0
 8001504:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800150c:	1d3a      	adds	r2, r7, #4
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <MX_ADC1_Init+0xd0>)
 8001510:	0011      	movs	r1, r2
 8001512:	0018      	movs	r0, r3
 8001514:	f001 fda6 	bl	8003064 <HAL_ADC_ConfigChannel>
 8001518:	1e03      	subs	r3, r0, #0
 800151a:	d001      	beq.n	8001520 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800151c:	f000 fb5a 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001520:	46c0      	nop			; (mov r8, r8)
 8001522:	46bd      	mov	sp, r7
 8001524:	b004      	add	sp, #16
 8001526:	bd80      	pop	{r7, pc}
 8001528:	200000b0 	.word	0x200000b0
 800152c:	40012400 	.word	0x40012400
 8001530:	24000200 	.word	0x24000200

08001534 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001538:	4b1b      	ldr	r3, [pc, #108]	; (80015a8 <MX_I2C1_Init+0x74>)
 800153a:	4a1c      	ldr	r2, [pc, #112]	; (80015ac <MX_I2C1_Init+0x78>)
 800153c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800153e:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <MX_I2C1_Init+0x74>)
 8001540:	4a1b      	ldr	r2, [pc, #108]	; (80015b0 <MX_I2C1_Init+0x7c>)
 8001542:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 16;
 8001544:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <MX_I2C1_Init+0x74>)
 8001546:	2210      	movs	r2, #16
 8001548:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800154a:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <MX_I2C1_Init+0x74>)
 800154c:	2201      	movs	r2, #1
 800154e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001550:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <MX_I2C1_Init+0x74>)
 8001552:	2200      	movs	r2, #0
 8001554:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001556:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <MX_I2C1_Init+0x74>)
 8001558:	2200      	movs	r2, #0
 800155a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800155c:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <MX_I2C1_Init+0x74>)
 800155e:	2200      	movs	r2, #0
 8001560:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001562:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <MX_I2C1_Init+0x74>)
 8001564:	2200      	movs	r2, #0
 8001566:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001568:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <MX_I2C1_Init+0x74>)
 800156a:	2200      	movs	r2, #0
 800156c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <MX_I2C1_Init+0x74>)
 8001570:	0018      	movs	r0, r3
 8001572:	f002 fc0d 	bl	8003d90 <HAL_I2C_Init>
 8001576:	1e03      	subs	r3, r0, #0
 8001578:	d001      	beq.n	800157e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800157a:	f000 fb2b 	bl	8001bd4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800157e:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <MX_I2C1_Init+0x74>)
 8001580:	2100      	movs	r1, #0
 8001582:	0018      	movs	r0, r3
 8001584:	f003 f9d8 	bl	8004938 <HAL_I2CEx_ConfigAnalogFilter>
 8001588:	1e03      	subs	r3, r0, #0
 800158a:	d001      	beq.n	8001590 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800158c:	f000 fb22 	bl	8001bd4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001590:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <MX_I2C1_Init+0x74>)
 8001592:	2100      	movs	r1, #0
 8001594:	0018      	movs	r0, r3
 8001596:	f003 fa1b 	bl	80049d0 <HAL_I2CEx_ConfigDigitalFilter>
 800159a:	1e03      	subs	r3, r0, #0
 800159c:	d001      	beq.n	80015a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800159e:	f000 fb19 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000114 	.word	0x20000114
 80015ac:	40005400 	.word	0x40005400
 80015b0:	00707cbb 	.word	0x00707cbb

080015b4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80015b8:	4b1b      	ldr	r3, [pc, #108]	; (8001628 <MX_I2C2_Init+0x74>)
 80015ba:	4a1c      	ldr	r2, [pc, #112]	; (800162c <MX_I2C2_Init+0x78>)
 80015bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00300F38;
 80015be:	4b1a      	ldr	r3, [pc, #104]	; (8001628 <MX_I2C2_Init+0x74>)
 80015c0:	4a1b      	ldr	r2, [pc, #108]	; (8001630 <MX_I2C2_Init+0x7c>)
 80015c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80015c4:	4b18      	ldr	r3, [pc, #96]	; (8001628 <MX_I2C2_Init+0x74>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015ca:	4b17      	ldr	r3, [pc, #92]	; (8001628 <MX_I2C2_Init+0x74>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015d0:	4b15      	ldr	r3, [pc, #84]	; (8001628 <MX_I2C2_Init+0x74>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80015d6:	4b14      	ldr	r3, [pc, #80]	; (8001628 <MX_I2C2_Init+0x74>)
 80015d8:	2200      	movs	r2, #0
 80015da:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <MX_I2C2_Init+0x74>)
 80015de:	2200      	movs	r2, #0
 80015e0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015e2:	4b11      	ldr	r3, [pc, #68]	; (8001628 <MX_I2C2_Init+0x74>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015e8:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <MX_I2C2_Init+0x74>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80015ee:	4b0e      	ldr	r3, [pc, #56]	; (8001628 <MX_I2C2_Init+0x74>)
 80015f0:	0018      	movs	r0, r3
 80015f2:	f002 fbcd 	bl	8003d90 <HAL_I2C_Init>
 80015f6:	1e03      	subs	r3, r0, #0
 80015f8:	d001      	beq.n	80015fe <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80015fa:	f000 faeb 	bl	8001bd4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015fe:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <MX_I2C2_Init+0x74>)
 8001600:	2100      	movs	r1, #0
 8001602:	0018      	movs	r0, r3
 8001604:	f003 f998 	bl	8004938 <HAL_I2CEx_ConfigAnalogFilter>
 8001608:	1e03      	subs	r3, r0, #0
 800160a:	d001      	beq.n	8001610 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800160c:	f000 fae2 	bl	8001bd4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001610:	4b05      	ldr	r3, [pc, #20]	; (8001628 <MX_I2C2_Init+0x74>)
 8001612:	2100      	movs	r1, #0
 8001614:	0018      	movs	r0, r3
 8001616:	f003 f9db 	bl	80049d0 <HAL_I2CEx_ConfigDigitalFilter>
 800161a:	1e03      	subs	r3, r0, #0
 800161c:	d001      	beq.n	8001622 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800161e:	f000 fad9 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001622:	46c0      	nop			; (mov r8, r8)
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000168 	.word	0x20000168
 800162c:	40005800 	.word	0x40005800
 8001630:	00300f38 	.word	0x00300f38

08001634 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b098      	sub	sp, #96	; 0x60
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800163a:	2354      	movs	r3, #84	; 0x54
 800163c:	18fb      	adds	r3, r7, r3
 800163e:	0018      	movs	r0, r3
 8001640:	230c      	movs	r3, #12
 8001642:	001a      	movs	r2, r3
 8001644:	2100      	movs	r1, #0
 8001646:	f005 fb04 	bl	8006c52 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800164a:	2338      	movs	r3, #56	; 0x38
 800164c:	18fb      	adds	r3, r7, r3
 800164e:	0018      	movs	r0, r3
 8001650:	231c      	movs	r3, #28
 8001652:	001a      	movs	r2, r3
 8001654:	2100      	movs	r1, #0
 8001656:	f005 fafc 	bl	8006c52 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	0018      	movs	r0, r3
 800165e:	2334      	movs	r3, #52	; 0x34
 8001660:	001a      	movs	r2, r3
 8001662:	2100      	movs	r1, #0
 8001664:	f005 faf5 	bl	8006c52 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001668:	4b44      	ldr	r3, [pc, #272]	; (800177c <MX_TIM1_Init+0x148>)
 800166a:	4a45      	ldr	r2, [pc, #276]	; (8001780 <MX_TIM1_Init+0x14c>)
 800166c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800166e:	4b43      	ldr	r3, [pc, #268]	; (800177c <MX_TIM1_Init+0x148>)
 8001670:	2200      	movs	r2, #0
 8001672:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001674:	4b41      	ldr	r3, [pc, #260]	; (800177c <MX_TIM1_Init+0x148>)
 8001676:	2200      	movs	r2, #0
 8001678:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 800-1;
 800167a:	4b40      	ldr	r3, [pc, #256]	; (800177c <MX_TIM1_Init+0x148>)
 800167c:	4a41      	ldr	r2, [pc, #260]	; (8001784 <MX_TIM1_Init+0x150>)
 800167e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001680:	4b3e      	ldr	r3, [pc, #248]	; (800177c <MX_TIM1_Init+0x148>)
 8001682:	2200      	movs	r2, #0
 8001684:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001686:	4b3d      	ldr	r3, [pc, #244]	; (800177c <MX_TIM1_Init+0x148>)
 8001688:	2200      	movs	r2, #0
 800168a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168c:	4b3b      	ldr	r3, [pc, #236]	; (800177c <MX_TIM1_Init+0x148>)
 800168e:	2200      	movs	r2, #0
 8001690:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001692:	4b3a      	ldr	r3, [pc, #232]	; (800177c <MX_TIM1_Init+0x148>)
 8001694:	0018      	movs	r0, r3
 8001696:	f004 f8e3 	bl	8005860 <HAL_TIM_PWM_Init>
 800169a:	1e03      	subs	r3, r0, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800169e:	f000 fa99 	bl	8001bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a2:	2154      	movs	r1, #84	; 0x54
 80016a4:	187b      	adds	r3, r7, r1
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 80016aa:	187b      	adds	r3, r7, r1
 80016ac:	2280      	movs	r2, #128	; 0x80
 80016ae:	0392      	lsls	r2, r2, #14
 80016b0:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b2:	187b      	adds	r3, r7, r1
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016b8:	187a      	adds	r2, r7, r1
 80016ba:	4b30      	ldr	r3, [pc, #192]	; (800177c <MX_TIM1_Init+0x148>)
 80016bc:	0011      	movs	r1, r2
 80016be:	0018      	movs	r0, r3
 80016c0:	f005 f974 	bl	80069ac <HAL_TIMEx_MasterConfigSynchronization>
 80016c4:	1e03      	subs	r3, r0, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80016c8:	f000 fa84 	bl	8001bd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016cc:	2138      	movs	r1, #56	; 0x38
 80016ce:	187b      	adds	r3, r7, r1
 80016d0:	2260      	movs	r2, #96	; 0x60
 80016d2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80016d4:	187b      	adds	r3, r7, r1
 80016d6:	2200      	movs	r2, #0
 80016d8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016da:	187b      	adds	r3, r7, r1
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016e0:	187b      	adds	r3, r7, r1
 80016e2:	2200      	movs	r2, #0
 80016e4:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016e6:	187b      	adds	r3, r7, r1
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016ec:	187b      	adds	r3, r7, r1
 80016ee:	2200      	movs	r2, #0
 80016f0:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016f2:	187b      	adds	r3, r7, r1
 80016f4:	2200      	movs	r2, #0
 80016f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016f8:	1879      	adds	r1, r7, r1
 80016fa:	4b20      	ldr	r3, [pc, #128]	; (800177c <MX_TIM1_Init+0x148>)
 80016fc:	2204      	movs	r2, #4
 80016fe:	0018      	movs	r0, r3
 8001700:	f004 fb96 	bl	8005e30 <HAL_TIM_PWM_ConfigChannel>
 8001704:	1e03      	subs	r3, r0, #0
 8001706:	d001      	beq.n	800170c <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8001708:	f000 fa64 	bl	8001bd4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	2200      	movs	r2, #0
 8001716:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	2200      	movs	r2, #0
 8001722:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001724:	1d3b      	adds	r3, r7, #4
 8001726:	2200      	movs	r2, #0
 8001728:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	2280      	movs	r2, #128	; 0x80
 800172e:	0192      	lsls	r2, r2, #6
 8001730:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001732:	1d3b      	adds	r3, r7, #4
 8001734:	2200      	movs	r2, #0
 8001736:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	2200      	movs	r2, #0
 800173c:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800173e:	1d3b      	adds	r3, r7, #4
 8001740:	2200      	movs	r2, #0
 8001742:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001744:	1d3b      	adds	r3, r7, #4
 8001746:	2280      	movs	r2, #128	; 0x80
 8001748:	0492      	lsls	r2, r2, #18
 800174a:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	2200      	movs	r2, #0
 8001750:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001752:	1d3b      	adds	r3, r7, #4
 8001754:	2200      	movs	r2, #0
 8001756:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	2200      	movs	r2, #0
 800175c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800175e:	1d3a      	adds	r2, r7, #4
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <MX_TIM1_Init+0x148>)
 8001762:	0011      	movs	r1, r2
 8001764:	0018      	movs	r0, r3
 8001766:	f005 f983 	bl	8006a70 <HAL_TIMEx_ConfigBreakDeadTime>
 800176a:	1e03      	subs	r3, r0, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 800176e:	f000 fa31 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001772:	46c0      	nop			; (mov r8, r8)
 8001774:	46bd      	mov	sp, r7
 8001776:	b018      	add	sp, #96	; 0x60
 8001778:	bd80      	pop	{r7, pc}
 800177a:	46c0      	nop			; (mov r8, r8)
 800177c:	200001bc 	.word	0x200001bc
 8001780:	40012c00 	.word	0x40012c00
 8001784:	0000031f 	.word	0x0000031f

08001788 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08e      	sub	sp, #56	; 0x38
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800178e:	2328      	movs	r3, #40	; 0x28
 8001790:	18fb      	adds	r3, r7, r3
 8001792:	0018      	movs	r0, r3
 8001794:	2310      	movs	r3, #16
 8001796:	001a      	movs	r2, r3
 8001798:	2100      	movs	r1, #0
 800179a:	f005 fa5a 	bl	8006c52 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800179e:	231c      	movs	r3, #28
 80017a0:	18fb      	adds	r3, r7, r3
 80017a2:	0018      	movs	r0, r3
 80017a4:	230c      	movs	r3, #12
 80017a6:	001a      	movs	r2, r3
 80017a8:	2100      	movs	r1, #0
 80017aa:	f005 fa52 	bl	8006c52 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ae:	003b      	movs	r3, r7
 80017b0:	0018      	movs	r0, r3
 80017b2:	231c      	movs	r3, #28
 80017b4:	001a      	movs	r2, r3
 80017b6:	2100      	movs	r1, #0
 80017b8:	f005 fa4b 	bl	8006c52 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017bc:	4b2f      	ldr	r3, [pc, #188]	; (800187c <MX_TIM3_Init+0xf4>)
 80017be:	4a30      	ldr	r2, [pc, #192]	; (8001880 <MX_TIM3_Init+0xf8>)
 80017c0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80017c2:	4b2e      	ldr	r3, [pc, #184]	; (800187c <MX_TIM3_Init+0xf4>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c8:	4b2c      	ldr	r3, [pc, #176]	; (800187c <MX_TIM3_Init+0xf4>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1600-1;
 80017ce:	4b2b      	ldr	r3, [pc, #172]	; (800187c <MX_TIM3_Init+0xf4>)
 80017d0:	4a2c      	ldr	r2, [pc, #176]	; (8001884 <MX_TIM3_Init+0xfc>)
 80017d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d4:	4b29      	ldr	r3, [pc, #164]	; (800187c <MX_TIM3_Init+0xf4>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017da:	4b28      	ldr	r3, [pc, #160]	; (800187c <MX_TIM3_Init+0xf4>)
 80017dc:	2200      	movs	r2, #0
 80017de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017e0:	4b26      	ldr	r3, [pc, #152]	; (800187c <MX_TIM3_Init+0xf4>)
 80017e2:	0018      	movs	r0, r3
 80017e4:	f003 ff96 	bl	8005714 <HAL_TIM_Base_Init>
 80017e8:	1e03      	subs	r3, r0, #0
 80017ea:	d001      	beq.n	80017f0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80017ec:	f000 f9f2 	bl	8001bd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017f0:	2128      	movs	r1, #40	; 0x28
 80017f2:	187b      	adds	r3, r7, r1
 80017f4:	2280      	movs	r2, #128	; 0x80
 80017f6:	0152      	lsls	r2, r2, #5
 80017f8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017fa:	187a      	adds	r2, r7, r1
 80017fc:	4b1f      	ldr	r3, [pc, #124]	; (800187c <MX_TIM3_Init+0xf4>)
 80017fe:	0011      	movs	r1, r2
 8001800:	0018      	movs	r0, r3
 8001802:	f004 fc15 	bl	8006030 <HAL_TIM_ConfigClockSource>
 8001806:	1e03      	subs	r3, r0, #0
 8001808:	d001      	beq.n	800180e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800180a:	f000 f9e3 	bl	8001bd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800180e:	4b1b      	ldr	r3, [pc, #108]	; (800187c <MX_TIM3_Init+0xf4>)
 8001810:	0018      	movs	r0, r3
 8001812:	f004 f825 	bl	8005860 <HAL_TIM_PWM_Init>
 8001816:	1e03      	subs	r3, r0, #0
 8001818:	d001      	beq.n	800181e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800181a:	f000 f9db 	bl	8001bd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800181e:	211c      	movs	r1, #28
 8001820:	187b      	adds	r3, r7, r1
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001826:	187b      	adds	r3, r7, r1
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800182c:	187a      	adds	r2, r7, r1
 800182e:	4b13      	ldr	r3, [pc, #76]	; (800187c <MX_TIM3_Init+0xf4>)
 8001830:	0011      	movs	r1, r2
 8001832:	0018      	movs	r0, r3
 8001834:	f005 f8ba 	bl	80069ac <HAL_TIMEx_MasterConfigSynchronization>
 8001838:	1e03      	subs	r3, r0, #0
 800183a:	d001      	beq.n	8001840 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800183c:	f000 f9ca 	bl	8001bd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001840:	003b      	movs	r3, r7
 8001842:	2260      	movs	r2, #96	; 0x60
 8001844:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001846:	003b      	movs	r3, r7
 8001848:	2200      	movs	r2, #0
 800184a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800184c:	003b      	movs	r3, r7
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001852:	003b      	movs	r3, r7
 8001854:	2200      	movs	r2, #0
 8001856:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001858:	0039      	movs	r1, r7
 800185a:	4b08      	ldr	r3, [pc, #32]	; (800187c <MX_TIM3_Init+0xf4>)
 800185c:	2204      	movs	r2, #4
 800185e:	0018      	movs	r0, r3
 8001860:	f004 fae6 	bl	8005e30 <HAL_TIM_PWM_ConfigChannel>
 8001864:	1e03      	subs	r3, r0, #0
 8001866:	d001      	beq.n	800186c <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8001868:	f000 f9b4 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800186c:	4b03      	ldr	r3, [pc, #12]	; (800187c <MX_TIM3_Init+0xf4>)
 800186e:	0018      	movs	r0, r3
 8001870:	f000 fb00 	bl	8001e74 <HAL_TIM_MspPostInit>

}
 8001874:	46c0      	nop			; (mov r8, r8)
 8001876:	46bd      	mov	sp, r7
 8001878:	b00e      	add	sp, #56	; 0x38
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20000208 	.word	0x20000208
 8001880:	40000400 	.word	0x40000400
 8001884:	0000063f 	.word	0x0000063f

08001888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001888:	b590      	push	{r4, r7, lr}
 800188a:	b089      	sub	sp, #36	; 0x24
 800188c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188e:	240c      	movs	r4, #12
 8001890:	193b      	adds	r3, r7, r4
 8001892:	0018      	movs	r0, r3
 8001894:	2314      	movs	r3, #20
 8001896:	001a      	movs	r2, r3
 8001898:	2100      	movs	r1, #0
 800189a:	f005 f9da 	bl	8006c52 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800189e:	4b3e      	ldr	r3, [pc, #248]	; (8001998 <MX_GPIO_Init+0x110>)
 80018a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018a2:	4b3d      	ldr	r3, [pc, #244]	; (8001998 <MX_GPIO_Init+0x110>)
 80018a4:	2102      	movs	r1, #2
 80018a6:	430a      	orrs	r2, r1
 80018a8:	635a      	str	r2, [r3, #52]	; 0x34
 80018aa:	4b3b      	ldr	r3, [pc, #236]	; (8001998 <MX_GPIO_Init+0x110>)
 80018ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ae:	2202      	movs	r2, #2
 80018b0:	4013      	ands	r3, r2
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b6:	4b38      	ldr	r3, [pc, #224]	; (8001998 <MX_GPIO_Init+0x110>)
 80018b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ba:	4b37      	ldr	r3, [pc, #220]	; (8001998 <MX_GPIO_Init+0x110>)
 80018bc:	2101      	movs	r1, #1
 80018be:	430a      	orrs	r2, r1
 80018c0:	635a      	str	r2, [r3, #52]	; 0x34
 80018c2:	4b35      	ldr	r3, [pc, #212]	; (8001998 <MX_GPIO_Init+0x110>)
 80018c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c6:	2201      	movs	r2, #1
 80018c8:	4013      	ands	r3, r2
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_TEST_Pin|GPIO_LED_Pin, GPIO_PIN_RESET);
 80018ce:	4933      	ldr	r1, [pc, #204]	; (800199c <MX_GPIO_Init+0x114>)
 80018d0:	23a0      	movs	r3, #160	; 0xa0
 80018d2:	05db      	lsls	r3, r3, #23
 80018d4:	2200      	movs	r2, #0
 80018d6:	0018      	movs	r0, r3
 80018d8:	f002 fa08 	bl	8003cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_TEST_Pin */
  GPIO_InitStruct.Pin = GPIO_TEST_Pin;
 80018dc:	193b      	adds	r3, r7, r4
 80018de:	2204      	movs	r2, #4
 80018e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e2:	193b      	adds	r3, r7, r4
 80018e4:	2201      	movs	r2, #1
 80018e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	193b      	adds	r3, r7, r4
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ee:	193b      	adds	r3, r7, r4
 80018f0:	2203      	movs	r2, #3
 80018f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIO_TEST_GPIO_Port, &GPIO_InitStruct);
 80018f4:	193a      	adds	r2, r7, r4
 80018f6:	23a0      	movs	r3, #160	; 0xa0
 80018f8:	05db      	lsls	r3, r3, #23
 80018fa:	0011      	movs	r1, r2
 80018fc:	0018      	movs	r0, r3
 80018fe:	f002 f891 	bl	8003a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_BTN_OK_Pin */
  GPIO_InitStruct.Pin = GPIO_BTN_OK_Pin;
 8001902:	193b      	adds	r3, r7, r4
 8001904:	2204      	movs	r2, #4
 8001906:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001908:	193b      	adds	r3, r7, r4
 800190a:	2284      	movs	r2, #132	; 0x84
 800190c:	0392      	lsls	r2, r2, #14
 800190e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	193b      	adds	r3, r7, r4
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_BTN_OK_GPIO_Port, &GPIO_InitStruct);
 8001916:	193b      	adds	r3, r7, r4
 8001918:	4a21      	ldr	r2, [pc, #132]	; (80019a0 <MX_GPIO_Init+0x118>)
 800191a:	0019      	movs	r1, r3
 800191c:	0010      	movs	r0, r2
 800191e:	f002 f881 	bl	8003a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_BTN_UP_Pin GPIO_BTN_DOWN_Pin */
  GPIO_InitStruct.Pin = GPIO_BTN_UP_Pin|GPIO_BTN_DOWN_Pin;
 8001922:	193b      	adds	r3, r7, r4
 8001924:	22c0      	movs	r2, #192	; 0xc0
 8001926:	0092      	lsls	r2, r2, #2
 8001928:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800192a:	193b      	adds	r3, r7, r4
 800192c:	2284      	movs	r2, #132	; 0x84
 800192e:	0392      	lsls	r2, r2, #14
 8001930:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	193b      	adds	r3, r7, r4
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001938:	193a      	adds	r2, r7, r4
 800193a:	23a0      	movs	r3, #160	; 0xa0
 800193c:	05db      	lsls	r3, r3, #23
 800193e:	0011      	movs	r1, r2
 8001940:	0018      	movs	r0, r3
 8001942:	f002 f86f 	bl	8003a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_LED_Pin;
 8001946:	0021      	movs	r1, r4
 8001948:	187b      	adds	r3, r7, r1
 800194a:	2280      	movs	r2, #128	; 0x80
 800194c:	0212      	lsls	r2, r2, #8
 800194e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001950:	187b      	adds	r3, r7, r1
 8001952:	2201      	movs	r2, #1
 8001954:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	187b      	adds	r3, r7, r1
 8001958:	2200      	movs	r2, #0
 800195a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195c:	187b      	adds	r3, r7, r1
 800195e:	2200      	movs	r2, #0
 8001960:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 8001962:	187a      	adds	r2, r7, r1
 8001964:	23a0      	movs	r3, #160	; 0xa0
 8001966:	05db      	lsls	r3, r3, #23
 8001968:	0011      	movs	r1, r2
 800196a:	0018      	movs	r0, r3
 800196c:	f002 f85a 	bl	8003a24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8001970:	2200      	movs	r2, #0
 8001972:	2100      	movs	r1, #0
 8001974:	2006      	movs	r0, #6
 8001976:	f002 f82f 	bl	80039d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800197a:	2006      	movs	r0, #6
 800197c:	f002 f841 	bl	8003a02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001980:	2200      	movs	r2, #0
 8001982:	2100      	movs	r1, #0
 8001984:	2007      	movs	r0, #7
 8001986:	f002 f827 	bl	80039d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800198a:	2007      	movs	r0, #7
 800198c:	f002 f839 	bl	8003a02 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001990:	46c0      	nop			; (mov r8, r8)
 8001992:	46bd      	mov	sp, r7
 8001994:	b009      	add	sp, #36	; 0x24
 8001996:	bd90      	pop	{r4, r7, pc}
 8001998:	40021000 	.word	0x40021000
 800199c:	00008004 	.word	0x00008004
 80019a0:	50000400 	.word	0x50000400

080019a4 <ssd1306_WriteScreen>:

/* USER CODE BEGIN 4 */
static void ssd1306_WriteScreen(char* str, FontDef Font){
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	1d3b      	adds	r3, r7, #4
 80019ae:	6019      	str	r1, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
	  ssd1306_Fill(Black);
 80019b2:	2000      	movs	r0, #0
 80019b4:	f000 fc6e 	bl	8002294 <ssd1306_Fill>
	  ssd1306_SetCursor(32, 0);
 80019b8:	2100      	movs	r1, #0
 80019ba:	2020      	movs	r0, #32
 80019bc:	f000 fde2 	bl	8002584 <ssd1306_SetCursor>
	  ssd1306_WriteString(str, Font, White);
 80019c0:	1d3a      	adds	r2, r7, #4
 80019c2:	68f8      	ldr	r0, [r7, #12]
 80019c4:	2301      	movs	r3, #1
 80019c6:	6811      	ldr	r1, [r2, #0]
 80019c8:	6852      	ldr	r2, [r2, #4]
 80019ca:	f000 fdb1 	bl	8002530 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 80019ce:	f000 fc85 	bl	80022dc <ssd1306_UpdateScreen>
}
 80019d2:	46c0      	nop			; (mov r8, r8)
 80019d4:	46bd      	mov	sp, r7
 80019d6:	b004      	add	sp, #16
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	0002      	movs	r2, r0
 80019e4:	1dbb      	adds	r3, r7, #6
 80019e6:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == GPIO_BTN_OK_Pin) {
 80019e8:	1dbb      	adds	r3, r7, #6
 80019ea:	881b      	ldrh	r3, [r3, #0]
 80019ec:	2b04      	cmp	r3, #4
 80019ee:	d103      	bne.n	80019f8 <HAL_GPIO_EXTI_Falling_Callback+0x1c>
		btn = BTN_OK;
 80019f0:	4b0d      	ldr	r3, [pc, #52]	; (8001a28 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	701a      	strb	r2, [r3, #0]
	} else if (GPIO_Pin == GPIO_BTN_UP_Pin){
		btn = BTN_UP;
	} else if (GPIO_Pin == GPIO_BTN_DOWN_Pin) {
		btn = BTN_DOWN;
	}
}
 80019f6:	e012      	b.n	8001a1e <HAL_GPIO_EXTI_Falling_Callback+0x42>
	} else if (GPIO_Pin == GPIO_BTN_UP_Pin){
 80019f8:	1dbb      	adds	r3, r7, #6
 80019fa:	881a      	ldrh	r2, [r3, #0]
 80019fc:	2380      	movs	r3, #128	; 0x80
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d103      	bne.n	8001a0c <HAL_GPIO_EXTI_Falling_Callback+0x30>
		btn = BTN_UP;
 8001a04:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	701a      	strb	r2, [r3, #0]
}
 8001a0a:	e008      	b.n	8001a1e <HAL_GPIO_EXTI_Falling_Callback+0x42>
	} else if (GPIO_Pin == GPIO_BTN_DOWN_Pin) {
 8001a0c:	1dbb      	adds	r3, r7, #6
 8001a0e:	881a      	ldrh	r2, [r3, #0]
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d102      	bne.n	8001a1e <HAL_GPIO_EXTI_Falling_Callback+0x42>
		btn = BTN_DOWN;
 8001a18:	4b03      	ldr	r3, [pc, #12]	; (8001a28 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	701a      	strb	r2, [r3, #0]
}
 8001a1e:	46c0      	nop			; (mov r8, r8)
 8001a20:	46bd      	mov	sp, r7
 8001a22:	b002      	add	sp, #8
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	20000014 	.word	0x20000014

08001a2c <HAL_ADC_ConvCpltCallback>:

int16_t debug_temp = 30;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001a2c:	b590      	push	{r4, r7, lr}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIO_TEST_GPIO_Port, GPIO_TEST_Pin, GPIO_PIN_SET);
 8001a34:	23a0      	movs	r3, #160	; 0xa0
 8001a36:	05db      	lsls	r3, r3, #23
 8001a38:	2201      	movs	r2, #1
 8001a3a:	2104      	movs	r1, #4
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f002 f955 	bl	8003cec <HAL_GPIO_WritePin>
	int16_t adcValue = HAL_ADC_GetValue(hadc);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	0018      	movs	r0, r3
 8001a46:	f001 f9d9 	bl	8002dfc <HAL_ADC_GetValue>
 8001a4a:	0002      	movs	r2, r0
 8001a4c:	210e      	movs	r1, #14
 8001a4e:	187b      	adds	r3, r7, r1
 8001a50:	801a      	strh	r2, [r3, #0]
	temp = FIRFilter_Update(&fir, adcValue);
 8001a52:	187b      	adds	r3, r7, r1
 8001a54:	2200      	movs	r2, #0
 8001a56:	5e9a      	ldrsh	r2, [r3, r2]
 8001a58:	4b51      	ldr	r3, [pc, #324]	; (8001ba0 <HAL_ADC_ConvCpltCallback+0x174>)
 8001a5a:	0011      	movs	r1, r2
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f7ff f9f7 	bl	8000e50 <FIRFilter_Update>
 8001a62:	0003      	movs	r3, r0
 8001a64:	001a      	movs	r2, r3
 8001a66:	4b4f      	ldr	r3, [pc, #316]	; (8001ba4 <HAL_ADC_ConvCpltCallback+0x178>)
 8001a68:	801a      	strh	r2, [r3, #0]

	PI_temp.Ref = debug_temp;
 8001a6a:	4b4f      	ldr	r3, [pc, #316]	; (8001ba8 <HAL_ADC_ConvCpltCallback+0x17c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	5e9b      	ldrsh	r3, [r3, r2]
 8001a70:	0018      	movs	r0, r3
 8001a72:	f7ff f957 	bl	8000d24 <__aeabi_i2f>
 8001a76:	1c02      	adds	r2, r0, #0
 8001a78:	4b4c      	ldr	r3, [pc, #304]	; (8001bac <HAL_ADC_ConvCpltCallback+0x180>)
 8001a7a:	601a      	str	r2, [r3, #0]
	PI_temp.Fdb = temp;
 8001a7c:	4b49      	ldr	r3, [pc, #292]	; (8001ba4 <HAL_ADC_ConvCpltCallback+0x178>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	5e9b      	ldrsh	r3, [r3, r2]
 8001a82:	0018      	movs	r0, r3
 8001a84:	f7ff f94e 	bl	8000d24 <__aeabi_i2f>
 8001a88:	1c02      	adds	r2, r0, #0
 8001a8a:	4b48      	ldr	r3, [pc, #288]	; (8001bac <HAL_ADC_ConvCpltCallback+0x180>)
 8001a8c:	605a      	str	r2, [r3, #4]
	PID_MACRO (PI_temp);
 8001a8e:	4b47      	ldr	r3, [pc, #284]	; (8001bac <HAL_ADC_ConvCpltCallback+0x180>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	4b46      	ldr	r3, [pc, #280]	; (8001bac <HAL_ADC_ConvCpltCallback+0x180>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	1c19      	adds	r1, r3, #0
 8001a98:	1c10      	adds	r0, r2, #0
 8001a9a:	f7fe ff75 	bl	8000988 <__aeabi_fsub>
 8001a9e:	1c03      	adds	r3, r0, #0
 8001aa0:	1c1a      	adds	r2, r3, #0
 8001aa2:	4b42      	ldr	r3, [pc, #264]	; (8001bac <HAL_ADC_ConvCpltCallback+0x180>)
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	4b41      	ldr	r3, [pc, #260]	; (8001bac <HAL_ADC_ConvCpltCallback+0x180>)
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	4b40      	ldr	r3, [pc, #256]	; (8001bac <HAL_ADC_ConvCpltCallback+0x180>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	1c19      	adds	r1, r3, #0
 8001ab0:	1c10      	adds	r0, r2, #0
 8001ab2:	f7fe fe43 	bl	800073c <__aeabi_fmul>
 8001ab6:	1c03      	adds	r3, r0, #0
 8001ab8:	1c1a      	adds	r2, r3, #0
 8001aba:	4b3c      	ldr	r3, [pc, #240]	; (8001bac <HAL_ADC_ConvCpltCallback+0x180>)
 8001abc:	611a      	str	r2, [r3, #16]
 8001abe:	4b3b      	ldr	r3, [pc, #236]	; (8001bac <HAL_ADC_ConvCpltCallback+0x180>)
 8001ac0:	695c      	ldr	r4, [r3, #20]
 8001ac2:	4b3a      	ldr	r3, [pc, #232]	; (8001bac <HAL_ADC_ConvCpltCallback+0x180>)
 8001ac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ac6:	4b39      	ldr	r3, [pc, #228]	; (8001bac <HAL_ADC_ConvCpltCallback+0x180>)
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	1c19      	adds	r1, r3, #0
 8001acc:	1c10      	adds	r0, r2, #0
 8001ace:	f7fe fe35 	bl	800073c <__aeabi_fmul>
 8001ad2:	1c03      	adds	r3, r0, #0
 8001ad4:	1c19      	adds	r1, r3, #0
 8001ad6:	1c20      	adds	r0, r4, #0
 8001ad8:	f7fe fbe2 	bl	80002a0 <__aeabi_fadd>
 8001adc:	1c03      	adds	r3, r0, #0
 8001ade:	1c1c      	adds	r4, r3, #0
 8001ae0:	4b32      	ldr	r3, [pc, #200]	; (8001bac <HAL_ADC_ConvCpltCallback+0x180>)
 8001ae2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ae4:	4b31      	ldr	r3, [pc, #196]	; (8001bac <HAL_ADC_ConvCpltCallback+0x180>)
 8001ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae8:	1c19      	adds	r1, r3, #0
 8001aea:	1c10      	adds	r0, r2, #0
 8001aec:	f7fe fe26 	bl	800073c <__aeabi_fmul>
 8001af0:	1c03      	adds	r3, r0, #0
 8001af2:	1c19      	adds	r1, r3, #0
 8001af4:	1c20      	adds	r0, r4, #0
 8001af6:	f7fe fbd3 	bl	80002a0 <__aeabi_fadd>
 8001afa:	1c03      	adds	r3, r0, #0
 8001afc:	1c1a      	adds	r2, r3, #0
 8001afe:	4b2b      	ldr	r3, [pc, #172]	; (8001bac <HAL_ADC_ConvCpltCallback+0x180>)
 8001b00:	615a      	str	r2, [r3, #20]
 8001b02:	4b2a      	ldr	r3, [pc, #168]	; (8001bac <HAL_ADC_ConvCpltCallback+0x180>)
 8001b04:	691a      	ldr	r2, [r3, #16]
 8001b06:	4b29      	ldr	r3, [pc, #164]	; (8001bac <HAL_ADC_ConvCpltCallback+0x180>)
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	1c19      	adds	r1, r3, #0
 8001b0c:	1c10      	adds	r0, r2, #0
 8001b0e:	f7fe fbc7 	bl	80002a0 <__aeabi_fadd>
 8001b12:	1c03      	adds	r3, r0, #0
 8001b14:	1c1a      	adds	r2, r3, #0
 8001b16:	4b25      	ldr	r3, [pc, #148]	; (8001bac <HAL_ADC_ConvCpltCallback+0x180>)
 8001b18:	61da      	str	r2, [r3, #28]
 8001b1a:	4b24      	ldr	r3, [pc, #144]	; (8001bac <HAL_ADC_ConvCpltCallback+0x180>)
 8001b1c:	69da      	ldr	r2, [r3, #28]
 8001b1e:	4b23      	ldr	r3, [pc, #140]	; (8001bac <HAL_ADC_ConvCpltCallback+0x180>)
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	1c19      	adds	r1, r3, #0
 8001b24:	1c10      	adds	r0, r2, #0
 8001b26:	f7fe fb93 	bl	8000250 <__aeabi_fcmplt>
 8001b2a:	1e03      	subs	r3, r0, #0
 8001b2c:	d002      	beq.n	8001b34 <HAL_ADC_ConvCpltCallback+0x108>
 8001b2e:	4b1f      	ldr	r3, [pc, #124]	; (8001bac <HAL_ADC_ConvCpltCallback+0x180>)
 8001b30:	69da      	ldr	r2, [r3, #28]
 8001b32:	e001      	b.n	8001b38 <HAL_ADC_ConvCpltCallback+0x10c>
 8001b34:	4b1d      	ldr	r3, [pc, #116]	; (8001bac <HAL_ADC_ConvCpltCallback+0x180>)
 8001b36:	6a1a      	ldr	r2, [r3, #32]
 8001b38:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <HAL_ADC_ConvCpltCallback+0x180>)
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	1c19      	adds	r1, r3, #0
 8001b3e:	1c10      	adds	r0, r2, #0
 8001b40:	f7fe fb9a 	bl	8000278 <__aeabi_fcmpgt>
 8001b44:	1e03      	subs	r3, r0, #0
 8001b46:	d00f      	beq.n	8001b68 <HAL_ADC_ConvCpltCallback+0x13c>
 8001b48:	4b18      	ldr	r3, [pc, #96]	; (8001bac <HAL_ADC_ConvCpltCallback+0x180>)
 8001b4a:	69da      	ldr	r2, [r3, #28]
 8001b4c:	4b17      	ldr	r3, [pc, #92]	; (8001bac <HAL_ADC_ConvCpltCallback+0x180>)
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	1c19      	adds	r1, r3, #0
 8001b52:	1c10      	adds	r0, r2, #0
 8001b54:	f7fe fb7c 	bl	8000250 <__aeabi_fcmplt>
 8001b58:	1e03      	subs	r3, r0, #0
 8001b5a:	d002      	beq.n	8001b62 <HAL_ADC_ConvCpltCallback+0x136>
 8001b5c:	4b13      	ldr	r3, [pc, #76]	; (8001bac <HAL_ADC_ConvCpltCallback+0x180>)
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	e004      	b.n	8001b6c <HAL_ADC_ConvCpltCallback+0x140>
 8001b62:	4b12      	ldr	r3, [pc, #72]	; (8001bac <HAL_ADC_ConvCpltCallback+0x180>)
 8001b64:	6a1b      	ldr	r3, [r3, #32]
 8001b66:	e001      	b.n	8001b6c <HAL_ADC_ConvCpltCallback+0x140>
 8001b68:	4b10      	ldr	r3, [pc, #64]	; (8001bac <HAL_ADC_ConvCpltCallback+0x180>)
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6c:	4a0f      	ldr	r2, [pc, #60]	; (8001bac <HAL_ADC_ConvCpltCallback+0x180>)
 8001b6e:	6293      	str	r3, [r2, #40]	; 0x28
 8001b70:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <HAL_ADC_ConvCpltCallback+0x180>)
 8001b72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b74:	4b0d      	ldr	r3, [pc, #52]	; (8001bac <HAL_ADC_ConvCpltCallback+0x180>)
 8001b76:	69db      	ldr	r3, [r3, #28]
 8001b78:	1c19      	adds	r1, r3, #0
 8001b7a:	1c10      	adds	r0, r2, #0
 8001b7c:	f7fe ff04 	bl	8000988 <__aeabi_fsub>
 8001b80:	1c03      	adds	r3, r0, #0
 8001b82:	1c1a      	adds	r2, r3, #0
 8001b84:	4b09      	ldr	r3, [pc, #36]	; (8001bac <HAL_ADC_ConvCpltCallback+0x180>)
 8001b86:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_GPIO_WritePin(GPIO_TEST_GPIO_Port, GPIO_TEST_Pin, GPIO_PIN_RESET);
 8001b88:	23a0      	movs	r3, #160	; 0xa0
 8001b8a:	05db      	lsls	r3, r3, #23
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2104      	movs	r1, #4
 8001b90:	0018      	movs	r0, r3
 8001b92:	f002 f8ab 	bl	8003cec <HAL_GPIO_WritePin>
}
 8001b96:	46c0      	nop			; (mov r8, r8)
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	b005      	add	sp, #20
 8001b9c:	bd90      	pop	{r4, r7, pc}
 8001b9e:	46c0      	nop			; (mov r8, r8)
 8001ba0:	20000254 	.word	0x20000254
 8001ba4:	200002b2 	.word	0x200002b2
 8001ba8:	20000018 	.word	0x20000018
 8001bac:	2000026c 	.word	0x2000026c

08001bb0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a04      	ldr	r2, [pc, #16]	; (8001bd0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d101      	bne.n	8001bc6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001bc2:	f000 fd57 	bl	8002674 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001bc6:	46c0      	nop			; (mov r8, r8)
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	b002      	add	sp, #8
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	46c0      	nop			; (mov r8, r8)
 8001bd0:	40014800 	.word	0x40014800

08001bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd8:	b672      	cpsid	i
}
 8001bda:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bdc:	e7fe      	b.n	8001bdc <Error_Handler+0x8>
	...

08001be0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be6:	4b0f      	ldr	r3, [pc, #60]	; (8001c24 <HAL_MspInit+0x44>)
 8001be8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bea:	4b0e      	ldr	r3, [pc, #56]	; (8001c24 <HAL_MspInit+0x44>)
 8001bec:	2101      	movs	r1, #1
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	641a      	str	r2, [r3, #64]	; 0x40
 8001bf2:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <HAL_MspInit+0x44>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	607b      	str	r3, [r7, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfe:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <HAL_MspInit+0x44>)
 8001c00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c02:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <HAL_MspInit+0x44>)
 8001c04:	2180      	movs	r1, #128	; 0x80
 8001c06:	0549      	lsls	r1, r1, #21
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <HAL_MspInit+0x44>)
 8001c0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c10:	2380      	movs	r3, #128	; 0x80
 8001c12:	055b      	lsls	r3, r3, #21
 8001c14:	4013      	ands	r3, r2
 8001c16:	603b      	str	r3, [r7, #0]
 8001c18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c1a:	46c0      	nop			; (mov r8, r8)
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	b002      	add	sp, #8
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	46c0      	nop			; (mov r8, r8)
 8001c24:	40021000 	.word	0x40021000

08001c28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c28:	b590      	push	{r4, r7, lr}
 8001c2a:	b08b      	sub	sp, #44	; 0x2c
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	2414      	movs	r4, #20
 8001c32:	193b      	adds	r3, r7, r4
 8001c34:	0018      	movs	r0, r3
 8001c36:	2314      	movs	r3, #20
 8001c38:	001a      	movs	r2, r3
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	f005 f809 	bl	8006c52 <memset>
  if(hadc->Instance==ADC1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a1b      	ldr	r2, [pc, #108]	; (8001cb4 <HAL_ADC_MspInit+0x8c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d130      	bne.n	8001cac <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001c4a:	4b1b      	ldr	r3, [pc, #108]	; (8001cb8 <HAL_ADC_MspInit+0x90>)
 8001c4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c4e:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <HAL_ADC_MspInit+0x90>)
 8001c50:	2180      	movs	r1, #128	; 0x80
 8001c52:	0349      	lsls	r1, r1, #13
 8001c54:	430a      	orrs	r2, r1
 8001c56:	641a      	str	r2, [r3, #64]	; 0x40
 8001c58:	4b17      	ldr	r3, [pc, #92]	; (8001cb8 <HAL_ADC_MspInit+0x90>)
 8001c5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c5c:	2380      	movs	r3, #128	; 0x80
 8001c5e:	035b      	lsls	r3, r3, #13
 8001c60:	4013      	ands	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c66:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <HAL_ADC_MspInit+0x90>)
 8001c68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c6a:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <HAL_ADC_MspInit+0x90>)
 8001c6c:	2102      	movs	r1, #2
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	635a      	str	r2, [r3, #52]	; 0x34
 8001c72:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <HAL_ADC_MspInit+0x90>)
 8001c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c76:	2202      	movs	r2, #2
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_NTC_Pin;
 8001c7e:	193b      	adds	r3, r7, r4
 8001c80:	2202      	movs	r2, #2
 8001c82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c84:	193b      	adds	r3, r7, r4
 8001c86:	2203      	movs	r2, #3
 8001c88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	193b      	adds	r3, r7, r4
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ADC_NTC_GPIO_Port, &GPIO_InitStruct);
 8001c90:	193b      	adds	r3, r7, r4
 8001c92:	4a0a      	ldr	r2, [pc, #40]	; (8001cbc <HAL_ADC_MspInit+0x94>)
 8001c94:	0019      	movs	r1, r3
 8001c96:	0010      	movs	r0, r2
 8001c98:	f001 fec4 	bl	8003a24 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	200c      	movs	r0, #12
 8001ca2:	f001 fe99 	bl	80039d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001ca6:	200c      	movs	r0, #12
 8001ca8:	f001 feab 	bl	8003a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001cac:	46c0      	nop			; (mov r8, r8)
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	b00b      	add	sp, #44	; 0x2c
 8001cb2:	bd90      	pop	{r4, r7, pc}
 8001cb4:	40012400 	.word	0x40012400
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	50000400 	.word	0x50000400

08001cc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cc0:	b590      	push	{r4, r7, lr}
 8001cc2:	b093      	sub	sp, #76	; 0x4c
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	2334      	movs	r3, #52	; 0x34
 8001cca:	18fb      	adds	r3, r7, r3
 8001ccc:	0018      	movs	r0, r3
 8001cce:	2314      	movs	r3, #20
 8001cd0:	001a      	movs	r2, r3
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	f004 ffbd 	bl	8006c52 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cd8:	241c      	movs	r4, #28
 8001cda:	193b      	adds	r3, r7, r4
 8001cdc:	0018      	movs	r0, r3
 8001cde:	2318      	movs	r3, #24
 8001ce0:	001a      	movs	r2, r3
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	f004 ffb5 	bl	8006c52 <memset>
  if(hi2c->Instance==I2C1)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a3e      	ldr	r2, [pc, #248]	; (8001de8 <HAL_I2C_MspInit+0x128>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d13f      	bne.n	8001d72 <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001cf2:	193b      	adds	r3, r7, r4
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001cf8:	193b      	adds	r3, r7, r4
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cfe:	193b      	adds	r3, r7, r4
 8001d00:	0018      	movs	r0, r3
 8001d02:	f003 fbe1 	bl	80054c8 <HAL_RCCEx_PeriphCLKConfig>
 8001d06:	1e03      	subs	r3, r0, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001d0a:	f7ff ff63 	bl	8001bd4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0e:	4b37      	ldr	r3, [pc, #220]	; (8001dec <HAL_I2C_MspInit+0x12c>)
 8001d10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d12:	4b36      	ldr	r3, [pc, #216]	; (8001dec <HAL_I2C_MspInit+0x12c>)
 8001d14:	2102      	movs	r1, #2
 8001d16:	430a      	orrs	r2, r1
 8001d18:	635a      	str	r2, [r3, #52]	; 0x34
 8001d1a:	4b34      	ldr	r3, [pc, #208]	; (8001dec <HAL_I2C_MspInit+0x12c>)
 8001d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d1e:	2202      	movs	r2, #2
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
 8001d24:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C_PD_SDA_Pin|I2C_PD_SCL_Pin;
 8001d26:	2134      	movs	r1, #52	; 0x34
 8001d28:	187b      	adds	r3, r7, r1
 8001d2a:	22c0      	movs	r2, #192	; 0xc0
 8001d2c:	0092      	lsls	r2, r2, #2
 8001d2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d30:	187b      	adds	r3, r7, r1
 8001d32:	2212      	movs	r2, #18
 8001d34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	187b      	adds	r3, r7, r1
 8001d38:	2200      	movs	r2, #0
 8001d3a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3c:	187b      	adds	r3, r7, r1
 8001d3e:	2200      	movs	r2, #0
 8001d40:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001d42:	187b      	adds	r3, r7, r1
 8001d44:	2206      	movs	r2, #6
 8001d46:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d48:	187b      	adds	r3, r7, r1
 8001d4a:	4a29      	ldr	r2, [pc, #164]	; (8001df0 <HAL_I2C_MspInit+0x130>)
 8001d4c:	0019      	movs	r1, r3
 8001d4e:	0010      	movs	r0, r2
 8001d50:	f001 fe68 	bl	8003a24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d54:	4b25      	ldr	r3, [pc, #148]	; (8001dec <HAL_I2C_MspInit+0x12c>)
 8001d56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d58:	4b24      	ldr	r3, [pc, #144]	; (8001dec <HAL_I2C_MspInit+0x12c>)
 8001d5a:	2180      	movs	r1, #128	; 0x80
 8001d5c:	0389      	lsls	r1, r1, #14
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d62:	4b22      	ldr	r3, [pc, #136]	; (8001dec <HAL_I2C_MspInit+0x12c>)
 8001d64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d66:	2380      	movs	r3, #128	; 0x80
 8001d68:	039b      	lsls	r3, r3, #14
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001d70:	e036      	b.n	8001de0 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C2)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a1f      	ldr	r2, [pc, #124]	; (8001df4 <HAL_I2C_MspInit+0x134>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d131      	bne.n	8001de0 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d7c:	4b1b      	ldr	r3, [pc, #108]	; (8001dec <HAL_I2C_MspInit+0x12c>)
 8001d7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d80:	4b1a      	ldr	r3, [pc, #104]	; (8001dec <HAL_I2C_MspInit+0x12c>)
 8001d82:	2101      	movs	r1, #1
 8001d84:	430a      	orrs	r2, r1
 8001d86:	635a      	str	r2, [r3, #52]	; 0x34
 8001d88:	4b18      	ldr	r3, [pc, #96]	; (8001dec <HAL_I2C_MspInit+0x12c>)
 8001d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	4013      	ands	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C_OLED_SCL_Pin|I2C_OLED_SDA_Pin;
 8001d94:	2134      	movs	r1, #52	; 0x34
 8001d96:	187b      	adds	r3, r7, r1
 8001d98:	22c0      	movs	r2, #192	; 0xc0
 8001d9a:	0152      	lsls	r2, r2, #5
 8001d9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d9e:	187b      	adds	r3, r7, r1
 8001da0:	2212      	movs	r2, #18
 8001da2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	187b      	adds	r3, r7, r1
 8001da6:	2200      	movs	r2, #0
 8001da8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001daa:	187b      	adds	r3, r7, r1
 8001dac:	2200      	movs	r2, #0
 8001dae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8001db0:	187b      	adds	r3, r7, r1
 8001db2:	2206      	movs	r2, #6
 8001db4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db6:	187a      	adds	r2, r7, r1
 8001db8:	23a0      	movs	r3, #160	; 0xa0
 8001dba:	05db      	lsls	r3, r3, #23
 8001dbc:	0011      	movs	r1, r2
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	f001 fe30 	bl	8003a24 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001dc4:	4b09      	ldr	r3, [pc, #36]	; (8001dec <HAL_I2C_MspInit+0x12c>)
 8001dc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <HAL_I2C_MspInit+0x12c>)
 8001dca:	2180      	movs	r1, #128	; 0x80
 8001dcc:	03c9      	lsls	r1, r1, #15
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	63da      	str	r2, [r3, #60]	; 0x3c
 8001dd2:	4b06      	ldr	r3, [pc, #24]	; (8001dec <HAL_I2C_MspInit+0x12c>)
 8001dd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dd6:	2380      	movs	r3, #128	; 0x80
 8001dd8:	03db      	lsls	r3, r3, #15
 8001dda:	4013      	ands	r3, r2
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	68fb      	ldr	r3, [r7, #12]
}
 8001de0:	46c0      	nop			; (mov r8, r8)
 8001de2:	46bd      	mov	sp, r7
 8001de4:	b013      	add	sp, #76	; 0x4c
 8001de6:	bd90      	pop	{r4, r7, pc}
 8001de8:	40005400 	.word	0x40005400
 8001dec:	40021000 	.word	0x40021000
 8001df0:	50000400 	.word	0x50000400
 8001df4:	40005800 	.word	0x40005800

08001df8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <HAL_TIM_PWM_MspInit+0x38>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d10d      	bne.n	8001e26 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e0e:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e10:	2180      	movs	r1, #128	; 0x80
 8001e12:	0109      	lsls	r1, r1, #4
 8001e14:	430a      	orrs	r2, r1
 8001e16:	641a      	str	r2, [r3, #64]	; 0x40
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_TIM_PWM_MspInit+0x3c>)
 8001e1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e1c:	2380      	movs	r3, #128	; 0x80
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	4013      	ands	r3, r2
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	b004      	add	sp, #16
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	46c0      	nop			; (mov r8, r8)
 8001e30:	40012c00 	.word	0x40012c00
 8001e34:	40021000 	.word	0x40021000

08001e38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a09      	ldr	r2, [pc, #36]	; (8001e6c <HAL_TIM_Base_MspInit+0x34>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d10b      	bne.n	8001e62 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e4a:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <HAL_TIM_Base_MspInit+0x38>)
 8001e4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e4e:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <HAL_TIM_Base_MspInit+0x38>)
 8001e50:	2102      	movs	r1, #2
 8001e52:	430a      	orrs	r2, r1
 8001e54:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e56:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <HAL_TIM_Base_MspInit+0x38>)
 8001e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e62:	46c0      	nop			; (mov r8, r8)
 8001e64:	46bd      	mov	sp, r7
 8001e66:	b004      	add	sp, #16
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	46c0      	nop			; (mov r8, r8)
 8001e6c:	40000400 	.word	0x40000400
 8001e70:	40021000 	.word	0x40021000

08001e74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e74:	b590      	push	{r4, r7, lr}
 8001e76:	b089      	sub	sp, #36	; 0x24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7c:	240c      	movs	r4, #12
 8001e7e:	193b      	adds	r3, r7, r4
 8001e80:	0018      	movs	r0, r3
 8001e82:	2314      	movs	r3, #20
 8001e84:	001a      	movs	r2, r3
 8001e86:	2100      	movs	r1, #0
 8001e88:	f004 fee3 	bl	8006c52 <memset>
  if(htim->Instance==TIM3)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a14      	ldr	r2, [pc, #80]	; (8001ee4 <HAL_TIM_MspPostInit+0x70>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d122      	bne.n	8001edc <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e96:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <HAL_TIM_MspPostInit+0x74>)
 8001e98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e9a:	4b13      	ldr	r3, [pc, #76]	; (8001ee8 <HAL_TIM_MspPostInit+0x74>)
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ea2:	4b11      	ldr	r3, [pc, #68]	; (8001ee8 <HAL_TIM_MspPostInit+0x74>)
 8001ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	60bb      	str	r3, [r7, #8]
 8001eac:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GATE_PWM_Pin;
 8001eae:	0021      	movs	r1, r4
 8001eb0:	187b      	adds	r3, r7, r1
 8001eb2:	2280      	movs	r2, #128	; 0x80
 8001eb4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb6:	187b      	adds	r3, r7, r1
 8001eb8:	2202      	movs	r2, #2
 8001eba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	187b      	adds	r3, r7, r1
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec2:	187b      	adds	r3, r7, r1
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001ec8:	187b      	adds	r3, r7, r1
 8001eca:	2201      	movs	r2, #1
 8001ecc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GATE_PWM_GPIO_Port, &GPIO_InitStruct);
 8001ece:	187a      	adds	r2, r7, r1
 8001ed0:	23a0      	movs	r3, #160	; 0xa0
 8001ed2:	05db      	lsls	r3, r3, #23
 8001ed4:	0011      	movs	r1, r2
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f001 fda4 	bl	8003a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001edc:	46c0      	nop			; (mov r8, r8)
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	b009      	add	sp, #36	; 0x24
 8001ee2:	bd90      	pop	{r4, r7, pc}
 8001ee4:	40000400 	.word	0x40000400
 8001ee8:	40021000 	.word	0x40021000

08001eec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eec:	b5b0      	push	{r4, r5, r7, lr}
 8001eee:	b08c      	sub	sp, #48	; 0x30
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001ef4:	232b      	movs	r3, #43	; 0x2b
 8001ef6:	18fb      	adds	r3, r7, r3
 8001ef8:	2200      	movs	r2, #0
 8001efa:	701a      	strb	r2, [r3, #0]

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001efc:	4b38      	ldr	r3, [pc, #224]	; (8001fe0 <HAL_InitTick+0xf4>)
 8001efe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f00:	4b37      	ldr	r3, [pc, #220]	; (8001fe0 <HAL_InitTick+0xf4>)
 8001f02:	2180      	movs	r1, #128	; 0x80
 8001f04:	02c9      	lsls	r1, r1, #11
 8001f06:	430a      	orrs	r2, r1
 8001f08:	641a      	str	r2, [r3, #64]	; 0x40
 8001f0a:	4b35      	ldr	r3, [pc, #212]	; (8001fe0 <HAL_InitTick+0xf4>)
 8001f0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f0e:	2380      	movs	r3, #128	; 0x80
 8001f10:	02db      	lsls	r3, r3, #11
 8001f12:	4013      	ands	r3, r2
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f18:	230c      	movs	r3, #12
 8001f1a:	18fa      	adds	r2, r7, r3
 8001f1c:	2410      	movs	r4, #16
 8001f1e:	193b      	adds	r3, r7, r4
 8001f20:	0011      	movs	r1, r2
 8001f22:	0018      	movs	r0, r3
 8001f24:	f003 faa6 	bl	8005474 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001f28:	193b      	adds	r3, r7, r4
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM17 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d104      	bne.n	8001f3e <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001f34:	f003 fa88 	bl	8005448 <HAL_RCC_GetPCLK1Freq>
 8001f38:	0003      	movs	r3, r0
 8001f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f3c:	e004      	b.n	8001f48 <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001f3e:	f003 fa83 	bl	8005448 <HAL_RCC_GetPCLK1Freq>
 8001f42:	0003      	movs	r3, r0
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f4a:	4926      	ldr	r1, [pc, #152]	; (8001fe4 <HAL_InitTick+0xf8>)
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	f7fe f8e1 	bl	8000114 <__udivsi3>
 8001f52:	0003      	movs	r3, r0
 8001f54:	3b01      	subs	r3, #1
 8001f56:	623b      	str	r3, [r7, #32]

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8001f58:	4b23      	ldr	r3, [pc, #140]	; (8001fe8 <HAL_InitTick+0xfc>)
 8001f5a:	4a24      	ldr	r2, [pc, #144]	; (8001fec <HAL_InitTick+0x100>)
 8001f5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001f5e:	4b22      	ldr	r3, [pc, #136]	; (8001fe8 <HAL_InitTick+0xfc>)
 8001f60:	4a23      	ldr	r2, [pc, #140]	; (8001ff0 <HAL_InitTick+0x104>)
 8001f62:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001f64:	4b20      	ldr	r3, [pc, #128]	; (8001fe8 <HAL_InitTick+0xfc>)
 8001f66:	6a3a      	ldr	r2, [r7, #32]
 8001f68:	605a      	str	r2, [r3, #4]
  htim17.Init.ClockDivision = 0;
 8001f6a:	4b1f      	ldr	r3, [pc, #124]	; (8001fe8 <HAL_InitTick+0xfc>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f70:	4b1d      	ldr	r3, [pc, #116]	; (8001fe8 <HAL_InitTick+0xfc>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f76:	4b1c      	ldr	r3, [pc, #112]	; (8001fe8 <HAL_InitTick+0xfc>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 8001f7c:	252b      	movs	r5, #43	; 0x2b
 8001f7e:	197c      	adds	r4, r7, r5
 8001f80:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <HAL_InitTick+0xfc>)
 8001f82:	0018      	movs	r0, r3
 8001f84:	f003 fbc6 	bl	8005714 <HAL_TIM_Base_Init>
 8001f88:	0003      	movs	r3, r0
 8001f8a:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8001f8c:	197b      	adds	r3, r7, r5
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d11e      	bne.n	8001fd2 <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8001f94:	197c      	adds	r4, r7, r5
 8001f96:	4b14      	ldr	r3, [pc, #80]	; (8001fe8 <HAL_InitTick+0xfc>)
 8001f98:	0018      	movs	r0, r3
 8001f9a:	f003 fc13 	bl	80057c4 <HAL_TIM_Base_Start_IT>
 8001f9e:	0003      	movs	r3, r0
 8001fa0:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8001fa2:	197b      	adds	r3, r7, r5
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d113      	bne.n	8001fd2 <HAL_InitTick+0xe6>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001faa:	2016      	movs	r0, #22
 8001fac:	f001 fd29 	bl	8003a02 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b03      	cmp	r3, #3
 8001fb4:	d809      	bhi.n	8001fca <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	0019      	movs	r1, r3
 8001fbc:	2016      	movs	r0, #22
 8001fbe:	f001 fd0b 	bl	80039d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fc2:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <HAL_InitTick+0x108>)
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	e003      	b.n	8001fd2 <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 8001fca:	232b      	movs	r3, #43	; 0x2b
 8001fcc:	18fb      	adds	r3, r7, r3
 8001fce:	2201      	movs	r2, #1
 8001fd0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8001fd2:	232b      	movs	r3, #43	; 0x2b
 8001fd4:	18fb      	adds	r3, r7, r3
 8001fd6:	781b      	ldrb	r3, [r3, #0]
}
 8001fd8:	0018      	movs	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	b00c      	add	sp, #48	; 0x30
 8001fde:	bdb0      	pop	{r4, r5, r7, pc}
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	000f4240 	.word	0x000f4240
 8001fe8:	200002c0 	.word	0x200002c0
 8001fec:	40014800 	.word	0x40014800
 8001ff0:	000003e7 	.word	0x000003e7
 8001ff4:	20000028 	.word	0x20000028

08001ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ffc:	e7fe      	b.n	8001ffc <NMI_Handler+0x4>

08001ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002002:	e7fe      	b.n	8002002 <HardFault_Handler+0x4>

08002004 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002008:	46c0      	nop			; (mov r8, r8)
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002012:	46c0      	nop			; (mov r8, r8)
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800201c:	46c0      	nop			; (mov r8, r8)
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_BTN_OK_Pin);
 8002026:	2004      	movs	r0, #4
 8002028:	f001 fe7e 	bl	8003d28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800202c:	46c0      	nop			; (mov r8, r8)
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_BTN_UP_Pin);
 8002036:	2380      	movs	r3, #128	; 0x80
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	0018      	movs	r0, r3
 800203c:	f001 fe74 	bl	8003d28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_BTN_DOWN_Pin);
 8002040:	2380      	movs	r3, #128	; 0x80
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	0018      	movs	r0, r3
 8002046:	f001 fe6f 	bl	8003d28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002054:	4b03      	ldr	r3, [pc, #12]	; (8002064 <ADC1_IRQHandler+0x14>)
 8002056:	0018      	movs	r0, r3
 8002058:	f000 fedc 	bl	8002e14 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800205c:	46c0      	nop			; (mov r8, r8)
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	200000b0 	.word	0x200000b0

08002068 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800206c:	4b03      	ldr	r3, [pc, #12]	; (800207c <TIM17_IRQHandler+0x14>)
 800206e:	0018      	movs	r0, r3
 8002070:	f003 fdac 	bl	8005bcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8002074:	46c0      	nop			; (mov r8, r8)
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	46c0      	nop			; (mov r8, r8)
 800207c:	200002c0 	.word	0x200002c0

08002080 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002088:	4a14      	ldr	r2, [pc, #80]	; (80020dc <_sbrk+0x5c>)
 800208a:	4b15      	ldr	r3, [pc, #84]	; (80020e0 <_sbrk+0x60>)
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002094:	4b13      	ldr	r3, [pc, #76]	; (80020e4 <_sbrk+0x64>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d102      	bne.n	80020a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800209c:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <_sbrk+0x64>)
 800209e:	4a12      	ldr	r2, [pc, #72]	; (80020e8 <_sbrk+0x68>)
 80020a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020a2:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <_sbrk+0x64>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	18d3      	adds	r3, r2, r3
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d207      	bcs.n	80020c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020b0:	f004 fd9c 	bl	8006bec <__errno>
 80020b4:	0003      	movs	r3, r0
 80020b6:	220c      	movs	r2, #12
 80020b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ba:	2301      	movs	r3, #1
 80020bc:	425b      	negs	r3, r3
 80020be:	e009      	b.n	80020d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020c0:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <_sbrk+0x64>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020c6:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <_sbrk+0x64>)
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	18d2      	adds	r2, r2, r3
 80020ce:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <_sbrk+0x64>)
 80020d0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80020d2:	68fb      	ldr	r3, [r7, #12]
}
 80020d4:	0018      	movs	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	b006      	add	sp, #24
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	20002000 	.word	0x20002000
 80020e0:	00000400 	.word	0x00000400
 80020e4:	2000030c 	.word	0x2000030c
 80020e8:	20000730 	.word	0x20000730

080020ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020f0:	46c0      	nop			; (mov r8, r8)
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
	...

080020f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80020f8:	480d      	ldr	r0, [pc, #52]	; (8002130 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80020fa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80020fc:	f7ff fff6 	bl	80020ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002100:	480c      	ldr	r0, [pc, #48]	; (8002134 <LoopForever+0x6>)
  ldr r1, =_edata
 8002102:	490d      	ldr	r1, [pc, #52]	; (8002138 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002104:	4a0d      	ldr	r2, [pc, #52]	; (800213c <LoopForever+0xe>)
  movs r3, #0
 8002106:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002108:	e002      	b.n	8002110 <LoopCopyDataInit>

0800210a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800210a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800210c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800210e:	3304      	adds	r3, #4

08002110 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002110:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002112:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002114:	d3f9      	bcc.n	800210a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002116:	4a0a      	ldr	r2, [pc, #40]	; (8002140 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002118:	4c0a      	ldr	r4, [pc, #40]	; (8002144 <LoopForever+0x16>)
  movs r3, #0
 800211a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800211c:	e001      	b.n	8002122 <LoopFillZerobss>

0800211e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800211e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002120:	3204      	adds	r2, #4

08002122 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002122:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002124:	d3fb      	bcc.n	800211e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002126:	f004 fd67 	bl	8006bf8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800212a:	f7fe ff31 	bl	8000f90 <main>

0800212e <LoopForever>:

LoopForever:
  b LoopForever
 800212e:	e7fe      	b.n	800212e <LoopForever>
  ldr   r0, =_estack
 8002130:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002134:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002138:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 800213c:	080084f8 	.word	0x080084f8
  ldr r2, =_sbss
 8002140:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8002144:	2000072c 	.word	0x2000072c

08002148 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002148:	e7fe      	b.n	8002148 <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>

0800214a <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800214a:	b580      	push	{r7, lr}
 800214c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002154:	b580      	push	{r7, lr}
 8002156:	b086      	sub	sp, #24
 8002158:	af04      	add	r7, sp, #16
 800215a:	0002      	movs	r2, r0
 800215c:	1dfb      	adds	r3, r7, #7
 800215e:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002160:	4808      	ldr	r0, [pc, #32]	; (8002184 <ssd1306_WriteCommand+0x30>)
 8002162:	2301      	movs	r3, #1
 8002164:	425b      	negs	r3, r3
 8002166:	9302      	str	r3, [sp, #8]
 8002168:	2301      	movs	r3, #1
 800216a:	9301      	str	r3, [sp, #4]
 800216c:	1dfb      	adds	r3, r7, #7
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	2301      	movs	r3, #1
 8002172:	2200      	movs	r2, #0
 8002174:	2178      	movs	r1, #120	; 0x78
 8002176:	f001 fea1 	bl	8003ebc <HAL_I2C_Mem_Write>
}
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	46bd      	mov	sp, r7
 800217e:	b002      	add	sp, #8
 8002180:	bd80      	pop	{r7, pc}
 8002182:	46c0      	nop			; (mov r8, r8)
 8002184:	20000168 	.word	0x20000168

08002188 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af04      	add	r7, sp, #16
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	b29b      	uxth	r3, r3
 8002196:	4808      	ldr	r0, [pc, #32]	; (80021b8 <ssd1306_WriteData+0x30>)
 8002198:	2201      	movs	r2, #1
 800219a:	4252      	negs	r2, r2
 800219c:	9202      	str	r2, [sp, #8]
 800219e:	9301      	str	r3, [sp, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	2301      	movs	r3, #1
 80021a6:	2240      	movs	r2, #64	; 0x40
 80021a8:	2178      	movs	r1, #120	; 0x78
 80021aa:	f001 fe87 	bl	8003ebc <HAL_I2C_Mem_Write>
}
 80021ae:	46c0      	nop			; (mov r8, r8)
 80021b0:	46bd      	mov	sp, r7
 80021b2:	b002      	add	sp, #8
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	46c0      	nop			; (mov r8, r8)
 80021b8:	20000168 	.word	0x20000168

080021bc <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80021c0:	f7ff ffc3 	bl	800214a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80021c4:	2064      	movs	r0, #100	; 0x64
 80021c6:	f000 fa71 	bl	80026ac <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80021ca:	2000      	movs	r0, #0
 80021cc:	f000 fa0c 	bl	80025e8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80021d0:	2020      	movs	r0, #32
 80021d2:	f7ff ffbf 	bl	8002154 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80021d6:	2000      	movs	r0, #0
 80021d8:	f7ff ffbc 	bl	8002154 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80021dc:	20b0      	movs	r0, #176	; 0xb0
 80021de:	f7ff ffb9 	bl	8002154 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 80021e2:	20c0      	movs	r0, #192	; 0xc0
 80021e4:	f7ff ffb6 	bl	8002154 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80021e8:	2000      	movs	r0, #0
 80021ea:	f7ff ffb3 	bl	8002154 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80021ee:	2010      	movs	r0, #16
 80021f0:	f7ff ffb0 	bl	8002154 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80021f4:	2040      	movs	r0, #64	; 0x40
 80021f6:	f7ff ffad 	bl	8002154 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80021fa:	20ff      	movs	r0, #255	; 0xff
 80021fc:	f000 f9dc 	bl	80025b8 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
 8002200:	20a0      	movs	r0, #160	; 0xa0
 8002202:	f7ff ffa7 	bl	8002154 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002206:	20a6      	movs	r0, #166	; 0xa6
 8002208:	f7ff ffa4 	bl	8002154 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800220c:	20a8      	movs	r0, #168	; 0xa8
 800220e:	f7ff ffa1 	bl	8002154 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002212:	203f      	movs	r0, #63	; 0x3f
 8002214:	f7ff ff9e 	bl	8002154 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002218:	20a4      	movs	r0, #164	; 0xa4
 800221a:	f7ff ff9b 	bl	8002154 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800221e:	20d3      	movs	r0, #211	; 0xd3
 8002220:	f7ff ff98 	bl	8002154 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002224:	2000      	movs	r0, #0
 8002226:	f7ff ff95 	bl	8002154 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800222a:	20d5      	movs	r0, #213	; 0xd5
 800222c:	f7ff ff92 	bl	8002154 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002230:	20f0      	movs	r0, #240	; 0xf0
 8002232:	f7ff ff8f 	bl	8002154 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002236:	20d9      	movs	r0, #217	; 0xd9
 8002238:	f7ff ff8c 	bl	8002154 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800223c:	2022      	movs	r0, #34	; 0x22
 800223e:	f7ff ff89 	bl	8002154 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002242:	20da      	movs	r0, #218	; 0xda
 8002244:	f7ff ff86 	bl	8002154 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x02);
 8002248:	2002      	movs	r0, #2
 800224a:	f7ff ff83 	bl	8002154 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800224e:	20db      	movs	r0, #219	; 0xdb
 8002250:	f7ff ff80 	bl	8002154 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002254:	2020      	movs	r0, #32
 8002256:	f7ff ff7d 	bl	8002154 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800225a:	208d      	movs	r0, #141	; 0x8d
 800225c:	f7ff ff7a 	bl	8002154 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002260:	2014      	movs	r0, #20
 8002262:	f7ff ff77 	bl	8002154 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002266:	2001      	movs	r0, #1
 8002268:	f000 f9be 	bl	80025e8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800226c:	2000      	movs	r0, #0
 800226e:	f000 f811 	bl	8002294 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002272:	f000 f833 	bl	80022dc <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002276:	4b06      	ldr	r3, [pc, #24]	; (8002290 <ssd1306_Init+0xd4>)
 8002278:	2200      	movs	r2, #0
 800227a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800227c:	4b04      	ldr	r3, [pc, #16]	; (8002290 <ssd1306_Init+0xd4>)
 800227e:	2200      	movs	r2, #0
 8002280:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002282:	4b03      	ldr	r3, [pc, #12]	; (8002290 <ssd1306_Init+0xd4>)
 8002284:	2201      	movs	r2, #1
 8002286:	711a      	strb	r2, [r3, #4]
}
 8002288:	46c0      	nop			; (mov r8, r8)
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	20000710 	.word	0x20000710

08002294 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	0002      	movs	r2, r0
 800229c:	1dfb      	adds	r3, r7, #7
 800229e:	701a      	strb	r2, [r3, #0]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80022a0:	2300      	movs	r3, #0
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	e00e      	b.n	80022c4 <ssd1306_Fill+0x30>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80022a6:	1dfb      	adds	r3, r7, #7
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <ssd1306_Fill+0x1e>
 80022ae:	2100      	movs	r1, #0
 80022b0:	e000      	b.n	80022b4 <ssd1306_Fill+0x20>
 80022b2:	21ff      	movs	r1, #255	; 0xff
 80022b4:	4a08      	ldr	r2, [pc, #32]	; (80022d8 <ssd1306_Fill+0x44>)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	18d3      	adds	r3, r2, r3
 80022ba:	1c0a      	adds	r2, r1, #0
 80022bc:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	3301      	adds	r3, #1
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	2380      	movs	r3, #128	; 0x80
 80022c8:	00db      	lsls	r3, r3, #3
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d3eb      	bcc.n	80022a6 <ssd1306_Fill+0x12>
    }
}
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	46c0      	nop			; (mov r8, r8)
 80022d2:	46bd      	mov	sp, r7
 80022d4:	b004      	add	sp, #16
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20000310 	.word	0x20000310

080022dc <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80022e2:	1dfb      	adds	r3, r7, #7
 80022e4:	2200      	movs	r2, #0
 80022e6:	701a      	strb	r2, [r3, #0]
 80022e8:	e01a      	b.n	8002320 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80022ea:	1dfb      	adds	r3, r7, #7
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	3b50      	subs	r3, #80	; 0x50
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	0018      	movs	r0, r3
 80022f4:	f7ff ff2e 	bl	8002154 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80022f8:	2000      	movs	r0, #0
 80022fa:	f7ff ff2b 	bl	8002154 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80022fe:	2010      	movs	r0, #16
 8002300:	f7ff ff28 	bl	8002154 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002304:	1dfb      	adds	r3, r7, #7
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	01da      	lsls	r2, r3, #7
 800230a:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <ssd1306_UpdateScreen+0x58>)
 800230c:	18d3      	adds	r3, r2, r3
 800230e:	2180      	movs	r1, #128	; 0x80
 8002310:	0018      	movs	r0, r3
 8002312:	f7ff ff39 	bl	8002188 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002316:	1dfb      	adds	r3, r7, #7
 8002318:	781a      	ldrb	r2, [r3, #0]
 800231a:	1dfb      	adds	r3, r7, #7
 800231c:	3201      	adds	r2, #1
 800231e:	701a      	strb	r2, [r3, #0]
 8002320:	1dfb      	adds	r3, r7, #7
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b07      	cmp	r3, #7
 8002326:	d9e0      	bls.n	80022ea <ssd1306_UpdateScreen+0xe>
    }
}
 8002328:	46c0      	nop			; (mov r8, r8)
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	46bd      	mov	sp, r7
 800232e:	b002      	add	sp, #8
 8002330:	bd80      	pop	{r7, pc}
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	20000310 	.word	0x20000310

08002338 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002338:	b590      	push	{r4, r7, lr}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	0004      	movs	r4, r0
 8002340:	0008      	movs	r0, r1
 8002342:	0011      	movs	r1, r2
 8002344:	1dfb      	adds	r3, r7, #7
 8002346:	1c22      	adds	r2, r4, #0
 8002348:	701a      	strb	r2, [r3, #0]
 800234a:	1dbb      	adds	r3, r7, #6
 800234c:	1c02      	adds	r2, r0, #0
 800234e:	701a      	strb	r2, [r3, #0]
 8002350:	1d7b      	adds	r3, r7, #5
 8002352:	1c0a      	adds	r2, r1, #0
 8002354:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002356:	1dfb      	adds	r3, r7, #7
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	b25b      	sxtb	r3, r3
 800235c:	2b00      	cmp	r3, #0
 800235e:	db47      	blt.n	80023f0 <ssd1306_DrawPixel+0xb8>
 8002360:	1dbb      	adds	r3, r7, #6
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b3f      	cmp	r3, #63	; 0x3f
 8002366:	d843      	bhi.n	80023f0 <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002368:	1d7b      	adds	r3, r7, #5
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d11e      	bne.n	80023ae <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002370:	1dfb      	adds	r3, r7, #7
 8002372:	781a      	ldrb	r2, [r3, #0]
 8002374:	1dbb      	adds	r3, r7, #6
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	08db      	lsrs	r3, r3, #3
 800237a:	b2d8      	uxtb	r0, r3
 800237c:	0003      	movs	r3, r0
 800237e:	01db      	lsls	r3, r3, #7
 8002380:	18d3      	adds	r3, r2, r3
 8002382:	4a1d      	ldr	r2, [pc, #116]	; (80023f8 <ssd1306_DrawPixel+0xc0>)
 8002384:	5cd3      	ldrb	r3, [r2, r3]
 8002386:	b25a      	sxtb	r2, r3
 8002388:	1dbb      	adds	r3, r7, #6
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2107      	movs	r1, #7
 800238e:	400b      	ands	r3, r1
 8002390:	2101      	movs	r1, #1
 8002392:	4099      	lsls	r1, r3
 8002394:	000b      	movs	r3, r1
 8002396:	b25b      	sxtb	r3, r3
 8002398:	4313      	orrs	r3, r2
 800239a:	b259      	sxtb	r1, r3
 800239c:	1dfb      	adds	r3, r7, #7
 800239e:	781a      	ldrb	r2, [r3, #0]
 80023a0:	0003      	movs	r3, r0
 80023a2:	01db      	lsls	r3, r3, #7
 80023a4:	18d3      	adds	r3, r2, r3
 80023a6:	b2c9      	uxtb	r1, r1
 80023a8:	4a13      	ldr	r2, [pc, #76]	; (80023f8 <ssd1306_DrawPixel+0xc0>)
 80023aa:	54d1      	strb	r1, [r2, r3]
 80023ac:	e021      	b.n	80023f2 <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80023ae:	1dfb      	adds	r3, r7, #7
 80023b0:	781a      	ldrb	r2, [r3, #0]
 80023b2:	1dbb      	adds	r3, r7, #6
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	08db      	lsrs	r3, r3, #3
 80023b8:	b2d8      	uxtb	r0, r3
 80023ba:	0003      	movs	r3, r0
 80023bc:	01db      	lsls	r3, r3, #7
 80023be:	18d3      	adds	r3, r2, r3
 80023c0:	4a0d      	ldr	r2, [pc, #52]	; (80023f8 <ssd1306_DrawPixel+0xc0>)
 80023c2:	5cd3      	ldrb	r3, [r2, r3]
 80023c4:	b25b      	sxtb	r3, r3
 80023c6:	1dba      	adds	r2, r7, #6
 80023c8:	7812      	ldrb	r2, [r2, #0]
 80023ca:	2107      	movs	r1, #7
 80023cc:	400a      	ands	r2, r1
 80023ce:	2101      	movs	r1, #1
 80023d0:	4091      	lsls	r1, r2
 80023d2:	000a      	movs	r2, r1
 80023d4:	b252      	sxtb	r2, r2
 80023d6:	43d2      	mvns	r2, r2
 80023d8:	b252      	sxtb	r2, r2
 80023da:	4013      	ands	r3, r2
 80023dc:	b259      	sxtb	r1, r3
 80023de:	1dfb      	adds	r3, r7, #7
 80023e0:	781a      	ldrb	r2, [r3, #0]
 80023e2:	0003      	movs	r3, r0
 80023e4:	01db      	lsls	r3, r3, #7
 80023e6:	18d3      	adds	r3, r2, r3
 80023e8:	b2c9      	uxtb	r1, r1
 80023ea:	4a03      	ldr	r2, [pc, #12]	; (80023f8 <ssd1306_DrawPixel+0xc0>)
 80023ec:	54d1      	strb	r1, [r2, r3]
 80023ee:	e000      	b.n	80023f2 <ssd1306_DrawPixel+0xba>
        return;
 80023f0:	46c0      	nop			; (mov r8, r8)
    }
}
 80023f2:	46bd      	mov	sp, r7
 80023f4:	b003      	add	sp, #12
 80023f6:	bd90      	pop	{r4, r7, pc}
 80023f8:	20000310 	.word	0x20000310

080023fc <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80023fc:	b590      	push	{r4, r7, lr}
 80023fe:	b089      	sub	sp, #36	; 0x24
 8002400:	af00      	add	r7, sp, #0
 8002402:	0004      	movs	r4, r0
 8002404:	1d38      	adds	r0, r7, #4
 8002406:	6001      	str	r1, [r0, #0]
 8002408:	6042      	str	r2, [r0, #4]
 800240a:	0019      	movs	r1, r3
 800240c:	200f      	movs	r0, #15
 800240e:	183b      	adds	r3, r7, r0
 8002410:	1c22      	adds	r2, r4, #0
 8002412:	701a      	strb	r2, [r3, #0]
 8002414:	230e      	movs	r3, #14
 8002416:	18fb      	adds	r3, r7, r3
 8002418:	1c0a      	adds	r2, r1, #0
 800241a:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800241c:	183b      	adds	r3, r7, r0
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	2b1f      	cmp	r3, #31
 8002422:	d903      	bls.n	800242c <ssd1306_WriteChar+0x30>
 8002424:	183b      	adds	r3, r7, r0
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b7e      	cmp	r3, #126	; 0x7e
 800242a:	d901      	bls.n	8002430 <ssd1306_WriteChar+0x34>
        return 0;
 800242c:	2300      	movs	r3, #0
 800242e:	e078      	b.n	8002522 <ssd1306_WriteChar+0x126>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002430:	4b3e      	ldr	r3, [pc, #248]	; (800252c <ssd1306_WriteChar+0x130>)
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	001a      	movs	r2, r3
 8002436:	1d3b      	adds	r3, r7, #4
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	18d3      	adds	r3, r2, r3
 800243c:	2b80      	cmp	r3, #128	; 0x80
 800243e:	dc07      	bgt.n	8002450 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002440:	4b3a      	ldr	r3, [pc, #232]	; (800252c <ssd1306_WriteChar+0x130>)
 8002442:	885b      	ldrh	r3, [r3, #2]
 8002444:	001a      	movs	r2, r3
 8002446:	1d3b      	adds	r3, r7, #4
 8002448:	785b      	ldrb	r3, [r3, #1]
 800244a:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800244c:	2b40      	cmp	r3, #64	; 0x40
 800244e:	dd01      	ble.n	8002454 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8002450:	2300      	movs	r3, #0
 8002452:	e066      	b.n	8002522 <ssd1306_WriteChar+0x126>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002454:	2300      	movs	r3, #0
 8002456:	61fb      	str	r3, [r7, #28]
 8002458:	e051      	b.n	80024fe <ssd1306_WriteChar+0x102>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800245a:	1d3b      	adds	r3, r7, #4
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	230f      	movs	r3, #15
 8002460:	18fb      	adds	r3, r7, r3
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	3b20      	subs	r3, #32
 8002466:	1d39      	adds	r1, r7, #4
 8002468:	7849      	ldrb	r1, [r1, #1]
 800246a:	434b      	muls	r3, r1
 800246c:	0019      	movs	r1, r3
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	18cb      	adds	r3, r1, r3
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	18d3      	adds	r3, r2, r3
 8002476:	881b      	ldrh	r3, [r3, #0]
 8002478:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 800247a:	2300      	movs	r3, #0
 800247c:	61bb      	str	r3, [r7, #24]
 800247e:	e035      	b.n	80024ec <ssd1306_WriteChar+0xf0>
            if((b << j) & 0x8000)  {
 8002480:	697a      	ldr	r2, [r7, #20]
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	409a      	lsls	r2, r3
 8002486:	2380      	movs	r3, #128	; 0x80
 8002488:	021b      	lsls	r3, r3, #8
 800248a:	4013      	ands	r3, r2
 800248c:	d014      	beq.n	80024b8 <ssd1306_WriteChar+0xbc>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800248e:	4b27      	ldr	r3, [pc, #156]	; (800252c <ssd1306_WriteChar+0x130>)
 8002490:	881b      	ldrh	r3, [r3, #0]
 8002492:	b2da      	uxtb	r2, r3
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	b2db      	uxtb	r3, r3
 8002498:	18d3      	adds	r3, r2, r3
 800249a:	b2d8      	uxtb	r0, r3
 800249c:	4b23      	ldr	r3, [pc, #140]	; (800252c <ssd1306_WriteChar+0x130>)
 800249e:	885b      	ldrh	r3, [r3, #2]
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	18d3      	adds	r3, r2, r3
 80024a8:	b2d9      	uxtb	r1, r3
 80024aa:	230e      	movs	r3, #14
 80024ac:	18fb      	adds	r3, r7, r3
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	001a      	movs	r2, r3
 80024b2:	f7ff ff41 	bl	8002338 <ssd1306_DrawPixel>
 80024b6:	e016      	b.n	80024e6 <ssd1306_WriteChar+0xea>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80024b8:	4b1c      	ldr	r3, [pc, #112]	; (800252c <ssd1306_WriteChar+0x130>)
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	18d3      	adds	r3, r2, r3
 80024c4:	b2d8      	uxtb	r0, r3
 80024c6:	4b19      	ldr	r3, [pc, #100]	; (800252c <ssd1306_WriteChar+0x130>)
 80024c8:	885b      	ldrh	r3, [r3, #2]
 80024ca:	b2da      	uxtb	r2, r3
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	18d3      	adds	r3, r2, r3
 80024d2:	b2d9      	uxtb	r1, r3
 80024d4:	230e      	movs	r3, #14
 80024d6:	18fb      	adds	r3, r7, r3
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	425a      	negs	r2, r3
 80024dc:	4153      	adcs	r3, r2
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	001a      	movs	r2, r3
 80024e2:	f7ff ff29 	bl	8002338 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80024e6:	69bb      	ldr	r3, [r7, #24]
 80024e8:	3301      	adds	r3, #1
 80024ea:	61bb      	str	r3, [r7, #24]
 80024ec:	1d3b      	adds	r3, r7, #4
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	001a      	movs	r2, r3
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d3c3      	bcc.n	8002480 <ssd1306_WriteChar+0x84>
    for(i = 0; i < Font.FontHeight; i++) {
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	3301      	adds	r3, #1
 80024fc:	61fb      	str	r3, [r7, #28]
 80024fe:	1d3b      	adds	r3, r7, #4
 8002500:	785b      	ldrb	r3, [r3, #1]
 8002502:	001a      	movs	r2, r3
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	4293      	cmp	r3, r2
 8002508:	d3a7      	bcc.n	800245a <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800250a:	4b08      	ldr	r3, [pc, #32]	; (800252c <ssd1306_WriteChar+0x130>)
 800250c:	881a      	ldrh	r2, [r3, #0]
 800250e:	1d3b      	adds	r3, r7, #4
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	b29b      	uxth	r3, r3
 8002514:	18d3      	adds	r3, r2, r3
 8002516:	b29a      	uxth	r2, r3
 8002518:	4b04      	ldr	r3, [pc, #16]	; (800252c <ssd1306_WriteChar+0x130>)
 800251a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800251c:	230f      	movs	r3, #15
 800251e:	18fb      	adds	r3, r7, r3
 8002520:	781b      	ldrb	r3, [r3, #0]
}
 8002522:	0018      	movs	r0, r3
 8002524:	46bd      	mov	sp, r7
 8002526:	b009      	add	sp, #36	; 0x24
 8002528:	bd90      	pop	{r4, r7, pc}
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	20000710 	.word	0x20000710

08002530 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	1d38      	adds	r0, r7, #4
 800253a:	6001      	str	r1, [r0, #0]
 800253c:	6042      	str	r2, [r0, #4]
 800253e:	001a      	movs	r2, r3
 8002540:	1cfb      	adds	r3, r7, #3
 8002542:	701a      	strb	r2, [r3, #0]
    while (*str) {
 8002544:	e014      	b.n	8002570 <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	7818      	ldrb	r0, [r3, #0]
 800254a:	1cfb      	adds	r3, r7, #3
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	1d3a      	adds	r2, r7, #4
 8002550:	6811      	ldr	r1, [r2, #0]
 8002552:	6852      	ldr	r2, [r2, #4]
 8002554:	f7ff ff52 	bl	80023fc <ssd1306_WriteChar>
 8002558:	0003      	movs	r3, r0
 800255a:	001a      	movs	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	429a      	cmp	r2, r3
 8002562:	d002      	beq.n	800256a <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	e008      	b.n	800257c <ssd1306_WriteString+0x4c>
        }
        str++;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	3301      	adds	r3, #1
 800256e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1e6      	bne.n	8002546 <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	781b      	ldrb	r3, [r3, #0]
}
 800257c:	0018      	movs	r0, r3
 800257e:	46bd      	mov	sp, r7
 8002580:	b004      	add	sp, #16
 8002582:	bd80      	pop	{r7, pc}

08002584 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	0002      	movs	r2, r0
 800258c:	1dfb      	adds	r3, r7, #7
 800258e:	701a      	strb	r2, [r3, #0]
 8002590:	1dbb      	adds	r3, r7, #6
 8002592:	1c0a      	adds	r2, r1, #0
 8002594:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8002596:	1dfb      	adds	r3, r7, #7
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	b29a      	uxth	r2, r3
 800259c:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <ssd1306_SetCursor+0x30>)
 800259e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80025a0:	1dbb      	adds	r3, r7, #6
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	4b03      	ldr	r3, [pc, #12]	; (80025b4 <ssd1306_SetCursor+0x30>)
 80025a8:	805a      	strh	r2, [r3, #2]
}
 80025aa:	46c0      	nop			; (mov r8, r8)
 80025ac:	46bd      	mov	sp, r7
 80025ae:	b002      	add	sp, #8
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	46c0      	nop			; (mov r8, r8)
 80025b4:	20000710 	.word	0x20000710

080025b8 <ssd1306_SetContrast>:

void ssd1306_StopScroll(void){
	ssd1306_WriteCommand(0x2E);
}

void ssd1306_SetContrast(const uint8_t value) {
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	0002      	movs	r2, r0
 80025c0:	1dfb      	adds	r3, r7, #7
 80025c2:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 80025c4:	210f      	movs	r1, #15
 80025c6:	187b      	adds	r3, r7, r1
 80025c8:	2281      	movs	r2, #129	; 0x81
 80025ca:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80025cc:	187b      	adds	r3, r7, r1
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	0018      	movs	r0, r3
 80025d2:	f7ff fdbf 	bl	8002154 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80025d6:	1dfb      	adds	r3, r7, #7
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	0018      	movs	r0, r3
 80025dc:	f7ff fdba 	bl	8002154 <ssd1306_WriteCommand>
}
 80025e0:	46c0      	nop			; (mov r8, r8)
 80025e2:	46bd      	mov	sp, r7
 80025e4:	b004      	add	sp, #16
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	0002      	movs	r2, r0
 80025f0:	1dfb      	adds	r3, r7, #7
 80025f2:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 80025f4:	1dfb      	adds	r3, r7, #7
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d007      	beq.n	800260c <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 80025fc:	230f      	movs	r3, #15
 80025fe:	18fb      	adds	r3, r7, r3
 8002600:	22af      	movs	r2, #175	; 0xaf
 8002602:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8002604:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <ssd1306_SetDisplayOn+0x48>)
 8002606:	2201      	movs	r2, #1
 8002608:	715a      	strb	r2, [r3, #5]
 800260a:	e006      	b.n	800261a <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 800260c:	230f      	movs	r3, #15
 800260e:	18fb      	adds	r3, r7, r3
 8002610:	22ae      	movs	r2, #174	; 0xae
 8002612:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8002614:	4b06      	ldr	r3, [pc, #24]	; (8002630 <ssd1306_SetDisplayOn+0x48>)
 8002616:	2200      	movs	r2, #0
 8002618:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800261a:	230f      	movs	r3, #15
 800261c:	18fb      	adds	r3, r7, r3
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	0018      	movs	r0, r3
 8002622:	f7ff fd97 	bl	8002154 <ssd1306_WriteCommand>
}
 8002626:	46c0      	nop			; (mov r8, r8)
 8002628:	46bd      	mov	sp, r7
 800262a:	b004      	add	sp, #16
 800262c:	bd80      	pop	{r7, pc}
 800262e:	46c0      	nop			; (mov r8, r8)
 8002630:	20000710 	.word	0x20000710

08002634 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800263a:	1dfb      	adds	r3, r7, #7
 800263c:	2200      	movs	r2, #0
 800263e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002640:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <HAL_Init+0x3c>)
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <HAL_Init+0x3c>)
 8002646:	2180      	movs	r1, #128	; 0x80
 8002648:	0049      	lsls	r1, r1, #1
 800264a:	430a      	orrs	r2, r1
 800264c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800264e:	2003      	movs	r0, #3
 8002650:	f7ff fc4c 	bl	8001eec <HAL_InitTick>
 8002654:	1e03      	subs	r3, r0, #0
 8002656:	d003      	beq.n	8002660 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002658:	1dfb      	adds	r3, r7, #7
 800265a:	2201      	movs	r2, #1
 800265c:	701a      	strb	r2, [r3, #0]
 800265e:	e001      	b.n	8002664 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002660:	f7ff fabe 	bl	8001be0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002664:	1dfb      	adds	r3, r7, #7
 8002666:	781b      	ldrb	r3, [r3, #0]
}
 8002668:	0018      	movs	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	b002      	add	sp, #8
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40022000 	.word	0x40022000

08002674 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002678:	4b05      	ldr	r3, [pc, #20]	; (8002690 <HAL_IncTick+0x1c>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	001a      	movs	r2, r3
 800267e:	4b05      	ldr	r3, [pc, #20]	; (8002694 <HAL_IncTick+0x20>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	18d2      	adds	r2, r2, r3
 8002684:	4b03      	ldr	r3, [pc, #12]	; (8002694 <HAL_IncTick+0x20>)
 8002686:	601a      	str	r2, [r3, #0]
}
 8002688:	46c0      	nop			; (mov r8, r8)
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	46c0      	nop			; (mov r8, r8)
 8002690:	2000002c 	.word	0x2000002c
 8002694:	20000718 	.word	0x20000718

08002698 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  return uwTick;
 800269c:	4b02      	ldr	r3, [pc, #8]	; (80026a8 <HAL_GetTick+0x10>)
 800269e:	681b      	ldr	r3, [r3, #0]
}
 80026a0:	0018      	movs	r0, r3
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	20000718 	.word	0x20000718

080026ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026b4:	f7ff fff0 	bl	8002698 <HAL_GetTick>
 80026b8:	0003      	movs	r3, r0
 80026ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	3301      	adds	r3, #1
 80026c4:	d005      	beq.n	80026d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026c6:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <HAL_Delay+0x44>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	001a      	movs	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	189b      	adds	r3, r3, r2
 80026d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026d2:	46c0      	nop			; (mov r8, r8)
 80026d4:	f7ff ffe0 	bl	8002698 <HAL_GetTick>
 80026d8:	0002      	movs	r2, r0
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	68fa      	ldr	r2, [r7, #12]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d8f7      	bhi.n	80026d4 <HAL_Delay+0x28>
  {
  }
}
 80026e4:	46c0      	nop			; (mov r8, r8)
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	46bd      	mov	sp, r7
 80026ea:	b004      	add	sp, #16
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	46c0      	nop			; (mov r8, r8)
 80026f0:	2000002c 	.word	0x2000002c

080026f4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a05      	ldr	r2, [pc, #20]	; (8002718 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002704:	401a      	ands	r2, r3
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	431a      	orrs	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	601a      	str	r2, [r3, #0]
}
 800270e:	46c0      	nop			; (mov r8, r8)
 8002710:	46bd      	mov	sp, r7
 8002712:	b002      	add	sp, #8
 8002714:	bd80      	pop	{r7, pc}
 8002716:	46c0      	nop			; (mov r8, r8)
 8002718:	fe3fffff 	.word	0xfe3fffff

0800271c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	23e0      	movs	r3, #224	; 0xe0
 800272a:	045b      	lsls	r3, r3, #17
 800272c:	4013      	ands	r3, r2
}
 800272e:	0018      	movs	r0, r3
 8002730:	46bd      	mov	sp, r7
 8002732:	b002      	add	sp, #8
 8002734:	bd80      	pop	{r7, pc}

08002736 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b084      	sub	sp, #16
 800273a:	af00      	add	r7, sp, #0
 800273c:	60f8      	str	r0, [r7, #12]
 800273e:	60b9      	str	r1, [r7, #8]
 8002740:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	2104      	movs	r1, #4
 800274a:	400a      	ands	r2, r1
 800274c:	2107      	movs	r1, #7
 800274e:	4091      	lsls	r1, r2
 8002750:	000a      	movs	r2, r1
 8002752:	43d2      	mvns	r2, r2
 8002754:	401a      	ands	r2, r3
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2104      	movs	r1, #4
 800275a:	400b      	ands	r3, r1
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	4099      	lsls	r1, r3
 8002760:	000b      	movs	r3, r1
 8002762:	431a      	orrs	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002768:	46c0      	nop			; (mov r8, r8)
 800276a:	46bd      	mov	sp, r7
 800276c:	b004      	add	sp, #16
 800276e:	bd80      	pop	{r7, pc}

08002770 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	2104      	movs	r1, #4
 8002782:	400a      	ands	r2, r1
 8002784:	2107      	movs	r1, #7
 8002786:	4091      	lsls	r1, r2
 8002788:	000a      	movs	r2, r1
 800278a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	2104      	movs	r1, #4
 8002790:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002792:	40da      	lsrs	r2, r3
 8002794:	0013      	movs	r3, r2
}
 8002796:	0018      	movs	r0, r3
 8002798:	46bd      	mov	sp, r7
 800279a:	b002      	add	sp, #8
 800279c:	bd80      	pop	{r7, pc}

0800279e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b082      	sub	sp, #8
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68da      	ldr	r2, [r3, #12]
 80027aa:	23c0      	movs	r3, #192	; 0xc0
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	4013      	ands	r3, r2
 80027b0:	d101      	bne.n	80027b6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80027b2:	2301      	movs	r3, #1
 80027b4:	e000      	b.n	80027b8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	0018      	movs	r0, r3
 80027ba:	46bd      	mov	sp, r7
 80027bc:	b002      	add	sp, #8
 80027be:	bd80      	pop	{r7, pc}

080027c0 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	211f      	movs	r1, #31
 80027d4:	400a      	ands	r2, r1
 80027d6:	210f      	movs	r1, #15
 80027d8:	4091      	lsls	r1, r2
 80027da:	000a      	movs	r2, r1
 80027dc:	43d2      	mvns	r2, r2
 80027de:	401a      	ands	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	0e9b      	lsrs	r3, r3, #26
 80027e4:	210f      	movs	r1, #15
 80027e6:	4019      	ands	r1, r3
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	201f      	movs	r0, #31
 80027ec:	4003      	ands	r3, r0
 80027ee:	4099      	lsls	r1, r3
 80027f0:	000b      	movs	r3, r1
 80027f2:	431a      	orrs	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80027f8:	46c0      	nop			; (mov r8, r8)
 80027fa:	46bd      	mov	sp, r7
 80027fc:	b004      	add	sp, #16
 80027fe:	bd80      	pop	{r7, pc}

08002800 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	035b      	lsls	r3, r3, #13
 8002812:	0b5b      	lsrs	r3, r3, #13
 8002814:	431a      	orrs	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	629a      	str	r2, [r3, #40]	; 0x28
}
 800281a:	46c0      	nop			; (mov r8, r8)
 800281c:	46bd      	mov	sp, r7
 800281e:	b002      	add	sp, #8
 8002820:	bd80      	pop	{r7, pc}

08002822 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002822:	b580      	push	{r7, lr}
 8002824:	b082      	sub	sp, #8
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
 800282a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	0352      	lsls	r2, r2, #13
 8002834:	0b52      	lsrs	r2, r2, #13
 8002836:	43d2      	mvns	r2, r2
 8002838:	401a      	ands	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	46bd      	mov	sp, r7
 8002842:	b002      	add	sp, #8
 8002844:	bd80      	pop	{r7, pc}

08002846 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b082      	sub	sp, #8
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	2203      	movs	r2, #3
 8002854:	4013      	ands	r3, r2
}
 8002856:	0018      	movs	r0, r3
 8002858:	46bd      	mov	sp, r7
 800285a:	b002      	add	sp, #8
 800285c:	bd80      	pop	{r7, pc}
	...

08002860 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	68ba      	ldr	r2, [r7, #8]
 8002872:	0212      	lsls	r2, r2, #8
 8002874:	43d2      	mvns	r2, r2
 8002876:	401a      	ands	r2, r3
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	021b      	lsls	r3, r3, #8
 800287c:	6879      	ldr	r1, [r7, #4]
 800287e:	400b      	ands	r3, r1
 8002880:	4904      	ldr	r1, [pc, #16]	; (8002894 <LL_ADC_SetChannelSamplingTime+0x34>)
 8002882:	400b      	ands	r3, r1
 8002884:	431a      	orrs	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	46bd      	mov	sp, r7
 800288e:	b004      	add	sp, #16
 8002890:	bd80      	pop	{r7, pc}
 8002892:	46c0      	nop			; (mov r8, r8)
 8002894:	07ffff00 	.word	0x07ffff00

08002898 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	4a05      	ldr	r2, [pc, #20]	; (80028bc <LL_ADC_EnableInternalRegulator+0x24>)
 80028a6:	4013      	ands	r3, r2
 80028a8:	2280      	movs	r2, #128	; 0x80
 80028aa:	0552      	lsls	r2, r2, #21
 80028ac:	431a      	orrs	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80028b2:	46c0      	nop			; (mov r8, r8)
 80028b4:	46bd      	mov	sp, r7
 80028b6:	b002      	add	sp, #8
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	46c0      	nop			; (mov r8, r8)
 80028bc:	6fffffe8 	.word	0x6fffffe8

080028c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	2380      	movs	r3, #128	; 0x80
 80028ce:	055b      	lsls	r3, r3, #21
 80028d0:	401a      	ands	r2, r3
 80028d2:	2380      	movs	r3, #128	; 0x80
 80028d4:	055b      	lsls	r3, r3, #21
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d101      	bne.n	80028de <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80028da:	2301      	movs	r3, #1
 80028dc:	e000      	b.n	80028e0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80028de:	2300      	movs	r3, #0
}
 80028e0:	0018      	movs	r0, r3
 80028e2:	46bd      	mov	sp, r7
 80028e4:	b002      	add	sp, #8
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	4a04      	ldr	r2, [pc, #16]	; (8002908 <LL_ADC_Enable+0x20>)
 80028f6:	4013      	ands	r3, r2
 80028f8:	2201      	movs	r2, #1
 80028fa:	431a      	orrs	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002900:	46c0      	nop			; (mov r8, r8)
 8002902:	46bd      	mov	sp, r7
 8002904:	b002      	add	sp, #8
 8002906:	bd80      	pop	{r7, pc}
 8002908:	7fffffe8 	.word	0x7fffffe8

0800290c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	4a04      	ldr	r2, [pc, #16]	; (800292c <LL_ADC_Disable+0x20>)
 800291a:	4013      	ands	r3, r2
 800291c:	2202      	movs	r2, #2
 800291e:	431a      	orrs	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002924:	46c0      	nop			; (mov r8, r8)
 8002926:	46bd      	mov	sp, r7
 8002928:	b002      	add	sp, #8
 800292a:	bd80      	pop	{r7, pc}
 800292c:	7fffffe8 	.word	0x7fffffe8

08002930 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	2201      	movs	r2, #1
 800293e:	4013      	ands	r3, r2
 8002940:	2b01      	cmp	r3, #1
 8002942:	d101      	bne.n	8002948 <LL_ADC_IsEnabled+0x18>
 8002944:	2301      	movs	r3, #1
 8002946:	e000      	b.n	800294a <LL_ADC_IsEnabled+0x1a>
 8002948:	2300      	movs	r3, #0
}
 800294a:	0018      	movs	r0, r3
 800294c:	46bd      	mov	sp, r7
 800294e:	b002      	add	sp, #8
 8002950:	bd80      	pop	{r7, pc}

08002952 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	2202      	movs	r2, #2
 8002960:	4013      	ands	r3, r2
 8002962:	2b02      	cmp	r3, #2
 8002964:	d101      	bne.n	800296a <LL_ADC_IsDisableOngoing+0x18>
 8002966:	2301      	movs	r3, #1
 8002968:	e000      	b.n	800296c <LL_ADC_IsDisableOngoing+0x1a>
 800296a:	2300      	movs	r3, #0
}
 800296c:	0018      	movs	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	b002      	add	sp, #8
 8002972:	bd80      	pop	{r7, pc}

08002974 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	4a04      	ldr	r2, [pc, #16]	; (8002994 <LL_ADC_REG_StartConversion+0x20>)
 8002982:	4013      	ands	r3, r2
 8002984:	2204      	movs	r2, #4
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800298c:	46c0      	nop			; (mov r8, r8)
 800298e:	46bd      	mov	sp, r7
 8002990:	b002      	add	sp, #8
 8002992:	bd80      	pop	{r7, pc}
 8002994:	7fffffe8 	.word	0x7fffffe8

08002998 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	2204      	movs	r2, #4
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b04      	cmp	r3, #4
 80029aa:	d101      	bne.n	80029b0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80029ac:	2301      	movs	r3, #1
 80029ae:	e000      	b.n	80029b2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	0018      	movs	r0, r3
 80029b4:	46bd      	mov	sp, r7
 80029b6:	b002      	add	sp, #8
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b088      	sub	sp, #32
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029c4:	231f      	movs	r3, #31
 80029c6:	18fb      	adds	r3, r7, r3
 80029c8:	2200      	movs	r2, #0
 80029ca:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80029cc:	2300      	movs	r3, #0
 80029ce:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e17f      	b.n	8002ce2 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10a      	bne.n	8002a00 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	0018      	movs	r0, r3
 80029ee:	f7ff f91b 	bl	8001c28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2254      	movs	r2, #84	; 0x54
 80029fc:	2100      	movs	r1, #0
 80029fe:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	0018      	movs	r0, r3
 8002a06:	f7ff ff5b 	bl	80028c0 <LL_ADC_IsInternalRegulatorEnabled>
 8002a0a:	1e03      	subs	r3, r0, #0
 8002a0c:	d115      	bne.n	8002a3a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	0018      	movs	r0, r3
 8002a14:	f7ff ff40 	bl	8002898 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a18:	4bb4      	ldr	r3, [pc, #720]	; (8002cec <HAL_ADC_Init+0x330>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	49b4      	ldr	r1, [pc, #720]	; (8002cf0 <HAL_ADC_Init+0x334>)
 8002a1e:	0018      	movs	r0, r3
 8002a20:	f7fd fb78 	bl	8000114 <__udivsi3>
 8002a24:	0003      	movs	r3, r0
 8002a26:	3301      	adds	r3, #1
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a2c:	e002      	b.n	8002a34 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	3b01      	subs	r3, #1
 8002a32:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f9      	bne.n	8002a2e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f7ff ff3e 	bl	80028c0 <LL_ADC_IsInternalRegulatorEnabled>
 8002a44:	1e03      	subs	r3, r0, #0
 8002a46:	d10f      	bne.n	8002a68 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4c:	2210      	movs	r2, #16
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a58:	2201      	movs	r2, #1
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a60:	231f      	movs	r3, #31
 8002a62:	18fb      	adds	r3, r7, r3
 8002a64:	2201      	movs	r2, #1
 8002a66:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	f7ff ff93 	bl	8002998 <LL_ADC_REG_IsConversionOngoing>
 8002a72:	0003      	movs	r3, r0
 8002a74:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7a:	2210      	movs	r2, #16
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	d000      	beq.n	8002a82 <HAL_ADC_Init+0xc6>
 8002a80:	e122      	b.n	8002cc8 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d000      	beq.n	8002a8a <HAL_ADC_Init+0xce>
 8002a88:	e11e      	b.n	8002cc8 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8e:	4a99      	ldr	r2, [pc, #612]	; (8002cf4 <HAL_ADC_Init+0x338>)
 8002a90:	4013      	ands	r3, r2
 8002a92:	2202      	movs	r2, #2
 8002a94:	431a      	orrs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f7ff ff46 	bl	8002930 <LL_ADC_IsEnabled>
 8002aa4:	1e03      	subs	r3, r0, #0
 8002aa6:	d000      	beq.n	8002aaa <HAL_ADC_Init+0xee>
 8002aa8:	e0ad      	b.n	8002c06 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	7e1b      	ldrb	r3, [r3, #24]
 8002ab2:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002ab4:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	7e5b      	ldrb	r3, [r3, #25]
 8002aba:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002abc:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	7e9b      	ldrb	r3, [r3, #26]
 8002ac2:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002ac4:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d002      	beq.n	8002ad4 <HAL_ADC_Init+0x118>
 8002ace:	2380      	movs	r3, #128	; 0x80
 8002ad0:	015b      	lsls	r3, r3, #5
 8002ad2:	e000      	b.n	8002ad6 <HAL_ADC_Init+0x11a>
 8002ad4:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002ad6:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002adc:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	da04      	bge.n	8002af0 <HAL_ADC_Init+0x134>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	085b      	lsrs	r3, r3, #1
 8002aee:	e001      	b.n	8002af4 <HAL_ADC_Init+0x138>
 8002af0:	2380      	movs	r3, #128	; 0x80
 8002af2:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8002af4:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	212c      	movs	r1, #44	; 0x2c
 8002afa:	5c5b      	ldrb	r3, [r3, r1]
 8002afc:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002afe:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2220      	movs	r2, #32
 8002b0a:	5c9b      	ldrb	r3, [r3, r2]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d115      	bne.n	8002b3c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	7e9b      	ldrb	r3, [r3, #26]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d105      	bne.n	8002b24 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	2280      	movs	r2, #128	; 0x80
 8002b1c:	0252      	lsls	r2, r2, #9
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	61bb      	str	r3, [r7, #24]
 8002b22:	e00b      	b.n	8002b3c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b28:	2220      	movs	r2, #32
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b34:	2201      	movs	r2, #1
 8002b36:	431a      	orrs	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00a      	beq.n	8002b5a <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b48:	23e0      	movs	r3, #224	; 0xe0
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002b52:	4313      	orrs	r3, r2
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	4a65      	ldr	r2, [pc, #404]	; (8002cf8 <HAL_ADC_Init+0x33c>)
 8002b62:	4013      	ands	r3, r2
 8002b64:	0019      	movs	r1, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	0f9b      	lsrs	r3, r3, #30
 8002b76:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	223c      	movs	r2, #60	; 0x3c
 8002b88:	5c9b      	ldrb	r3, [r3, r2]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d111      	bne.n	8002bb2 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	0f9b      	lsrs	r3, r3, #30
 8002b94:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002b9a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002ba0:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002ba6:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	2201      	movs	r2, #1
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	4a50      	ldr	r2, [pc, #320]	; (8002cfc <HAL_ADC_Init+0x340>)
 8002bba:	4013      	ands	r3, r2
 8002bbc:	0019      	movs	r1, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	23c0      	movs	r3, #192	; 0xc0
 8002bce:	061b      	lsls	r3, r3, #24
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d018      	beq.n	8002c06 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002bd8:	2380      	movs	r3, #128	; 0x80
 8002bda:	05db      	lsls	r3, r3, #23
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d012      	beq.n	8002c06 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002be4:	2380      	movs	r3, #128	; 0x80
 8002be6:	061b      	lsls	r3, r3, #24
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d00c      	beq.n	8002c06 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002bec:	4b44      	ldr	r3, [pc, #272]	; (8002d00 <HAL_ADC_Init+0x344>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a44      	ldr	r2, [pc, #272]	; (8002d04 <HAL_ADC_Init+0x348>)
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	0019      	movs	r1, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	23f0      	movs	r3, #240	; 0xf0
 8002bfc:	039b      	lsls	r3, r3, #14
 8002bfe:	401a      	ands	r2, r3
 8002c00:	4b3f      	ldr	r3, [pc, #252]	; (8002d00 <HAL_ADC_Init+0x344>)
 8002c02:	430a      	orrs	r2, r1
 8002c04:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6818      	ldr	r0, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c0e:	001a      	movs	r2, r3
 8002c10:	2100      	movs	r1, #0
 8002c12:	f7ff fd90 	bl	8002736 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6818      	ldr	r0, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1e:	493a      	ldr	r1, [pc, #232]	; (8002d08 <HAL_ADC_Init+0x34c>)
 8002c20:	001a      	movs	r2, r3
 8002c22:	f7ff fd88 	bl	8002736 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d109      	bne.n	8002c42 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2110      	movs	r1, #16
 8002c3a:	4249      	negs	r1, r1
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	629a      	str	r2, [r3, #40]	; 0x28
 8002c40:	e018      	b.n	8002c74 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691a      	ldr	r2, [r3, #16]
 8002c46:	2380      	movs	r3, #128	; 0x80
 8002c48:	039b      	lsls	r3, r3, #14
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d112      	bne.n	8002c74 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	69db      	ldr	r3, [r3, #28]
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	221c      	movs	r2, #28
 8002c5e:	4013      	ands	r3, r2
 8002c60:	2210      	movs	r2, #16
 8002c62:	4252      	negs	r2, r2
 8002c64:	409a      	lsls	r2, r3
 8002c66:	0011      	movs	r1, r2
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2100      	movs	r1, #0
 8002c7a:	0018      	movs	r0, r3
 8002c7c:	f7ff fd78 	bl	8002770 <LL_ADC_GetSamplingTimeCommonChannels>
 8002c80:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d10b      	bne.n	8002ca2 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c94:	2203      	movs	r2, #3
 8002c96:	4393      	bics	r3, r2
 8002c98:	2201      	movs	r2, #1
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002ca0:	e01c      	b.n	8002cdc <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca6:	2212      	movs	r2, #18
 8002ca8:	4393      	bics	r3, r2
 8002caa:	2210      	movs	r2, #16
 8002cac:	431a      	orrs	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002cbe:	231f      	movs	r3, #31
 8002cc0:	18fb      	adds	r3, r7, r3
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002cc6:	e009      	b.n	8002cdc <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ccc:	2210      	movs	r2, #16
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002cd4:	231f      	movs	r3, #31
 8002cd6:	18fb      	adds	r3, r7, r3
 8002cd8:	2201      	movs	r2, #1
 8002cda:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002cdc:	231f      	movs	r3, #31
 8002cde:	18fb      	adds	r3, r7, r3
 8002ce0:	781b      	ldrb	r3, [r3, #0]
}
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	b008      	add	sp, #32
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	2000001c 	.word	0x2000001c
 8002cf0:	00030d40 	.word	0x00030d40
 8002cf4:	fffffefd 	.word	0xfffffefd
 8002cf8:	fffe0201 	.word	0xfffe0201
 8002cfc:	1ffffc02 	.word	0x1ffffc02
 8002d00:	40012708 	.word	0x40012708
 8002d04:	ffc3ffff 	.word	0xffc3ffff
 8002d08:	07ffff04 	.word	0x07ffff04

08002d0c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002d0c:	b5b0      	push	{r4, r5, r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	0018      	movs	r0, r3
 8002d1a:	f7ff fe3d 	bl	8002998 <LL_ADC_REG_IsConversionOngoing>
 8002d1e:	1e03      	subs	r3, r0, #0
 8002d20:	d15f      	bne.n	8002de2 <HAL_ADC_Start_IT+0xd6>
  {
    __HAL_LOCK(hadc);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2254      	movs	r2, #84	; 0x54
 8002d26:	5c9b      	ldrb	r3, [r3, r2]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d101      	bne.n	8002d30 <HAL_ADC_Start_IT+0x24>
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	e05f      	b.n	8002df0 <HAL_ADC_Start_IT+0xe4>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2254      	movs	r2, #84	; 0x54
 8002d34:	2101      	movs	r1, #1
 8002d36:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002d38:	250f      	movs	r5, #15
 8002d3a:	197c      	adds	r4, r7, r5
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	0018      	movs	r0, r3
 8002d40:	f000 fb68 	bl	8003414 <ADC_Enable>
 8002d44:	0003      	movs	r3, r0
 8002d46:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002d48:	197b      	adds	r3, r7, r5
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d143      	bne.n	8002dd8 <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d54:	4a28      	ldr	r2, [pc, #160]	; (8002df8 <HAL_ADC_Start_IT+0xec>)
 8002d56:	4013      	ands	r3, r2
 8002d58:	2280      	movs	r2, #128	; 0x80
 8002d5a:	0052      	lsls	r2, r2, #1
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	221c      	movs	r2, #28
 8002d6e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2254      	movs	r2, #84	; 0x54
 8002d74:	2100      	movs	r1, #0
 8002d76:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	211c      	movs	r1, #28
 8002d84:	438a      	bics	r2, r1
 8002d86:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	695b      	ldr	r3, [r3, #20]
 8002d8c:	2b08      	cmp	r3, #8
 8002d8e:	d108      	bne.n	8002da2 <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2108      	movs	r1, #8
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	605a      	str	r2, [r3, #4]
          break;
 8002da0:	e008      	b.n	8002db4 <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2104      	movs	r1, #4
 8002dae:	430a      	orrs	r2, r1
 8002db0:	605a      	str	r2, [r3, #4]
          break;
 8002db2:	46c0      	nop			; (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d107      	bne.n	8002dcc <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2110      	movs	r1, #16
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	f7ff fdcf 	bl	8002974 <LL_ADC_REG_StartConversion>
 8002dd6:	e008      	b.n	8002dea <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2254      	movs	r2, #84	; 0x54
 8002ddc:	2100      	movs	r1, #0
 8002dde:	5499      	strb	r1, [r3, r2]
 8002de0:	e003      	b.n	8002dea <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002de2:	230f      	movs	r3, #15
 8002de4:	18fb      	adds	r3, r7, r3
 8002de6:	2202      	movs	r2, #2
 8002de8:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002dea:	230f      	movs	r3, #15
 8002dec:	18fb      	adds	r3, r7, r3
 8002dee:	781b      	ldrb	r3, [r3, #0]
}
 8002df0:	0018      	movs	r0, r3
 8002df2:	46bd      	mov	sp, r7
 8002df4:	b004      	add	sp, #16
 8002df6:	bdb0      	pop	{r4, r5, r7, pc}
 8002df8:	fffff0fe 	.word	0xfffff0fe

08002dfc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	b002      	add	sp, #8
 8002e10:	bd80      	pop	{r7, pc}
	...

08002e14 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	2202      	movs	r2, #2
 8002e34:	4013      	ands	r3, r2
 8002e36:	d017      	beq.n	8002e68 <HAL_ADC_IRQHandler+0x54>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	d013      	beq.n	8002e68 <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e44:	2210      	movs	r2, #16
 8002e46:	4013      	ands	r3, r2
 8002e48:	d106      	bne.n	8002e58 <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4e:	2280      	movs	r2, #128	; 0x80
 8002e50:	0112      	lsls	r2, r2, #4
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f000 fd24 	bl	80038a8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2202      	movs	r2, #2
 8002e66:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	2204      	movs	r2, #4
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	d003      	beq.n	8002e78 <HAL_ADC_IRQHandler+0x64>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2204      	movs	r2, #4
 8002e74:	4013      	ands	r3, r2
 8002e76:	d107      	bne.n	8002e88 <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	2208      	movs	r2, #8
 8002e7c:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002e7e:	d04d      	beq.n	8002f1c <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2208      	movs	r2, #8
 8002e84:	4013      	ands	r3, r2
 8002e86:	d049      	beq.n	8002f1c <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e8c:	2210      	movs	r2, #16
 8002e8e:	4013      	ands	r3, r2
 8002e90:	d106      	bne.n	8002ea0 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e96:	2280      	movs	r2, #128	; 0x80
 8002e98:	0092      	lsls	r2, r2, #2
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	f7ff fc7a 	bl	800279e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002eaa:	1e03      	subs	r3, r0, #0
 8002eac:	d02e      	beq.n	8002f0c <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	7e9b      	ldrb	r3, [r3, #26]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d12a      	bne.n	8002f0c <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2208      	movs	r2, #8
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d123      	bne.n	8002f0c <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	0018      	movs	r0, r3
 8002eca:	f7ff fd65 	bl	8002998 <LL_ADC_REG_IsConversionOngoing>
 8002ece:	1e03      	subs	r3, r0, #0
 8002ed0:	d110      	bne.n	8002ef4 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	210c      	movs	r1, #12
 8002ede:	438a      	bics	r2, r1
 8002ee0:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee6:	4a56      	ldr	r2, [pc, #344]	; (8003040 <HAL_ADC_IRQHandler+0x22c>)
 8002ee8:	4013      	ands	r3, r2
 8002eea:	2201      	movs	r2, #1
 8002eec:	431a      	orrs	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	659a      	str	r2, [r3, #88]	; 0x58
 8002ef2:	e00b      	b.n	8002f0c <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef8:	2220      	movs	r2, #32
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f04:	2201      	movs	r2, #1
 8002f06:	431a      	orrs	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f7fe fd8c 	bl	8001a2c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	220c      	movs	r2, #12
 8002f1a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	2280      	movs	r2, #128	; 0x80
 8002f20:	4013      	ands	r3, r2
 8002f22:	d012      	beq.n	8002f4a <HAL_ADC_IRQHandler+0x136>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2280      	movs	r2, #128	; 0x80
 8002f28:	4013      	ands	r3, r2
 8002f2a:	d00e      	beq.n	8002f4a <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f30:	2280      	movs	r2, #128	; 0x80
 8002f32:	0252      	lsls	r2, r2, #9
 8002f34:	431a      	orrs	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f000 f881 	bl	8003044 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2280      	movs	r2, #128	; 0x80
 8002f48:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	2380      	movs	r3, #128	; 0x80
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	4013      	ands	r3, r2
 8002f52:	d014      	beq.n	8002f7e <HAL_ADC_IRQHandler+0x16a>
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	2380      	movs	r3, #128	; 0x80
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d00f      	beq.n	8002f7e <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f62:	2280      	movs	r2, #128	; 0x80
 8002f64:	0292      	lsls	r2, r2, #10
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	0018      	movs	r0, r3
 8002f70:	f000 fc8a 	bl	8003888 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2280      	movs	r2, #128	; 0x80
 8002f7a:	0052      	lsls	r2, r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	2380      	movs	r3, #128	; 0x80
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4013      	ands	r3, r2
 8002f86:	d014      	beq.n	8002fb2 <HAL_ADC_IRQHandler+0x19e>
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	2380      	movs	r3, #128	; 0x80
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4013      	ands	r3, r2
 8002f90:	d00f      	beq.n	8002fb2 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f96:	2280      	movs	r2, #128	; 0x80
 8002f98:	02d2      	lsls	r2, r2, #11
 8002f9a:	431a      	orrs	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f000 fc78 	bl	8003898 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2280      	movs	r2, #128	; 0x80
 8002fae:	0092      	lsls	r2, r2, #2
 8002fb0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	2210      	movs	r2, #16
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d02b      	beq.n	8003012 <HAL_ADC_IRQHandler+0x1fe>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2210      	movs	r2, #16
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	d027      	beq.n	8003012 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d102      	bne.n	8002fd0 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	e008      	b.n	8002fe2 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f7ff fc36 	bl	8002846 <LL_ADC_REG_GetDMATransfer>
 8002fda:	1e03      	subs	r3, r0, #0
 8002fdc:	d001      	beq.n	8002fe2 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d110      	bne.n	800300a <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fec:	2280      	movs	r2, #128	; 0x80
 8002fee:	00d2      	lsls	r2, r2, #3
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	0018      	movs	r0, r3
 8003006:	f000 f825 	bl	8003054 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2210      	movs	r2, #16
 8003010:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	2380      	movs	r3, #128	; 0x80
 8003016:	019b      	lsls	r3, r3, #6
 8003018:	4013      	ands	r3, r2
 800301a:	d00d      	beq.n	8003038 <HAL_ADC_IRQHandler+0x224>
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	2380      	movs	r3, #128	; 0x80
 8003020:	019b      	lsls	r3, r3, #6
 8003022:	4013      	ands	r3, r2
 8003024:	d008      	beq.n	8003038 <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	0018      	movs	r0, r3
 800302a:	f000 fc45 	bl	80038b8 <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2280      	movs	r2, #128	; 0x80
 8003034:	0192      	lsls	r2, r2, #6
 8003036:	601a      	str	r2, [r3, #0]
  }
}
 8003038:	46c0      	nop			; (mov r8, r8)
 800303a:	46bd      	mov	sp, r7
 800303c:	b006      	add	sp, #24
 800303e:	bd80      	pop	{r7, pc}
 8003040:	fffffefe 	.word	0xfffffefe

08003044 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800304c:	46c0      	nop			; (mov r8, r8)
 800304e:	46bd      	mov	sp, r7
 8003050:	b002      	add	sp, #8
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800305c:	46c0      	nop			; (mov r8, r8)
 800305e:	46bd      	mov	sp, r7
 8003060:	b002      	add	sp, #8
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800306e:	2317      	movs	r3, #23
 8003070:	18fb      	adds	r3, r7, r3
 8003072:	2200      	movs	r2, #0
 8003074:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2254      	movs	r2, #84	; 0x54
 800307e:	5c9b      	ldrb	r3, [r3, r2]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d101      	bne.n	8003088 <HAL_ADC_ConfigChannel+0x24>
 8003084:	2302      	movs	r3, #2
 8003086:	e1c0      	b.n	800340a <HAL_ADC_ConfigChannel+0x3a6>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2254      	movs	r2, #84	; 0x54
 800308c:	2101      	movs	r1, #1
 800308e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	0018      	movs	r0, r3
 8003096:	f7ff fc7f 	bl	8002998 <LL_ADC_REG_IsConversionOngoing>
 800309a:	1e03      	subs	r3, r0, #0
 800309c:	d000      	beq.n	80030a0 <HAL_ADC_ConfigChannel+0x3c>
 800309e:	e1a3      	b.n	80033e8 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d100      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x46>
 80030a8:	e143      	b.n	8003332 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691a      	ldr	r2, [r3, #16]
 80030ae:	2380      	movs	r3, #128	; 0x80
 80030b0:	061b      	lsls	r3, r3, #24
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d004      	beq.n	80030c0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80030ba:	4ac1      	ldr	r2, [pc, #772]	; (80033c0 <HAL_ADC_ConfigChannel+0x35c>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d108      	bne.n	80030d2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	0019      	movs	r1, r3
 80030ca:	0010      	movs	r0, r2
 80030cc:	f7ff fb98 	bl	8002800 <LL_ADC_REG_SetSequencerChAdd>
 80030d0:	e0c9      	b.n	8003266 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	211f      	movs	r1, #31
 80030dc:	400b      	ands	r3, r1
 80030de:	210f      	movs	r1, #15
 80030e0:	4099      	lsls	r1, r3
 80030e2:	000b      	movs	r3, r1
 80030e4:	43db      	mvns	r3, r3
 80030e6:	4013      	ands	r3, r2
 80030e8:	0019      	movs	r1, r3
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	035b      	lsls	r3, r3, #13
 80030f0:	0b5b      	lsrs	r3, r3, #13
 80030f2:	d105      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x9c>
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	0e9b      	lsrs	r3, r3, #26
 80030fa:	221f      	movs	r2, #31
 80030fc:	4013      	ands	r3, r2
 80030fe:	e098      	b.n	8003232 <HAL_ADC_ConfigChannel+0x1ce>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2201      	movs	r2, #1
 8003106:	4013      	ands	r3, r2
 8003108:	d000      	beq.n	800310c <HAL_ADC_ConfigChannel+0xa8>
 800310a:	e091      	b.n	8003230 <HAL_ADC_ConfigChannel+0x1cc>
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2202      	movs	r2, #2
 8003112:	4013      	ands	r3, r2
 8003114:	d000      	beq.n	8003118 <HAL_ADC_ConfigChannel+0xb4>
 8003116:	e089      	b.n	800322c <HAL_ADC_ConfigChannel+0x1c8>
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2204      	movs	r2, #4
 800311e:	4013      	ands	r3, r2
 8003120:	d000      	beq.n	8003124 <HAL_ADC_ConfigChannel+0xc0>
 8003122:	e081      	b.n	8003228 <HAL_ADC_ConfigChannel+0x1c4>
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2208      	movs	r2, #8
 800312a:	4013      	ands	r3, r2
 800312c:	d000      	beq.n	8003130 <HAL_ADC_ConfigChannel+0xcc>
 800312e:	e079      	b.n	8003224 <HAL_ADC_ConfigChannel+0x1c0>
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2210      	movs	r2, #16
 8003136:	4013      	ands	r3, r2
 8003138:	d000      	beq.n	800313c <HAL_ADC_ConfigChannel+0xd8>
 800313a:	e071      	b.n	8003220 <HAL_ADC_ConfigChannel+0x1bc>
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2220      	movs	r2, #32
 8003142:	4013      	ands	r3, r2
 8003144:	d000      	beq.n	8003148 <HAL_ADC_ConfigChannel+0xe4>
 8003146:	e069      	b.n	800321c <HAL_ADC_ConfigChannel+0x1b8>
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2240      	movs	r2, #64	; 0x40
 800314e:	4013      	ands	r3, r2
 8003150:	d000      	beq.n	8003154 <HAL_ADC_ConfigChannel+0xf0>
 8003152:	e061      	b.n	8003218 <HAL_ADC_ConfigChannel+0x1b4>
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2280      	movs	r2, #128	; 0x80
 800315a:	4013      	ands	r3, r2
 800315c:	d000      	beq.n	8003160 <HAL_ADC_ConfigChannel+0xfc>
 800315e:	e059      	b.n	8003214 <HAL_ADC_ConfigChannel+0x1b0>
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	2380      	movs	r3, #128	; 0x80
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	4013      	ands	r3, r2
 800316a:	d151      	bne.n	8003210 <HAL_ADC_ConfigChannel+0x1ac>
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	2380      	movs	r3, #128	; 0x80
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4013      	ands	r3, r2
 8003176:	d149      	bne.n	800320c <HAL_ADC_ConfigChannel+0x1a8>
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	2380      	movs	r3, #128	; 0x80
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	4013      	ands	r3, r2
 8003182:	d141      	bne.n	8003208 <HAL_ADC_ConfigChannel+0x1a4>
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	2380      	movs	r3, #128	; 0x80
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	4013      	ands	r3, r2
 800318e:	d139      	bne.n	8003204 <HAL_ADC_ConfigChannel+0x1a0>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	2380      	movs	r3, #128	; 0x80
 8003196:	015b      	lsls	r3, r3, #5
 8003198:	4013      	ands	r3, r2
 800319a:	d131      	bne.n	8003200 <HAL_ADC_ConfigChannel+0x19c>
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	2380      	movs	r3, #128	; 0x80
 80031a2:	019b      	lsls	r3, r3, #6
 80031a4:	4013      	ands	r3, r2
 80031a6:	d129      	bne.n	80031fc <HAL_ADC_ConfigChannel+0x198>
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	2380      	movs	r3, #128	; 0x80
 80031ae:	01db      	lsls	r3, r3, #7
 80031b0:	4013      	ands	r3, r2
 80031b2:	d121      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x194>
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	2380      	movs	r3, #128	; 0x80
 80031ba:	021b      	lsls	r3, r3, #8
 80031bc:	4013      	ands	r3, r2
 80031be:	d119      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x190>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	2380      	movs	r3, #128	; 0x80
 80031c6:	025b      	lsls	r3, r3, #9
 80031c8:	4013      	ands	r3, r2
 80031ca:	d111      	bne.n	80031f0 <HAL_ADC_ConfigChannel+0x18c>
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	2380      	movs	r3, #128	; 0x80
 80031d2:	029b      	lsls	r3, r3, #10
 80031d4:	4013      	ands	r3, r2
 80031d6:	d109      	bne.n	80031ec <HAL_ADC_ConfigChannel+0x188>
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	2380      	movs	r3, #128	; 0x80
 80031de:	02db      	lsls	r3, r3, #11
 80031e0:	4013      	ands	r3, r2
 80031e2:	d001      	beq.n	80031e8 <HAL_ADC_ConfigChannel+0x184>
 80031e4:	2312      	movs	r3, #18
 80031e6:	e024      	b.n	8003232 <HAL_ADC_ConfigChannel+0x1ce>
 80031e8:	2300      	movs	r3, #0
 80031ea:	e022      	b.n	8003232 <HAL_ADC_ConfigChannel+0x1ce>
 80031ec:	2311      	movs	r3, #17
 80031ee:	e020      	b.n	8003232 <HAL_ADC_ConfigChannel+0x1ce>
 80031f0:	2310      	movs	r3, #16
 80031f2:	e01e      	b.n	8003232 <HAL_ADC_ConfigChannel+0x1ce>
 80031f4:	230f      	movs	r3, #15
 80031f6:	e01c      	b.n	8003232 <HAL_ADC_ConfigChannel+0x1ce>
 80031f8:	230e      	movs	r3, #14
 80031fa:	e01a      	b.n	8003232 <HAL_ADC_ConfigChannel+0x1ce>
 80031fc:	230d      	movs	r3, #13
 80031fe:	e018      	b.n	8003232 <HAL_ADC_ConfigChannel+0x1ce>
 8003200:	230c      	movs	r3, #12
 8003202:	e016      	b.n	8003232 <HAL_ADC_ConfigChannel+0x1ce>
 8003204:	230b      	movs	r3, #11
 8003206:	e014      	b.n	8003232 <HAL_ADC_ConfigChannel+0x1ce>
 8003208:	230a      	movs	r3, #10
 800320a:	e012      	b.n	8003232 <HAL_ADC_ConfigChannel+0x1ce>
 800320c:	2309      	movs	r3, #9
 800320e:	e010      	b.n	8003232 <HAL_ADC_ConfigChannel+0x1ce>
 8003210:	2308      	movs	r3, #8
 8003212:	e00e      	b.n	8003232 <HAL_ADC_ConfigChannel+0x1ce>
 8003214:	2307      	movs	r3, #7
 8003216:	e00c      	b.n	8003232 <HAL_ADC_ConfigChannel+0x1ce>
 8003218:	2306      	movs	r3, #6
 800321a:	e00a      	b.n	8003232 <HAL_ADC_ConfigChannel+0x1ce>
 800321c:	2305      	movs	r3, #5
 800321e:	e008      	b.n	8003232 <HAL_ADC_ConfigChannel+0x1ce>
 8003220:	2304      	movs	r3, #4
 8003222:	e006      	b.n	8003232 <HAL_ADC_ConfigChannel+0x1ce>
 8003224:	2303      	movs	r3, #3
 8003226:	e004      	b.n	8003232 <HAL_ADC_ConfigChannel+0x1ce>
 8003228:	2302      	movs	r3, #2
 800322a:	e002      	b.n	8003232 <HAL_ADC_ConfigChannel+0x1ce>
 800322c:	2301      	movs	r3, #1
 800322e:	e000      	b.n	8003232 <HAL_ADC_ConfigChannel+0x1ce>
 8003230:	2300      	movs	r3, #0
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	6852      	ldr	r2, [r2, #4]
 8003236:	201f      	movs	r0, #31
 8003238:	4002      	ands	r2, r0
 800323a:	4093      	lsls	r3, r2
 800323c:	000a      	movs	r2, r1
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	089b      	lsrs	r3, r3, #2
 800324a:	1c5a      	adds	r2, r3, #1
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	69db      	ldr	r3, [r3, #28]
 8003250:	429a      	cmp	r2, r3
 8003252:	d808      	bhi.n	8003266 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6818      	ldr	r0, [r3, #0]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	6859      	ldr	r1, [r3, #4]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	001a      	movs	r2, r3
 8003262:	f7ff faad 	bl	80027c0 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6818      	ldr	r0, [r3, #0]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	6819      	ldr	r1, [r3, #0]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	001a      	movs	r2, r3
 8003274:	f7ff faf4 	bl	8002860 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	db00      	blt.n	8003282 <HAL_ADC_ConfigChannel+0x21e>
 8003280:	e0bc      	b.n	80033fc <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003282:	4b50      	ldr	r3, [pc, #320]	; (80033c4 <HAL_ADC_ConfigChannel+0x360>)
 8003284:	0018      	movs	r0, r3
 8003286:	f7ff fa49 	bl	800271c <LL_ADC_GetCommonPathInternalCh>
 800328a:	0003      	movs	r3, r0
 800328c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a4d      	ldr	r2, [pc, #308]	; (80033c8 <HAL_ADC_ConfigChannel+0x364>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d122      	bne.n	80032de <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	2380      	movs	r3, #128	; 0x80
 800329c:	041b      	lsls	r3, r3, #16
 800329e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80032a0:	d11d      	bne.n	80032de <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	2280      	movs	r2, #128	; 0x80
 80032a6:	0412      	lsls	r2, r2, #16
 80032a8:	4313      	orrs	r3, r2
 80032aa:	4a46      	ldr	r2, [pc, #280]	; (80033c4 <HAL_ADC_ConfigChannel+0x360>)
 80032ac:	0019      	movs	r1, r3
 80032ae:	0010      	movs	r0, r2
 80032b0:	f7ff fa20 	bl	80026f4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032b4:	4b45      	ldr	r3, [pc, #276]	; (80033cc <HAL_ADC_ConfigChannel+0x368>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4945      	ldr	r1, [pc, #276]	; (80033d0 <HAL_ADC_ConfigChannel+0x36c>)
 80032ba:	0018      	movs	r0, r3
 80032bc:	f7fc ff2a 	bl	8000114 <__udivsi3>
 80032c0:	0003      	movs	r3, r0
 80032c2:	1c5a      	adds	r2, r3, #1
 80032c4:	0013      	movs	r3, r2
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	189b      	adds	r3, r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80032ce:	e002      	b.n	80032d6 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	3b01      	subs	r3, #1
 80032d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1f9      	bne.n	80032d0 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80032dc:	e08e      	b.n	80033fc <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a3c      	ldr	r2, [pc, #240]	; (80033d4 <HAL_ADC_ConfigChannel+0x370>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d10e      	bne.n	8003306 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	2380      	movs	r3, #128	; 0x80
 80032ec:	045b      	lsls	r3, r3, #17
 80032ee:	4013      	ands	r3, r2
 80032f0:	d109      	bne.n	8003306 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	2280      	movs	r2, #128	; 0x80
 80032f6:	0452      	lsls	r2, r2, #17
 80032f8:	4313      	orrs	r3, r2
 80032fa:	4a32      	ldr	r2, [pc, #200]	; (80033c4 <HAL_ADC_ConfigChannel+0x360>)
 80032fc:	0019      	movs	r1, r3
 80032fe:	0010      	movs	r0, r2
 8003300:	f7ff f9f8 	bl	80026f4 <LL_ADC_SetCommonPathInternalCh>
 8003304:	e07a      	b.n	80033fc <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a33      	ldr	r2, [pc, #204]	; (80033d8 <HAL_ADC_ConfigChannel+0x374>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d000      	beq.n	8003312 <HAL_ADC_ConfigChannel+0x2ae>
 8003310:	e074      	b.n	80033fc <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	2380      	movs	r3, #128	; 0x80
 8003316:	03db      	lsls	r3, r3, #15
 8003318:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800331a:	d000      	beq.n	800331e <HAL_ADC_ConfigChannel+0x2ba>
 800331c:	e06e      	b.n	80033fc <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	2280      	movs	r2, #128	; 0x80
 8003322:	03d2      	lsls	r2, r2, #15
 8003324:	4313      	orrs	r3, r2
 8003326:	4a27      	ldr	r2, [pc, #156]	; (80033c4 <HAL_ADC_ConfigChannel+0x360>)
 8003328:	0019      	movs	r1, r3
 800332a:	0010      	movs	r0, r2
 800332c:	f7ff f9e2 	bl	80026f4 <LL_ADC_SetCommonPathInternalCh>
 8003330:	e064      	b.n	80033fc <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691a      	ldr	r2, [r3, #16]
 8003336:	2380      	movs	r3, #128	; 0x80
 8003338:	061b      	lsls	r3, r3, #24
 800333a:	429a      	cmp	r2, r3
 800333c:	d004      	beq.n	8003348 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003342:	4a1f      	ldr	r2, [pc, #124]	; (80033c0 <HAL_ADC_ConfigChannel+0x35c>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d107      	bne.n	8003358 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	0019      	movs	r1, r3
 8003352:	0010      	movs	r0, r2
 8003354:	f7ff fa65 	bl	8002822 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	da4d      	bge.n	80033fc <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003360:	4b18      	ldr	r3, [pc, #96]	; (80033c4 <HAL_ADC_ConfigChannel+0x360>)
 8003362:	0018      	movs	r0, r3
 8003364:	f7ff f9da 	bl	800271c <LL_ADC_GetCommonPathInternalCh>
 8003368:	0003      	movs	r3, r0
 800336a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a15      	ldr	r2, [pc, #84]	; (80033c8 <HAL_ADC_ConfigChannel+0x364>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d108      	bne.n	8003388 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	4a18      	ldr	r2, [pc, #96]	; (80033dc <HAL_ADC_ConfigChannel+0x378>)
 800337a:	4013      	ands	r3, r2
 800337c:	4a11      	ldr	r2, [pc, #68]	; (80033c4 <HAL_ADC_ConfigChannel+0x360>)
 800337e:	0019      	movs	r1, r3
 8003380:	0010      	movs	r0, r2
 8003382:	f7ff f9b7 	bl	80026f4 <LL_ADC_SetCommonPathInternalCh>
 8003386:	e039      	b.n	80033fc <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a11      	ldr	r2, [pc, #68]	; (80033d4 <HAL_ADC_ConfigChannel+0x370>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d108      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	4a12      	ldr	r2, [pc, #72]	; (80033e0 <HAL_ADC_ConfigChannel+0x37c>)
 8003396:	4013      	ands	r3, r2
 8003398:	4a0a      	ldr	r2, [pc, #40]	; (80033c4 <HAL_ADC_ConfigChannel+0x360>)
 800339a:	0019      	movs	r1, r3
 800339c:	0010      	movs	r0, r2
 800339e:	f7ff f9a9 	bl	80026f4 <LL_ADC_SetCommonPathInternalCh>
 80033a2:	e02b      	b.n	80033fc <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a0b      	ldr	r2, [pc, #44]	; (80033d8 <HAL_ADC_ConfigChannel+0x374>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d126      	bne.n	80033fc <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	4a0c      	ldr	r2, [pc, #48]	; (80033e4 <HAL_ADC_ConfigChannel+0x380>)
 80033b2:	4013      	ands	r3, r2
 80033b4:	4a03      	ldr	r2, [pc, #12]	; (80033c4 <HAL_ADC_ConfigChannel+0x360>)
 80033b6:	0019      	movs	r1, r3
 80033b8:	0010      	movs	r0, r2
 80033ba:	f7ff f99b 	bl	80026f4 <LL_ADC_SetCommonPathInternalCh>
 80033be:	e01d      	b.n	80033fc <HAL_ADC_ConfigChannel+0x398>
 80033c0:	80000004 	.word	0x80000004
 80033c4:	40012708 	.word	0x40012708
 80033c8:	b0001000 	.word	0xb0001000
 80033cc:	2000001c 	.word	0x2000001c
 80033d0:	00030d40 	.word	0x00030d40
 80033d4:	b8004000 	.word	0xb8004000
 80033d8:	b4002000 	.word	0xb4002000
 80033dc:	ff7fffff 	.word	0xff7fffff
 80033e0:	feffffff 	.word	0xfeffffff
 80033e4:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ec:	2220      	movs	r2, #32
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80033f4:	2317      	movs	r3, #23
 80033f6:	18fb      	adds	r3, r7, r3
 80033f8:	2201      	movs	r2, #1
 80033fa:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2254      	movs	r2, #84	; 0x54
 8003400:	2100      	movs	r1, #0
 8003402:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003404:	2317      	movs	r3, #23
 8003406:	18fb      	adds	r3, r7, r3
 8003408:	781b      	ldrb	r3, [r3, #0]
}
 800340a:	0018      	movs	r0, r3
 800340c:	46bd      	mov	sp, r7
 800340e:	b006      	add	sp, #24
 8003410:	bd80      	pop	{r7, pc}
 8003412:	46c0      	nop			; (mov r8, r8)

08003414 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800341c:	2300      	movs	r3, #0
 800341e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	0018      	movs	r0, r3
 8003426:	f7ff fa83 	bl	8002930 <LL_ADC_IsEnabled>
 800342a:	1e03      	subs	r3, r0, #0
 800342c:	d000      	beq.n	8003430 <ADC_Enable+0x1c>
 800342e:	e069      	b.n	8003504 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	4a36      	ldr	r2, [pc, #216]	; (8003510 <ADC_Enable+0xfc>)
 8003438:	4013      	ands	r3, r2
 800343a:	d00d      	beq.n	8003458 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003440:	2210      	movs	r2, #16
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344c:	2201      	movs	r2, #1
 800344e:	431a      	orrs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e056      	b.n	8003506 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	0018      	movs	r0, r3
 800345e:	f7ff fa43 	bl	80028e8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8003462:	4b2c      	ldr	r3, [pc, #176]	; (8003514 <ADC_Enable+0x100>)
 8003464:	0018      	movs	r0, r3
 8003466:	f7ff f959 	bl	800271c <LL_ADC_GetCommonPathInternalCh>
 800346a:	0002      	movs	r2, r0
 800346c:	2380      	movs	r3, #128	; 0x80
 800346e:	041b      	lsls	r3, r3, #16
 8003470:	4013      	ands	r3, r2
 8003472:	d00f      	beq.n	8003494 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003474:	4b28      	ldr	r3, [pc, #160]	; (8003518 <ADC_Enable+0x104>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4928      	ldr	r1, [pc, #160]	; (800351c <ADC_Enable+0x108>)
 800347a:	0018      	movs	r0, r3
 800347c:	f7fc fe4a 	bl	8000114 <__udivsi3>
 8003480:	0003      	movs	r3, r0
 8003482:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8003484:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003486:	e002      	b.n	800348e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	3b01      	subs	r3, #1
 800348c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1f9      	bne.n	8003488 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	7e5b      	ldrb	r3, [r3, #25]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d033      	beq.n	8003504 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800349c:	f7ff f8fc 	bl	8002698 <HAL_GetTick>
 80034a0:	0003      	movs	r3, r0
 80034a2:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034a4:	e027      	b.n	80034f6 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	0018      	movs	r0, r3
 80034ac:	f7ff fa40 	bl	8002930 <LL_ADC_IsEnabled>
 80034b0:	1e03      	subs	r3, r0, #0
 80034b2:	d104      	bne.n	80034be <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	0018      	movs	r0, r3
 80034ba:	f7ff fa15 	bl	80028e8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80034be:	f7ff f8eb 	bl	8002698 <HAL_GetTick>
 80034c2:	0002      	movs	r2, r0
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d914      	bls.n	80034f6 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2201      	movs	r2, #1
 80034d4:	4013      	ands	r3, r2
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d00d      	beq.n	80034f6 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034de:	2210      	movs	r2, #16
 80034e0:	431a      	orrs	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ea:	2201      	movs	r2, #1
 80034ec:	431a      	orrs	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e007      	b.n	8003506 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2201      	movs	r2, #1
 80034fe:	4013      	ands	r3, r2
 8003500:	2b01      	cmp	r3, #1
 8003502:	d1d0      	bne.n	80034a6 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	0018      	movs	r0, r3
 8003508:	46bd      	mov	sp, r7
 800350a:	b004      	add	sp, #16
 800350c:	bd80      	pop	{r7, pc}
 800350e:	46c0      	nop			; (mov r8, r8)
 8003510:	80000017 	.word	0x80000017
 8003514:	40012708 	.word	0x40012708
 8003518:	2000001c 	.word	0x2000001c
 800351c:	00030d40 	.word	0x00030d40

08003520 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	0018      	movs	r0, r3
 800352e:	f7ff fa10 	bl	8002952 <LL_ADC_IsDisableOngoing>
 8003532:	0003      	movs	r3, r0
 8003534:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	0018      	movs	r0, r3
 800353c:	f7ff f9f8 	bl	8002930 <LL_ADC_IsEnabled>
 8003540:	1e03      	subs	r3, r0, #0
 8003542:	d046      	beq.n	80035d2 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d143      	bne.n	80035d2 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	2205      	movs	r2, #5
 8003552:	4013      	ands	r3, r2
 8003554:	2b01      	cmp	r3, #1
 8003556:	d10d      	bne.n	8003574 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	0018      	movs	r0, r3
 800355e:	f7ff f9d5 	bl	800290c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2203      	movs	r2, #3
 8003568:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800356a:	f7ff f895 	bl	8002698 <HAL_GetTick>
 800356e:	0003      	movs	r3, r0
 8003570:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003572:	e028      	b.n	80035c6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003578:	2210      	movs	r2, #16
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003584:	2201      	movs	r2, #1
 8003586:	431a      	orrs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e021      	b.n	80035d4 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003590:	f7ff f882 	bl	8002698 <HAL_GetTick>
 8003594:	0002      	movs	r2, r0
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d913      	bls.n	80035c6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	2201      	movs	r2, #1
 80035a6:	4013      	ands	r3, r2
 80035a8:	d00d      	beq.n	80035c6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ae:	2210      	movs	r2, #16
 80035b0:	431a      	orrs	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ba:	2201      	movs	r2, #1
 80035bc:	431a      	orrs	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e006      	b.n	80035d4 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	2201      	movs	r2, #1
 80035ce:	4013      	ands	r3, r2
 80035d0:	d1de      	bne.n	8003590 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	0018      	movs	r0, r3
 80035d6:	46bd      	mov	sp, r7
 80035d8:	b004      	add	sp, #16
 80035da:	bd80      	pop	{r7, pc}

080035dc <LL_ADC_SetCalibrationFactor>:
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	22b4      	movs	r2, #180	; 0xb4
 80035ea:	589b      	ldr	r3, [r3, r2]
 80035ec:	227f      	movs	r2, #127	; 0x7f
 80035ee:	4393      	bics	r3, r2
 80035f0:	001a      	movs	r2, r3
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	431a      	orrs	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	21b4      	movs	r1, #180	; 0xb4
 80035fa:	505a      	str	r2, [r3, r1]
}
 80035fc:	46c0      	nop			; (mov r8, r8)
 80035fe:	46bd      	mov	sp, r7
 8003600:	b002      	add	sp, #8
 8003602:	bd80      	pop	{r7, pc}

08003604 <LL_ADC_GetCalibrationFactor>:
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	22b4      	movs	r2, #180	; 0xb4
 8003610:	589b      	ldr	r3, [r3, r2]
 8003612:	227f      	movs	r2, #127	; 0x7f
 8003614:	4013      	ands	r3, r2
}
 8003616:	0018      	movs	r0, r3
 8003618:	46bd      	mov	sp, r7
 800361a:	b002      	add	sp, #8
 800361c:	bd80      	pop	{r7, pc}
	...

08003620 <LL_ADC_Enable>:
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689b      	ldr	r3, [r3, #8]
 800362c:	4a04      	ldr	r2, [pc, #16]	; (8003640 <LL_ADC_Enable+0x20>)
 800362e:	4013      	ands	r3, r2
 8003630:	2201      	movs	r2, #1
 8003632:	431a      	orrs	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	609a      	str	r2, [r3, #8]
}
 8003638:	46c0      	nop			; (mov r8, r8)
 800363a:	46bd      	mov	sp, r7
 800363c:	b002      	add	sp, #8
 800363e:	bd80      	pop	{r7, pc}
 8003640:	7fffffe8 	.word	0x7fffffe8

08003644 <LL_ADC_Disable>:
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	4a04      	ldr	r2, [pc, #16]	; (8003664 <LL_ADC_Disable+0x20>)
 8003652:	4013      	ands	r3, r2
 8003654:	2202      	movs	r2, #2
 8003656:	431a      	orrs	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	609a      	str	r2, [r3, #8]
}
 800365c:	46c0      	nop			; (mov r8, r8)
 800365e:	46bd      	mov	sp, r7
 8003660:	b002      	add	sp, #8
 8003662:	bd80      	pop	{r7, pc}
 8003664:	7fffffe8 	.word	0x7fffffe8

08003668 <LL_ADC_IsEnabled>:
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	2201      	movs	r2, #1
 8003676:	4013      	ands	r3, r2
 8003678:	2b01      	cmp	r3, #1
 800367a:	d101      	bne.n	8003680 <LL_ADC_IsEnabled+0x18>
 800367c:	2301      	movs	r3, #1
 800367e:	e000      	b.n	8003682 <LL_ADC_IsEnabled+0x1a>
 8003680:	2300      	movs	r3, #0
}
 8003682:	0018      	movs	r0, r3
 8003684:	46bd      	mov	sp, r7
 8003686:	b002      	add	sp, #8
 8003688:	bd80      	pop	{r7, pc}
	...

0800368c <LL_ADC_StartCalibration>:
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	4a05      	ldr	r2, [pc, #20]	; (80036b0 <LL_ADC_StartCalibration+0x24>)
 800369a:	4013      	ands	r3, r2
 800369c:	2280      	movs	r2, #128	; 0x80
 800369e:	0612      	lsls	r2, r2, #24
 80036a0:	431a      	orrs	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	609a      	str	r2, [r3, #8]
}
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	46bd      	mov	sp, r7
 80036aa:	b002      	add	sp, #8
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	46c0      	nop			; (mov r8, r8)
 80036b0:	7fffffe8 	.word	0x7fffffe8

080036b4 <LL_ADC_IsCalibrationOnGoing>:
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	0fdb      	lsrs	r3, r3, #31
 80036c2:	07da      	lsls	r2, r3, #31
 80036c4:	2380      	movs	r3, #128	; 0x80
 80036c6:	061b      	lsls	r3, r3, #24
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d101      	bne.n	80036d0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80036cc:	2301      	movs	r3, #1
 80036ce:	e000      	b.n	80036d2 <LL_ADC_IsCalibrationOnGoing+0x1e>
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	0018      	movs	r0, r3
 80036d4:	46bd      	mov	sp, r7
 80036d6:	b002      	add	sp, #8
 80036d8:	bd80      	pop	{r7, pc}
	...

080036dc <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 80036dc:	b590      	push	{r4, r7, lr}
 80036de:	b089      	sub	sp, #36	; 0x24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80036e4:	2300      	movs	r3, #0
 80036e6:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80036e8:	2300      	movs	r3, #0
 80036ea:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2254      	movs	r2, #84	; 0x54
 80036f0:	5c9b      	ldrb	r3, [r3, r2]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d101      	bne.n	80036fa <HAL_ADCEx_Calibration_Start+0x1e>
 80036f6:	2302      	movs	r3, #2
 80036f8:	e0ba      	b.n	8003870 <HAL_ADCEx_Calibration_Start+0x194>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2254      	movs	r2, #84	; 0x54
 80036fe:	2101      	movs	r1, #1
 8003700:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003702:	2317      	movs	r3, #23
 8003704:	18fc      	adds	r4, r7, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	0018      	movs	r0, r3
 800370a:	f7ff ff09 	bl	8003520 <ADC_Disable>
 800370e:	0003      	movs	r3, r0
 8003710:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	0018      	movs	r0, r3
 8003718:	f7ff ffa6 	bl	8003668 <LL_ADC_IsEnabled>
 800371c:	1e03      	subs	r3, r0, #0
 800371e:	d000      	beq.n	8003722 <HAL_ADCEx_Calibration_Start+0x46>
 8003720:	e099      	b.n	8003856 <HAL_ADCEx_Calibration_Start+0x17a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003726:	4a54      	ldr	r2, [pc, #336]	; (8003878 <HAL_ADCEx_Calibration_Start+0x19c>)
 8003728:	4013      	ands	r3, r2
 800372a:	2202      	movs	r2, #2
 800372c:	431a      	orrs	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	4a50      	ldr	r2, [pc, #320]	; (800387c <HAL_ADCEx_Calibration_Start+0x1a0>)
 800373a:	4013      	ands	r3, r2
 800373c:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68da      	ldr	r2, [r3, #12]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	494d      	ldr	r1, [pc, #308]	; (8003880 <HAL_ADCEx_Calibration_Start+0x1a4>)
 800374a:	400a      	ands	r2, r1
 800374c:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800374e:	2300      	movs	r3, #0
 8003750:	61fb      	str	r3, [r7, #28]
 8003752:	e02d      	b.n	80037b0 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	0018      	movs	r0, r3
 800375a:	f7ff ff97 	bl	800368c <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800375e:	e014      	b.n	800378a <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	3301      	adds	r3, #1
 8003764:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	4a46      	ldr	r2, [pc, #280]	; (8003884 <HAL_ADCEx_Calibration_Start+0x1a8>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d90d      	bls.n	800378a <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003772:	2212      	movs	r2, #18
 8003774:	4393      	bics	r3, r2
 8003776:	2210      	movs	r2, #16
 8003778:	431a      	orrs	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2254      	movs	r2, #84	; 0x54
 8003782:	2100      	movs	r1, #0
 8003784:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e072      	b.n	8003870 <HAL_ADCEx_Calibration_Start+0x194>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	0018      	movs	r0, r3
 8003790:	f7ff ff90 	bl	80036b4 <LL_ADC_IsCalibrationOnGoing>
 8003794:	1e03      	subs	r3, r0, #0
 8003796:	d1e3      	bne.n	8003760 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	0018      	movs	r0, r3
 800379e:	f7ff ff31 	bl	8003604 <LL_ADC_GetCalibrationFactor>
 80037a2:	0002      	movs	r2, r0
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	189b      	adds	r3, r3, r2
 80037a8:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	3301      	adds	r3, #1
 80037ae:	61fb      	str	r3, [r7, #28]
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	2b07      	cmp	r3, #7
 80037b4:	d9ce      	bls.n	8003754 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 80037b6:	69f9      	ldr	r1, [r7, #28]
 80037b8:	69b8      	ldr	r0, [r7, #24]
 80037ba:	f7fc fcab 	bl	8000114 <__udivsi3>
 80037be:	0003      	movs	r3, r0
 80037c0:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	0018      	movs	r0, r3
 80037c8:	f7ff ff2a 	bl	8003620 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	0011      	movs	r1, r2
 80037d4:	0018      	movs	r0, r3
 80037d6:	f7ff ff01 	bl	80035dc <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	0018      	movs	r0, r3
 80037e0:	f7ff ff30 	bl	8003644 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80037e4:	f7fe ff58 	bl	8002698 <HAL_GetTick>
 80037e8:	0003      	movs	r3, r0
 80037ea:	60fb      	str	r3, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80037ec:	e01b      	b.n	8003826 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80037ee:	f7fe ff53 	bl	8002698 <HAL_GetTick>
 80037f2:	0002      	movs	r2, r0
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d914      	bls.n	8003826 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	0018      	movs	r0, r3
 8003802:	f7ff ff31 	bl	8003668 <LL_ADC_IsEnabled>
 8003806:	1e03      	subs	r3, r0, #0
 8003808:	d00d      	beq.n	8003826 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380e:	2210      	movs	r2, #16
 8003810:	431a      	orrs	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381a:	2201      	movs	r2, #1
 800381c:	431a      	orrs	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e024      	b.n	8003870 <HAL_ADCEx_Calibration_Start+0x194>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	0018      	movs	r0, r3
 800382c:	f7ff ff1c 	bl	8003668 <LL_ADC_IsEnabled>
 8003830:	1e03      	subs	r3, r0, #0
 8003832:	d1dc      	bne.n	80037ee <HAL_ADCEx_Calibration_Start+0x112>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68d9      	ldr	r1, [r3, #12]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	430a      	orrs	r2, r1
 8003842:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003848:	2203      	movs	r2, #3
 800384a:	4393      	bics	r3, r2
 800384c:	2201      	movs	r2, #1
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	659a      	str	r2, [r3, #88]	; 0x58
 8003854:	e005      	b.n	8003862 <HAL_ADCEx_Calibration_Start+0x186>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385a:	2210      	movs	r2, #16
 800385c:	431a      	orrs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2254      	movs	r2, #84	; 0x54
 8003866:	2100      	movs	r1, #0
 8003868:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 800386a:	2317      	movs	r3, #23
 800386c:	18fb      	adds	r3, r7, r3
 800386e:	781b      	ldrb	r3, [r3, #0]
}
 8003870:	0018      	movs	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	b009      	add	sp, #36	; 0x24
 8003876:	bd90      	pop	{r4, r7, pc}
 8003878:	fffffefd 	.word	0xfffffefd
 800387c:	00008003 	.word	0x00008003
 8003880:	ffff7ffc 	.word	0xffff7ffc
 8003884:	0002f1ff 	.word	0x0002f1ff

08003888 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003890:	46c0      	nop			; (mov r8, r8)
 8003892:	46bd      	mov	sp, r7
 8003894:	b002      	add	sp, #8
 8003896:	bd80      	pop	{r7, pc}

08003898 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80038a0:	46c0      	nop			; (mov r8, r8)
 80038a2:	46bd      	mov	sp, r7
 80038a4:	b002      	add	sp, #8
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80038b0:	46c0      	nop			; (mov r8, r8)
 80038b2:	46bd      	mov	sp, r7
 80038b4:	b002      	add	sp, #8
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 80038c0:	46c0      	nop			; (mov r8, r8)
 80038c2:	46bd      	mov	sp, r7
 80038c4:	b002      	add	sp, #8
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	0002      	movs	r2, r0
 80038d0:	1dfb      	adds	r3, r7, #7
 80038d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80038d4:	1dfb      	adds	r3, r7, #7
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b7f      	cmp	r3, #127	; 0x7f
 80038da:	d809      	bhi.n	80038f0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038dc:	1dfb      	adds	r3, r7, #7
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	001a      	movs	r2, r3
 80038e2:	231f      	movs	r3, #31
 80038e4:	401a      	ands	r2, r3
 80038e6:	4b04      	ldr	r3, [pc, #16]	; (80038f8 <__NVIC_EnableIRQ+0x30>)
 80038e8:	2101      	movs	r1, #1
 80038ea:	4091      	lsls	r1, r2
 80038ec:	000a      	movs	r2, r1
 80038ee:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80038f0:	46c0      	nop			; (mov r8, r8)
 80038f2:	46bd      	mov	sp, r7
 80038f4:	b002      	add	sp, #8
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	e000e100 	.word	0xe000e100

080038fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038fc:	b590      	push	{r4, r7, lr}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	0002      	movs	r2, r0
 8003904:	6039      	str	r1, [r7, #0]
 8003906:	1dfb      	adds	r3, r7, #7
 8003908:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800390a:	1dfb      	adds	r3, r7, #7
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	2b7f      	cmp	r3, #127	; 0x7f
 8003910:	d828      	bhi.n	8003964 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003912:	4a2f      	ldr	r2, [pc, #188]	; (80039d0 <__NVIC_SetPriority+0xd4>)
 8003914:	1dfb      	adds	r3, r7, #7
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	b25b      	sxtb	r3, r3
 800391a:	089b      	lsrs	r3, r3, #2
 800391c:	33c0      	adds	r3, #192	; 0xc0
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	589b      	ldr	r3, [r3, r2]
 8003922:	1dfa      	adds	r2, r7, #7
 8003924:	7812      	ldrb	r2, [r2, #0]
 8003926:	0011      	movs	r1, r2
 8003928:	2203      	movs	r2, #3
 800392a:	400a      	ands	r2, r1
 800392c:	00d2      	lsls	r2, r2, #3
 800392e:	21ff      	movs	r1, #255	; 0xff
 8003930:	4091      	lsls	r1, r2
 8003932:	000a      	movs	r2, r1
 8003934:	43d2      	mvns	r2, r2
 8003936:	401a      	ands	r2, r3
 8003938:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	019b      	lsls	r3, r3, #6
 800393e:	22ff      	movs	r2, #255	; 0xff
 8003940:	401a      	ands	r2, r3
 8003942:	1dfb      	adds	r3, r7, #7
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	0018      	movs	r0, r3
 8003948:	2303      	movs	r3, #3
 800394a:	4003      	ands	r3, r0
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003950:	481f      	ldr	r0, [pc, #124]	; (80039d0 <__NVIC_SetPriority+0xd4>)
 8003952:	1dfb      	adds	r3, r7, #7
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	b25b      	sxtb	r3, r3
 8003958:	089b      	lsrs	r3, r3, #2
 800395a:	430a      	orrs	r2, r1
 800395c:	33c0      	adds	r3, #192	; 0xc0
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003962:	e031      	b.n	80039c8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003964:	4a1b      	ldr	r2, [pc, #108]	; (80039d4 <__NVIC_SetPriority+0xd8>)
 8003966:	1dfb      	adds	r3, r7, #7
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	0019      	movs	r1, r3
 800396c:	230f      	movs	r3, #15
 800396e:	400b      	ands	r3, r1
 8003970:	3b08      	subs	r3, #8
 8003972:	089b      	lsrs	r3, r3, #2
 8003974:	3306      	adds	r3, #6
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	18d3      	adds	r3, r2, r3
 800397a:	3304      	adds	r3, #4
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	1dfa      	adds	r2, r7, #7
 8003980:	7812      	ldrb	r2, [r2, #0]
 8003982:	0011      	movs	r1, r2
 8003984:	2203      	movs	r2, #3
 8003986:	400a      	ands	r2, r1
 8003988:	00d2      	lsls	r2, r2, #3
 800398a:	21ff      	movs	r1, #255	; 0xff
 800398c:	4091      	lsls	r1, r2
 800398e:	000a      	movs	r2, r1
 8003990:	43d2      	mvns	r2, r2
 8003992:	401a      	ands	r2, r3
 8003994:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	019b      	lsls	r3, r3, #6
 800399a:	22ff      	movs	r2, #255	; 0xff
 800399c:	401a      	ands	r2, r3
 800399e:	1dfb      	adds	r3, r7, #7
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	0018      	movs	r0, r3
 80039a4:	2303      	movs	r3, #3
 80039a6:	4003      	ands	r3, r0
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80039ac:	4809      	ldr	r0, [pc, #36]	; (80039d4 <__NVIC_SetPriority+0xd8>)
 80039ae:	1dfb      	adds	r3, r7, #7
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	001c      	movs	r4, r3
 80039b4:	230f      	movs	r3, #15
 80039b6:	4023      	ands	r3, r4
 80039b8:	3b08      	subs	r3, #8
 80039ba:	089b      	lsrs	r3, r3, #2
 80039bc:	430a      	orrs	r2, r1
 80039be:	3306      	adds	r3, #6
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	18c3      	adds	r3, r0, r3
 80039c4:	3304      	adds	r3, #4
 80039c6:	601a      	str	r2, [r3, #0]
}
 80039c8:	46c0      	nop			; (mov r8, r8)
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b003      	add	sp, #12
 80039ce:	bd90      	pop	{r4, r7, pc}
 80039d0:	e000e100 	.word	0xe000e100
 80039d4:	e000ed00 	.word	0xe000ed00

080039d8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60b9      	str	r1, [r7, #8]
 80039e0:	607a      	str	r2, [r7, #4]
 80039e2:	210f      	movs	r1, #15
 80039e4:	187b      	adds	r3, r7, r1
 80039e6:	1c02      	adds	r2, r0, #0
 80039e8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	187b      	adds	r3, r7, r1
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	b25b      	sxtb	r3, r3
 80039f2:	0011      	movs	r1, r2
 80039f4:	0018      	movs	r0, r3
 80039f6:	f7ff ff81 	bl	80038fc <__NVIC_SetPriority>
}
 80039fa:	46c0      	nop			; (mov r8, r8)
 80039fc:	46bd      	mov	sp, r7
 80039fe:	b004      	add	sp, #16
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b082      	sub	sp, #8
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	0002      	movs	r2, r0
 8003a0a:	1dfb      	adds	r3, r7, #7
 8003a0c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a0e:	1dfb      	adds	r3, r7, #7
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	b25b      	sxtb	r3, r3
 8003a14:	0018      	movs	r0, r3
 8003a16:	f7ff ff57 	bl	80038c8 <__NVIC_EnableIRQ>
}
 8003a1a:	46c0      	nop			; (mov r8, r8)
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	b002      	add	sp, #8
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a32:	e147      	b.n	8003cc4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2101      	movs	r1, #1
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	4091      	lsls	r1, r2
 8003a3e:	000a      	movs	r2, r1
 8003a40:	4013      	ands	r3, r2
 8003a42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d100      	bne.n	8003a4c <HAL_GPIO_Init+0x28>
 8003a4a:	e138      	b.n	8003cbe <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	2203      	movs	r2, #3
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d005      	beq.n	8003a64 <HAL_GPIO_Init+0x40>
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	2203      	movs	r2, #3
 8003a5e:	4013      	ands	r3, r2
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d130      	bne.n	8003ac6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	2203      	movs	r2, #3
 8003a70:	409a      	lsls	r2, r3
 8003a72:	0013      	movs	r3, r2
 8003a74:	43da      	mvns	r2, r3
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	68da      	ldr	r2, [r3, #12]
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	005b      	lsls	r3, r3, #1
 8003a84:	409a      	lsls	r2, r3
 8003a86:	0013      	movs	r3, r2
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	409a      	lsls	r2, r3
 8003aa0:	0013      	movs	r3, r2
 8003aa2:	43da      	mvns	r2, r3
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	091b      	lsrs	r3, r3, #4
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	401a      	ands	r2, r3
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	409a      	lsls	r2, r3
 8003ab8:	0013      	movs	r3, r2
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2203      	movs	r2, #3
 8003acc:	4013      	ands	r3, r2
 8003ace:	2b03      	cmp	r3, #3
 8003ad0:	d017      	beq.n	8003b02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	2203      	movs	r2, #3
 8003ade:	409a      	lsls	r2, r3
 8003ae0:	0013      	movs	r3, r2
 8003ae2:	43da      	mvns	r2, r3
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	689a      	ldr	r2, [r3, #8]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	409a      	lsls	r2, r3
 8003af4:	0013      	movs	r3, r2
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	693a      	ldr	r2, [r7, #16]
 8003b00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	2203      	movs	r2, #3
 8003b08:	4013      	ands	r3, r2
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d123      	bne.n	8003b56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	08da      	lsrs	r2, r3, #3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	3208      	adds	r2, #8
 8003b16:	0092      	lsls	r2, r2, #2
 8003b18:	58d3      	ldr	r3, [r2, r3]
 8003b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	2207      	movs	r2, #7
 8003b20:	4013      	ands	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	220f      	movs	r2, #15
 8003b26:	409a      	lsls	r2, r3
 8003b28:	0013      	movs	r3, r2
 8003b2a:	43da      	mvns	r2, r3
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	691a      	ldr	r2, [r3, #16]
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	2107      	movs	r1, #7
 8003b3a:	400b      	ands	r3, r1
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	409a      	lsls	r2, r3
 8003b40:	0013      	movs	r3, r2
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	08da      	lsrs	r2, r3, #3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3208      	adds	r2, #8
 8003b50:	0092      	lsls	r2, r2, #2
 8003b52:	6939      	ldr	r1, [r7, #16]
 8003b54:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	2203      	movs	r2, #3
 8003b62:	409a      	lsls	r2, r3
 8003b64:	0013      	movs	r3, r2
 8003b66:	43da      	mvns	r2, r3
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2203      	movs	r2, #3
 8003b74:	401a      	ands	r2, r3
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	409a      	lsls	r2, r3
 8003b7c:	0013      	movs	r3, r2
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	23c0      	movs	r3, #192	; 0xc0
 8003b90:	029b      	lsls	r3, r3, #10
 8003b92:	4013      	ands	r3, r2
 8003b94:	d100      	bne.n	8003b98 <HAL_GPIO_Init+0x174>
 8003b96:	e092      	b.n	8003cbe <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003b98:	4a50      	ldr	r2, [pc, #320]	; (8003cdc <HAL_GPIO_Init+0x2b8>)
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	089b      	lsrs	r3, r3, #2
 8003b9e:	3318      	adds	r3, #24
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	589b      	ldr	r3, [r3, r2]
 8003ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	2203      	movs	r2, #3
 8003baa:	4013      	ands	r3, r2
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	220f      	movs	r2, #15
 8003bb0:	409a      	lsls	r2, r3
 8003bb2:	0013      	movs	r3, r2
 8003bb4:	43da      	mvns	r2, r3
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	23a0      	movs	r3, #160	; 0xa0
 8003bc0:	05db      	lsls	r3, r3, #23
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d013      	beq.n	8003bee <HAL_GPIO_Init+0x1ca>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a45      	ldr	r2, [pc, #276]	; (8003ce0 <HAL_GPIO_Init+0x2bc>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d00d      	beq.n	8003bea <HAL_GPIO_Init+0x1c6>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a44      	ldr	r2, [pc, #272]	; (8003ce4 <HAL_GPIO_Init+0x2c0>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d007      	beq.n	8003be6 <HAL_GPIO_Init+0x1c2>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a43      	ldr	r2, [pc, #268]	; (8003ce8 <HAL_GPIO_Init+0x2c4>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d101      	bne.n	8003be2 <HAL_GPIO_Init+0x1be>
 8003bde:	2303      	movs	r3, #3
 8003be0:	e006      	b.n	8003bf0 <HAL_GPIO_Init+0x1cc>
 8003be2:	2305      	movs	r3, #5
 8003be4:	e004      	b.n	8003bf0 <HAL_GPIO_Init+0x1cc>
 8003be6:	2302      	movs	r3, #2
 8003be8:	e002      	b.n	8003bf0 <HAL_GPIO_Init+0x1cc>
 8003bea:	2301      	movs	r3, #1
 8003bec:	e000      	b.n	8003bf0 <HAL_GPIO_Init+0x1cc>
 8003bee:	2300      	movs	r3, #0
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	2103      	movs	r1, #3
 8003bf4:	400a      	ands	r2, r1
 8003bf6:	00d2      	lsls	r2, r2, #3
 8003bf8:	4093      	lsls	r3, r2
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003c00:	4936      	ldr	r1, [pc, #216]	; (8003cdc <HAL_GPIO_Init+0x2b8>)
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	089b      	lsrs	r3, r3, #2
 8003c06:	3318      	adds	r3, #24
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c0e:	4b33      	ldr	r3, [pc, #204]	; (8003cdc <HAL_GPIO_Init+0x2b8>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	43da      	mvns	r2, r3
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	2380      	movs	r3, #128	; 0x80
 8003c24:	035b      	lsls	r3, r3, #13
 8003c26:	4013      	ands	r3, r2
 8003c28:	d003      	beq.n	8003c32 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c32:	4b2a      	ldr	r3, [pc, #168]	; (8003cdc <HAL_GPIO_Init+0x2b8>)
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003c38:	4b28      	ldr	r3, [pc, #160]	; (8003cdc <HAL_GPIO_Init+0x2b8>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	43da      	mvns	r2, r3
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	4013      	ands	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	2380      	movs	r3, #128	; 0x80
 8003c4e:	039b      	lsls	r3, r3, #14
 8003c50:	4013      	ands	r3, r2
 8003c52:	d003      	beq.n	8003c5c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c5c:	4b1f      	ldr	r3, [pc, #124]	; (8003cdc <HAL_GPIO_Init+0x2b8>)
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c62:	4a1e      	ldr	r2, [pc, #120]	; (8003cdc <HAL_GPIO_Init+0x2b8>)
 8003c64:	2384      	movs	r3, #132	; 0x84
 8003c66:	58d3      	ldr	r3, [r2, r3]
 8003c68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	43da      	mvns	r2, r3
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	4013      	ands	r3, r2
 8003c72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	2380      	movs	r3, #128	; 0x80
 8003c7a:	029b      	lsls	r3, r3, #10
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	d003      	beq.n	8003c88 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c88:	4914      	ldr	r1, [pc, #80]	; (8003cdc <HAL_GPIO_Init+0x2b8>)
 8003c8a:	2284      	movs	r2, #132	; 0x84
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003c90:	4a12      	ldr	r2, [pc, #72]	; (8003cdc <HAL_GPIO_Init+0x2b8>)
 8003c92:	2380      	movs	r3, #128	; 0x80
 8003c94:	58d3      	ldr	r3, [r2, r3]
 8003c96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	43da      	mvns	r2, r3
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	2380      	movs	r3, #128	; 0x80
 8003ca8:	025b      	lsls	r3, r3, #9
 8003caa:	4013      	ands	r3, r2
 8003cac:	d003      	beq.n	8003cb6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003cb6:	4909      	ldr	r1, [pc, #36]	; (8003cdc <HAL_GPIO_Init+0x2b8>)
 8003cb8:	2280      	movs	r2, #128	; 0x80
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	40da      	lsrs	r2, r3
 8003ccc:	1e13      	subs	r3, r2, #0
 8003cce:	d000      	beq.n	8003cd2 <HAL_GPIO_Init+0x2ae>
 8003cd0:	e6b0      	b.n	8003a34 <HAL_GPIO_Init+0x10>
  }
}
 8003cd2:	46c0      	nop			; (mov r8, r8)
 8003cd4:	46c0      	nop			; (mov r8, r8)
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	b006      	add	sp, #24
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	40021800 	.word	0x40021800
 8003ce0:	50000400 	.word	0x50000400
 8003ce4:	50000800 	.word	0x50000800
 8003ce8:	50000c00 	.word	0x50000c00

08003cec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	0008      	movs	r0, r1
 8003cf6:	0011      	movs	r1, r2
 8003cf8:	1cbb      	adds	r3, r7, #2
 8003cfa:	1c02      	adds	r2, r0, #0
 8003cfc:	801a      	strh	r2, [r3, #0]
 8003cfe:	1c7b      	adds	r3, r7, #1
 8003d00:	1c0a      	adds	r2, r1, #0
 8003d02:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d04:	1c7b      	adds	r3, r7, #1
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d004      	beq.n	8003d16 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d0c:	1cbb      	adds	r3, r7, #2
 8003d0e:	881a      	ldrh	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d14:	e003      	b.n	8003d1e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d16:	1cbb      	adds	r3, r7, #2
 8003d18:	881a      	ldrh	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d1e:	46c0      	nop			; (mov r8, r8)
 8003d20:	46bd      	mov	sp, r7
 8003d22:	b002      	add	sp, #8
 8003d24:	bd80      	pop	{r7, pc}
	...

08003d28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	0002      	movs	r2, r0
 8003d30:	1dbb      	adds	r3, r7, #6
 8003d32:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8003d34:	4b10      	ldr	r3, [pc, #64]	; (8003d78 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	1dba      	adds	r2, r7, #6
 8003d3a:	8812      	ldrh	r2, [r2, #0]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	d008      	beq.n	8003d52 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003d40:	4b0d      	ldr	r3, [pc, #52]	; (8003d78 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003d42:	1dba      	adds	r2, r7, #6
 8003d44:	8812      	ldrh	r2, [r2, #0]
 8003d46:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003d48:	1dbb      	adds	r3, r7, #6
 8003d4a:	881b      	ldrh	r3, [r3, #0]
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	f000 f815 	bl	8003d7c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8003d52:	4b09      	ldr	r3, [pc, #36]	; (8003d78 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	1dba      	adds	r2, r7, #6
 8003d58:	8812      	ldrh	r2, [r2, #0]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	d008      	beq.n	8003d70 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003d5e:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003d60:	1dba      	adds	r2, r7, #6
 8003d62:	8812      	ldrh	r2, [r2, #0]
 8003d64:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003d66:	1dbb      	adds	r3, r7, #6
 8003d68:	881b      	ldrh	r3, [r3, #0]
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	f7fd fe36 	bl	80019dc <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003d70:	46c0      	nop			; (mov r8, r8)
 8003d72:	46bd      	mov	sp, r7
 8003d74:	b002      	add	sp, #8
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	40021800 	.word	0x40021800

08003d7c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	0002      	movs	r2, r0
 8003d84:	1dbb      	adds	r3, r7, #6
 8003d86:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8003d88:	46c0      	nop			; (mov r8, r8)
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	b002      	add	sp, #8
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e082      	b.n	8003ea8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2241      	movs	r2, #65	; 0x41
 8003da6:	5c9b      	ldrb	r3, [r3, r2]
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d107      	bne.n	8003dbe <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2240      	movs	r2, #64	; 0x40
 8003db2:	2100      	movs	r1, #0
 8003db4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	0018      	movs	r0, r3
 8003dba:	f7fd ff81 	bl	8001cc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2241      	movs	r2, #65	; 0x41
 8003dc2:	2124      	movs	r1, #36	; 0x24
 8003dc4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	438a      	bics	r2, r1
 8003dd4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4934      	ldr	r1, [pc, #208]	; (8003eb0 <HAL_I2C_Init+0x120>)
 8003de0:	400a      	ands	r2, r1
 8003de2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689a      	ldr	r2, [r3, #8]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4931      	ldr	r1, [pc, #196]	; (8003eb4 <HAL_I2C_Init+0x124>)
 8003df0:	400a      	ands	r2, r1
 8003df2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d108      	bne.n	8003e0e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	2180      	movs	r1, #128	; 0x80
 8003e06:	0209      	lsls	r1, r1, #8
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	609a      	str	r2, [r3, #8]
 8003e0c:	e007      	b.n	8003e1e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689a      	ldr	r2, [r3, #8]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2184      	movs	r1, #132	; 0x84
 8003e18:	0209      	lsls	r1, r1, #8
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d104      	bne.n	8003e30 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2280      	movs	r2, #128	; 0x80
 8003e2c:	0112      	lsls	r2, r2, #4
 8003e2e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685a      	ldr	r2, [r3, #4]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	491f      	ldr	r1, [pc, #124]	; (8003eb8 <HAL_I2C_Init+0x128>)
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68da      	ldr	r2, [r3, #12]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	491a      	ldr	r1, [pc, #104]	; (8003eb4 <HAL_I2C_Init+0x124>)
 8003e4c:	400a      	ands	r2, r1
 8003e4e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	691a      	ldr	r2, [r3, #16]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	69d9      	ldr	r1, [r3, #28]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a1a      	ldr	r2, [r3, #32]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2101      	movs	r1, #1
 8003e86:	430a      	orrs	r2, r1
 8003e88:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2241      	movs	r2, #65	; 0x41
 8003e94:	2120      	movs	r1, #32
 8003e96:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2242      	movs	r2, #66	; 0x42
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	b002      	add	sp, #8
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	f0ffffff 	.word	0xf0ffffff
 8003eb4:	ffff7fff 	.word	0xffff7fff
 8003eb8:	02008000 	.word	0x02008000

08003ebc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ebc:	b590      	push	{r4, r7, lr}
 8003ebe:	b089      	sub	sp, #36	; 0x24
 8003ec0:	af02      	add	r7, sp, #8
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	000c      	movs	r4, r1
 8003ec6:	0010      	movs	r0, r2
 8003ec8:	0019      	movs	r1, r3
 8003eca:	230a      	movs	r3, #10
 8003ecc:	18fb      	adds	r3, r7, r3
 8003ece:	1c22      	adds	r2, r4, #0
 8003ed0:	801a      	strh	r2, [r3, #0]
 8003ed2:	2308      	movs	r3, #8
 8003ed4:	18fb      	adds	r3, r7, r3
 8003ed6:	1c02      	adds	r2, r0, #0
 8003ed8:	801a      	strh	r2, [r3, #0]
 8003eda:	1dbb      	adds	r3, r7, #6
 8003edc:	1c0a      	adds	r2, r1, #0
 8003ede:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2241      	movs	r2, #65	; 0x41
 8003ee4:	5c9b      	ldrb	r3, [r3, r2]
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2b20      	cmp	r3, #32
 8003eea:	d000      	beq.n	8003eee <HAL_I2C_Mem_Write+0x32>
 8003eec:	e10c      	b.n	8004108 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d004      	beq.n	8003efe <HAL_I2C_Mem_Write+0x42>
 8003ef4:	232c      	movs	r3, #44	; 0x2c
 8003ef6:	18fb      	adds	r3, r7, r3
 8003ef8:	881b      	ldrh	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d105      	bne.n	8003f0a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2280      	movs	r2, #128	; 0x80
 8003f02:	0092      	lsls	r2, r2, #2
 8003f04:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e0ff      	b.n	800410a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2240      	movs	r2, #64	; 0x40
 8003f0e:	5c9b      	ldrb	r3, [r3, r2]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d101      	bne.n	8003f18 <HAL_I2C_Mem_Write+0x5c>
 8003f14:	2302      	movs	r3, #2
 8003f16:	e0f8      	b.n	800410a <HAL_I2C_Mem_Write+0x24e>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2240      	movs	r2, #64	; 0x40
 8003f1c:	2101      	movs	r1, #1
 8003f1e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f20:	f7fe fbba 	bl	8002698 <HAL_GetTick>
 8003f24:	0003      	movs	r3, r0
 8003f26:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f28:	2380      	movs	r3, #128	; 0x80
 8003f2a:	0219      	lsls	r1, r3, #8
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	9300      	str	r3, [sp, #0]
 8003f32:	2319      	movs	r3, #25
 8003f34:	2201      	movs	r2, #1
 8003f36:	f000 fb0b 	bl	8004550 <I2C_WaitOnFlagUntilTimeout>
 8003f3a:	1e03      	subs	r3, r0, #0
 8003f3c:	d001      	beq.n	8003f42 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e0e3      	b.n	800410a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2241      	movs	r2, #65	; 0x41
 8003f46:	2121      	movs	r1, #33	; 0x21
 8003f48:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2242      	movs	r2, #66	; 0x42
 8003f4e:	2140      	movs	r1, #64	; 0x40
 8003f50:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	222c      	movs	r2, #44	; 0x2c
 8003f62:	18ba      	adds	r2, r7, r2
 8003f64:	8812      	ldrh	r2, [r2, #0]
 8003f66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f6e:	1dbb      	adds	r3, r7, #6
 8003f70:	881c      	ldrh	r4, [r3, #0]
 8003f72:	2308      	movs	r3, #8
 8003f74:	18fb      	adds	r3, r7, r3
 8003f76:	881a      	ldrh	r2, [r3, #0]
 8003f78:	230a      	movs	r3, #10
 8003f7a:	18fb      	adds	r3, r7, r3
 8003f7c:	8819      	ldrh	r1, [r3, #0]
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	9301      	str	r3, [sp, #4]
 8003f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	0023      	movs	r3, r4
 8003f8a:	f000 f9f9 	bl	8004380 <I2C_RequestMemoryWrite>
 8003f8e:	1e03      	subs	r3, r0, #0
 8003f90:	d005      	beq.n	8003f9e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2240      	movs	r2, #64	; 0x40
 8003f96:	2100      	movs	r1, #0
 8003f98:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e0b5      	b.n	800410a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	2bff      	cmp	r3, #255	; 0xff
 8003fa6:	d911      	bls.n	8003fcc <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	22ff      	movs	r2, #255	; 0xff
 8003fac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb2:	b2da      	uxtb	r2, r3
 8003fb4:	2380      	movs	r3, #128	; 0x80
 8003fb6:	045c      	lsls	r4, r3, #17
 8003fb8:	230a      	movs	r3, #10
 8003fba:	18fb      	adds	r3, r7, r3
 8003fbc:	8819      	ldrh	r1, [r3, #0]
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	0023      	movs	r3, r4
 8003fc6:	f000 fc7d 	bl	80048c4 <I2C_TransferConfig>
 8003fca:	e012      	b.n	8003ff2 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fda:	b2da      	uxtb	r2, r3
 8003fdc:	2380      	movs	r3, #128	; 0x80
 8003fde:	049c      	lsls	r4, r3, #18
 8003fe0:	230a      	movs	r3, #10
 8003fe2:	18fb      	adds	r3, r7, r3
 8003fe4:	8819      	ldrh	r1, [r3, #0]
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	2300      	movs	r3, #0
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	0023      	movs	r3, r4
 8003fee:	f000 fc69 	bl	80048c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	f000 fae8 	bl	80045ce <I2C_WaitOnTXISFlagUntilTimeout>
 8003ffe:	1e03      	subs	r3, r0, #0
 8004000:	d001      	beq.n	8004006 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e081      	b.n	800410a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	781a      	ldrb	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004016:	1c5a      	adds	r2, r3, #1
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004020:	b29b      	uxth	r3, r3
 8004022:	3b01      	subs	r3, #1
 8004024:	b29a      	uxth	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402e:	3b01      	subs	r3, #1
 8004030:	b29a      	uxth	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403a:	b29b      	uxth	r3, r3
 800403c:	2b00      	cmp	r3, #0
 800403e:	d03a      	beq.n	80040b6 <HAL_I2C_Mem_Write+0x1fa>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004044:	2b00      	cmp	r3, #0
 8004046:	d136      	bne.n	80040b6 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004048:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	0013      	movs	r3, r2
 8004052:	2200      	movs	r2, #0
 8004054:	2180      	movs	r1, #128	; 0x80
 8004056:	f000 fa7b 	bl	8004550 <I2C_WaitOnFlagUntilTimeout>
 800405a:	1e03      	subs	r3, r0, #0
 800405c:	d001      	beq.n	8004062 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e053      	b.n	800410a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004066:	b29b      	uxth	r3, r3
 8004068:	2bff      	cmp	r3, #255	; 0xff
 800406a:	d911      	bls.n	8004090 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	22ff      	movs	r2, #255	; 0xff
 8004070:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004076:	b2da      	uxtb	r2, r3
 8004078:	2380      	movs	r3, #128	; 0x80
 800407a:	045c      	lsls	r4, r3, #17
 800407c:	230a      	movs	r3, #10
 800407e:	18fb      	adds	r3, r7, r3
 8004080:	8819      	ldrh	r1, [r3, #0]
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	2300      	movs	r3, #0
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	0023      	movs	r3, r4
 800408a:	f000 fc1b 	bl	80048c4 <I2C_TransferConfig>
 800408e:	e012      	b.n	80040b6 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004094:	b29a      	uxth	r2, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800409e:	b2da      	uxtb	r2, r3
 80040a0:	2380      	movs	r3, #128	; 0x80
 80040a2:	049c      	lsls	r4, r3, #18
 80040a4:	230a      	movs	r3, #10
 80040a6:	18fb      	adds	r3, r7, r3
 80040a8:	8819      	ldrh	r1, [r3, #0]
 80040aa:	68f8      	ldr	r0, [r7, #12]
 80040ac:	2300      	movs	r3, #0
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	0023      	movs	r3, r4
 80040b2:	f000 fc07 	bl	80048c4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d198      	bne.n	8003ff2 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	0018      	movs	r0, r3
 80040c8:	f000 fac0 	bl	800464c <I2C_WaitOnSTOPFlagUntilTimeout>
 80040cc:	1e03      	subs	r3, r0, #0
 80040ce:	d001      	beq.n	80040d4 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e01a      	b.n	800410a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2220      	movs	r2, #32
 80040da:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	685a      	ldr	r2, [r3, #4]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	490b      	ldr	r1, [pc, #44]	; (8004114 <HAL_I2C_Mem_Write+0x258>)
 80040e8:	400a      	ands	r2, r1
 80040ea:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2241      	movs	r2, #65	; 0x41
 80040f0:	2120      	movs	r1, #32
 80040f2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2242      	movs	r2, #66	; 0x42
 80040f8:	2100      	movs	r1, #0
 80040fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2240      	movs	r2, #64	; 0x40
 8004100:	2100      	movs	r1, #0
 8004102:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004104:	2300      	movs	r3, #0
 8004106:	e000      	b.n	800410a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8004108:	2302      	movs	r3, #2
  }
}
 800410a:	0018      	movs	r0, r3
 800410c:	46bd      	mov	sp, r7
 800410e:	b007      	add	sp, #28
 8004110:	bd90      	pop	{r4, r7, pc}
 8004112:	46c0      	nop			; (mov r8, r8)
 8004114:	fe00e800 	.word	0xfe00e800

08004118 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004118:	b590      	push	{r4, r7, lr}
 800411a:	b089      	sub	sp, #36	; 0x24
 800411c:	af02      	add	r7, sp, #8
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	000c      	movs	r4, r1
 8004122:	0010      	movs	r0, r2
 8004124:	0019      	movs	r1, r3
 8004126:	230a      	movs	r3, #10
 8004128:	18fb      	adds	r3, r7, r3
 800412a:	1c22      	adds	r2, r4, #0
 800412c:	801a      	strh	r2, [r3, #0]
 800412e:	2308      	movs	r3, #8
 8004130:	18fb      	adds	r3, r7, r3
 8004132:	1c02      	adds	r2, r0, #0
 8004134:	801a      	strh	r2, [r3, #0]
 8004136:	1dbb      	adds	r3, r7, #6
 8004138:	1c0a      	adds	r2, r1, #0
 800413a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2241      	movs	r2, #65	; 0x41
 8004140:	5c9b      	ldrb	r3, [r3, r2]
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b20      	cmp	r3, #32
 8004146:	d000      	beq.n	800414a <HAL_I2C_Mem_Read+0x32>
 8004148:	e110      	b.n	800436c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800414a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414c:	2b00      	cmp	r3, #0
 800414e:	d004      	beq.n	800415a <HAL_I2C_Mem_Read+0x42>
 8004150:	232c      	movs	r3, #44	; 0x2c
 8004152:	18fb      	adds	r3, r7, r3
 8004154:	881b      	ldrh	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d105      	bne.n	8004166 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2280      	movs	r2, #128	; 0x80
 800415e:	0092      	lsls	r2, r2, #2
 8004160:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e103      	b.n	800436e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2240      	movs	r2, #64	; 0x40
 800416a:	5c9b      	ldrb	r3, [r3, r2]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d101      	bne.n	8004174 <HAL_I2C_Mem_Read+0x5c>
 8004170:	2302      	movs	r3, #2
 8004172:	e0fc      	b.n	800436e <HAL_I2C_Mem_Read+0x256>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2240      	movs	r2, #64	; 0x40
 8004178:	2101      	movs	r1, #1
 800417a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800417c:	f7fe fa8c 	bl	8002698 <HAL_GetTick>
 8004180:	0003      	movs	r3, r0
 8004182:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004184:	2380      	movs	r3, #128	; 0x80
 8004186:	0219      	lsls	r1, r3, #8
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	2319      	movs	r3, #25
 8004190:	2201      	movs	r2, #1
 8004192:	f000 f9dd 	bl	8004550 <I2C_WaitOnFlagUntilTimeout>
 8004196:	1e03      	subs	r3, r0, #0
 8004198:	d001      	beq.n	800419e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e0e7      	b.n	800436e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2241      	movs	r2, #65	; 0x41
 80041a2:	2122      	movs	r1, #34	; 0x22
 80041a4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2242      	movs	r2, #66	; 0x42
 80041aa:	2140      	movs	r1, #64	; 0x40
 80041ac:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	222c      	movs	r2, #44	; 0x2c
 80041be:	18ba      	adds	r2, r7, r2
 80041c0:	8812      	ldrh	r2, [r2, #0]
 80041c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041ca:	1dbb      	adds	r3, r7, #6
 80041cc:	881c      	ldrh	r4, [r3, #0]
 80041ce:	2308      	movs	r3, #8
 80041d0:	18fb      	adds	r3, r7, r3
 80041d2:	881a      	ldrh	r2, [r3, #0]
 80041d4:	230a      	movs	r3, #10
 80041d6:	18fb      	adds	r3, r7, r3
 80041d8:	8819      	ldrh	r1, [r3, #0]
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	9301      	str	r3, [sp, #4]
 80041e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	0023      	movs	r3, r4
 80041e6:	f000 f92f 	bl	8004448 <I2C_RequestMemoryRead>
 80041ea:	1e03      	subs	r3, r0, #0
 80041ec:	d005      	beq.n	80041fa <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2240      	movs	r2, #64	; 0x40
 80041f2:	2100      	movs	r1, #0
 80041f4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e0b9      	b.n	800436e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fe:	b29b      	uxth	r3, r3
 8004200:	2bff      	cmp	r3, #255	; 0xff
 8004202:	d911      	bls.n	8004228 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	22ff      	movs	r2, #255	; 0xff
 8004208:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800420e:	b2da      	uxtb	r2, r3
 8004210:	2380      	movs	r3, #128	; 0x80
 8004212:	045c      	lsls	r4, r3, #17
 8004214:	230a      	movs	r3, #10
 8004216:	18fb      	adds	r3, r7, r3
 8004218:	8819      	ldrh	r1, [r3, #0]
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	4b56      	ldr	r3, [pc, #344]	; (8004378 <HAL_I2C_Mem_Read+0x260>)
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	0023      	movs	r3, r4
 8004222:	f000 fb4f 	bl	80048c4 <I2C_TransferConfig>
 8004226:	e012      	b.n	800424e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422c:	b29a      	uxth	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004236:	b2da      	uxtb	r2, r3
 8004238:	2380      	movs	r3, #128	; 0x80
 800423a:	049c      	lsls	r4, r3, #18
 800423c:	230a      	movs	r3, #10
 800423e:	18fb      	adds	r3, r7, r3
 8004240:	8819      	ldrh	r1, [r3, #0]
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	4b4c      	ldr	r3, [pc, #304]	; (8004378 <HAL_I2C_Mem_Read+0x260>)
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	0023      	movs	r3, r4
 800424a:	f000 fb3b 	bl	80048c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800424e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	0013      	movs	r3, r2
 8004258:	2200      	movs	r2, #0
 800425a:	2104      	movs	r1, #4
 800425c:	f000 f978 	bl	8004550 <I2C_WaitOnFlagUntilTimeout>
 8004260:	1e03      	subs	r3, r0, #0
 8004262:	d001      	beq.n	8004268 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e082      	b.n	800436e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004272:	b2d2      	uxtb	r2, r2
 8004274:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	1c5a      	adds	r2, r3, #1
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004284:	3b01      	subs	r3, #1
 8004286:	b29a      	uxth	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004290:	b29b      	uxth	r3, r3
 8004292:	3b01      	subs	r3, #1
 8004294:	b29a      	uxth	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429e:	b29b      	uxth	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d03a      	beq.n	800431a <HAL_I2C_Mem_Read+0x202>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d136      	bne.n	800431a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80042ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	0013      	movs	r3, r2
 80042b6:	2200      	movs	r2, #0
 80042b8:	2180      	movs	r1, #128	; 0x80
 80042ba:	f000 f949 	bl	8004550 <I2C_WaitOnFlagUntilTimeout>
 80042be:	1e03      	subs	r3, r0, #0
 80042c0:	d001      	beq.n	80042c6 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e053      	b.n	800436e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	2bff      	cmp	r3, #255	; 0xff
 80042ce:	d911      	bls.n	80042f4 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	22ff      	movs	r2, #255	; 0xff
 80042d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	2380      	movs	r3, #128	; 0x80
 80042de:	045c      	lsls	r4, r3, #17
 80042e0:	230a      	movs	r3, #10
 80042e2:	18fb      	adds	r3, r7, r3
 80042e4:	8819      	ldrh	r1, [r3, #0]
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	2300      	movs	r3, #0
 80042ea:	9300      	str	r3, [sp, #0]
 80042ec:	0023      	movs	r3, r4
 80042ee:	f000 fae9 	bl	80048c4 <I2C_TransferConfig>
 80042f2:	e012      	b.n	800431a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004302:	b2da      	uxtb	r2, r3
 8004304:	2380      	movs	r3, #128	; 0x80
 8004306:	049c      	lsls	r4, r3, #18
 8004308:	230a      	movs	r3, #10
 800430a:	18fb      	adds	r3, r7, r3
 800430c:	8819      	ldrh	r1, [r3, #0]
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	2300      	movs	r3, #0
 8004312:	9300      	str	r3, [sp, #0]
 8004314:	0023      	movs	r3, r4
 8004316:	f000 fad5 	bl	80048c4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431e:	b29b      	uxth	r3, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	d194      	bne.n	800424e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	0018      	movs	r0, r3
 800432c:	f000 f98e 	bl	800464c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004330:	1e03      	subs	r3, r0, #0
 8004332:	d001      	beq.n	8004338 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e01a      	b.n	800436e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2220      	movs	r2, #32
 800433e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	490c      	ldr	r1, [pc, #48]	; (800437c <HAL_I2C_Mem_Read+0x264>)
 800434c:	400a      	ands	r2, r1
 800434e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2241      	movs	r2, #65	; 0x41
 8004354:	2120      	movs	r1, #32
 8004356:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2242      	movs	r2, #66	; 0x42
 800435c:	2100      	movs	r1, #0
 800435e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2240      	movs	r2, #64	; 0x40
 8004364:	2100      	movs	r1, #0
 8004366:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004368:	2300      	movs	r3, #0
 800436a:	e000      	b.n	800436e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800436c:	2302      	movs	r3, #2
  }
}
 800436e:	0018      	movs	r0, r3
 8004370:	46bd      	mov	sp, r7
 8004372:	b007      	add	sp, #28
 8004374:	bd90      	pop	{r4, r7, pc}
 8004376:	46c0      	nop			; (mov r8, r8)
 8004378:	80002400 	.word	0x80002400
 800437c:	fe00e800 	.word	0xfe00e800

08004380 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004380:	b5b0      	push	{r4, r5, r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af02      	add	r7, sp, #8
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	000c      	movs	r4, r1
 800438a:	0010      	movs	r0, r2
 800438c:	0019      	movs	r1, r3
 800438e:	250a      	movs	r5, #10
 8004390:	197b      	adds	r3, r7, r5
 8004392:	1c22      	adds	r2, r4, #0
 8004394:	801a      	strh	r2, [r3, #0]
 8004396:	2308      	movs	r3, #8
 8004398:	18fb      	adds	r3, r7, r3
 800439a:	1c02      	adds	r2, r0, #0
 800439c:	801a      	strh	r2, [r3, #0]
 800439e:	1dbb      	adds	r3, r7, #6
 80043a0:	1c0a      	adds	r2, r1, #0
 80043a2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80043a4:	1dbb      	adds	r3, r7, #6
 80043a6:	881b      	ldrh	r3, [r3, #0]
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	2380      	movs	r3, #128	; 0x80
 80043ac:	045c      	lsls	r4, r3, #17
 80043ae:	197b      	adds	r3, r7, r5
 80043b0:	8819      	ldrh	r1, [r3, #0]
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	4b23      	ldr	r3, [pc, #140]	; (8004444 <I2C_RequestMemoryWrite+0xc4>)
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	0023      	movs	r3, r4
 80043ba:	f000 fa83 	bl	80048c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c0:	6a39      	ldr	r1, [r7, #32]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	0018      	movs	r0, r3
 80043c6:	f000 f902 	bl	80045ce <I2C_WaitOnTXISFlagUntilTimeout>
 80043ca:	1e03      	subs	r3, r0, #0
 80043cc:	d001      	beq.n	80043d2 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e033      	b.n	800443a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043d2:	1dbb      	adds	r3, r7, #6
 80043d4:	881b      	ldrh	r3, [r3, #0]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d107      	bne.n	80043ea <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80043da:	2308      	movs	r3, #8
 80043dc:	18fb      	adds	r3, r7, r3
 80043de:	881b      	ldrh	r3, [r3, #0]
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	629a      	str	r2, [r3, #40]	; 0x28
 80043e8:	e019      	b.n	800441e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80043ea:	2308      	movs	r3, #8
 80043ec:	18fb      	adds	r3, r7, r3
 80043ee:	881b      	ldrh	r3, [r3, #0]
 80043f0:	0a1b      	lsrs	r3, r3, #8
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043fe:	6a39      	ldr	r1, [r7, #32]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	0018      	movs	r0, r3
 8004404:	f000 f8e3 	bl	80045ce <I2C_WaitOnTXISFlagUntilTimeout>
 8004408:	1e03      	subs	r3, r0, #0
 800440a:	d001      	beq.n	8004410 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e014      	b.n	800443a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004410:	2308      	movs	r3, #8
 8004412:	18fb      	adds	r3, r7, r3
 8004414:	881b      	ldrh	r3, [r3, #0]
 8004416:	b2da      	uxtb	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800441e:	6a3a      	ldr	r2, [r7, #32]
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	0013      	movs	r3, r2
 8004428:	2200      	movs	r2, #0
 800442a:	2180      	movs	r1, #128	; 0x80
 800442c:	f000 f890 	bl	8004550 <I2C_WaitOnFlagUntilTimeout>
 8004430:	1e03      	subs	r3, r0, #0
 8004432:	d001      	beq.n	8004438 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e000      	b.n	800443a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	0018      	movs	r0, r3
 800443c:	46bd      	mov	sp, r7
 800443e:	b004      	add	sp, #16
 8004440:	bdb0      	pop	{r4, r5, r7, pc}
 8004442:	46c0      	nop			; (mov r8, r8)
 8004444:	80002000 	.word	0x80002000

08004448 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004448:	b5b0      	push	{r4, r5, r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af02      	add	r7, sp, #8
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	000c      	movs	r4, r1
 8004452:	0010      	movs	r0, r2
 8004454:	0019      	movs	r1, r3
 8004456:	250a      	movs	r5, #10
 8004458:	197b      	adds	r3, r7, r5
 800445a:	1c22      	adds	r2, r4, #0
 800445c:	801a      	strh	r2, [r3, #0]
 800445e:	2308      	movs	r3, #8
 8004460:	18fb      	adds	r3, r7, r3
 8004462:	1c02      	adds	r2, r0, #0
 8004464:	801a      	strh	r2, [r3, #0]
 8004466:	1dbb      	adds	r3, r7, #6
 8004468:	1c0a      	adds	r2, r1, #0
 800446a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800446c:	1dbb      	adds	r3, r7, #6
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	b2da      	uxtb	r2, r3
 8004472:	197b      	adds	r3, r7, r5
 8004474:	8819      	ldrh	r1, [r3, #0]
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	4b23      	ldr	r3, [pc, #140]	; (8004508 <I2C_RequestMemoryRead+0xc0>)
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	2300      	movs	r3, #0
 800447e:	f000 fa21 	bl	80048c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004484:	6a39      	ldr	r1, [r7, #32]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	0018      	movs	r0, r3
 800448a:	f000 f8a0 	bl	80045ce <I2C_WaitOnTXISFlagUntilTimeout>
 800448e:	1e03      	subs	r3, r0, #0
 8004490:	d001      	beq.n	8004496 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e033      	b.n	80044fe <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004496:	1dbb      	adds	r3, r7, #6
 8004498:	881b      	ldrh	r3, [r3, #0]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d107      	bne.n	80044ae <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800449e:	2308      	movs	r3, #8
 80044a0:	18fb      	adds	r3, r7, r3
 80044a2:	881b      	ldrh	r3, [r3, #0]
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	629a      	str	r2, [r3, #40]	; 0x28
 80044ac:	e019      	b.n	80044e2 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80044ae:	2308      	movs	r3, #8
 80044b0:	18fb      	adds	r3, r7, r3
 80044b2:	881b      	ldrh	r3, [r3, #0]
 80044b4:	0a1b      	lsrs	r3, r3, #8
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c2:	6a39      	ldr	r1, [r7, #32]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	0018      	movs	r0, r3
 80044c8:	f000 f881 	bl	80045ce <I2C_WaitOnTXISFlagUntilTimeout>
 80044cc:	1e03      	subs	r3, r0, #0
 80044ce:	d001      	beq.n	80044d4 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e014      	b.n	80044fe <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80044d4:	2308      	movs	r3, #8
 80044d6:	18fb      	adds	r3, r7, r3
 80044d8:	881b      	ldrh	r3, [r3, #0]
 80044da:	b2da      	uxtb	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80044e2:	6a3a      	ldr	r2, [r7, #32]
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	0013      	movs	r3, r2
 80044ec:	2200      	movs	r2, #0
 80044ee:	2140      	movs	r1, #64	; 0x40
 80044f0:	f000 f82e 	bl	8004550 <I2C_WaitOnFlagUntilTimeout>
 80044f4:	1e03      	subs	r3, r0, #0
 80044f6:	d001      	beq.n	80044fc <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e000      	b.n	80044fe <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	0018      	movs	r0, r3
 8004500:	46bd      	mov	sp, r7
 8004502:	b004      	add	sp, #16
 8004504:	bdb0      	pop	{r4, r5, r7, pc}
 8004506:	46c0      	nop			; (mov r8, r8)
 8004508:	80002000 	.word	0x80002000

0800450c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	2202      	movs	r2, #2
 800451c:	4013      	ands	r3, r2
 800451e:	2b02      	cmp	r3, #2
 8004520:	d103      	bne.n	800452a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2200      	movs	r2, #0
 8004528:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	2201      	movs	r2, #1
 8004532:	4013      	ands	r3, r2
 8004534:	2b01      	cmp	r3, #1
 8004536:	d007      	beq.n	8004548 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	699a      	ldr	r2, [r3, #24]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2101      	movs	r1, #1
 8004544:	430a      	orrs	r2, r1
 8004546:	619a      	str	r2, [r3, #24]
  }
}
 8004548:	46c0      	nop			; (mov r8, r8)
 800454a:	46bd      	mov	sp, r7
 800454c:	b002      	add	sp, #8
 800454e:	bd80      	pop	{r7, pc}

08004550 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	603b      	str	r3, [r7, #0]
 800455c:	1dfb      	adds	r3, r7, #7
 800455e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004560:	e021      	b.n	80045a6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	3301      	adds	r3, #1
 8004566:	d01e      	beq.n	80045a6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004568:	f7fe f896 	bl	8002698 <HAL_GetTick>
 800456c:	0002      	movs	r2, r0
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	429a      	cmp	r2, r3
 8004576:	d302      	bcc.n	800457e <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d113      	bne.n	80045a6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004582:	2220      	movs	r2, #32
 8004584:	431a      	orrs	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2241      	movs	r2, #65	; 0x41
 800458e:	2120      	movs	r1, #32
 8004590:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2242      	movs	r2, #66	; 0x42
 8004596:	2100      	movs	r1, #0
 8004598:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2240      	movs	r2, #64	; 0x40
 800459e:	2100      	movs	r1, #0
 80045a0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e00f      	b.n	80045c6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	4013      	ands	r3, r2
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	425a      	negs	r2, r3
 80045b6:	4153      	adcs	r3, r2
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	001a      	movs	r2, r3
 80045bc:	1dfb      	adds	r3, r7, #7
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d0ce      	beq.n	8004562 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	0018      	movs	r0, r3
 80045c8:	46bd      	mov	sp, r7
 80045ca:	b004      	add	sp, #16
 80045cc:	bd80      	pop	{r7, pc}

080045ce <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b084      	sub	sp, #16
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	60f8      	str	r0, [r7, #12]
 80045d6:	60b9      	str	r1, [r7, #8]
 80045d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045da:	e02b      	b.n	8004634 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	68b9      	ldr	r1, [r7, #8]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	0018      	movs	r0, r3
 80045e4:	f000 f86e 	bl	80046c4 <I2C_IsErrorOccurred>
 80045e8:	1e03      	subs	r3, r0, #0
 80045ea:	d001      	beq.n	80045f0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e029      	b.n	8004644 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	3301      	adds	r3, #1
 80045f4:	d01e      	beq.n	8004634 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045f6:	f7fe f84f 	bl	8002698 <HAL_GetTick>
 80045fa:	0002      	movs	r2, r0
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	429a      	cmp	r2, r3
 8004604:	d302      	bcc.n	800460c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d113      	bne.n	8004634 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004610:	2220      	movs	r2, #32
 8004612:	431a      	orrs	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2241      	movs	r2, #65	; 0x41
 800461c:	2120      	movs	r1, #32
 800461e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2242      	movs	r2, #66	; 0x42
 8004624:	2100      	movs	r1, #0
 8004626:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2240      	movs	r2, #64	; 0x40
 800462c:	2100      	movs	r1, #0
 800462e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e007      	b.n	8004644 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	2202      	movs	r2, #2
 800463c:	4013      	ands	r3, r2
 800463e:	2b02      	cmp	r3, #2
 8004640:	d1cc      	bne.n	80045dc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	0018      	movs	r0, r3
 8004646:	46bd      	mov	sp, r7
 8004648:	b004      	add	sp, #16
 800464a:	bd80      	pop	{r7, pc}

0800464c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004658:	e028      	b.n	80046ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	68b9      	ldr	r1, [r7, #8]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	0018      	movs	r0, r3
 8004662:	f000 f82f 	bl	80046c4 <I2C_IsErrorOccurred>
 8004666:	1e03      	subs	r3, r0, #0
 8004668:	d001      	beq.n	800466e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e026      	b.n	80046bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800466e:	f7fe f813 	bl	8002698 <HAL_GetTick>
 8004672:	0002      	movs	r2, r0
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	429a      	cmp	r2, r3
 800467c:	d302      	bcc.n	8004684 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d113      	bne.n	80046ac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004688:	2220      	movs	r2, #32
 800468a:	431a      	orrs	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2241      	movs	r2, #65	; 0x41
 8004694:	2120      	movs	r1, #32
 8004696:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2242      	movs	r2, #66	; 0x42
 800469c:	2100      	movs	r1, #0
 800469e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2240      	movs	r2, #64	; 0x40
 80046a4:	2100      	movs	r1, #0
 80046a6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e007      	b.n	80046bc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	2220      	movs	r2, #32
 80046b4:	4013      	ands	r3, r2
 80046b6:	2b20      	cmp	r3, #32
 80046b8:	d1cf      	bne.n	800465a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	0018      	movs	r0, r3
 80046be:	46bd      	mov	sp, r7
 80046c0:	b004      	add	sp, #16
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046c4:	b590      	push	{r4, r7, lr}
 80046c6:	b08b      	sub	sp, #44	; 0x2c
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046d0:	2327      	movs	r3, #39	; 0x27
 80046d2:	18fb      	adds	r3, r7, r3
 80046d4:	2200      	movs	r2, #0
 80046d6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80046e0:	2300      	movs	r3, #0
 80046e2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	2210      	movs	r2, #16
 80046ec:	4013      	ands	r3, r2
 80046ee:	d100      	bne.n	80046f2 <I2C_IsErrorOccurred+0x2e>
 80046f0:	e082      	b.n	80047f8 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2210      	movs	r2, #16
 80046f8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80046fa:	e060      	b.n	80047be <I2C_IsErrorOccurred+0xfa>
 80046fc:	2427      	movs	r4, #39	; 0x27
 80046fe:	193b      	adds	r3, r7, r4
 8004700:	193a      	adds	r2, r7, r4
 8004702:	7812      	ldrb	r2, [r2, #0]
 8004704:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	3301      	adds	r3, #1
 800470a:	d058      	beq.n	80047be <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800470c:	f7fd ffc4 	bl	8002698 <HAL_GetTick>
 8004710:	0002      	movs	r2, r0
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	429a      	cmp	r2, r3
 800471a:	d306      	bcc.n	800472a <I2C_IsErrorOccurred+0x66>
 800471c:	193b      	adds	r3, r7, r4
 800471e:	193a      	adds	r2, r7, r4
 8004720:	7812      	ldrb	r2, [r2, #0]
 8004722:	701a      	strb	r2, [r3, #0]
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d149      	bne.n	80047be <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685a      	ldr	r2, [r3, #4]
 8004730:	2380      	movs	r3, #128	; 0x80
 8004732:	01db      	lsls	r3, r3, #7
 8004734:	4013      	ands	r3, r2
 8004736:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004738:	2013      	movs	r0, #19
 800473a:	183b      	adds	r3, r7, r0
 800473c:	68fa      	ldr	r2, [r7, #12]
 800473e:	2142      	movs	r1, #66	; 0x42
 8004740:	5c52      	ldrb	r2, [r2, r1]
 8004742:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	699a      	ldr	r2, [r3, #24]
 800474a:	2380      	movs	r3, #128	; 0x80
 800474c:	021b      	lsls	r3, r3, #8
 800474e:	401a      	ands	r2, r3
 8004750:	2380      	movs	r3, #128	; 0x80
 8004752:	021b      	lsls	r3, r3, #8
 8004754:	429a      	cmp	r2, r3
 8004756:	d126      	bne.n	80047a6 <I2C_IsErrorOccurred+0xe2>
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	2380      	movs	r3, #128	; 0x80
 800475c:	01db      	lsls	r3, r3, #7
 800475e:	429a      	cmp	r2, r3
 8004760:	d021      	beq.n	80047a6 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8004762:	183b      	adds	r3, r7, r0
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	2b20      	cmp	r3, #32
 8004768:	d01d      	beq.n	80047a6 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	685a      	ldr	r2, [r3, #4]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2180      	movs	r1, #128	; 0x80
 8004776:	01c9      	lsls	r1, r1, #7
 8004778:	430a      	orrs	r2, r1
 800477a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800477c:	f7fd ff8c 	bl	8002698 <HAL_GetTick>
 8004780:	0003      	movs	r3, r0
 8004782:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004784:	e00f      	b.n	80047a6 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004786:	f7fd ff87 	bl	8002698 <HAL_GetTick>
 800478a:	0002      	movs	r2, r0
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b19      	cmp	r3, #25
 8004792:	d908      	bls.n	80047a6 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004794:	6a3b      	ldr	r3, [r7, #32]
 8004796:	2220      	movs	r2, #32
 8004798:	4313      	orrs	r3, r2
 800479a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800479c:	2327      	movs	r3, #39	; 0x27
 800479e:	18fb      	adds	r3, r7, r3
 80047a0:	2201      	movs	r2, #1
 80047a2:	701a      	strb	r2, [r3, #0]

              break;
 80047a4:	e00b      	b.n	80047be <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	2220      	movs	r2, #32
 80047ae:	4013      	ands	r3, r2
 80047b0:	2127      	movs	r1, #39	; 0x27
 80047b2:	187a      	adds	r2, r7, r1
 80047b4:	1879      	adds	r1, r7, r1
 80047b6:	7809      	ldrb	r1, [r1, #0]
 80047b8:	7011      	strb	r1, [r2, #0]
 80047ba:	2b20      	cmp	r3, #32
 80047bc:	d1e3      	bne.n	8004786 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	2220      	movs	r2, #32
 80047c6:	4013      	ands	r3, r2
 80047c8:	2b20      	cmp	r3, #32
 80047ca:	d004      	beq.n	80047d6 <I2C_IsErrorOccurred+0x112>
 80047cc:	2327      	movs	r3, #39	; 0x27
 80047ce:	18fb      	adds	r3, r7, r3
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d092      	beq.n	80046fc <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80047d6:	2327      	movs	r3, #39	; 0x27
 80047d8:	18fb      	adds	r3, r7, r3
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d103      	bne.n	80047e8 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2220      	movs	r2, #32
 80047e6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	2204      	movs	r2, #4
 80047ec:	4313      	orrs	r3, r2
 80047ee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80047f0:	2327      	movs	r3, #39	; 0x27
 80047f2:	18fb      	adds	r3, r7, r3
 80047f4:	2201      	movs	r2, #1
 80047f6:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	2380      	movs	r3, #128	; 0x80
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	4013      	ands	r3, r2
 8004808:	d00c      	beq.n	8004824 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800480a:	6a3b      	ldr	r3, [r7, #32]
 800480c:	2201      	movs	r2, #1
 800480e:	4313      	orrs	r3, r2
 8004810:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2280      	movs	r2, #128	; 0x80
 8004818:	0052      	lsls	r2, r2, #1
 800481a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800481c:	2327      	movs	r3, #39	; 0x27
 800481e:	18fb      	adds	r3, r7, r3
 8004820:	2201      	movs	r2, #1
 8004822:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	2380      	movs	r3, #128	; 0x80
 8004828:	00db      	lsls	r3, r3, #3
 800482a:	4013      	ands	r3, r2
 800482c:	d00c      	beq.n	8004848 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800482e:	6a3b      	ldr	r3, [r7, #32]
 8004830:	2208      	movs	r2, #8
 8004832:	4313      	orrs	r3, r2
 8004834:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2280      	movs	r2, #128	; 0x80
 800483c:	00d2      	lsls	r2, r2, #3
 800483e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004840:	2327      	movs	r3, #39	; 0x27
 8004842:	18fb      	adds	r3, r7, r3
 8004844:	2201      	movs	r2, #1
 8004846:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	2380      	movs	r3, #128	; 0x80
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4013      	ands	r3, r2
 8004850:	d00c      	beq.n	800486c <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004852:	6a3b      	ldr	r3, [r7, #32]
 8004854:	2202      	movs	r2, #2
 8004856:	4313      	orrs	r3, r2
 8004858:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2280      	movs	r2, #128	; 0x80
 8004860:	0092      	lsls	r2, r2, #2
 8004862:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004864:	2327      	movs	r3, #39	; 0x27
 8004866:	18fb      	adds	r3, r7, r3
 8004868:	2201      	movs	r2, #1
 800486a:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800486c:	2327      	movs	r3, #39	; 0x27
 800486e:	18fb      	adds	r3, r7, r3
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d01d      	beq.n	80048b2 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	0018      	movs	r0, r3
 800487a:	f7ff fe47 	bl	800450c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685a      	ldr	r2, [r3, #4]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	490d      	ldr	r1, [pc, #52]	; (80048c0 <I2C_IsErrorOccurred+0x1fc>)
 800488a:	400a      	ands	r2, r1
 800488c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	431a      	orrs	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2241      	movs	r2, #65	; 0x41
 800489e:	2120      	movs	r1, #32
 80048a0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2242      	movs	r2, #66	; 0x42
 80048a6:	2100      	movs	r1, #0
 80048a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2240      	movs	r2, #64	; 0x40
 80048ae:	2100      	movs	r1, #0
 80048b0:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80048b2:	2327      	movs	r3, #39	; 0x27
 80048b4:	18fb      	adds	r3, r7, r3
 80048b6:	781b      	ldrb	r3, [r3, #0]
}
 80048b8:	0018      	movs	r0, r3
 80048ba:	46bd      	mov	sp, r7
 80048bc:	b00b      	add	sp, #44	; 0x2c
 80048be:	bd90      	pop	{r4, r7, pc}
 80048c0:	fe00e800 	.word	0xfe00e800

080048c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80048c4:	b590      	push	{r4, r7, lr}
 80048c6:	b087      	sub	sp, #28
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	0008      	movs	r0, r1
 80048ce:	0011      	movs	r1, r2
 80048d0:	607b      	str	r3, [r7, #4]
 80048d2:	240a      	movs	r4, #10
 80048d4:	193b      	adds	r3, r7, r4
 80048d6:	1c02      	adds	r2, r0, #0
 80048d8:	801a      	strh	r2, [r3, #0]
 80048da:	2009      	movs	r0, #9
 80048dc:	183b      	adds	r3, r7, r0
 80048de:	1c0a      	adds	r2, r1, #0
 80048e0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048e2:	193b      	adds	r3, r7, r4
 80048e4:	881b      	ldrh	r3, [r3, #0]
 80048e6:	059b      	lsls	r3, r3, #22
 80048e8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048ea:	183b      	adds	r3, r7, r0
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	0419      	lsls	r1, r3, #16
 80048f0:	23ff      	movs	r3, #255	; 0xff
 80048f2:	041b      	lsls	r3, r3, #16
 80048f4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048f6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fe:	4313      	orrs	r3, r2
 8004900:	005b      	lsls	r3, r3, #1
 8004902:	085b      	lsrs	r3, r3, #1
 8004904:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800490e:	0d51      	lsrs	r1, r2, #21
 8004910:	2280      	movs	r2, #128	; 0x80
 8004912:	00d2      	lsls	r2, r2, #3
 8004914:	400a      	ands	r2, r1
 8004916:	4907      	ldr	r1, [pc, #28]	; (8004934 <I2C_TransferConfig+0x70>)
 8004918:	430a      	orrs	r2, r1
 800491a:	43d2      	mvns	r2, r2
 800491c:	401a      	ands	r2, r3
 800491e:	0011      	movs	r1, r2
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	430a      	orrs	r2, r1
 8004928:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800492a:	46c0      	nop			; (mov r8, r8)
 800492c:	46bd      	mov	sp, r7
 800492e:	b007      	add	sp, #28
 8004930:	bd90      	pop	{r4, r7, pc}
 8004932:	46c0      	nop			; (mov r8, r8)
 8004934:	03ff63ff 	.word	0x03ff63ff

08004938 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2241      	movs	r2, #65	; 0x41
 8004946:	5c9b      	ldrb	r3, [r3, r2]
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b20      	cmp	r3, #32
 800494c:	d138      	bne.n	80049c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2240      	movs	r2, #64	; 0x40
 8004952:	5c9b      	ldrb	r3, [r3, r2]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d101      	bne.n	800495c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004958:	2302      	movs	r3, #2
 800495a:	e032      	b.n	80049c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2240      	movs	r2, #64	; 0x40
 8004960:	2101      	movs	r1, #1
 8004962:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2241      	movs	r2, #65	; 0x41
 8004968:	2124      	movs	r1, #36	; 0x24
 800496a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2101      	movs	r1, #1
 8004978:	438a      	bics	r2, r1
 800497a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4911      	ldr	r1, [pc, #68]	; (80049cc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004988:	400a      	ands	r2, r1
 800498a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6819      	ldr	r1, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	430a      	orrs	r2, r1
 800499a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2101      	movs	r1, #1
 80049a8:	430a      	orrs	r2, r1
 80049aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2241      	movs	r2, #65	; 0x41
 80049b0:	2120      	movs	r1, #32
 80049b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2240      	movs	r2, #64	; 0x40
 80049b8:	2100      	movs	r1, #0
 80049ba:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80049bc:	2300      	movs	r3, #0
 80049be:	e000      	b.n	80049c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80049c0:	2302      	movs	r3, #2
  }
}
 80049c2:	0018      	movs	r0, r3
 80049c4:	46bd      	mov	sp, r7
 80049c6:	b002      	add	sp, #8
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	46c0      	nop			; (mov r8, r8)
 80049cc:	ffffefff 	.word	0xffffefff

080049d0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2241      	movs	r2, #65	; 0x41
 80049de:	5c9b      	ldrb	r3, [r3, r2]
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b20      	cmp	r3, #32
 80049e4:	d139      	bne.n	8004a5a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2240      	movs	r2, #64	; 0x40
 80049ea:	5c9b      	ldrb	r3, [r3, r2]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d101      	bne.n	80049f4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80049f0:	2302      	movs	r3, #2
 80049f2:	e033      	b.n	8004a5c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2240      	movs	r2, #64	; 0x40
 80049f8:	2101      	movs	r1, #1
 80049fa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2241      	movs	r2, #65	; 0x41
 8004a00:	2124      	movs	r1, #36	; 0x24
 8004a02:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2101      	movs	r1, #1
 8004a10:	438a      	bics	r2, r1
 8004a12:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	4a11      	ldr	r2, [pc, #68]	; (8004a64 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004a20:	4013      	ands	r3, r2
 8004a22:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	021b      	lsls	r3, r3, #8
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2101      	movs	r1, #1
 8004a42:	430a      	orrs	r2, r1
 8004a44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2241      	movs	r2, #65	; 0x41
 8004a4a:	2120      	movs	r1, #32
 8004a4c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2240      	movs	r2, #64	; 0x40
 8004a52:	2100      	movs	r1, #0
 8004a54:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004a56:	2300      	movs	r3, #0
 8004a58:	e000      	b.n	8004a5c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a5a:	2302      	movs	r3, #2
  }
}
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	b004      	add	sp, #16
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	fffff0ff 	.word	0xfffff0ff

08004a68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004a70:	4b19      	ldr	r3, [pc, #100]	; (8004ad8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a19      	ldr	r2, [pc, #100]	; (8004adc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004a76:	4013      	ands	r3, r2
 8004a78:	0019      	movs	r1, r3
 8004a7a:	4b17      	ldr	r3, [pc, #92]	; (8004ad8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	430a      	orrs	r2, r1
 8004a80:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	2380      	movs	r3, #128	; 0x80
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d11f      	bne.n	8004acc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004a8c:	4b14      	ldr	r3, [pc, #80]	; (8004ae0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	0013      	movs	r3, r2
 8004a92:	005b      	lsls	r3, r3, #1
 8004a94:	189b      	adds	r3, r3, r2
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	4912      	ldr	r1, [pc, #72]	; (8004ae4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004a9a:	0018      	movs	r0, r3
 8004a9c:	f7fb fb3a 	bl	8000114 <__udivsi3>
 8004aa0:	0003      	movs	r3, r0
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004aa6:	e008      	b.n	8004aba <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	60fb      	str	r3, [r7, #12]
 8004ab4:	e001      	b.n	8004aba <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e009      	b.n	8004ace <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004aba:	4b07      	ldr	r3, [pc, #28]	; (8004ad8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004abc:	695a      	ldr	r2, [r3, #20]
 8004abe:	2380      	movs	r3, #128	; 0x80
 8004ac0:	00db      	lsls	r3, r3, #3
 8004ac2:	401a      	ands	r2, r3
 8004ac4:	2380      	movs	r3, #128	; 0x80
 8004ac6:	00db      	lsls	r3, r3, #3
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d0ed      	beq.n	8004aa8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	0018      	movs	r0, r3
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	b004      	add	sp, #16
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	46c0      	nop			; (mov r8, r8)
 8004ad8:	40007000 	.word	0x40007000
 8004adc:	fffff9ff 	.word	0xfffff9ff
 8004ae0:	2000001c 	.word	0x2000001c
 8004ae4:	000f4240 	.word	0x000f4240

08004ae8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004aec:	4b03      	ldr	r3, [pc, #12]	; (8004afc <LL_RCC_GetAPB1Prescaler+0x14>)
 8004aee:	689a      	ldr	r2, [r3, #8]
 8004af0:	23e0      	movs	r3, #224	; 0xe0
 8004af2:	01db      	lsls	r3, r3, #7
 8004af4:	4013      	ands	r3, r2
}
 8004af6:	0018      	movs	r0, r3
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	40021000 	.word	0x40021000

08004b00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b088      	sub	sp, #32
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e2f3      	b.n	80050fa <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2201      	movs	r2, #1
 8004b18:	4013      	ands	r3, r2
 8004b1a:	d100      	bne.n	8004b1e <HAL_RCC_OscConfig+0x1e>
 8004b1c:	e07c      	b.n	8004c18 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b1e:	4bc3      	ldr	r3, [pc, #780]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	2238      	movs	r2, #56	; 0x38
 8004b24:	4013      	ands	r3, r2
 8004b26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b28:	4bc0      	ldr	r3, [pc, #768]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	2203      	movs	r2, #3
 8004b2e:	4013      	ands	r3, r2
 8004b30:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	2b10      	cmp	r3, #16
 8004b36:	d102      	bne.n	8004b3e <HAL_RCC_OscConfig+0x3e>
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	2b03      	cmp	r3, #3
 8004b3c:	d002      	beq.n	8004b44 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	2b08      	cmp	r3, #8
 8004b42:	d10b      	bne.n	8004b5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b44:	4bb9      	ldr	r3, [pc, #740]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	2380      	movs	r3, #128	; 0x80
 8004b4a:	029b      	lsls	r3, r3, #10
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	d062      	beq.n	8004c16 <HAL_RCC_OscConfig+0x116>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d15e      	bne.n	8004c16 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e2ce      	b.n	80050fa <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685a      	ldr	r2, [r3, #4]
 8004b60:	2380      	movs	r3, #128	; 0x80
 8004b62:	025b      	lsls	r3, r3, #9
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d107      	bne.n	8004b78 <HAL_RCC_OscConfig+0x78>
 8004b68:	4bb0      	ldr	r3, [pc, #704]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	4baf      	ldr	r3, [pc, #700]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004b6e:	2180      	movs	r1, #128	; 0x80
 8004b70:	0249      	lsls	r1, r1, #9
 8004b72:	430a      	orrs	r2, r1
 8004b74:	601a      	str	r2, [r3, #0]
 8004b76:	e020      	b.n	8004bba <HAL_RCC_OscConfig+0xba>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685a      	ldr	r2, [r3, #4]
 8004b7c:	23a0      	movs	r3, #160	; 0xa0
 8004b7e:	02db      	lsls	r3, r3, #11
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d10e      	bne.n	8004ba2 <HAL_RCC_OscConfig+0xa2>
 8004b84:	4ba9      	ldr	r3, [pc, #676]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	4ba8      	ldr	r3, [pc, #672]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004b8a:	2180      	movs	r1, #128	; 0x80
 8004b8c:	02c9      	lsls	r1, r1, #11
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	601a      	str	r2, [r3, #0]
 8004b92:	4ba6      	ldr	r3, [pc, #664]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	4ba5      	ldr	r3, [pc, #660]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004b98:	2180      	movs	r1, #128	; 0x80
 8004b9a:	0249      	lsls	r1, r1, #9
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	e00b      	b.n	8004bba <HAL_RCC_OscConfig+0xba>
 8004ba2:	4ba2      	ldr	r3, [pc, #648]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	4ba1      	ldr	r3, [pc, #644]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004ba8:	49a1      	ldr	r1, [pc, #644]	; (8004e30 <HAL_RCC_OscConfig+0x330>)
 8004baa:	400a      	ands	r2, r1
 8004bac:	601a      	str	r2, [r3, #0]
 8004bae:	4b9f      	ldr	r3, [pc, #636]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	4b9e      	ldr	r3, [pc, #632]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004bb4:	499f      	ldr	r1, [pc, #636]	; (8004e34 <HAL_RCC_OscConfig+0x334>)
 8004bb6:	400a      	ands	r2, r1
 8004bb8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d014      	beq.n	8004bec <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc2:	f7fd fd69 	bl	8002698 <HAL_GetTick>
 8004bc6:	0003      	movs	r3, r0
 8004bc8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bca:	e008      	b.n	8004bde <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bcc:	f7fd fd64 	bl	8002698 <HAL_GetTick>
 8004bd0:	0002      	movs	r2, r0
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b64      	cmp	r3, #100	; 0x64
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e28d      	b.n	80050fa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bde:	4b93      	ldr	r3, [pc, #588]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	2380      	movs	r3, #128	; 0x80
 8004be4:	029b      	lsls	r3, r3, #10
 8004be6:	4013      	ands	r3, r2
 8004be8:	d0f0      	beq.n	8004bcc <HAL_RCC_OscConfig+0xcc>
 8004bea:	e015      	b.n	8004c18 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bec:	f7fd fd54 	bl	8002698 <HAL_GetTick>
 8004bf0:	0003      	movs	r3, r0
 8004bf2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bf4:	e008      	b.n	8004c08 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bf6:	f7fd fd4f 	bl	8002698 <HAL_GetTick>
 8004bfa:	0002      	movs	r2, r0
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b64      	cmp	r3, #100	; 0x64
 8004c02:	d901      	bls.n	8004c08 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e278      	b.n	80050fa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c08:	4b88      	ldr	r3, [pc, #544]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	2380      	movs	r3, #128	; 0x80
 8004c0e:	029b      	lsls	r3, r3, #10
 8004c10:	4013      	ands	r3, r2
 8004c12:	d1f0      	bne.n	8004bf6 <HAL_RCC_OscConfig+0xf6>
 8004c14:	e000      	b.n	8004c18 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c16:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2202      	movs	r2, #2
 8004c1e:	4013      	ands	r3, r2
 8004c20:	d100      	bne.n	8004c24 <HAL_RCC_OscConfig+0x124>
 8004c22:	e099      	b.n	8004d58 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c24:	4b81      	ldr	r3, [pc, #516]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	2238      	movs	r2, #56	; 0x38
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c2e:	4b7f      	ldr	r3, [pc, #508]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	2203      	movs	r2, #3
 8004c34:	4013      	ands	r3, r2
 8004c36:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	2b10      	cmp	r3, #16
 8004c3c:	d102      	bne.n	8004c44 <HAL_RCC_OscConfig+0x144>
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d002      	beq.n	8004c4a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d135      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c4a:	4b78      	ldr	r3, [pc, #480]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004c4c:	681a      	ldr	r2, [r3, #0]
 8004c4e:	2380      	movs	r3, #128	; 0x80
 8004c50:	00db      	lsls	r3, r3, #3
 8004c52:	4013      	ands	r3, r2
 8004c54:	d005      	beq.n	8004c62 <HAL_RCC_OscConfig+0x162>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d101      	bne.n	8004c62 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e24b      	b.n	80050fa <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c62:	4b72      	ldr	r3, [pc, #456]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	4a74      	ldr	r2, [pc, #464]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004c68:	4013      	ands	r3, r2
 8004c6a:	0019      	movs	r1, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	021a      	lsls	r2, r3, #8
 8004c72:	4b6e      	ldr	r3, [pc, #440]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004c74:	430a      	orrs	r2, r1
 8004c76:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d112      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004c7e:	4b6b      	ldr	r3, [pc, #428]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a6e      	ldr	r2, [pc, #440]	; (8004e3c <HAL_RCC_OscConfig+0x33c>)
 8004c84:	4013      	ands	r3, r2
 8004c86:	0019      	movs	r1, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	691a      	ldr	r2, [r3, #16]
 8004c8c:	4b67      	ldr	r3, [pc, #412]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004c92:	4b66      	ldr	r3, [pc, #408]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	0adb      	lsrs	r3, r3, #11
 8004c98:	2207      	movs	r2, #7
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	4a68      	ldr	r2, [pc, #416]	; (8004e40 <HAL_RCC_OscConfig+0x340>)
 8004c9e:	40da      	lsrs	r2, r3
 8004ca0:	4b68      	ldr	r3, [pc, #416]	; (8004e44 <HAL_RCC_OscConfig+0x344>)
 8004ca2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004ca4:	4b68      	ldr	r3, [pc, #416]	; (8004e48 <HAL_RCC_OscConfig+0x348>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	0018      	movs	r0, r3
 8004caa:	f7fd f91f 	bl	8001eec <HAL_InitTick>
 8004cae:	1e03      	subs	r3, r0, #0
 8004cb0:	d051      	beq.n	8004d56 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e221      	b.n	80050fa <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d030      	beq.n	8004d20 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004cbe:	4b5b      	ldr	r3, [pc, #364]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a5e      	ldr	r2, [pc, #376]	; (8004e3c <HAL_RCC_OscConfig+0x33c>)
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	0019      	movs	r1, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	691a      	ldr	r2, [r3, #16]
 8004ccc:	4b57      	ldr	r3, [pc, #348]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004cd2:	4b56      	ldr	r3, [pc, #344]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	4b55      	ldr	r3, [pc, #340]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004cd8:	2180      	movs	r1, #128	; 0x80
 8004cda:	0049      	lsls	r1, r1, #1
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce0:	f7fd fcda 	bl	8002698 <HAL_GetTick>
 8004ce4:	0003      	movs	r3, r0
 8004ce6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ce8:	e008      	b.n	8004cfc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cea:	f7fd fcd5 	bl	8002698 <HAL_GetTick>
 8004cee:	0002      	movs	r2, r0
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d901      	bls.n	8004cfc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e1fe      	b.n	80050fa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cfc:	4b4b      	ldr	r3, [pc, #300]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	2380      	movs	r3, #128	; 0x80
 8004d02:	00db      	lsls	r3, r3, #3
 8004d04:	4013      	ands	r3, r2
 8004d06:	d0f0      	beq.n	8004cea <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d08:	4b48      	ldr	r3, [pc, #288]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	4a4a      	ldr	r2, [pc, #296]	; (8004e38 <HAL_RCC_OscConfig+0x338>)
 8004d0e:	4013      	ands	r3, r2
 8004d10:	0019      	movs	r1, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	021a      	lsls	r2, r3, #8
 8004d18:	4b44      	ldr	r3, [pc, #272]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	605a      	str	r2, [r3, #4]
 8004d1e:	e01b      	b.n	8004d58 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004d20:	4b42      	ldr	r3, [pc, #264]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	4b41      	ldr	r3, [pc, #260]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004d26:	4949      	ldr	r1, [pc, #292]	; (8004e4c <HAL_RCC_OscConfig+0x34c>)
 8004d28:	400a      	ands	r2, r1
 8004d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d2c:	f7fd fcb4 	bl	8002698 <HAL_GetTick>
 8004d30:	0003      	movs	r3, r0
 8004d32:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d34:	e008      	b.n	8004d48 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d36:	f7fd fcaf 	bl	8002698 <HAL_GetTick>
 8004d3a:	0002      	movs	r2, r0
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d901      	bls.n	8004d48 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e1d8      	b.n	80050fa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d48:	4b38      	ldr	r3, [pc, #224]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	2380      	movs	r3, #128	; 0x80
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	4013      	ands	r3, r2
 8004d52:	d1f0      	bne.n	8004d36 <HAL_RCC_OscConfig+0x236>
 8004d54:	e000      	b.n	8004d58 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d56:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2208      	movs	r2, #8
 8004d5e:	4013      	ands	r3, r2
 8004d60:	d047      	beq.n	8004df2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004d62:	4b32      	ldr	r3, [pc, #200]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	2238      	movs	r2, #56	; 0x38
 8004d68:	4013      	ands	r3, r2
 8004d6a:	2b18      	cmp	r3, #24
 8004d6c:	d10a      	bne.n	8004d84 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004d6e:	4b2f      	ldr	r3, [pc, #188]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d72:	2202      	movs	r2, #2
 8004d74:	4013      	ands	r3, r2
 8004d76:	d03c      	beq.n	8004df2 <HAL_RCC_OscConfig+0x2f2>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d138      	bne.n	8004df2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e1ba      	b.n	80050fa <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d019      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004d8c:	4b27      	ldr	r3, [pc, #156]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004d8e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d90:	4b26      	ldr	r3, [pc, #152]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004d92:	2101      	movs	r1, #1
 8004d94:	430a      	orrs	r2, r1
 8004d96:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d98:	f7fd fc7e 	bl	8002698 <HAL_GetTick>
 8004d9c:	0003      	movs	r3, r0
 8004d9e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004da0:	e008      	b.n	8004db4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004da2:	f7fd fc79 	bl	8002698 <HAL_GetTick>
 8004da6:	0002      	movs	r2, r0
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d901      	bls.n	8004db4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e1a2      	b.n	80050fa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004db4:	4b1d      	ldr	r3, [pc, #116]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004db8:	2202      	movs	r2, #2
 8004dba:	4013      	ands	r3, r2
 8004dbc:	d0f1      	beq.n	8004da2 <HAL_RCC_OscConfig+0x2a2>
 8004dbe:	e018      	b.n	8004df2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004dc0:	4b1a      	ldr	r3, [pc, #104]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004dc2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004dc4:	4b19      	ldr	r3, [pc, #100]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	438a      	bics	r2, r1
 8004dca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dcc:	f7fd fc64 	bl	8002698 <HAL_GetTick>
 8004dd0:	0003      	movs	r3, r0
 8004dd2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004dd4:	e008      	b.n	8004de8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dd6:	f7fd fc5f 	bl	8002698 <HAL_GetTick>
 8004dda:	0002      	movs	r2, r0
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	1ad3      	subs	r3, r2, r3
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d901      	bls.n	8004de8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e188      	b.n	80050fa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004de8:	4b10      	ldr	r3, [pc, #64]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dec:	2202      	movs	r2, #2
 8004dee:	4013      	ands	r3, r2
 8004df0:	d1f1      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2204      	movs	r2, #4
 8004df8:	4013      	ands	r3, r2
 8004dfa:	d100      	bne.n	8004dfe <HAL_RCC_OscConfig+0x2fe>
 8004dfc:	e0c6      	b.n	8004f8c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dfe:	231f      	movs	r3, #31
 8004e00:	18fb      	adds	r3, r7, r3
 8004e02:	2200      	movs	r2, #0
 8004e04:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004e06:	4b09      	ldr	r3, [pc, #36]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	2238      	movs	r2, #56	; 0x38
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	2b20      	cmp	r3, #32
 8004e10:	d11e      	bne.n	8004e50 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004e12:	4b06      	ldr	r3, [pc, #24]	; (8004e2c <HAL_RCC_OscConfig+0x32c>)
 8004e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e16:	2202      	movs	r2, #2
 8004e18:	4013      	ands	r3, r2
 8004e1a:	d100      	bne.n	8004e1e <HAL_RCC_OscConfig+0x31e>
 8004e1c:	e0b6      	b.n	8004f8c <HAL_RCC_OscConfig+0x48c>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d000      	beq.n	8004e28 <HAL_RCC_OscConfig+0x328>
 8004e26:	e0b1      	b.n	8004f8c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e166      	b.n	80050fa <HAL_RCC_OscConfig+0x5fa>
 8004e2c:	40021000 	.word	0x40021000
 8004e30:	fffeffff 	.word	0xfffeffff
 8004e34:	fffbffff 	.word	0xfffbffff
 8004e38:	ffff80ff 	.word	0xffff80ff
 8004e3c:	ffffc7ff 	.word	0xffffc7ff
 8004e40:	00f42400 	.word	0x00f42400
 8004e44:	2000001c 	.word	0x2000001c
 8004e48:	20000028 	.word	0x20000028
 8004e4c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e50:	4bac      	ldr	r3, [pc, #688]	; (8005104 <HAL_RCC_OscConfig+0x604>)
 8004e52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e54:	2380      	movs	r3, #128	; 0x80
 8004e56:	055b      	lsls	r3, r3, #21
 8004e58:	4013      	ands	r3, r2
 8004e5a:	d101      	bne.n	8004e60 <HAL_RCC_OscConfig+0x360>
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e000      	b.n	8004e62 <HAL_RCC_OscConfig+0x362>
 8004e60:	2300      	movs	r3, #0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d011      	beq.n	8004e8a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004e66:	4ba7      	ldr	r3, [pc, #668]	; (8005104 <HAL_RCC_OscConfig+0x604>)
 8004e68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e6a:	4ba6      	ldr	r3, [pc, #664]	; (8005104 <HAL_RCC_OscConfig+0x604>)
 8004e6c:	2180      	movs	r1, #128	; 0x80
 8004e6e:	0549      	lsls	r1, r1, #21
 8004e70:	430a      	orrs	r2, r1
 8004e72:	63da      	str	r2, [r3, #60]	; 0x3c
 8004e74:	4ba3      	ldr	r3, [pc, #652]	; (8005104 <HAL_RCC_OscConfig+0x604>)
 8004e76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e78:	2380      	movs	r3, #128	; 0x80
 8004e7a:	055b      	lsls	r3, r3, #21
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]
 8004e80:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004e82:	231f      	movs	r3, #31
 8004e84:	18fb      	adds	r3, r7, r3
 8004e86:	2201      	movs	r2, #1
 8004e88:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e8a:	4b9f      	ldr	r3, [pc, #636]	; (8005108 <HAL_RCC_OscConfig+0x608>)
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	2380      	movs	r3, #128	; 0x80
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	4013      	ands	r3, r2
 8004e94:	d11a      	bne.n	8004ecc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e96:	4b9c      	ldr	r3, [pc, #624]	; (8005108 <HAL_RCC_OscConfig+0x608>)
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	4b9b      	ldr	r3, [pc, #620]	; (8005108 <HAL_RCC_OscConfig+0x608>)
 8004e9c:	2180      	movs	r1, #128	; 0x80
 8004e9e:	0049      	lsls	r1, r1, #1
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004ea4:	f7fd fbf8 	bl	8002698 <HAL_GetTick>
 8004ea8:	0003      	movs	r3, r0
 8004eaa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004eac:	e008      	b.n	8004ec0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eae:	f7fd fbf3 	bl	8002698 <HAL_GetTick>
 8004eb2:	0002      	movs	r2, r0
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d901      	bls.n	8004ec0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e11c      	b.n	80050fa <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ec0:	4b91      	ldr	r3, [pc, #580]	; (8005108 <HAL_RCC_OscConfig+0x608>)
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	2380      	movs	r3, #128	; 0x80
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	4013      	ands	r3, r2
 8004eca:	d0f0      	beq.n	8004eae <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d106      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x3e2>
 8004ed4:	4b8b      	ldr	r3, [pc, #556]	; (8005104 <HAL_RCC_OscConfig+0x604>)
 8004ed6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ed8:	4b8a      	ldr	r3, [pc, #552]	; (8005104 <HAL_RCC_OscConfig+0x604>)
 8004eda:	2101      	movs	r1, #1
 8004edc:	430a      	orrs	r2, r1
 8004ede:	65da      	str	r2, [r3, #92]	; 0x5c
 8004ee0:	e01c      	b.n	8004f1c <HAL_RCC_OscConfig+0x41c>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	2b05      	cmp	r3, #5
 8004ee8:	d10c      	bne.n	8004f04 <HAL_RCC_OscConfig+0x404>
 8004eea:	4b86      	ldr	r3, [pc, #536]	; (8005104 <HAL_RCC_OscConfig+0x604>)
 8004eec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004eee:	4b85      	ldr	r3, [pc, #532]	; (8005104 <HAL_RCC_OscConfig+0x604>)
 8004ef0:	2104      	movs	r1, #4
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	65da      	str	r2, [r3, #92]	; 0x5c
 8004ef6:	4b83      	ldr	r3, [pc, #524]	; (8005104 <HAL_RCC_OscConfig+0x604>)
 8004ef8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004efa:	4b82      	ldr	r3, [pc, #520]	; (8005104 <HAL_RCC_OscConfig+0x604>)
 8004efc:	2101      	movs	r1, #1
 8004efe:	430a      	orrs	r2, r1
 8004f00:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f02:	e00b      	b.n	8004f1c <HAL_RCC_OscConfig+0x41c>
 8004f04:	4b7f      	ldr	r3, [pc, #508]	; (8005104 <HAL_RCC_OscConfig+0x604>)
 8004f06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f08:	4b7e      	ldr	r3, [pc, #504]	; (8005104 <HAL_RCC_OscConfig+0x604>)
 8004f0a:	2101      	movs	r1, #1
 8004f0c:	438a      	bics	r2, r1
 8004f0e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004f10:	4b7c      	ldr	r3, [pc, #496]	; (8005104 <HAL_RCC_OscConfig+0x604>)
 8004f12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f14:	4b7b      	ldr	r3, [pc, #492]	; (8005104 <HAL_RCC_OscConfig+0x604>)
 8004f16:	2104      	movs	r1, #4
 8004f18:	438a      	bics	r2, r1
 8004f1a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d014      	beq.n	8004f4e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f24:	f7fd fbb8 	bl	8002698 <HAL_GetTick>
 8004f28:	0003      	movs	r3, r0
 8004f2a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f2c:	e009      	b.n	8004f42 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f2e:	f7fd fbb3 	bl	8002698 <HAL_GetTick>
 8004f32:	0002      	movs	r2, r0
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	4a74      	ldr	r2, [pc, #464]	; (800510c <HAL_RCC_OscConfig+0x60c>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e0db      	b.n	80050fa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f42:	4b70      	ldr	r3, [pc, #448]	; (8005104 <HAL_RCC_OscConfig+0x604>)
 8004f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f46:	2202      	movs	r2, #2
 8004f48:	4013      	ands	r3, r2
 8004f4a:	d0f0      	beq.n	8004f2e <HAL_RCC_OscConfig+0x42e>
 8004f4c:	e013      	b.n	8004f76 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f4e:	f7fd fba3 	bl	8002698 <HAL_GetTick>
 8004f52:	0003      	movs	r3, r0
 8004f54:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f56:	e009      	b.n	8004f6c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f58:	f7fd fb9e 	bl	8002698 <HAL_GetTick>
 8004f5c:	0002      	movs	r2, r0
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	4a6a      	ldr	r2, [pc, #424]	; (800510c <HAL_RCC_OscConfig+0x60c>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d901      	bls.n	8004f6c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e0c6      	b.n	80050fa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f6c:	4b65      	ldr	r3, [pc, #404]	; (8005104 <HAL_RCC_OscConfig+0x604>)
 8004f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f70:	2202      	movs	r2, #2
 8004f72:	4013      	ands	r3, r2
 8004f74:	d1f0      	bne.n	8004f58 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004f76:	231f      	movs	r3, #31
 8004f78:	18fb      	adds	r3, r7, r3
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d105      	bne.n	8004f8c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004f80:	4b60      	ldr	r3, [pc, #384]	; (8005104 <HAL_RCC_OscConfig+0x604>)
 8004f82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f84:	4b5f      	ldr	r3, [pc, #380]	; (8005104 <HAL_RCC_OscConfig+0x604>)
 8004f86:	4962      	ldr	r1, [pc, #392]	; (8005110 <HAL_RCC_OscConfig+0x610>)
 8004f88:	400a      	ands	r2, r1
 8004f8a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	69db      	ldr	r3, [r3, #28]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d100      	bne.n	8004f96 <HAL_RCC_OscConfig+0x496>
 8004f94:	e0b0      	b.n	80050f8 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f96:	4b5b      	ldr	r3, [pc, #364]	; (8005104 <HAL_RCC_OscConfig+0x604>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	2238      	movs	r2, #56	; 0x38
 8004f9c:	4013      	ands	r3, r2
 8004f9e:	2b10      	cmp	r3, #16
 8004fa0:	d100      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x4a4>
 8004fa2:	e078      	b.n	8005096 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	69db      	ldr	r3, [r3, #28]
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d153      	bne.n	8005054 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fac:	4b55      	ldr	r3, [pc, #340]	; (8005104 <HAL_RCC_OscConfig+0x604>)
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	4b54      	ldr	r3, [pc, #336]	; (8005104 <HAL_RCC_OscConfig+0x604>)
 8004fb2:	4958      	ldr	r1, [pc, #352]	; (8005114 <HAL_RCC_OscConfig+0x614>)
 8004fb4:	400a      	ands	r2, r1
 8004fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb8:	f7fd fb6e 	bl	8002698 <HAL_GetTick>
 8004fbc:	0003      	movs	r3, r0
 8004fbe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fc0:	e008      	b.n	8004fd4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fc2:	f7fd fb69 	bl	8002698 <HAL_GetTick>
 8004fc6:	0002      	movs	r2, r0
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	2b02      	cmp	r3, #2
 8004fce:	d901      	bls.n	8004fd4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e092      	b.n	80050fa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fd4:	4b4b      	ldr	r3, [pc, #300]	; (8005104 <HAL_RCC_OscConfig+0x604>)
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	2380      	movs	r3, #128	; 0x80
 8004fda:	049b      	lsls	r3, r3, #18
 8004fdc:	4013      	ands	r3, r2
 8004fde:	d1f0      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fe0:	4b48      	ldr	r3, [pc, #288]	; (8005104 <HAL_RCC_OscConfig+0x604>)
 8004fe2:	68db      	ldr	r3, [r3, #12]
 8004fe4:	4a4c      	ldr	r2, [pc, #304]	; (8005118 <HAL_RCC_OscConfig+0x618>)
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	0019      	movs	r1, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a1a      	ldr	r2, [r3, #32]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff8:	021b      	lsls	r3, r3, #8
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005000:	431a      	orrs	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005006:	431a      	orrs	r2, r3
 8005008:	4b3e      	ldr	r3, [pc, #248]	; (8005104 <HAL_RCC_OscConfig+0x604>)
 800500a:	430a      	orrs	r2, r1
 800500c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800500e:	4b3d      	ldr	r3, [pc, #244]	; (8005104 <HAL_RCC_OscConfig+0x604>)
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	4b3c      	ldr	r3, [pc, #240]	; (8005104 <HAL_RCC_OscConfig+0x604>)
 8005014:	2180      	movs	r1, #128	; 0x80
 8005016:	0449      	lsls	r1, r1, #17
 8005018:	430a      	orrs	r2, r1
 800501a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800501c:	4b39      	ldr	r3, [pc, #228]	; (8005104 <HAL_RCC_OscConfig+0x604>)
 800501e:	68da      	ldr	r2, [r3, #12]
 8005020:	4b38      	ldr	r3, [pc, #224]	; (8005104 <HAL_RCC_OscConfig+0x604>)
 8005022:	2180      	movs	r1, #128	; 0x80
 8005024:	0549      	lsls	r1, r1, #21
 8005026:	430a      	orrs	r2, r1
 8005028:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800502a:	f7fd fb35 	bl	8002698 <HAL_GetTick>
 800502e:	0003      	movs	r3, r0
 8005030:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005032:	e008      	b.n	8005046 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005034:	f7fd fb30 	bl	8002698 <HAL_GetTick>
 8005038:	0002      	movs	r2, r0
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	2b02      	cmp	r3, #2
 8005040:	d901      	bls.n	8005046 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e059      	b.n	80050fa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005046:	4b2f      	ldr	r3, [pc, #188]	; (8005104 <HAL_RCC_OscConfig+0x604>)
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	2380      	movs	r3, #128	; 0x80
 800504c:	049b      	lsls	r3, r3, #18
 800504e:	4013      	ands	r3, r2
 8005050:	d0f0      	beq.n	8005034 <HAL_RCC_OscConfig+0x534>
 8005052:	e051      	b.n	80050f8 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005054:	4b2b      	ldr	r3, [pc, #172]	; (8005104 <HAL_RCC_OscConfig+0x604>)
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	4b2a      	ldr	r3, [pc, #168]	; (8005104 <HAL_RCC_OscConfig+0x604>)
 800505a:	492e      	ldr	r1, [pc, #184]	; (8005114 <HAL_RCC_OscConfig+0x614>)
 800505c:	400a      	ands	r2, r1
 800505e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005060:	f7fd fb1a 	bl	8002698 <HAL_GetTick>
 8005064:	0003      	movs	r3, r0
 8005066:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005068:	e008      	b.n	800507c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800506a:	f7fd fb15 	bl	8002698 <HAL_GetTick>
 800506e:	0002      	movs	r2, r0
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b02      	cmp	r3, #2
 8005076:	d901      	bls.n	800507c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e03e      	b.n	80050fa <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800507c:	4b21      	ldr	r3, [pc, #132]	; (8005104 <HAL_RCC_OscConfig+0x604>)
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	2380      	movs	r3, #128	; 0x80
 8005082:	049b      	lsls	r3, r3, #18
 8005084:	4013      	ands	r3, r2
 8005086:	d1f0      	bne.n	800506a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8005088:	4b1e      	ldr	r3, [pc, #120]	; (8005104 <HAL_RCC_OscConfig+0x604>)
 800508a:	68da      	ldr	r2, [r3, #12]
 800508c:	4b1d      	ldr	r3, [pc, #116]	; (8005104 <HAL_RCC_OscConfig+0x604>)
 800508e:	4923      	ldr	r1, [pc, #140]	; (800511c <HAL_RCC_OscConfig+0x61c>)
 8005090:	400a      	ands	r2, r1
 8005092:	60da      	str	r2, [r3, #12]
 8005094:	e030      	b.n	80050f8 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	69db      	ldr	r3, [r3, #28]
 800509a:	2b01      	cmp	r3, #1
 800509c:	d101      	bne.n	80050a2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e02b      	b.n	80050fa <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80050a2:	4b18      	ldr	r3, [pc, #96]	; (8005104 <HAL_RCC_OscConfig+0x604>)
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	2203      	movs	r2, #3
 80050ac:	401a      	ands	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d11e      	bne.n	80050f4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	2270      	movs	r2, #112	; 0x70
 80050ba:	401a      	ands	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d117      	bne.n	80050f4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	23fe      	movs	r3, #254	; 0xfe
 80050c8:	01db      	lsls	r3, r3, #7
 80050ca:	401a      	ands	r2, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d10e      	bne.n	80050f4 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80050d6:	697a      	ldr	r2, [r7, #20]
 80050d8:	23f8      	movs	r3, #248	; 0xf8
 80050da:	039b      	lsls	r3, r3, #14
 80050dc:	401a      	ands	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d106      	bne.n	80050f4 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	0f5b      	lsrs	r3, r3, #29
 80050ea:	075a      	lsls	r2, r3, #29
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d001      	beq.n	80050f8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e000      	b.n	80050fa <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	0018      	movs	r0, r3
 80050fc:	46bd      	mov	sp, r7
 80050fe:	b008      	add	sp, #32
 8005100:	bd80      	pop	{r7, pc}
 8005102:	46c0      	nop			; (mov r8, r8)
 8005104:	40021000 	.word	0x40021000
 8005108:	40007000 	.word	0x40007000
 800510c:	00001388 	.word	0x00001388
 8005110:	efffffff 	.word	0xefffffff
 8005114:	feffffff 	.word	0xfeffffff
 8005118:	1fc1808c 	.word	0x1fc1808c
 800511c:	effefffc 	.word	0xeffefffc

08005120 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d101      	bne.n	8005134 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e0e9      	b.n	8005308 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005134:	4b76      	ldr	r3, [pc, #472]	; (8005310 <HAL_RCC_ClockConfig+0x1f0>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2207      	movs	r2, #7
 800513a:	4013      	ands	r3, r2
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	429a      	cmp	r2, r3
 8005140:	d91e      	bls.n	8005180 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005142:	4b73      	ldr	r3, [pc, #460]	; (8005310 <HAL_RCC_ClockConfig+0x1f0>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2207      	movs	r2, #7
 8005148:	4393      	bics	r3, r2
 800514a:	0019      	movs	r1, r3
 800514c:	4b70      	ldr	r3, [pc, #448]	; (8005310 <HAL_RCC_ClockConfig+0x1f0>)
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	430a      	orrs	r2, r1
 8005152:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005154:	f7fd faa0 	bl	8002698 <HAL_GetTick>
 8005158:	0003      	movs	r3, r0
 800515a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800515c:	e009      	b.n	8005172 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800515e:	f7fd fa9b 	bl	8002698 <HAL_GetTick>
 8005162:	0002      	movs	r2, r0
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	4a6a      	ldr	r2, [pc, #424]	; (8005314 <HAL_RCC_ClockConfig+0x1f4>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d901      	bls.n	8005172 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e0ca      	b.n	8005308 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005172:	4b67      	ldr	r3, [pc, #412]	; (8005310 <HAL_RCC_ClockConfig+0x1f0>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2207      	movs	r2, #7
 8005178:	4013      	ands	r3, r2
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	429a      	cmp	r2, r3
 800517e:	d1ee      	bne.n	800515e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2202      	movs	r2, #2
 8005186:	4013      	ands	r3, r2
 8005188:	d015      	beq.n	80051b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2204      	movs	r2, #4
 8005190:	4013      	ands	r3, r2
 8005192:	d006      	beq.n	80051a2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005194:	4b60      	ldr	r3, [pc, #384]	; (8005318 <HAL_RCC_ClockConfig+0x1f8>)
 8005196:	689a      	ldr	r2, [r3, #8]
 8005198:	4b5f      	ldr	r3, [pc, #380]	; (8005318 <HAL_RCC_ClockConfig+0x1f8>)
 800519a:	21e0      	movs	r1, #224	; 0xe0
 800519c:	01c9      	lsls	r1, r1, #7
 800519e:	430a      	orrs	r2, r1
 80051a0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051a2:	4b5d      	ldr	r3, [pc, #372]	; (8005318 <HAL_RCC_ClockConfig+0x1f8>)
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	4a5d      	ldr	r2, [pc, #372]	; (800531c <HAL_RCC_ClockConfig+0x1fc>)
 80051a8:	4013      	ands	r3, r2
 80051aa:	0019      	movs	r1, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689a      	ldr	r2, [r3, #8]
 80051b0:	4b59      	ldr	r3, [pc, #356]	; (8005318 <HAL_RCC_ClockConfig+0x1f8>)
 80051b2:	430a      	orrs	r2, r1
 80051b4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2201      	movs	r2, #1
 80051bc:	4013      	ands	r3, r2
 80051be:	d057      	beq.n	8005270 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d107      	bne.n	80051d8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051c8:	4b53      	ldr	r3, [pc, #332]	; (8005318 <HAL_RCC_ClockConfig+0x1f8>)
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	2380      	movs	r3, #128	; 0x80
 80051ce:	029b      	lsls	r3, r3, #10
 80051d0:	4013      	ands	r3, r2
 80051d2:	d12b      	bne.n	800522c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	e097      	b.n	8005308 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d107      	bne.n	80051f0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051e0:	4b4d      	ldr	r3, [pc, #308]	; (8005318 <HAL_RCC_ClockConfig+0x1f8>)
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	2380      	movs	r3, #128	; 0x80
 80051e6:	049b      	lsls	r3, r3, #18
 80051e8:	4013      	ands	r3, r2
 80051ea:	d11f      	bne.n	800522c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e08b      	b.n	8005308 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d107      	bne.n	8005208 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051f8:	4b47      	ldr	r3, [pc, #284]	; (8005318 <HAL_RCC_ClockConfig+0x1f8>)
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	2380      	movs	r3, #128	; 0x80
 80051fe:	00db      	lsls	r3, r3, #3
 8005200:	4013      	ands	r3, r2
 8005202:	d113      	bne.n	800522c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e07f      	b.n	8005308 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	2b03      	cmp	r3, #3
 800520e:	d106      	bne.n	800521e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005210:	4b41      	ldr	r3, [pc, #260]	; (8005318 <HAL_RCC_ClockConfig+0x1f8>)
 8005212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005214:	2202      	movs	r2, #2
 8005216:	4013      	ands	r3, r2
 8005218:	d108      	bne.n	800522c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e074      	b.n	8005308 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800521e:	4b3e      	ldr	r3, [pc, #248]	; (8005318 <HAL_RCC_ClockConfig+0x1f8>)
 8005220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005222:	2202      	movs	r2, #2
 8005224:	4013      	ands	r3, r2
 8005226:	d101      	bne.n	800522c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e06d      	b.n	8005308 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800522c:	4b3a      	ldr	r3, [pc, #232]	; (8005318 <HAL_RCC_ClockConfig+0x1f8>)
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	2207      	movs	r2, #7
 8005232:	4393      	bics	r3, r2
 8005234:	0019      	movs	r1, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	4b37      	ldr	r3, [pc, #220]	; (8005318 <HAL_RCC_ClockConfig+0x1f8>)
 800523c:	430a      	orrs	r2, r1
 800523e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005240:	f7fd fa2a 	bl	8002698 <HAL_GetTick>
 8005244:	0003      	movs	r3, r0
 8005246:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005248:	e009      	b.n	800525e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800524a:	f7fd fa25 	bl	8002698 <HAL_GetTick>
 800524e:	0002      	movs	r2, r0
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	4a2f      	ldr	r2, [pc, #188]	; (8005314 <HAL_RCC_ClockConfig+0x1f4>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d901      	bls.n	800525e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	e054      	b.n	8005308 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800525e:	4b2e      	ldr	r3, [pc, #184]	; (8005318 <HAL_RCC_ClockConfig+0x1f8>)
 8005260:	689b      	ldr	r3, [r3, #8]
 8005262:	2238      	movs	r2, #56	; 0x38
 8005264:	401a      	ands	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	00db      	lsls	r3, r3, #3
 800526c:	429a      	cmp	r2, r3
 800526e:	d1ec      	bne.n	800524a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005270:	4b27      	ldr	r3, [pc, #156]	; (8005310 <HAL_RCC_ClockConfig+0x1f0>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2207      	movs	r2, #7
 8005276:	4013      	ands	r3, r2
 8005278:	683a      	ldr	r2, [r7, #0]
 800527a:	429a      	cmp	r2, r3
 800527c:	d21e      	bcs.n	80052bc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800527e:	4b24      	ldr	r3, [pc, #144]	; (8005310 <HAL_RCC_ClockConfig+0x1f0>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2207      	movs	r2, #7
 8005284:	4393      	bics	r3, r2
 8005286:	0019      	movs	r1, r3
 8005288:	4b21      	ldr	r3, [pc, #132]	; (8005310 <HAL_RCC_ClockConfig+0x1f0>)
 800528a:	683a      	ldr	r2, [r7, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005290:	f7fd fa02 	bl	8002698 <HAL_GetTick>
 8005294:	0003      	movs	r3, r0
 8005296:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005298:	e009      	b.n	80052ae <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800529a:	f7fd f9fd 	bl	8002698 <HAL_GetTick>
 800529e:	0002      	movs	r2, r0
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	4a1b      	ldr	r2, [pc, #108]	; (8005314 <HAL_RCC_ClockConfig+0x1f4>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d901      	bls.n	80052ae <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e02c      	b.n	8005308 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80052ae:	4b18      	ldr	r3, [pc, #96]	; (8005310 <HAL_RCC_ClockConfig+0x1f0>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2207      	movs	r2, #7
 80052b4:	4013      	ands	r3, r2
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d1ee      	bne.n	800529a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2204      	movs	r2, #4
 80052c2:	4013      	ands	r3, r2
 80052c4:	d009      	beq.n	80052da <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80052c6:	4b14      	ldr	r3, [pc, #80]	; (8005318 <HAL_RCC_ClockConfig+0x1f8>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	4a15      	ldr	r2, [pc, #84]	; (8005320 <HAL_RCC_ClockConfig+0x200>)
 80052cc:	4013      	ands	r3, r2
 80052ce:	0019      	movs	r1, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	68da      	ldr	r2, [r3, #12]
 80052d4:	4b10      	ldr	r3, [pc, #64]	; (8005318 <HAL_RCC_ClockConfig+0x1f8>)
 80052d6:	430a      	orrs	r2, r1
 80052d8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80052da:	f000 f829 	bl	8005330 <HAL_RCC_GetSysClockFreq>
 80052de:	0001      	movs	r1, r0
 80052e0:	4b0d      	ldr	r3, [pc, #52]	; (8005318 <HAL_RCC_ClockConfig+0x1f8>)
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	0a1b      	lsrs	r3, r3, #8
 80052e6:	220f      	movs	r2, #15
 80052e8:	401a      	ands	r2, r3
 80052ea:	4b0e      	ldr	r3, [pc, #56]	; (8005324 <HAL_RCC_ClockConfig+0x204>)
 80052ec:	0092      	lsls	r2, r2, #2
 80052ee:	58d3      	ldr	r3, [r2, r3]
 80052f0:	221f      	movs	r2, #31
 80052f2:	4013      	ands	r3, r2
 80052f4:	000a      	movs	r2, r1
 80052f6:	40da      	lsrs	r2, r3
 80052f8:	4b0b      	ldr	r3, [pc, #44]	; (8005328 <HAL_RCC_ClockConfig+0x208>)
 80052fa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80052fc:	4b0b      	ldr	r3, [pc, #44]	; (800532c <HAL_RCC_ClockConfig+0x20c>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	0018      	movs	r0, r3
 8005302:	f7fc fdf3 	bl	8001eec <HAL_InitTick>
 8005306:	0003      	movs	r3, r0
}
 8005308:	0018      	movs	r0, r3
 800530a:	46bd      	mov	sp, r7
 800530c:	b004      	add	sp, #16
 800530e:	bd80      	pop	{r7, pc}
 8005310:	40022000 	.word	0x40022000
 8005314:	00001388 	.word	0x00001388
 8005318:	40021000 	.word	0x40021000
 800531c:	fffff0ff 	.word	0xfffff0ff
 8005320:	ffff8fff 	.word	0xffff8fff
 8005324:	080076ac 	.word	0x080076ac
 8005328:	2000001c 	.word	0x2000001c
 800532c:	20000028 	.word	0x20000028

08005330 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005336:	4b3c      	ldr	r3, [pc, #240]	; (8005428 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	2238      	movs	r2, #56	; 0x38
 800533c:	4013      	ands	r3, r2
 800533e:	d10f      	bne.n	8005360 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005340:	4b39      	ldr	r3, [pc, #228]	; (8005428 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	0adb      	lsrs	r3, r3, #11
 8005346:	2207      	movs	r2, #7
 8005348:	4013      	ands	r3, r2
 800534a:	2201      	movs	r2, #1
 800534c:	409a      	lsls	r2, r3
 800534e:	0013      	movs	r3, r2
 8005350:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005352:	6839      	ldr	r1, [r7, #0]
 8005354:	4835      	ldr	r0, [pc, #212]	; (800542c <HAL_RCC_GetSysClockFreq+0xfc>)
 8005356:	f7fa fedd 	bl	8000114 <__udivsi3>
 800535a:	0003      	movs	r3, r0
 800535c:	613b      	str	r3, [r7, #16]
 800535e:	e05d      	b.n	800541c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005360:	4b31      	ldr	r3, [pc, #196]	; (8005428 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	2238      	movs	r2, #56	; 0x38
 8005366:	4013      	ands	r3, r2
 8005368:	2b08      	cmp	r3, #8
 800536a:	d102      	bne.n	8005372 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800536c:	4b30      	ldr	r3, [pc, #192]	; (8005430 <HAL_RCC_GetSysClockFreq+0x100>)
 800536e:	613b      	str	r3, [r7, #16]
 8005370:	e054      	b.n	800541c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005372:	4b2d      	ldr	r3, [pc, #180]	; (8005428 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	2238      	movs	r2, #56	; 0x38
 8005378:	4013      	ands	r3, r2
 800537a:	2b10      	cmp	r3, #16
 800537c:	d138      	bne.n	80053f0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800537e:	4b2a      	ldr	r3, [pc, #168]	; (8005428 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	2203      	movs	r2, #3
 8005384:	4013      	ands	r3, r2
 8005386:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005388:	4b27      	ldr	r3, [pc, #156]	; (8005428 <HAL_RCC_GetSysClockFreq+0xf8>)
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	091b      	lsrs	r3, r3, #4
 800538e:	2207      	movs	r2, #7
 8005390:	4013      	ands	r3, r2
 8005392:	3301      	adds	r3, #1
 8005394:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2b03      	cmp	r3, #3
 800539a:	d10d      	bne.n	80053b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800539c:	68b9      	ldr	r1, [r7, #8]
 800539e:	4824      	ldr	r0, [pc, #144]	; (8005430 <HAL_RCC_GetSysClockFreq+0x100>)
 80053a0:	f7fa feb8 	bl	8000114 <__udivsi3>
 80053a4:	0003      	movs	r3, r0
 80053a6:	0019      	movs	r1, r3
 80053a8:	4b1f      	ldr	r3, [pc, #124]	; (8005428 <HAL_RCC_GetSysClockFreq+0xf8>)
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	0a1b      	lsrs	r3, r3, #8
 80053ae:	227f      	movs	r2, #127	; 0x7f
 80053b0:	4013      	ands	r3, r2
 80053b2:	434b      	muls	r3, r1
 80053b4:	617b      	str	r3, [r7, #20]
        break;
 80053b6:	e00d      	b.n	80053d4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80053b8:	68b9      	ldr	r1, [r7, #8]
 80053ba:	481c      	ldr	r0, [pc, #112]	; (800542c <HAL_RCC_GetSysClockFreq+0xfc>)
 80053bc:	f7fa feaa 	bl	8000114 <__udivsi3>
 80053c0:	0003      	movs	r3, r0
 80053c2:	0019      	movs	r1, r3
 80053c4:	4b18      	ldr	r3, [pc, #96]	; (8005428 <HAL_RCC_GetSysClockFreq+0xf8>)
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	0a1b      	lsrs	r3, r3, #8
 80053ca:	227f      	movs	r2, #127	; 0x7f
 80053cc:	4013      	ands	r3, r2
 80053ce:	434b      	muls	r3, r1
 80053d0:	617b      	str	r3, [r7, #20]
        break;
 80053d2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80053d4:	4b14      	ldr	r3, [pc, #80]	; (8005428 <HAL_RCC_GetSysClockFreq+0xf8>)
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	0f5b      	lsrs	r3, r3, #29
 80053da:	2207      	movs	r2, #7
 80053dc:	4013      	ands	r3, r2
 80053de:	3301      	adds	r3, #1
 80053e0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80053e2:	6879      	ldr	r1, [r7, #4]
 80053e4:	6978      	ldr	r0, [r7, #20]
 80053e6:	f7fa fe95 	bl	8000114 <__udivsi3>
 80053ea:	0003      	movs	r3, r0
 80053ec:	613b      	str	r3, [r7, #16]
 80053ee:	e015      	b.n	800541c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80053f0:	4b0d      	ldr	r3, [pc, #52]	; (8005428 <HAL_RCC_GetSysClockFreq+0xf8>)
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	2238      	movs	r2, #56	; 0x38
 80053f6:	4013      	ands	r3, r2
 80053f8:	2b20      	cmp	r3, #32
 80053fa:	d103      	bne.n	8005404 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80053fc:	2380      	movs	r3, #128	; 0x80
 80053fe:	021b      	lsls	r3, r3, #8
 8005400:	613b      	str	r3, [r7, #16]
 8005402:	e00b      	b.n	800541c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005404:	4b08      	ldr	r3, [pc, #32]	; (8005428 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	2238      	movs	r2, #56	; 0x38
 800540a:	4013      	ands	r3, r2
 800540c:	2b18      	cmp	r3, #24
 800540e:	d103      	bne.n	8005418 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005410:	23fa      	movs	r3, #250	; 0xfa
 8005412:	01db      	lsls	r3, r3, #7
 8005414:	613b      	str	r3, [r7, #16]
 8005416:	e001      	b.n	800541c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005418:	2300      	movs	r3, #0
 800541a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800541c:	693b      	ldr	r3, [r7, #16]
}
 800541e:	0018      	movs	r0, r3
 8005420:	46bd      	mov	sp, r7
 8005422:	b006      	add	sp, #24
 8005424:	bd80      	pop	{r7, pc}
 8005426:	46c0      	nop			; (mov r8, r8)
 8005428:	40021000 	.word	0x40021000
 800542c:	00f42400 	.word	0x00f42400
 8005430:	007a1200 	.word	0x007a1200

08005434 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005438:	4b02      	ldr	r3, [pc, #8]	; (8005444 <HAL_RCC_GetHCLKFreq+0x10>)
 800543a:	681b      	ldr	r3, [r3, #0]
}
 800543c:	0018      	movs	r0, r3
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	46c0      	nop			; (mov r8, r8)
 8005444:	2000001c 	.word	0x2000001c

08005448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005448:	b5b0      	push	{r4, r5, r7, lr}
 800544a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800544c:	f7ff fff2 	bl	8005434 <HAL_RCC_GetHCLKFreq>
 8005450:	0004      	movs	r4, r0
 8005452:	f7ff fb49 	bl	8004ae8 <LL_RCC_GetAPB1Prescaler>
 8005456:	0003      	movs	r3, r0
 8005458:	0b1a      	lsrs	r2, r3, #12
 800545a:	4b05      	ldr	r3, [pc, #20]	; (8005470 <HAL_RCC_GetPCLK1Freq+0x28>)
 800545c:	0092      	lsls	r2, r2, #2
 800545e:	58d3      	ldr	r3, [r2, r3]
 8005460:	221f      	movs	r2, #31
 8005462:	4013      	ands	r3, r2
 8005464:	40dc      	lsrs	r4, r3
 8005466:	0023      	movs	r3, r4
}
 8005468:	0018      	movs	r0, r3
 800546a:	46bd      	mov	sp, r7
 800546c:	bdb0      	pop	{r4, r5, r7, pc}
 800546e:	46c0      	nop			; (mov r8, r8)
 8005470:	080076ec 	.word	0x080076ec

08005474 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b082      	sub	sp, #8
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2207      	movs	r2, #7
 8005482:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005484:	4b0e      	ldr	r3, [pc, #56]	; (80054c0 <HAL_RCC_GetClockConfig+0x4c>)
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	2207      	movs	r2, #7
 800548a:	401a      	ands	r2, r3
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005490:	4b0b      	ldr	r3, [pc, #44]	; (80054c0 <HAL_RCC_GetClockConfig+0x4c>)
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	23f0      	movs	r3, #240	; 0xf0
 8005496:	011b      	lsls	r3, r3, #4
 8005498:	401a      	ands	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 800549e:	4b08      	ldr	r3, [pc, #32]	; (80054c0 <HAL_RCC_GetClockConfig+0x4c>)
 80054a0:	689a      	ldr	r2, [r3, #8]
 80054a2:	23e0      	movs	r3, #224	; 0xe0
 80054a4:	01db      	lsls	r3, r3, #7
 80054a6:	401a      	ands	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80054ac:	4b05      	ldr	r3, [pc, #20]	; (80054c4 <HAL_RCC_GetClockConfig+0x50>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2207      	movs	r2, #7
 80054b2:	401a      	ands	r2, r3
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	601a      	str	r2, [r3, #0]
}
 80054b8:	46c0      	nop			; (mov r8, r8)
 80054ba:	46bd      	mov	sp, r7
 80054bc:	b002      	add	sp, #8
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	40021000 	.word	0x40021000
 80054c4:	40022000 	.word	0x40022000

080054c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80054d0:	2313      	movs	r3, #19
 80054d2:	18fb      	adds	r3, r7, r3
 80054d4:	2200      	movs	r2, #0
 80054d6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054d8:	2312      	movs	r3, #18
 80054da:	18fb      	adds	r3, r7, r3
 80054dc:	2200      	movs	r2, #0
 80054de:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	2380      	movs	r3, #128	; 0x80
 80054e6:	029b      	lsls	r3, r3, #10
 80054e8:	4013      	ands	r3, r2
 80054ea:	d100      	bne.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x26>
 80054ec:	e0a3      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054ee:	2011      	movs	r0, #17
 80054f0:	183b      	adds	r3, r7, r0
 80054f2:	2200      	movs	r2, #0
 80054f4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054f6:	4b7f      	ldr	r3, [pc, #508]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80054f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80054fa:	2380      	movs	r3, #128	; 0x80
 80054fc:	055b      	lsls	r3, r3, #21
 80054fe:	4013      	ands	r3, r2
 8005500:	d110      	bne.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005502:	4b7c      	ldr	r3, [pc, #496]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005504:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005506:	4b7b      	ldr	r3, [pc, #492]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005508:	2180      	movs	r1, #128	; 0x80
 800550a:	0549      	lsls	r1, r1, #21
 800550c:	430a      	orrs	r2, r1
 800550e:	63da      	str	r2, [r3, #60]	; 0x3c
 8005510:	4b78      	ldr	r3, [pc, #480]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005512:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005514:	2380      	movs	r3, #128	; 0x80
 8005516:	055b      	lsls	r3, r3, #21
 8005518:	4013      	ands	r3, r2
 800551a:	60bb      	str	r3, [r7, #8]
 800551c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800551e:	183b      	adds	r3, r7, r0
 8005520:	2201      	movs	r2, #1
 8005522:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005524:	4b74      	ldr	r3, [pc, #464]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	4b73      	ldr	r3, [pc, #460]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800552a:	2180      	movs	r1, #128	; 0x80
 800552c:	0049      	lsls	r1, r1, #1
 800552e:	430a      	orrs	r2, r1
 8005530:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005532:	f7fd f8b1 	bl	8002698 <HAL_GetTick>
 8005536:	0003      	movs	r3, r0
 8005538:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800553a:	e00b      	b.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800553c:	f7fd f8ac 	bl	8002698 <HAL_GetTick>
 8005540:	0002      	movs	r2, r0
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	2b02      	cmp	r3, #2
 8005548:	d904      	bls.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800554a:	2313      	movs	r3, #19
 800554c:	18fb      	adds	r3, r7, r3
 800554e:	2203      	movs	r2, #3
 8005550:	701a      	strb	r2, [r3, #0]
        break;
 8005552:	e005      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005554:	4b68      	ldr	r3, [pc, #416]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	2380      	movs	r3, #128	; 0x80
 800555a:	005b      	lsls	r3, r3, #1
 800555c:	4013      	ands	r3, r2
 800555e:	d0ed      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005560:	2313      	movs	r3, #19
 8005562:	18fb      	adds	r3, r7, r3
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d154      	bne.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800556a:	4b62      	ldr	r3, [pc, #392]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800556c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800556e:	23c0      	movs	r3, #192	; 0xc0
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4013      	ands	r3, r2
 8005574:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d019      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	429a      	cmp	r2, r3
 8005584:	d014      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005586:	4b5b      	ldr	r3, [pc, #364]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800558a:	4a5c      	ldr	r2, [pc, #368]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0x234>)
 800558c:	4013      	ands	r3, r2
 800558e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005590:	4b58      	ldr	r3, [pc, #352]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005592:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005594:	4b57      	ldr	r3, [pc, #348]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005596:	2180      	movs	r1, #128	; 0x80
 8005598:	0249      	lsls	r1, r1, #9
 800559a:	430a      	orrs	r2, r1
 800559c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800559e:	4b55      	ldr	r3, [pc, #340]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80055a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80055a2:	4b54      	ldr	r3, [pc, #336]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80055a4:	4956      	ldr	r1, [pc, #344]	; (8005700 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 80055a6:	400a      	ands	r2, r1
 80055a8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055aa:	4b52      	ldr	r3, [pc, #328]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	2201      	movs	r2, #1
 80055b4:	4013      	ands	r3, r2
 80055b6:	d016      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b8:	f7fd f86e 	bl	8002698 <HAL_GetTick>
 80055bc:	0003      	movs	r3, r0
 80055be:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055c0:	e00c      	b.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055c2:	f7fd f869 	bl	8002698 <HAL_GetTick>
 80055c6:	0002      	movs	r2, r0
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	4a4d      	ldr	r2, [pc, #308]	; (8005704 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d904      	bls.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80055d2:	2313      	movs	r3, #19
 80055d4:	18fb      	adds	r3, r7, r3
 80055d6:	2203      	movs	r2, #3
 80055d8:	701a      	strb	r2, [r3, #0]
            break;
 80055da:	e004      	b.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055dc:	4b45      	ldr	r3, [pc, #276]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80055de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055e0:	2202      	movs	r2, #2
 80055e2:	4013      	ands	r3, r2
 80055e4:	d0ed      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80055e6:	2313      	movs	r3, #19
 80055e8:	18fb      	adds	r3, r7, r3
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d10a      	bne.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055f0:	4b40      	ldr	r3, [pc, #256]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80055f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055f4:	4a41      	ldr	r2, [pc, #260]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0x234>)
 80055f6:	4013      	ands	r3, r2
 80055f8:	0019      	movs	r1, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	695a      	ldr	r2, [r3, #20]
 80055fe:	4b3d      	ldr	r3, [pc, #244]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005600:	430a      	orrs	r2, r1
 8005602:	65da      	str	r2, [r3, #92]	; 0x5c
 8005604:	e00c      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005606:	2312      	movs	r3, #18
 8005608:	18fb      	adds	r3, r7, r3
 800560a:	2213      	movs	r2, #19
 800560c:	18ba      	adds	r2, r7, r2
 800560e:	7812      	ldrb	r2, [r2, #0]
 8005610:	701a      	strb	r2, [r3, #0]
 8005612:	e005      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005614:	2312      	movs	r3, #18
 8005616:	18fb      	adds	r3, r7, r3
 8005618:	2213      	movs	r2, #19
 800561a:	18ba      	adds	r2, r7, r2
 800561c:	7812      	ldrb	r2, [r2, #0]
 800561e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005620:	2311      	movs	r3, #17
 8005622:	18fb      	adds	r3, r7, r3
 8005624:	781b      	ldrb	r3, [r3, #0]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d105      	bne.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800562a:	4b32      	ldr	r3, [pc, #200]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800562c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800562e:	4b31      	ldr	r3, [pc, #196]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005630:	4935      	ldr	r1, [pc, #212]	; (8005708 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005632:	400a      	ands	r2, r1
 8005634:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2201      	movs	r2, #1
 800563c:	4013      	ands	r3, r2
 800563e:	d009      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005640:	4b2c      	ldr	r3, [pc, #176]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005644:	2203      	movs	r2, #3
 8005646:	4393      	bics	r3, r2
 8005648:	0019      	movs	r1, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	4b29      	ldr	r3, [pc, #164]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005650:	430a      	orrs	r2, r1
 8005652:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2220      	movs	r2, #32
 800565a:	4013      	ands	r3, r2
 800565c:	d009      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800565e:	4b25      	ldr	r3, [pc, #148]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005662:	4a2a      	ldr	r2, [pc, #168]	; (800570c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005664:	4013      	ands	r3, r2
 8005666:	0019      	movs	r1, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689a      	ldr	r2, [r3, #8]
 800566c:	4b21      	ldr	r3, [pc, #132]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800566e:	430a      	orrs	r2, r1
 8005670:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	2380      	movs	r3, #128	; 0x80
 8005678:	01db      	lsls	r3, r3, #7
 800567a:	4013      	ands	r3, r2
 800567c:	d015      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800567e:	4b1d      	ldr	r3, [pc, #116]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	0899      	lsrs	r1, r3, #2
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	691a      	ldr	r2, [r3, #16]
 800568a:	4b1a      	ldr	r3, [pc, #104]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800568c:	430a      	orrs	r2, r1
 800568e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	691a      	ldr	r2, [r3, #16]
 8005694:	2380      	movs	r3, #128	; 0x80
 8005696:	05db      	lsls	r3, r3, #23
 8005698:	429a      	cmp	r2, r3
 800569a:	d106      	bne.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800569c:	4b15      	ldr	r3, [pc, #84]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800569e:	68da      	ldr	r2, [r3, #12]
 80056a0:	4b14      	ldr	r3, [pc, #80]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80056a2:	2180      	movs	r1, #128	; 0x80
 80056a4:	0249      	lsls	r1, r1, #9
 80056a6:	430a      	orrs	r2, r1
 80056a8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	2380      	movs	r3, #128	; 0x80
 80056b0:	011b      	lsls	r3, r3, #4
 80056b2:	4013      	ands	r3, r2
 80056b4:	d016      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80056b6:	4b0f      	ldr	r3, [pc, #60]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80056b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ba:	4a15      	ldr	r2, [pc, #84]	; (8005710 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80056bc:	4013      	ands	r3, r2
 80056be:	0019      	movs	r1, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	68da      	ldr	r2, [r3, #12]
 80056c4:	4b0b      	ldr	r3, [pc, #44]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80056c6:	430a      	orrs	r2, r1
 80056c8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68da      	ldr	r2, [r3, #12]
 80056ce:	2380      	movs	r3, #128	; 0x80
 80056d0:	01db      	lsls	r3, r3, #7
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d106      	bne.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80056d6:	4b07      	ldr	r3, [pc, #28]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80056d8:	68da      	ldr	r2, [r3, #12]
 80056da:	4b06      	ldr	r3, [pc, #24]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80056dc:	2180      	movs	r1, #128	; 0x80
 80056de:	0249      	lsls	r1, r1, #9
 80056e0:	430a      	orrs	r2, r1
 80056e2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80056e4:	2312      	movs	r3, #18
 80056e6:	18fb      	adds	r3, r7, r3
 80056e8:	781b      	ldrb	r3, [r3, #0]
}
 80056ea:	0018      	movs	r0, r3
 80056ec:	46bd      	mov	sp, r7
 80056ee:	b006      	add	sp, #24
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	46c0      	nop			; (mov r8, r8)
 80056f4:	40021000 	.word	0x40021000
 80056f8:	40007000 	.word	0x40007000
 80056fc:	fffffcff 	.word	0xfffffcff
 8005700:	fffeffff 	.word	0xfffeffff
 8005704:	00001388 	.word	0x00001388
 8005708:	efffffff 	.word	0xefffffff
 800570c:	ffffcfff 	.word	0xffffcfff
 8005710:	ffff3fff 	.word	0xffff3fff

08005714 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d101      	bne.n	8005726 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e04a      	b.n	80057bc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	223d      	movs	r2, #61	; 0x3d
 800572a:	5c9b      	ldrb	r3, [r3, r2]
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d107      	bne.n	8005742 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	223c      	movs	r2, #60	; 0x3c
 8005736:	2100      	movs	r1, #0
 8005738:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	0018      	movs	r0, r3
 800573e:	f7fc fb7b 	bl	8001e38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	223d      	movs	r2, #61	; 0x3d
 8005746:	2102      	movs	r1, #2
 8005748:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681a      	ldr	r2, [r3, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	3304      	adds	r3, #4
 8005752:	0019      	movs	r1, r3
 8005754:	0010      	movs	r0, r2
 8005756:	f000 fd61 	bl	800621c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2248      	movs	r2, #72	; 0x48
 800575e:	2101      	movs	r1, #1
 8005760:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	223e      	movs	r2, #62	; 0x3e
 8005766:	2101      	movs	r1, #1
 8005768:	5499      	strb	r1, [r3, r2]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	223f      	movs	r2, #63	; 0x3f
 800576e:	2101      	movs	r1, #1
 8005770:	5499      	strb	r1, [r3, r2]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2240      	movs	r2, #64	; 0x40
 8005776:	2101      	movs	r1, #1
 8005778:	5499      	strb	r1, [r3, r2]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2241      	movs	r2, #65	; 0x41
 800577e:	2101      	movs	r1, #1
 8005780:	5499      	strb	r1, [r3, r2]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2242      	movs	r2, #66	; 0x42
 8005786:	2101      	movs	r1, #1
 8005788:	5499      	strb	r1, [r3, r2]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2243      	movs	r2, #67	; 0x43
 800578e:	2101      	movs	r1, #1
 8005790:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2244      	movs	r2, #68	; 0x44
 8005796:	2101      	movs	r1, #1
 8005798:	5499      	strb	r1, [r3, r2]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2245      	movs	r2, #69	; 0x45
 800579e:	2101      	movs	r1, #1
 80057a0:	5499      	strb	r1, [r3, r2]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2246      	movs	r2, #70	; 0x46
 80057a6:	2101      	movs	r1, #1
 80057a8:	5499      	strb	r1, [r3, r2]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2247      	movs	r2, #71	; 0x47
 80057ae:	2101      	movs	r1, #1
 80057b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	223d      	movs	r2, #61	; 0x3d
 80057b6:	2101      	movs	r1, #1
 80057b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	0018      	movs	r0, r3
 80057be:	46bd      	mov	sp, r7
 80057c0:	b002      	add	sp, #8
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	223d      	movs	r2, #61	; 0x3d
 80057d0:	5c9b      	ldrb	r3, [r3, r2]
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d001      	beq.n	80057dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e037      	b.n	800584c <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	223d      	movs	r2, #61	; 0x3d
 80057e0:	2102      	movs	r1, #2
 80057e2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68da      	ldr	r2, [r3, #12]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2101      	movs	r1, #1
 80057f0:	430a      	orrs	r2, r1
 80057f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a16      	ldr	r2, [pc, #88]	; (8005854 <HAL_TIM_Base_Start_IT+0x90>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d004      	beq.n	8005808 <HAL_TIM_Base_Start_IT+0x44>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a15      	ldr	r2, [pc, #84]	; (8005858 <HAL_TIM_Base_Start_IT+0x94>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d116      	bne.n	8005836 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	4a13      	ldr	r2, [pc, #76]	; (800585c <HAL_TIM_Base_Start_IT+0x98>)
 8005810:	4013      	ands	r3, r2
 8005812:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2b06      	cmp	r3, #6
 8005818:	d016      	beq.n	8005848 <HAL_TIM_Base_Start_IT+0x84>
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	2380      	movs	r3, #128	; 0x80
 800581e:	025b      	lsls	r3, r3, #9
 8005820:	429a      	cmp	r2, r3
 8005822:	d011      	beq.n	8005848 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2101      	movs	r1, #1
 8005830:	430a      	orrs	r2, r1
 8005832:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005834:	e008      	b.n	8005848 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2101      	movs	r1, #1
 8005842:	430a      	orrs	r2, r1
 8005844:	601a      	str	r2, [r3, #0]
 8005846:	e000      	b.n	800584a <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005848:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	0018      	movs	r0, r3
 800584e:	46bd      	mov	sp, r7
 8005850:	b004      	add	sp, #16
 8005852:	bd80      	pop	{r7, pc}
 8005854:	40012c00 	.word	0x40012c00
 8005858:	40000400 	.word	0x40000400
 800585c:	00010007 	.word	0x00010007

08005860 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e04a      	b.n	8005908 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	223d      	movs	r2, #61	; 0x3d
 8005876:	5c9b      	ldrb	r3, [r3, r2]
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d107      	bne.n	800588e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	223c      	movs	r2, #60	; 0x3c
 8005882:	2100      	movs	r1, #0
 8005884:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	0018      	movs	r0, r3
 800588a:	f7fc fab5 	bl	8001df8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	223d      	movs	r2, #61	; 0x3d
 8005892:	2102      	movs	r1, #2
 8005894:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	3304      	adds	r3, #4
 800589e:	0019      	movs	r1, r3
 80058a0:	0010      	movs	r0, r2
 80058a2:	f000 fcbb 	bl	800621c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2248      	movs	r2, #72	; 0x48
 80058aa:	2101      	movs	r1, #1
 80058ac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	223e      	movs	r2, #62	; 0x3e
 80058b2:	2101      	movs	r1, #1
 80058b4:	5499      	strb	r1, [r3, r2]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	223f      	movs	r2, #63	; 0x3f
 80058ba:	2101      	movs	r1, #1
 80058bc:	5499      	strb	r1, [r3, r2]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2240      	movs	r2, #64	; 0x40
 80058c2:	2101      	movs	r1, #1
 80058c4:	5499      	strb	r1, [r3, r2]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2241      	movs	r2, #65	; 0x41
 80058ca:	2101      	movs	r1, #1
 80058cc:	5499      	strb	r1, [r3, r2]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2242      	movs	r2, #66	; 0x42
 80058d2:	2101      	movs	r1, #1
 80058d4:	5499      	strb	r1, [r3, r2]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2243      	movs	r2, #67	; 0x43
 80058da:	2101      	movs	r1, #1
 80058dc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2244      	movs	r2, #68	; 0x44
 80058e2:	2101      	movs	r1, #1
 80058e4:	5499      	strb	r1, [r3, r2]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2245      	movs	r2, #69	; 0x45
 80058ea:	2101      	movs	r1, #1
 80058ec:	5499      	strb	r1, [r3, r2]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2246      	movs	r2, #70	; 0x46
 80058f2:	2101      	movs	r1, #1
 80058f4:	5499      	strb	r1, [r3, r2]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2247      	movs	r2, #71	; 0x47
 80058fa:	2101      	movs	r1, #1
 80058fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	223d      	movs	r2, #61	; 0x3d
 8005902:	2101      	movs	r1, #1
 8005904:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	0018      	movs	r0, r3
 800590a:	46bd      	mov	sp, r7
 800590c:	b002      	add	sp, #8
 800590e:	bd80      	pop	{r7, pc}

08005910 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d108      	bne.n	8005932 <HAL_TIM_PWM_Start+0x22>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	223e      	movs	r2, #62	; 0x3e
 8005924:	5c9b      	ldrb	r3, [r3, r2]
 8005926:	b2db      	uxtb	r3, r3
 8005928:	3b01      	subs	r3, #1
 800592a:	1e5a      	subs	r2, r3, #1
 800592c:	4193      	sbcs	r3, r2
 800592e:	b2db      	uxtb	r3, r3
 8005930:	e037      	b.n	80059a2 <HAL_TIM_PWM_Start+0x92>
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	2b04      	cmp	r3, #4
 8005936:	d108      	bne.n	800594a <HAL_TIM_PWM_Start+0x3a>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	223f      	movs	r2, #63	; 0x3f
 800593c:	5c9b      	ldrb	r3, [r3, r2]
 800593e:	b2db      	uxtb	r3, r3
 8005940:	3b01      	subs	r3, #1
 8005942:	1e5a      	subs	r2, r3, #1
 8005944:	4193      	sbcs	r3, r2
 8005946:	b2db      	uxtb	r3, r3
 8005948:	e02b      	b.n	80059a2 <HAL_TIM_PWM_Start+0x92>
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	2b08      	cmp	r3, #8
 800594e:	d108      	bne.n	8005962 <HAL_TIM_PWM_Start+0x52>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2240      	movs	r2, #64	; 0x40
 8005954:	5c9b      	ldrb	r3, [r3, r2]
 8005956:	b2db      	uxtb	r3, r3
 8005958:	3b01      	subs	r3, #1
 800595a:	1e5a      	subs	r2, r3, #1
 800595c:	4193      	sbcs	r3, r2
 800595e:	b2db      	uxtb	r3, r3
 8005960:	e01f      	b.n	80059a2 <HAL_TIM_PWM_Start+0x92>
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	2b0c      	cmp	r3, #12
 8005966:	d108      	bne.n	800597a <HAL_TIM_PWM_Start+0x6a>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2241      	movs	r2, #65	; 0x41
 800596c:	5c9b      	ldrb	r3, [r3, r2]
 800596e:	b2db      	uxtb	r3, r3
 8005970:	3b01      	subs	r3, #1
 8005972:	1e5a      	subs	r2, r3, #1
 8005974:	4193      	sbcs	r3, r2
 8005976:	b2db      	uxtb	r3, r3
 8005978:	e013      	b.n	80059a2 <HAL_TIM_PWM_Start+0x92>
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	2b10      	cmp	r3, #16
 800597e:	d108      	bne.n	8005992 <HAL_TIM_PWM_Start+0x82>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2242      	movs	r2, #66	; 0x42
 8005984:	5c9b      	ldrb	r3, [r3, r2]
 8005986:	b2db      	uxtb	r3, r3
 8005988:	3b01      	subs	r3, #1
 800598a:	1e5a      	subs	r2, r3, #1
 800598c:	4193      	sbcs	r3, r2
 800598e:	b2db      	uxtb	r3, r3
 8005990:	e007      	b.n	80059a2 <HAL_TIM_PWM_Start+0x92>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2243      	movs	r2, #67	; 0x43
 8005996:	5c9b      	ldrb	r3, [r3, r2]
 8005998:	b2db      	uxtb	r3, r3
 800599a:	3b01      	subs	r3, #1
 800599c:	1e5a      	subs	r2, r3, #1
 800599e:	4193      	sbcs	r3, r2
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d001      	beq.n	80059aa <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e07b      	b.n	8005aa2 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d104      	bne.n	80059ba <HAL_TIM_PWM_Start+0xaa>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	223e      	movs	r2, #62	; 0x3e
 80059b4:	2102      	movs	r1, #2
 80059b6:	5499      	strb	r1, [r3, r2]
 80059b8:	e023      	b.n	8005a02 <HAL_TIM_PWM_Start+0xf2>
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	2b04      	cmp	r3, #4
 80059be:	d104      	bne.n	80059ca <HAL_TIM_PWM_Start+0xba>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	223f      	movs	r2, #63	; 0x3f
 80059c4:	2102      	movs	r1, #2
 80059c6:	5499      	strb	r1, [r3, r2]
 80059c8:	e01b      	b.n	8005a02 <HAL_TIM_PWM_Start+0xf2>
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	2b08      	cmp	r3, #8
 80059ce:	d104      	bne.n	80059da <HAL_TIM_PWM_Start+0xca>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2240      	movs	r2, #64	; 0x40
 80059d4:	2102      	movs	r1, #2
 80059d6:	5499      	strb	r1, [r3, r2]
 80059d8:	e013      	b.n	8005a02 <HAL_TIM_PWM_Start+0xf2>
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b0c      	cmp	r3, #12
 80059de:	d104      	bne.n	80059ea <HAL_TIM_PWM_Start+0xda>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2241      	movs	r2, #65	; 0x41
 80059e4:	2102      	movs	r1, #2
 80059e6:	5499      	strb	r1, [r3, r2]
 80059e8:	e00b      	b.n	8005a02 <HAL_TIM_PWM_Start+0xf2>
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	2b10      	cmp	r3, #16
 80059ee:	d104      	bne.n	80059fa <HAL_TIM_PWM_Start+0xea>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2242      	movs	r2, #66	; 0x42
 80059f4:	2102      	movs	r1, #2
 80059f6:	5499      	strb	r1, [r3, r2]
 80059f8:	e003      	b.n	8005a02 <HAL_TIM_PWM_Start+0xf2>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2243      	movs	r2, #67	; 0x43
 80059fe:	2102      	movs	r1, #2
 8005a00:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	6839      	ldr	r1, [r7, #0]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	0018      	movs	r0, r3
 8005a0c:	f000 ffaa 	bl	8006964 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a25      	ldr	r2, [pc, #148]	; (8005aac <HAL_TIM_PWM_Start+0x19c>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d009      	beq.n	8005a2e <HAL_TIM_PWM_Start+0x11e>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a24      	ldr	r2, [pc, #144]	; (8005ab0 <HAL_TIM_PWM_Start+0x1a0>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d004      	beq.n	8005a2e <HAL_TIM_PWM_Start+0x11e>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a22      	ldr	r2, [pc, #136]	; (8005ab4 <HAL_TIM_PWM_Start+0x1a4>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d101      	bne.n	8005a32 <HAL_TIM_PWM_Start+0x122>
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e000      	b.n	8005a34 <HAL_TIM_PWM_Start+0x124>
 8005a32:	2300      	movs	r3, #0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d008      	beq.n	8005a4a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2180      	movs	r1, #128	; 0x80
 8005a44:	0209      	lsls	r1, r1, #8
 8005a46:	430a      	orrs	r2, r1
 8005a48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a17      	ldr	r2, [pc, #92]	; (8005aac <HAL_TIM_PWM_Start+0x19c>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d004      	beq.n	8005a5e <HAL_TIM_PWM_Start+0x14e>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a17      	ldr	r2, [pc, #92]	; (8005ab8 <HAL_TIM_PWM_Start+0x1a8>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d116      	bne.n	8005a8c <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	4a15      	ldr	r2, [pc, #84]	; (8005abc <HAL_TIM_PWM_Start+0x1ac>)
 8005a66:	4013      	ands	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2b06      	cmp	r3, #6
 8005a6e:	d016      	beq.n	8005a9e <HAL_TIM_PWM_Start+0x18e>
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	2380      	movs	r3, #128	; 0x80
 8005a74:	025b      	lsls	r3, r3, #9
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d011      	beq.n	8005a9e <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2101      	movs	r1, #1
 8005a86:	430a      	orrs	r2, r1
 8005a88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a8a:	e008      	b.n	8005a9e <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2101      	movs	r1, #1
 8005a98:	430a      	orrs	r2, r1
 8005a9a:	601a      	str	r2, [r3, #0]
 8005a9c:	e000      	b.n	8005aa0 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a9e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	0018      	movs	r0, r3
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	b004      	add	sp, #16
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	46c0      	nop			; (mov r8, r8)
 8005aac:	40012c00 	.word	0x40012c00
 8005ab0:	40014400 	.word	0x40014400
 8005ab4:	40014800 	.word	0x40014800
 8005ab8:	40000400 	.word	0x40000400
 8005abc:	00010007 	.word	0x00010007

08005ac0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	6839      	ldr	r1, [r7, #0]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	0018      	movs	r0, r3
 8005ad4:	f000 ff46 	bl	8006964 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a35      	ldr	r2, [pc, #212]	; (8005bb4 <HAL_TIM_PWM_Stop+0xf4>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d009      	beq.n	8005af6 <HAL_TIM_PWM_Stop+0x36>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a34      	ldr	r2, [pc, #208]	; (8005bb8 <HAL_TIM_PWM_Stop+0xf8>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d004      	beq.n	8005af6 <HAL_TIM_PWM_Stop+0x36>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a32      	ldr	r2, [pc, #200]	; (8005bbc <HAL_TIM_PWM_Stop+0xfc>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d101      	bne.n	8005afa <HAL_TIM_PWM_Stop+0x3a>
 8005af6:	2301      	movs	r3, #1
 8005af8:	e000      	b.n	8005afc <HAL_TIM_PWM_Stop+0x3c>
 8005afa:	2300      	movs	r3, #0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d013      	beq.n	8005b28 <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	4a2e      	ldr	r2, [pc, #184]	; (8005bc0 <HAL_TIM_PWM_Stop+0x100>)
 8005b08:	4013      	ands	r3, r2
 8005b0a:	d10d      	bne.n	8005b28 <HAL_TIM_PWM_Stop+0x68>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	4a2c      	ldr	r2, [pc, #176]	; (8005bc4 <HAL_TIM_PWM_Stop+0x104>)
 8005b14:	4013      	ands	r3, r2
 8005b16:	d107      	bne.n	8005b28 <HAL_TIM_PWM_Stop+0x68>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4929      	ldr	r1, [pc, #164]	; (8005bc8 <HAL_TIM_PWM_Stop+0x108>)
 8005b24:	400a      	ands	r2, r1
 8005b26:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	4a24      	ldr	r2, [pc, #144]	; (8005bc0 <HAL_TIM_PWM_Stop+0x100>)
 8005b30:	4013      	ands	r3, r2
 8005b32:	d10d      	bne.n	8005b50 <HAL_TIM_PWM_Stop+0x90>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	4a22      	ldr	r2, [pc, #136]	; (8005bc4 <HAL_TIM_PWM_Stop+0x104>)
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	d107      	bne.n	8005b50 <HAL_TIM_PWM_Stop+0x90>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2101      	movs	r1, #1
 8005b4c:	438a      	bics	r2, r1
 8005b4e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d104      	bne.n	8005b60 <HAL_TIM_PWM_Stop+0xa0>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	223e      	movs	r2, #62	; 0x3e
 8005b5a:	2101      	movs	r1, #1
 8005b5c:	5499      	strb	r1, [r3, r2]
 8005b5e:	e023      	b.n	8005ba8 <HAL_TIM_PWM_Stop+0xe8>
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	2b04      	cmp	r3, #4
 8005b64:	d104      	bne.n	8005b70 <HAL_TIM_PWM_Stop+0xb0>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	223f      	movs	r2, #63	; 0x3f
 8005b6a:	2101      	movs	r1, #1
 8005b6c:	5499      	strb	r1, [r3, r2]
 8005b6e:	e01b      	b.n	8005ba8 <HAL_TIM_PWM_Stop+0xe8>
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	2b08      	cmp	r3, #8
 8005b74:	d104      	bne.n	8005b80 <HAL_TIM_PWM_Stop+0xc0>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2240      	movs	r2, #64	; 0x40
 8005b7a:	2101      	movs	r1, #1
 8005b7c:	5499      	strb	r1, [r3, r2]
 8005b7e:	e013      	b.n	8005ba8 <HAL_TIM_PWM_Stop+0xe8>
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	2b0c      	cmp	r3, #12
 8005b84:	d104      	bne.n	8005b90 <HAL_TIM_PWM_Stop+0xd0>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2241      	movs	r2, #65	; 0x41
 8005b8a:	2101      	movs	r1, #1
 8005b8c:	5499      	strb	r1, [r3, r2]
 8005b8e:	e00b      	b.n	8005ba8 <HAL_TIM_PWM_Stop+0xe8>
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	2b10      	cmp	r3, #16
 8005b94:	d104      	bne.n	8005ba0 <HAL_TIM_PWM_Stop+0xe0>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2242      	movs	r2, #66	; 0x42
 8005b9a:	2101      	movs	r1, #1
 8005b9c:	5499      	strb	r1, [r3, r2]
 8005b9e:	e003      	b.n	8005ba8 <HAL_TIM_PWM_Stop+0xe8>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2243      	movs	r2, #67	; 0x43
 8005ba4:	2101      	movs	r1, #1
 8005ba6:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	0018      	movs	r0, r3
 8005bac:	46bd      	mov	sp, r7
 8005bae:	b002      	add	sp, #8
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	46c0      	nop			; (mov r8, r8)
 8005bb4:	40012c00 	.word	0x40012c00
 8005bb8:	40014400 	.word	0x40014400
 8005bbc:	40014800 	.word	0x40014800
 8005bc0:	00001111 	.word	0x00001111
 8005bc4:	00000444 	.word	0x00000444
 8005bc8:	ffff7fff 	.word	0xffff7fff

08005bcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	2202      	movs	r2, #2
 8005bdc:	4013      	ands	r3, r2
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d124      	bne.n	8005c2c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	2202      	movs	r2, #2
 8005bea:	4013      	ands	r3, r2
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d11d      	bne.n	8005c2c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2203      	movs	r2, #3
 8005bf6:	4252      	negs	r2, r2
 8005bf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	2203      	movs	r2, #3
 8005c08:	4013      	ands	r3, r2
 8005c0a:	d004      	beq.n	8005c16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	0018      	movs	r0, r3
 8005c10:	f000 faec 	bl	80061ec <HAL_TIM_IC_CaptureCallback>
 8005c14:	e007      	b.n	8005c26 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	0018      	movs	r0, r3
 8005c1a:	f000 fadf 	bl	80061dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	0018      	movs	r0, r3
 8005c22:	f000 faeb 	bl	80061fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	2204      	movs	r2, #4
 8005c34:	4013      	ands	r3, r2
 8005c36:	2b04      	cmp	r3, #4
 8005c38:	d125      	bne.n	8005c86 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	2204      	movs	r2, #4
 8005c42:	4013      	ands	r3, r2
 8005c44:	2b04      	cmp	r3, #4
 8005c46:	d11e      	bne.n	8005c86 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2205      	movs	r2, #5
 8005c4e:	4252      	negs	r2, r2
 8005c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2202      	movs	r2, #2
 8005c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	699a      	ldr	r2, [r3, #24]
 8005c5e:	23c0      	movs	r3, #192	; 0xc0
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	4013      	ands	r3, r2
 8005c64:	d004      	beq.n	8005c70 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	0018      	movs	r0, r3
 8005c6a:	f000 fabf 	bl	80061ec <HAL_TIM_IC_CaptureCallback>
 8005c6e:	e007      	b.n	8005c80 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	0018      	movs	r0, r3
 8005c74:	f000 fab2 	bl	80061dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	0018      	movs	r0, r3
 8005c7c:	f000 fabe 	bl	80061fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	2208      	movs	r2, #8
 8005c8e:	4013      	ands	r3, r2
 8005c90:	2b08      	cmp	r3, #8
 8005c92:	d124      	bne.n	8005cde <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	2208      	movs	r2, #8
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	2b08      	cmp	r3, #8
 8005ca0:	d11d      	bne.n	8005cde <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2209      	movs	r2, #9
 8005ca8:	4252      	negs	r2, r2
 8005caa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2204      	movs	r2, #4
 8005cb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	69db      	ldr	r3, [r3, #28]
 8005cb8:	2203      	movs	r2, #3
 8005cba:	4013      	ands	r3, r2
 8005cbc:	d004      	beq.n	8005cc8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	0018      	movs	r0, r3
 8005cc2:	f000 fa93 	bl	80061ec <HAL_TIM_IC_CaptureCallback>
 8005cc6:	e007      	b.n	8005cd8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	0018      	movs	r0, r3
 8005ccc:	f000 fa86 	bl	80061dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	0018      	movs	r0, r3
 8005cd4:	f000 fa92 	bl	80061fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	2210      	movs	r2, #16
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	2b10      	cmp	r3, #16
 8005cea:	d125      	bne.n	8005d38 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	2210      	movs	r2, #16
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	2b10      	cmp	r3, #16
 8005cf8:	d11e      	bne.n	8005d38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2211      	movs	r2, #17
 8005d00:	4252      	negs	r2, r2
 8005d02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2208      	movs	r2, #8
 8005d08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	69da      	ldr	r2, [r3, #28]
 8005d10:	23c0      	movs	r3, #192	; 0xc0
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4013      	ands	r3, r2
 8005d16:	d004      	beq.n	8005d22 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	0018      	movs	r0, r3
 8005d1c:	f000 fa66 	bl	80061ec <HAL_TIM_IC_CaptureCallback>
 8005d20:	e007      	b.n	8005d32 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	0018      	movs	r0, r3
 8005d26:	f000 fa59 	bl	80061dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	0018      	movs	r0, r3
 8005d2e:	f000 fa65 	bl	80061fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	4013      	ands	r3, r2
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d10f      	bne.n	8005d66 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	4013      	ands	r3, r2
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d108      	bne.n	8005d66 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2202      	movs	r2, #2
 8005d5a:	4252      	negs	r2, r2
 8005d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	0018      	movs	r0, r3
 8005d62:	f7fb ff25 	bl	8001bb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	2280      	movs	r2, #128	; 0x80
 8005d6e:	4013      	ands	r3, r2
 8005d70:	2b80      	cmp	r3, #128	; 0x80
 8005d72:	d10f      	bne.n	8005d94 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	2280      	movs	r2, #128	; 0x80
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	2b80      	cmp	r3, #128	; 0x80
 8005d80:	d108      	bne.n	8005d94 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2281      	movs	r2, #129	; 0x81
 8005d88:	4252      	negs	r2, r2
 8005d8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	0018      	movs	r0, r3
 8005d90:	f000 ff1c 	bl	8006bcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	691a      	ldr	r2, [r3, #16]
 8005d9a:	2380      	movs	r3, #128	; 0x80
 8005d9c:	005b      	lsls	r3, r3, #1
 8005d9e:	401a      	ands	r2, r3
 8005da0:	2380      	movs	r3, #128	; 0x80
 8005da2:	005b      	lsls	r3, r3, #1
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d10e      	bne.n	8005dc6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	2280      	movs	r2, #128	; 0x80
 8005db0:	4013      	ands	r3, r2
 8005db2:	2b80      	cmp	r3, #128	; 0x80
 8005db4:	d107      	bne.n	8005dc6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a1c      	ldr	r2, [pc, #112]	; (8005e2c <HAL_TIM_IRQHandler+0x260>)
 8005dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	0018      	movs	r0, r3
 8005dc2:	f000 ff0b 	bl	8006bdc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	2240      	movs	r2, #64	; 0x40
 8005dce:	4013      	ands	r3, r2
 8005dd0:	2b40      	cmp	r3, #64	; 0x40
 8005dd2:	d10f      	bne.n	8005df4 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	2240      	movs	r2, #64	; 0x40
 8005ddc:	4013      	ands	r3, r2
 8005dde:	2b40      	cmp	r3, #64	; 0x40
 8005de0:	d108      	bne.n	8005df4 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2241      	movs	r2, #65	; 0x41
 8005de8:	4252      	negs	r2, r2
 8005dea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	0018      	movs	r0, r3
 8005df0:	f000 fa0c 	bl	800620c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	2220      	movs	r2, #32
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	2b20      	cmp	r3, #32
 8005e00:	d10f      	bne.n	8005e22 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	2220      	movs	r2, #32
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	2b20      	cmp	r3, #32
 8005e0e:	d108      	bne.n	8005e22 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2221      	movs	r2, #33	; 0x21
 8005e16:	4252      	negs	r2, r2
 8005e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	0018      	movs	r0, r3
 8005e1e:	f000 fecd 	bl	8006bbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e22:	46c0      	nop			; (mov r8, r8)
 8005e24:	46bd      	mov	sp, r7
 8005e26:	b002      	add	sp, #8
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	46c0      	nop			; (mov r8, r8)
 8005e2c:	fffffeff 	.word	0xfffffeff

08005e30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e3c:	2317      	movs	r3, #23
 8005e3e:	18fb      	adds	r3, r7, r3
 8005e40:	2200      	movs	r2, #0
 8005e42:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	223c      	movs	r2, #60	; 0x3c
 8005e48:	5c9b      	ldrb	r3, [r3, r2]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d101      	bne.n	8005e52 <HAL_TIM_PWM_ConfigChannel+0x22>
 8005e4e:	2302      	movs	r3, #2
 8005e50:	e0e5      	b.n	800601e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	223c      	movs	r2, #60	; 0x3c
 8005e56:	2101      	movs	r1, #1
 8005e58:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2b14      	cmp	r3, #20
 8005e5e:	d900      	bls.n	8005e62 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005e60:	e0d1      	b.n	8006006 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	009a      	lsls	r2, r3, #2
 8005e66:	4b70      	ldr	r3, [pc, #448]	; (8006028 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005e68:	18d3      	adds	r3, r2, r3
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	0011      	movs	r1, r2
 8005e76:	0018      	movs	r0, r3
 8005e78:	f000 fa3c 	bl	80062f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	699a      	ldr	r2, [r3, #24]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	2108      	movs	r1, #8
 8005e88:	430a      	orrs	r2, r1
 8005e8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	699a      	ldr	r2, [r3, #24]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2104      	movs	r1, #4
 8005e98:	438a      	bics	r2, r1
 8005e9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	6999      	ldr	r1, [r3, #24]
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	691a      	ldr	r2, [r3, #16]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	619a      	str	r2, [r3, #24]
      break;
 8005eae:	e0af      	b.n	8006010 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68ba      	ldr	r2, [r7, #8]
 8005eb6:	0011      	movs	r1, r2
 8005eb8:	0018      	movs	r0, r3
 8005eba:	f000 fa9b 	bl	80063f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	699a      	ldr	r2, [r3, #24]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2180      	movs	r1, #128	; 0x80
 8005eca:	0109      	lsls	r1, r1, #4
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	699a      	ldr	r2, [r3, #24]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4954      	ldr	r1, [pc, #336]	; (800602c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005edc:	400a      	ands	r2, r1
 8005ede:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	6999      	ldr	r1, [r3, #24]
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	021a      	lsls	r2, r3, #8
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	619a      	str	r2, [r3, #24]
      break;
 8005ef4:	e08c      	b.n	8006010 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	0011      	movs	r1, r2
 8005efe:	0018      	movs	r0, r3
 8005f00:	f000 faf6 	bl	80064f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	69da      	ldr	r2, [r3, #28]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2108      	movs	r1, #8
 8005f10:	430a      	orrs	r2, r1
 8005f12:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	69da      	ldr	r2, [r3, #28]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2104      	movs	r1, #4
 8005f20:	438a      	bics	r2, r1
 8005f22:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	69d9      	ldr	r1, [r3, #28]
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	691a      	ldr	r2, [r3, #16]
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	430a      	orrs	r2, r1
 8005f34:	61da      	str	r2, [r3, #28]
      break;
 8005f36:	e06b      	b.n	8006010 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	0011      	movs	r1, r2
 8005f40:	0018      	movs	r0, r3
 8005f42:	f000 fb57 	bl	80065f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	69da      	ldr	r2, [r3, #28]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2180      	movs	r1, #128	; 0x80
 8005f52:	0109      	lsls	r1, r1, #4
 8005f54:	430a      	orrs	r2, r1
 8005f56:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	69da      	ldr	r2, [r3, #28]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4932      	ldr	r1, [pc, #200]	; (800602c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005f64:	400a      	ands	r2, r1
 8005f66:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	69d9      	ldr	r1, [r3, #28]
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	691b      	ldr	r3, [r3, #16]
 8005f72:	021a      	lsls	r2, r3, #8
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	430a      	orrs	r2, r1
 8005f7a:	61da      	str	r2, [r3, #28]
      break;
 8005f7c:	e048      	b.n	8006010 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68ba      	ldr	r2, [r7, #8]
 8005f84:	0011      	movs	r1, r2
 8005f86:	0018      	movs	r0, r3
 8005f88:	f000 fb98 	bl	80066bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2108      	movs	r1, #8
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2104      	movs	r1, #4
 8005fa8:	438a      	bics	r2, r1
 8005faa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	691a      	ldr	r2, [r3, #16]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005fbe:	e027      	b.n	8006010 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68ba      	ldr	r2, [r7, #8]
 8005fc6:	0011      	movs	r1, r2
 8005fc8:	0018      	movs	r0, r3
 8005fca:	f000 fbd1 	bl	8006770 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2180      	movs	r1, #128	; 0x80
 8005fda:	0109      	lsls	r1, r1, #4
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4910      	ldr	r1, [pc, #64]	; (800602c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005fec:	400a      	ands	r2, r1
 8005fee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	021a      	lsls	r2, r3, #8
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	430a      	orrs	r2, r1
 8006002:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006004:	e004      	b.n	8006010 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8006006:	2317      	movs	r3, #23
 8006008:	18fb      	adds	r3, r7, r3
 800600a:	2201      	movs	r2, #1
 800600c:	701a      	strb	r2, [r3, #0]
      break;
 800600e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	223c      	movs	r2, #60	; 0x3c
 8006014:	2100      	movs	r1, #0
 8006016:	5499      	strb	r1, [r3, r2]

  return status;
 8006018:	2317      	movs	r3, #23
 800601a:	18fb      	adds	r3, r7, r3
 800601c:	781b      	ldrb	r3, [r3, #0]
}
 800601e:	0018      	movs	r0, r3
 8006020:	46bd      	mov	sp, r7
 8006022:	b006      	add	sp, #24
 8006024:	bd80      	pop	{r7, pc}
 8006026:	46c0      	nop			; (mov r8, r8)
 8006028:	08008468 	.word	0x08008468
 800602c:	fffffbff 	.word	0xfffffbff

08006030 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800603a:	230f      	movs	r3, #15
 800603c:	18fb      	adds	r3, r7, r3
 800603e:	2200      	movs	r2, #0
 8006040:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	223c      	movs	r2, #60	; 0x3c
 8006046:	5c9b      	ldrb	r3, [r3, r2]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d101      	bne.n	8006050 <HAL_TIM_ConfigClockSource+0x20>
 800604c:	2302      	movs	r3, #2
 800604e:	e0bc      	b.n	80061ca <HAL_TIM_ConfigClockSource+0x19a>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	223c      	movs	r2, #60	; 0x3c
 8006054:	2101      	movs	r1, #1
 8006056:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	223d      	movs	r2, #61	; 0x3d
 800605c:	2102      	movs	r1, #2
 800605e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	4a5a      	ldr	r2, [pc, #360]	; (80061d4 <HAL_TIM_ConfigClockSource+0x1a4>)
 800606c:	4013      	ands	r3, r2
 800606e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	4a59      	ldr	r2, [pc, #356]	; (80061d8 <HAL_TIM_ConfigClockSource+0x1a8>)
 8006074:	4013      	ands	r3, r2
 8006076:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68ba      	ldr	r2, [r7, #8]
 800607e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2280      	movs	r2, #128	; 0x80
 8006086:	0192      	lsls	r2, r2, #6
 8006088:	4293      	cmp	r3, r2
 800608a:	d040      	beq.n	800610e <HAL_TIM_ConfigClockSource+0xde>
 800608c:	2280      	movs	r2, #128	; 0x80
 800608e:	0192      	lsls	r2, r2, #6
 8006090:	4293      	cmp	r3, r2
 8006092:	d900      	bls.n	8006096 <HAL_TIM_ConfigClockSource+0x66>
 8006094:	e088      	b.n	80061a8 <HAL_TIM_ConfigClockSource+0x178>
 8006096:	2280      	movs	r2, #128	; 0x80
 8006098:	0152      	lsls	r2, r2, #5
 800609a:	4293      	cmp	r3, r2
 800609c:	d100      	bne.n	80060a0 <HAL_TIM_ConfigClockSource+0x70>
 800609e:	e088      	b.n	80061b2 <HAL_TIM_ConfigClockSource+0x182>
 80060a0:	2280      	movs	r2, #128	; 0x80
 80060a2:	0152      	lsls	r2, r2, #5
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d900      	bls.n	80060aa <HAL_TIM_ConfigClockSource+0x7a>
 80060a8:	e07e      	b.n	80061a8 <HAL_TIM_ConfigClockSource+0x178>
 80060aa:	2b70      	cmp	r3, #112	; 0x70
 80060ac:	d018      	beq.n	80060e0 <HAL_TIM_ConfigClockSource+0xb0>
 80060ae:	d900      	bls.n	80060b2 <HAL_TIM_ConfigClockSource+0x82>
 80060b0:	e07a      	b.n	80061a8 <HAL_TIM_ConfigClockSource+0x178>
 80060b2:	2b60      	cmp	r3, #96	; 0x60
 80060b4:	d04f      	beq.n	8006156 <HAL_TIM_ConfigClockSource+0x126>
 80060b6:	d900      	bls.n	80060ba <HAL_TIM_ConfigClockSource+0x8a>
 80060b8:	e076      	b.n	80061a8 <HAL_TIM_ConfigClockSource+0x178>
 80060ba:	2b50      	cmp	r3, #80	; 0x50
 80060bc:	d03b      	beq.n	8006136 <HAL_TIM_ConfigClockSource+0x106>
 80060be:	d900      	bls.n	80060c2 <HAL_TIM_ConfigClockSource+0x92>
 80060c0:	e072      	b.n	80061a8 <HAL_TIM_ConfigClockSource+0x178>
 80060c2:	2b40      	cmp	r3, #64	; 0x40
 80060c4:	d057      	beq.n	8006176 <HAL_TIM_ConfigClockSource+0x146>
 80060c6:	d900      	bls.n	80060ca <HAL_TIM_ConfigClockSource+0x9a>
 80060c8:	e06e      	b.n	80061a8 <HAL_TIM_ConfigClockSource+0x178>
 80060ca:	2b30      	cmp	r3, #48	; 0x30
 80060cc:	d063      	beq.n	8006196 <HAL_TIM_ConfigClockSource+0x166>
 80060ce:	d86b      	bhi.n	80061a8 <HAL_TIM_ConfigClockSource+0x178>
 80060d0:	2b20      	cmp	r3, #32
 80060d2:	d060      	beq.n	8006196 <HAL_TIM_ConfigClockSource+0x166>
 80060d4:	d868      	bhi.n	80061a8 <HAL_TIM_ConfigClockSource+0x178>
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d05d      	beq.n	8006196 <HAL_TIM_ConfigClockSource+0x166>
 80060da:	2b10      	cmp	r3, #16
 80060dc:	d05b      	beq.n	8006196 <HAL_TIM_ConfigClockSource+0x166>
 80060de:	e063      	b.n	80061a8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6818      	ldr	r0, [r3, #0]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	6899      	ldr	r1, [r3, #8]
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	685a      	ldr	r2, [r3, #4]
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	f000 fc18 	bl	8006924 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	2277      	movs	r2, #119	; 0x77
 8006100:	4313      	orrs	r3, r2
 8006102:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68ba      	ldr	r2, [r7, #8]
 800610a:	609a      	str	r2, [r3, #8]
      break;
 800610c:	e052      	b.n	80061b4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6818      	ldr	r0, [r3, #0]
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	6899      	ldr	r1, [r3, #8]
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	685a      	ldr	r2, [r3, #4]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	f000 fc01 	bl	8006924 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	689a      	ldr	r2, [r3, #8]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2180      	movs	r1, #128	; 0x80
 800612e:	01c9      	lsls	r1, r1, #7
 8006130:	430a      	orrs	r2, r1
 8006132:	609a      	str	r2, [r3, #8]
      break;
 8006134:	e03e      	b.n	80061b4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6818      	ldr	r0, [r3, #0]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	6859      	ldr	r1, [r3, #4]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	001a      	movs	r2, r3
 8006144:	f000 fb72 	bl	800682c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2150      	movs	r1, #80	; 0x50
 800614e:	0018      	movs	r0, r3
 8006150:	f000 fbcc 	bl	80068ec <TIM_ITRx_SetConfig>
      break;
 8006154:	e02e      	b.n	80061b4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6818      	ldr	r0, [r3, #0]
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	6859      	ldr	r1, [r3, #4]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	001a      	movs	r2, r3
 8006164:	f000 fb90 	bl	8006888 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2160      	movs	r1, #96	; 0x60
 800616e:	0018      	movs	r0, r3
 8006170:	f000 fbbc 	bl	80068ec <TIM_ITRx_SetConfig>
      break;
 8006174:	e01e      	b.n	80061b4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6818      	ldr	r0, [r3, #0]
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	6859      	ldr	r1, [r3, #4]
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	001a      	movs	r2, r3
 8006184:	f000 fb52 	bl	800682c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2140      	movs	r1, #64	; 0x40
 800618e:	0018      	movs	r0, r3
 8006190:	f000 fbac 	bl	80068ec <TIM_ITRx_SetConfig>
      break;
 8006194:	e00e      	b.n	80061b4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	0019      	movs	r1, r3
 80061a0:	0010      	movs	r0, r2
 80061a2:	f000 fba3 	bl	80068ec <TIM_ITRx_SetConfig>
      break;
 80061a6:	e005      	b.n	80061b4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80061a8:	230f      	movs	r3, #15
 80061aa:	18fb      	adds	r3, r7, r3
 80061ac:	2201      	movs	r2, #1
 80061ae:	701a      	strb	r2, [r3, #0]
      break;
 80061b0:	e000      	b.n	80061b4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80061b2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	223d      	movs	r2, #61	; 0x3d
 80061b8:	2101      	movs	r1, #1
 80061ba:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	223c      	movs	r2, #60	; 0x3c
 80061c0:	2100      	movs	r1, #0
 80061c2:	5499      	strb	r1, [r3, r2]

  return status;
 80061c4:	230f      	movs	r3, #15
 80061c6:	18fb      	adds	r3, r7, r3
 80061c8:	781b      	ldrb	r3, [r3, #0]
}
 80061ca:	0018      	movs	r0, r3
 80061cc:	46bd      	mov	sp, r7
 80061ce:	b004      	add	sp, #16
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	46c0      	nop			; (mov r8, r8)
 80061d4:	ffceff88 	.word	0xffceff88
 80061d8:	ffff00ff 	.word	0xffff00ff

080061dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80061e4:	46c0      	nop			; (mov r8, r8)
 80061e6:	46bd      	mov	sp, r7
 80061e8:	b002      	add	sp, #8
 80061ea:	bd80      	pop	{r7, pc}

080061ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061f4:	46c0      	nop			; (mov r8, r8)
 80061f6:	46bd      	mov	sp, r7
 80061f8:	b002      	add	sp, #8
 80061fa:	bd80      	pop	{r7, pc}

080061fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006204:	46c0      	nop			; (mov r8, r8)
 8006206:	46bd      	mov	sp, r7
 8006208:	b002      	add	sp, #8
 800620a:	bd80      	pop	{r7, pc}

0800620c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006214:	46c0      	nop			; (mov r8, r8)
 8006216:	46bd      	mov	sp, r7
 8006218:	b002      	add	sp, #8
 800621a:	bd80      	pop	{r7, pc}

0800621c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a2b      	ldr	r2, [pc, #172]	; (80062dc <TIM_Base_SetConfig+0xc0>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d003      	beq.n	800623c <TIM_Base_SetConfig+0x20>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a2a      	ldr	r2, [pc, #168]	; (80062e0 <TIM_Base_SetConfig+0xc4>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d108      	bne.n	800624e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2270      	movs	r2, #112	; 0x70
 8006240:	4393      	bics	r3, r2
 8006242:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	4313      	orrs	r3, r2
 800624c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a22      	ldr	r2, [pc, #136]	; (80062dc <TIM_Base_SetConfig+0xc0>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d00f      	beq.n	8006276 <TIM_Base_SetConfig+0x5a>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a21      	ldr	r2, [pc, #132]	; (80062e0 <TIM_Base_SetConfig+0xc4>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d00b      	beq.n	8006276 <TIM_Base_SetConfig+0x5a>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a20      	ldr	r2, [pc, #128]	; (80062e4 <TIM_Base_SetConfig+0xc8>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d007      	beq.n	8006276 <TIM_Base_SetConfig+0x5a>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a1f      	ldr	r2, [pc, #124]	; (80062e8 <TIM_Base_SetConfig+0xcc>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d003      	beq.n	8006276 <TIM_Base_SetConfig+0x5a>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a1e      	ldr	r2, [pc, #120]	; (80062ec <TIM_Base_SetConfig+0xd0>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d108      	bne.n	8006288 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	4a1d      	ldr	r2, [pc, #116]	; (80062f0 <TIM_Base_SetConfig+0xd4>)
 800627a:	4013      	ands	r3, r2
 800627c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	4313      	orrs	r3, r2
 8006286:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2280      	movs	r2, #128	; 0x80
 800628c:	4393      	bics	r3, r2
 800628e:	001a      	movs	r2, r3
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	695b      	ldr	r3, [r3, #20]
 8006294:	4313      	orrs	r3, r2
 8006296:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	689a      	ldr	r2, [r3, #8]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a0a      	ldr	r2, [pc, #40]	; (80062dc <TIM_Base_SetConfig+0xc0>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d007      	beq.n	80062c6 <TIM_Base_SetConfig+0xaa>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a0b      	ldr	r2, [pc, #44]	; (80062e8 <TIM_Base_SetConfig+0xcc>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d003      	beq.n	80062c6 <TIM_Base_SetConfig+0xaa>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a0a      	ldr	r2, [pc, #40]	; (80062ec <TIM_Base_SetConfig+0xd0>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d103      	bne.n	80062ce <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	691a      	ldr	r2, [r3, #16]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2201      	movs	r2, #1
 80062d2:	615a      	str	r2, [r3, #20]
}
 80062d4:	46c0      	nop			; (mov r8, r8)
 80062d6:	46bd      	mov	sp, r7
 80062d8:	b004      	add	sp, #16
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	40012c00 	.word	0x40012c00
 80062e0:	40000400 	.word	0x40000400
 80062e4:	40002000 	.word	0x40002000
 80062e8:	40014400 	.word	0x40014400
 80062ec:	40014800 	.word	0x40014800
 80062f0:	fffffcff 	.word	0xfffffcff

080062f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b086      	sub	sp, #24
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	2201      	movs	r2, #1
 8006304:	4393      	bics	r3, r2
 8006306:	001a      	movs	r2, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	4a2e      	ldr	r2, [pc, #184]	; (80063dc <TIM_OC1_SetConfig+0xe8>)
 8006322:	4013      	ands	r3, r2
 8006324:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2203      	movs	r2, #3
 800632a:	4393      	bics	r3, r2
 800632c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	4313      	orrs	r3, r2
 8006336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	2202      	movs	r2, #2
 800633c:	4393      	bics	r3, r2
 800633e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	697a      	ldr	r2, [r7, #20]
 8006346:	4313      	orrs	r3, r2
 8006348:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a24      	ldr	r2, [pc, #144]	; (80063e0 <TIM_OC1_SetConfig+0xec>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d007      	beq.n	8006362 <TIM_OC1_SetConfig+0x6e>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a23      	ldr	r2, [pc, #140]	; (80063e4 <TIM_OC1_SetConfig+0xf0>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d003      	beq.n	8006362 <TIM_OC1_SetConfig+0x6e>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a22      	ldr	r2, [pc, #136]	; (80063e8 <TIM_OC1_SetConfig+0xf4>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d10c      	bne.n	800637c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	2208      	movs	r2, #8
 8006366:	4393      	bics	r3, r2
 8006368:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	4313      	orrs	r3, r2
 8006372:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	2204      	movs	r2, #4
 8006378:	4393      	bics	r3, r2
 800637a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a18      	ldr	r2, [pc, #96]	; (80063e0 <TIM_OC1_SetConfig+0xec>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d007      	beq.n	8006394 <TIM_OC1_SetConfig+0xa0>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a17      	ldr	r2, [pc, #92]	; (80063e4 <TIM_OC1_SetConfig+0xf0>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d003      	beq.n	8006394 <TIM_OC1_SetConfig+0xa0>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a16      	ldr	r2, [pc, #88]	; (80063e8 <TIM_OC1_SetConfig+0xf4>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d111      	bne.n	80063b8 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	4a15      	ldr	r2, [pc, #84]	; (80063ec <TIM_OC1_SetConfig+0xf8>)
 8006398:	4013      	ands	r3, r2
 800639a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	4a14      	ldr	r2, [pc, #80]	; (80063f0 <TIM_OC1_SetConfig+0xfc>)
 80063a0:	4013      	ands	r3, r2
 80063a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	693a      	ldr	r2, [r7, #16]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	699b      	ldr	r3, [r3, #24]
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	685a      	ldr	r2, [r3, #4]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	697a      	ldr	r2, [r7, #20]
 80063d0:	621a      	str	r2, [r3, #32]
}
 80063d2:	46c0      	nop			; (mov r8, r8)
 80063d4:	46bd      	mov	sp, r7
 80063d6:	b006      	add	sp, #24
 80063d8:	bd80      	pop	{r7, pc}
 80063da:	46c0      	nop			; (mov r8, r8)
 80063dc:	fffeff8f 	.word	0xfffeff8f
 80063e0:	40012c00 	.word	0x40012c00
 80063e4:	40014400 	.word	0x40014400
 80063e8:	40014800 	.word	0x40014800
 80063ec:	fffffeff 	.word	0xfffffeff
 80063f0:	fffffdff 	.word	0xfffffdff

080063f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b086      	sub	sp, #24
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a1b      	ldr	r3, [r3, #32]
 8006402:	2210      	movs	r2, #16
 8006404:	4393      	bics	r3, r2
 8006406:	001a      	movs	r2, r3
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a1b      	ldr	r3, [r3, #32]
 8006410:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	699b      	ldr	r3, [r3, #24]
 800641c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	4a2c      	ldr	r2, [pc, #176]	; (80064d4 <TIM_OC2_SetConfig+0xe0>)
 8006422:	4013      	ands	r3, r2
 8006424:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	4a2b      	ldr	r2, [pc, #172]	; (80064d8 <TIM_OC2_SetConfig+0xe4>)
 800642a:	4013      	ands	r3, r2
 800642c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	021b      	lsls	r3, r3, #8
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	4313      	orrs	r3, r2
 8006438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	2220      	movs	r2, #32
 800643e:	4393      	bics	r3, r2
 8006440:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	011b      	lsls	r3, r3, #4
 8006448:	697a      	ldr	r2, [r7, #20]
 800644a:	4313      	orrs	r3, r2
 800644c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a22      	ldr	r2, [pc, #136]	; (80064dc <TIM_OC2_SetConfig+0xe8>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d10d      	bne.n	8006472 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	2280      	movs	r2, #128	; 0x80
 800645a:	4393      	bics	r3, r2
 800645c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	011b      	lsls	r3, r3, #4
 8006464:	697a      	ldr	r2, [r7, #20]
 8006466:	4313      	orrs	r3, r2
 8006468:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	2240      	movs	r2, #64	; 0x40
 800646e:	4393      	bics	r3, r2
 8006470:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a19      	ldr	r2, [pc, #100]	; (80064dc <TIM_OC2_SetConfig+0xe8>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d007      	beq.n	800648a <TIM_OC2_SetConfig+0x96>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4a18      	ldr	r2, [pc, #96]	; (80064e0 <TIM_OC2_SetConfig+0xec>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d003      	beq.n	800648a <TIM_OC2_SetConfig+0x96>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a17      	ldr	r2, [pc, #92]	; (80064e4 <TIM_OC2_SetConfig+0xf0>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d113      	bne.n	80064b2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	4a16      	ldr	r2, [pc, #88]	; (80064e8 <TIM_OC2_SetConfig+0xf4>)
 800648e:	4013      	ands	r3, r2
 8006490:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	4a15      	ldr	r2, [pc, #84]	; (80064ec <TIM_OC2_SetConfig+0xf8>)
 8006496:	4013      	ands	r3, r2
 8006498:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	693a      	ldr	r2, [r7, #16]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	693a      	ldr	r2, [r7, #16]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	693a      	ldr	r2, [r7, #16]
 80064b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	685a      	ldr	r2, [r3, #4]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	621a      	str	r2, [r3, #32]
}
 80064cc:	46c0      	nop			; (mov r8, r8)
 80064ce:	46bd      	mov	sp, r7
 80064d0:	b006      	add	sp, #24
 80064d2:	bd80      	pop	{r7, pc}
 80064d4:	feff8fff 	.word	0xfeff8fff
 80064d8:	fffffcff 	.word	0xfffffcff
 80064dc:	40012c00 	.word	0x40012c00
 80064e0:	40014400 	.word	0x40014400
 80064e4:	40014800 	.word	0x40014800
 80064e8:	fffffbff 	.word	0xfffffbff
 80064ec:	fffff7ff 	.word	0xfffff7ff

080064f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b086      	sub	sp, #24
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	4a33      	ldr	r2, [pc, #204]	; (80065cc <TIM_OC3_SetConfig+0xdc>)
 8006500:	401a      	ands	r2, r3
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a1b      	ldr	r3, [r3, #32]
 800650a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	69db      	ldr	r3, [r3, #28]
 8006516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	4a2d      	ldr	r2, [pc, #180]	; (80065d0 <TIM_OC3_SetConfig+0xe0>)
 800651c:	4013      	ands	r3, r2
 800651e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2203      	movs	r2, #3
 8006524:	4393      	bics	r3, r2
 8006526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	4313      	orrs	r3, r2
 8006530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	4a27      	ldr	r2, [pc, #156]	; (80065d4 <TIM_OC3_SetConfig+0xe4>)
 8006536:	4013      	ands	r3, r2
 8006538:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	021b      	lsls	r3, r3, #8
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	4313      	orrs	r3, r2
 8006544:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a23      	ldr	r2, [pc, #140]	; (80065d8 <TIM_OC3_SetConfig+0xe8>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d10d      	bne.n	800656a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	4a22      	ldr	r2, [pc, #136]	; (80065dc <TIM_OC3_SetConfig+0xec>)
 8006552:	4013      	ands	r3, r2
 8006554:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	021b      	lsls	r3, r3, #8
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	4313      	orrs	r3, r2
 8006560:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	4a1e      	ldr	r2, [pc, #120]	; (80065e0 <TIM_OC3_SetConfig+0xf0>)
 8006566:	4013      	ands	r3, r2
 8006568:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a1a      	ldr	r2, [pc, #104]	; (80065d8 <TIM_OC3_SetConfig+0xe8>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d007      	beq.n	8006582 <TIM_OC3_SetConfig+0x92>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4a1b      	ldr	r2, [pc, #108]	; (80065e4 <TIM_OC3_SetConfig+0xf4>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d003      	beq.n	8006582 <TIM_OC3_SetConfig+0x92>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a1a      	ldr	r2, [pc, #104]	; (80065e8 <TIM_OC3_SetConfig+0xf8>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d113      	bne.n	80065aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	4a19      	ldr	r2, [pc, #100]	; (80065ec <TIM_OC3_SetConfig+0xfc>)
 8006586:	4013      	ands	r3, r2
 8006588:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	4a18      	ldr	r2, [pc, #96]	; (80065f0 <TIM_OC3_SetConfig+0x100>)
 800658e:	4013      	ands	r3, r2
 8006590:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	011b      	lsls	r3, r3, #4
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	4313      	orrs	r3, r2
 800659c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	011b      	lsls	r3, r3, #4
 80065a4:	693a      	ldr	r2, [r7, #16]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	685a      	ldr	r2, [r3, #4]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	697a      	ldr	r2, [r7, #20]
 80065c2:	621a      	str	r2, [r3, #32]
}
 80065c4:	46c0      	nop			; (mov r8, r8)
 80065c6:	46bd      	mov	sp, r7
 80065c8:	b006      	add	sp, #24
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	fffffeff 	.word	0xfffffeff
 80065d0:	fffeff8f 	.word	0xfffeff8f
 80065d4:	fffffdff 	.word	0xfffffdff
 80065d8:	40012c00 	.word	0x40012c00
 80065dc:	fffff7ff 	.word	0xfffff7ff
 80065e0:	fffffbff 	.word	0xfffffbff
 80065e4:	40014400 	.word	0x40014400
 80065e8:	40014800 	.word	0x40014800
 80065ec:	ffffefff 	.word	0xffffefff
 80065f0:	ffffdfff 	.word	0xffffdfff

080065f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b086      	sub	sp, #24
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a1b      	ldr	r3, [r3, #32]
 8006602:	4a26      	ldr	r2, [pc, #152]	; (800669c <TIM_OC4_SetConfig+0xa8>)
 8006604:	401a      	ands	r2, r3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	69db      	ldr	r3, [r3, #28]
 800661a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	4a20      	ldr	r2, [pc, #128]	; (80066a0 <TIM_OC4_SetConfig+0xac>)
 8006620:	4013      	ands	r3, r2
 8006622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	4a1f      	ldr	r2, [pc, #124]	; (80066a4 <TIM_OC4_SetConfig+0xb0>)
 8006628:	4013      	ands	r3, r2
 800662a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	021b      	lsls	r3, r3, #8
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	4313      	orrs	r3, r2
 8006636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	4a1b      	ldr	r2, [pc, #108]	; (80066a8 <TIM_OC4_SetConfig+0xb4>)
 800663c:	4013      	ands	r3, r2
 800663e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	031b      	lsls	r3, r3, #12
 8006646:	693a      	ldr	r2, [r7, #16]
 8006648:	4313      	orrs	r3, r2
 800664a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a17      	ldr	r2, [pc, #92]	; (80066ac <TIM_OC4_SetConfig+0xb8>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d007      	beq.n	8006664 <TIM_OC4_SetConfig+0x70>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a16      	ldr	r2, [pc, #88]	; (80066b0 <TIM_OC4_SetConfig+0xbc>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d003      	beq.n	8006664 <TIM_OC4_SetConfig+0x70>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a15      	ldr	r2, [pc, #84]	; (80066b4 <TIM_OC4_SetConfig+0xc0>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d109      	bne.n	8006678 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	4a14      	ldr	r2, [pc, #80]	; (80066b8 <TIM_OC4_SetConfig+0xc4>)
 8006668:	4013      	ands	r3, r2
 800666a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	695b      	ldr	r3, [r3, #20]
 8006670:	019b      	lsls	r3, r3, #6
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	4313      	orrs	r3, r2
 8006676:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	685a      	ldr	r2, [r3, #4]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	693a      	ldr	r2, [r7, #16]
 8006690:	621a      	str	r2, [r3, #32]
}
 8006692:	46c0      	nop			; (mov r8, r8)
 8006694:	46bd      	mov	sp, r7
 8006696:	b006      	add	sp, #24
 8006698:	bd80      	pop	{r7, pc}
 800669a:	46c0      	nop			; (mov r8, r8)
 800669c:	ffffefff 	.word	0xffffefff
 80066a0:	feff8fff 	.word	0xfeff8fff
 80066a4:	fffffcff 	.word	0xfffffcff
 80066a8:	ffffdfff 	.word	0xffffdfff
 80066ac:	40012c00 	.word	0x40012c00
 80066b0:	40014400 	.word	0x40014400
 80066b4:	40014800 	.word	0x40014800
 80066b8:	ffffbfff 	.word	0xffffbfff

080066bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a1b      	ldr	r3, [r3, #32]
 80066ca:	4a23      	ldr	r2, [pc, #140]	; (8006758 <TIM_OC5_SetConfig+0x9c>)
 80066cc:	401a      	ands	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a1b      	ldr	r3, [r3, #32]
 80066d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	4a1d      	ldr	r2, [pc, #116]	; (800675c <TIM_OC5_SetConfig+0xa0>)
 80066e8:	4013      	ands	r3, r2
 80066ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	4313      	orrs	r3, r2
 80066f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	4a19      	ldr	r2, [pc, #100]	; (8006760 <TIM_OC5_SetConfig+0xa4>)
 80066fa:	4013      	ands	r3, r2
 80066fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	041b      	lsls	r3, r3, #16
 8006704:	693a      	ldr	r2, [r7, #16]
 8006706:	4313      	orrs	r3, r2
 8006708:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a15      	ldr	r2, [pc, #84]	; (8006764 <TIM_OC5_SetConfig+0xa8>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d007      	beq.n	8006722 <TIM_OC5_SetConfig+0x66>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a14      	ldr	r2, [pc, #80]	; (8006768 <TIM_OC5_SetConfig+0xac>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d003      	beq.n	8006722 <TIM_OC5_SetConfig+0x66>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a13      	ldr	r2, [pc, #76]	; (800676c <TIM_OC5_SetConfig+0xb0>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d109      	bne.n	8006736 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	4a0c      	ldr	r2, [pc, #48]	; (8006758 <TIM_OC5_SetConfig+0x9c>)
 8006726:	4013      	ands	r3, r2
 8006728:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	695b      	ldr	r3, [r3, #20]
 800672e:	021b      	lsls	r3, r3, #8
 8006730:	697a      	ldr	r2, [r7, #20]
 8006732:	4313      	orrs	r3, r2
 8006734:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	685a      	ldr	r2, [r3, #4]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	621a      	str	r2, [r3, #32]
}
 8006750:	46c0      	nop			; (mov r8, r8)
 8006752:	46bd      	mov	sp, r7
 8006754:	b006      	add	sp, #24
 8006756:	bd80      	pop	{r7, pc}
 8006758:	fffeffff 	.word	0xfffeffff
 800675c:	fffeff8f 	.word	0xfffeff8f
 8006760:	fffdffff 	.word	0xfffdffff
 8006764:	40012c00 	.word	0x40012c00
 8006768:	40014400 	.word	0x40014400
 800676c:	40014800 	.word	0x40014800

08006770 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b086      	sub	sp, #24
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	4a24      	ldr	r2, [pc, #144]	; (8006810 <TIM_OC6_SetConfig+0xa0>)
 8006780:	401a      	ands	r2, r3
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	4a1e      	ldr	r2, [pc, #120]	; (8006814 <TIM_OC6_SetConfig+0xa4>)
 800679c:	4013      	ands	r3, r2
 800679e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	021b      	lsls	r3, r3, #8
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	4a1a      	ldr	r2, [pc, #104]	; (8006818 <TIM_OC6_SetConfig+0xa8>)
 80067b0:	4013      	ands	r3, r2
 80067b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	051b      	lsls	r3, r3, #20
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	4313      	orrs	r3, r2
 80067be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a16      	ldr	r2, [pc, #88]	; (800681c <TIM_OC6_SetConfig+0xac>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d007      	beq.n	80067d8 <TIM_OC6_SetConfig+0x68>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a15      	ldr	r2, [pc, #84]	; (8006820 <TIM_OC6_SetConfig+0xb0>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d003      	beq.n	80067d8 <TIM_OC6_SetConfig+0x68>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	4a14      	ldr	r2, [pc, #80]	; (8006824 <TIM_OC6_SetConfig+0xb4>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d109      	bne.n	80067ec <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	4a13      	ldr	r2, [pc, #76]	; (8006828 <TIM_OC6_SetConfig+0xb8>)
 80067dc:	4013      	ands	r3, r2
 80067de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	695b      	ldr	r3, [r3, #20]
 80067e4:	029b      	lsls	r3, r3, #10
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	697a      	ldr	r2, [r7, #20]
 80067f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	68fa      	ldr	r2, [r7, #12]
 80067f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	685a      	ldr	r2, [r3, #4]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	693a      	ldr	r2, [r7, #16]
 8006804:	621a      	str	r2, [r3, #32]
}
 8006806:	46c0      	nop			; (mov r8, r8)
 8006808:	46bd      	mov	sp, r7
 800680a:	b006      	add	sp, #24
 800680c:	bd80      	pop	{r7, pc}
 800680e:	46c0      	nop			; (mov r8, r8)
 8006810:	ffefffff 	.word	0xffefffff
 8006814:	feff8fff 	.word	0xfeff8fff
 8006818:	ffdfffff 	.word	0xffdfffff
 800681c:	40012c00 	.word	0x40012c00
 8006820:	40014400 	.word	0x40014400
 8006824:	40014800 	.word	0x40014800
 8006828:	fffbffff 	.word	0xfffbffff

0800682c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b086      	sub	sp, #24
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6a1b      	ldr	r3, [r3, #32]
 800683c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6a1b      	ldr	r3, [r3, #32]
 8006842:	2201      	movs	r2, #1
 8006844:	4393      	bics	r3, r2
 8006846:	001a      	movs	r2, r3
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	22f0      	movs	r2, #240	; 0xf0
 8006856:	4393      	bics	r3, r2
 8006858:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	011b      	lsls	r3, r3, #4
 800685e:	693a      	ldr	r2, [r7, #16]
 8006860:	4313      	orrs	r3, r2
 8006862:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	220a      	movs	r2, #10
 8006868:	4393      	bics	r3, r2
 800686a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	4313      	orrs	r3, r2
 8006872:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	693a      	ldr	r2, [r7, #16]
 8006878:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	697a      	ldr	r2, [r7, #20]
 800687e:	621a      	str	r2, [r3, #32]
}
 8006880:	46c0      	nop			; (mov r8, r8)
 8006882:	46bd      	mov	sp, r7
 8006884:	b006      	add	sp, #24
 8006886:	bd80      	pop	{r7, pc}

08006888 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b086      	sub	sp, #24
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	6a1b      	ldr	r3, [r3, #32]
 8006898:	2210      	movs	r2, #16
 800689a:	4393      	bics	r3, r2
 800689c:	001a      	movs	r2, r3
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6a1b      	ldr	r3, [r3, #32]
 80068ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	4a0d      	ldr	r2, [pc, #52]	; (80068e8 <TIM_TI2_ConfigInputStage+0x60>)
 80068b2:	4013      	ands	r3, r2
 80068b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	031b      	lsls	r3, r3, #12
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	4313      	orrs	r3, r2
 80068be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	22a0      	movs	r2, #160	; 0xa0
 80068c4:	4393      	bics	r3, r2
 80068c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	011b      	lsls	r3, r3, #4
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	697a      	ldr	r2, [r7, #20]
 80068d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	621a      	str	r2, [r3, #32]
}
 80068de:	46c0      	nop			; (mov r8, r8)
 80068e0:	46bd      	mov	sp, r7
 80068e2:	b006      	add	sp, #24
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	46c0      	nop			; (mov r8, r8)
 80068e8:	ffff0fff 	.word	0xffff0fff

080068ec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	4a08      	ldr	r2, [pc, #32]	; (8006920 <TIM_ITRx_SetConfig+0x34>)
 8006900:	4013      	ands	r3, r2
 8006902:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006904:	683a      	ldr	r2, [r7, #0]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	4313      	orrs	r3, r2
 800690a:	2207      	movs	r2, #7
 800690c:	4313      	orrs	r3, r2
 800690e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	609a      	str	r2, [r3, #8]
}
 8006916:	46c0      	nop			; (mov r8, r8)
 8006918:	46bd      	mov	sp, r7
 800691a:	b004      	add	sp, #16
 800691c:	bd80      	pop	{r7, pc}
 800691e:	46c0      	nop			; (mov r8, r8)
 8006920:	ffcfff8f 	.word	0xffcfff8f

08006924 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b086      	sub	sp, #24
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
 8006930:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	4a09      	ldr	r2, [pc, #36]	; (8006960 <TIM_ETR_SetConfig+0x3c>)
 800693c:	4013      	ands	r3, r2
 800693e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	021a      	lsls	r2, r3, #8
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	431a      	orrs	r2, r3
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	4313      	orrs	r3, r2
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	4313      	orrs	r3, r2
 8006950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	609a      	str	r2, [r3, #8]
}
 8006958:	46c0      	nop			; (mov r8, r8)
 800695a:	46bd      	mov	sp, r7
 800695c:	b006      	add	sp, #24
 800695e:	bd80      	pop	{r7, pc}
 8006960:	ffff00ff 	.word	0xffff00ff

08006964 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b086      	sub	sp, #24
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	221f      	movs	r2, #31
 8006974:	4013      	ands	r3, r2
 8006976:	2201      	movs	r2, #1
 8006978:	409a      	lsls	r2, r3
 800697a:	0013      	movs	r3, r2
 800697c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6a1b      	ldr	r3, [r3, #32]
 8006982:	697a      	ldr	r2, [r7, #20]
 8006984:	43d2      	mvns	r2, r2
 8006986:	401a      	ands	r2, r3
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	6a1a      	ldr	r2, [r3, #32]
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	211f      	movs	r1, #31
 8006994:	400b      	ands	r3, r1
 8006996:	6879      	ldr	r1, [r7, #4]
 8006998:	4099      	lsls	r1, r3
 800699a:	000b      	movs	r3, r1
 800699c:	431a      	orrs	r2, r3
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	621a      	str	r2, [r3, #32]
}
 80069a2:	46c0      	nop			; (mov r8, r8)
 80069a4:	46bd      	mov	sp, r7
 80069a6:	b006      	add	sp, #24
 80069a8:	bd80      	pop	{r7, pc}
	...

080069ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	223c      	movs	r2, #60	; 0x3c
 80069ba:	5c9b      	ldrb	r3, [r3, r2]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d101      	bne.n	80069c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069c0:	2302      	movs	r3, #2
 80069c2:	e04a      	b.n	8006a5a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	223c      	movs	r2, #60	; 0x3c
 80069c8:	2101      	movs	r1, #1
 80069ca:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	223d      	movs	r2, #61	; 0x3d
 80069d0:	2102      	movs	r1, #2
 80069d2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a1e      	ldr	r2, [pc, #120]	; (8006a64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d108      	bne.n	8006a00 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	4a1d      	ldr	r2, [pc, #116]	; (8006a68 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80069f2:	4013      	ands	r3, r2
 80069f4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2270      	movs	r2, #112	; 0x70
 8006a04:	4393      	bics	r3, r2
 8006a06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a11      	ldr	r2, [pc, #68]	; (8006a64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d004      	beq.n	8006a2e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a10      	ldr	r2, [pc, #64]	; (8006a6c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d10c      	bne.n	8006a48 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	2280      	movs	r2, #128	; 0x80
 8006a32:	4393      	bics	r3, r2
 8006a34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	68ba      	ldr	r2, [r7, #8]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68ba      	ldr	r2, [r7, #8]
 8006a46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	223d      	movs	r2, #61	; 0x3d
 8006a4c:	2101      	movs	r1, #1
 8006a4e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	223c      	movs	r2, #60	; 0x3c
 8006a54:	2100      	movs	r1, #0
 8006a56:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	0018      	movs	r0, r3
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	b004      	add	sp, #16
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	46c0      	nop			; (mov r8, r8)
 8006a64:	40012c00 	.word	0x40012c00
 8006a68:	ff0fffff 	.word	0xff0fffff
 8006a6c:	40000400 	.word	0x40000400

08006a70 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	223c      	movs	r2, #60	; 0x3c
 8006a82:	5c9b      	ldrb	r3, [r3, r2]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d101      	bne.n	8006a8c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a88:	2302      	movs	r3, #2
 8006a8a:	e079      	b.n	8006b80 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	223c      	movs	r2, #60	; 0x3c
 8006a90:	2101      	movs	r1, #1
 8006a92:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	22ff      	movs	r2, #255	; 0xff
 8006a98:	4393      	bics	r3, r2
 8006a9a:	001a      	movs	r2, r3
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	4a38      	ldr	r2, [pc, #224]	; (8006b88 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8006aa8:	401a      	ands	r2, r3
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	4a35      	ldr	r2, [pc, #212]	; (8006b8c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006ab6:	401a      	ands	r2, r3
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	4a33      	ldr	r2, [pc, #204]	; (8006b90 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8006ac4:	401a      	ands	r2, r3
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	4a30      	ldr	r2, [pc, #192]	; (8006b94 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8006ad2:	401a      	ands	r2, r3
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	4a2e      	ldr	r2, [pc, #184]	; (8006b98 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8006ae0:	401a      	ands	r2, r3
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	4a2b      	ldr	r2, [pc, #172]	; (8006b9c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8006aee:	401a      	ands	r2, r3
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af4:	4313      	orrs	r3, r2
 8006af6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	4a29      	ldr	r2, [pc, #164]	; (8006ba0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8006afc:	401a      	ands	r2, r3
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	041b      	lsls	r3, r3, #16
 8006b04:	4313      	orrs	r3, r2
 8006b06:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a25      	ldr	r2, [pc, #148]	; (8006ba4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d106      	bne.n	8006b20 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	4a24      	ldr	r2, [pc, #144]	; (8006ba8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8006b16:	401a      	ands	r2, r3
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	69db      	ldr	r3, [r3, #28]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a1f      	ldr	r2, [pc, #124]	; (8006ba4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d121      	bne.n	8006b6e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	4a1f      	ldr	r2, [pc, #124]	; (8006bac <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006b2e:	401a      	ands	r2, r3
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b34:	051b      	lsls	r3, r3, #20
 8006b36:	4313      	orrs	r3, r2
 8006b38:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	4a1c      	ldr	r2, [pc, #112]	; (8006bb0 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8006b3e:	401a      	ands	r2, r3
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	6a1b      	ldr	r3, [r3, #32]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	4a1a      	ldr	r2, [pc, #104]	; (8006bb4 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8006b4c:	401a      	ands	r2, r3
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b52:	4313      	orrs	r3, r2
 8006b54:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a12      	ldr	r2, [pc, #72]	; (8006ba4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d106      	bne.n	8006b6e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	4a15      	ldr	r2, [pc, #84]	; (8006bb8 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8006b64:	401a      	ands	r2, r3
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	223c      	movs	r2, #60	; 0x3c
 8006b7a:	2100      	movs	r1, #0
 8006b7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	0018      	movs	r0, r3
 8006b82:	46bd      	mov	sp, r7
 8006b84:	b004      	add	sp, #16
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	fffffcff 	.word	0xfffffcff
 8006b8c:	fffffbff 	.word	0xfffffbff
 8006b90:	fffff7ff 	.word	0xfffff7ff
 8006b94:	ffffefff 	.word	0xffffefff
 8006b98:	ffffdfff 	.word	0xffffdfff
 8006b9c:	ffffbfff 	.word	0xffffbfff
 8006ba0:	fff0ffff 	.word	0xfff0ffff
 8006ba4:	40012c00 	.word	0x40012c00
 8006ba8:	efffffff 	.word	0xefffffff
 8006bac:	ff0fffff 	.word	0xff0fffff
 8006bb0:	feffffff 	.word	0xfeffffff
 8006bb4:	fdffffff 	.word	0xfdffffff
 8006bb8:	dfffffff 	.word	0xdfffffff

08006bbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bc4:	46c0      	nop			; (mov r8, r8)
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	b002      	add	sp, #8
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bd4:	46c0      	nop			; (mov r8, r8)
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	b002      	add	sp, #8
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006be4:	46c0      	nop			; (mov r8, r8)
 8006be6:	46bd      	mov	sp, r7
 8006be8:	b002      	add	sp, #8
 8006bea:	bd80      	pop	{r7, pc}

08006bec <__errno>:
 8006bec:	4b01      	ldr	r3, [pc, #4]	; (8006bf4 <__errno+0x8>)
 8006bee:	6818      	ldr	r0, [r3, #0]
 8006bf0:	4770      	bx	lr
 8006bf2:	46c0      	nop			; (mov r8, r8)
 8006bf4:	20000030 	.word	0x20000030

08006bf8 <__libc_init_array>:
 8006bf8:	b570      	push	{r4, r5, r6, lr}
 8006bfa:	2600      	movs	r6, #0
 8006bfc:	4d0c      	ldr	r5, [pc, #48]	; (8006c30 <__libc_init_array+0x38>)
 8006bfe:	4c0d      	ldr	r4, [pc, #52]	; (8006c34 <__libc_init_array+0x3c>)
 8006c00:	1b64      	subs	r4, r4, r5
 8006c02:	10a4      	asrs	r4, r4, #2
 8006c04:	42a6      	cmp	r6, r4
 8006c06:	d109      	bne.n	8006c1c <__libc_init_array+0x24>
 8006c08:	2600      	movs	r6, #0
 8006c0a:	f000 fc8b 	bl	8007524 <_init>
 8006c0e:	4d0a      	ldr	r5, [pc, #40]	; (8006c38 <__libc_init_array+0x40>)
 8006c10:	4c0a      	ldr	r4, [pc, #40]	; (8006c3c <__libc_init_array+0x44>)
 8006c12:	1b64      	subs	r4, r4, r5
 8006c14:	10a4      	asrs	r4, r4, #2
 8006c16:	42a6      	cmp	r6, r4
 8006c18:	d105      	bne.n	8006c26 <__libc_init_array+0x2e>
 8006c1a:	bd70      	pop	{r4, r5, r6, pc}
 8006c1c:	00b3      	lsls	r3, r6, #2
 8006c1e:	58eb      	ldr	r3, [r5, r3]
 8006c20:	4798      	blx	r3
 8006c22:	3601      	adds	r6, #1
 8006c24:	e7ee      	b.n	8006c04 <__libc_init_array+0xc>
 8006c26:	00b3      	lsls	r3, r6, #2
 8006c28:	58eb      	ldr	r3, [r5, r3]
 8006c2a:	4798      	blx	r3
 8006c2c:	3601      	adds	r6, #1
 8006c2e:	e7f2      	b.n	8006c16 <__libc_init_array+0x1e>
 8006c30:	080084f0 	.word	0x080084f0
 8006c34:	080084f0 	.word	0x080084f0
 8006c38:	080084f0 	.word	0x080084f0
 8006c3c:	080084f4 	.word	0x080084f4

08006c40 <memcpy>:
 8006c40:	2300      	movs	r3, #0
 8006c42:	b510      	push	{r4, lr}
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d100      	bne.n	8006c4a <memcpy+0xa>
 8006c48:	bd10      	pop	{r4, pc}
 8006c4a:	5ccc      	ldrb	r4, [r1, r3]
 8006c4c:	54c4      	strb	r4, [r0, r3]
 8006c4e:	3301      	adds	r3, #1
 8006c50:	e7f8      	b.n	8006c44 <memcpy+0x4>

08006c52 <memset>:
 8006c52:	0003      	movs	r3, r0
 8006c54:	1882      	adds	r2, r0, r2
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d100      	bne.n	8006c5c <memset+0xa>
 8006c5a:	4770      	bx	lr
 8006c5c:	7019      	strb	r1, [r3, #0]
 8006c5e:	3301      	adds	r3, #1
 8006c60:	e7f9      	b.n	8006c56 <memset+0x4>
	...

08006c64 <siprintf>:
 8006c64:	b40e      	push	{r1, r2, r3}
 8006c66:	b500      	push	{lr}
 8006c68:	490b      	ldr	r1, [pc, #44]	; (8006c98 <siprintf+0x34>)
 8006c6a:	b09c      	sub	sp, #112	; 0x70
 8006c6c:	ab1d      	add	r3, sp, #116	; 0x74
 8006c6e:	9002      	str	r0, [sp, #8]
 8006c70:	9006      	str	r0, [sp, #24]
 8006c72:	9107      	str	r1, [sp, #28]
 8006c74:	9104      	str	r1, [sp, #16]
 8006c76:	4809      	ldr	r0, [pc, #36]	; (8006c9c <siprintf+0x38>)
 8006c78:	4909      	ldr	r1, [pc, #36]	; (8006ca0 <siprintf+0x3c>)
 8006c7a:	cb04      	ldmia	r3!, {r2}
 8006c7c:	9105      	str	r1, [sp, #20]
 8006c7e:	6800      	ldr	r0, [r0, #0]
 8006c80:	a902      	add	r1, sp, #8
 8006c82:	9301      	str	r3, [sp, #4]
 8006c84:	f000 f870 	bl	8006d68 <_svfiprintf_r>
 8006c88:	2300      	movs	r3, #0
 8006c8a:	9a02      	ldr	r2, [sp, #8]
 8006c8c:	7013      	strb	r3, [r2, #0]
 8006c8e:	b01c      	add	sp, #112	; 0x70
 8006c90:	bc08      	pop	{r3}
 8006c92:	b003      	add	sp, #12
 8006c94:	4718      	bx	r3
 8006c96:	46c0      	nop			; (mov r8, r8)
 8006c98:	7fffffff 	.word	0x7fffffff
 8006c9c:	20000030 	.word	0x20000030
 8006ca0:	ffff0208 	.word	0xffff0208

08006ca4 <__ssputs_r>:
 8006ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ca6:	688e      	ldr	r6, [r1, #8]
 8006ca8:	b085      	sub	sp, #20
 8006caa:	0007      	movs	r7, r0
 8006cac:	000c      	movs	r4, r1
 8006cae:	9203      	str	r2, [sp, #12]
 8006cb0:	9301      	str	r3, [sp, #4]
 8006cb2:	429e      	cmp	r6, r3
 8006cb4:	d83c      	bhi.n	8006d30 <__ssputs_r+0x8c>
 8006cb6:	2390      	movs	r3, #144	; 0x90
 8006cb8:	898a      	ldrh	r2, [r1, #12]
 8006cba:	00db      	lsls	r3, r3, #3
 8006cbc:	421a      	tst	r2, r3
 8006cbe:	d034      	beq.n	8006d2a <__ssputs_r+0x86>
 8006cc0:	6909      	ldr	r1, [r1, #16]
 8006cc2:	6823      	ldr	r3, [r4, #0]
 8006cc4:	6960      	ldr	r0, [r4, #20]
 8006cc6:	1a5b      	subs	r3, r3, r1
 8006cc8:	9302      	str	r3, [sp, #8]
 8006cca:	2303      	movs	r3, #3
 8006ccc:	4343      	muls	r3, r0
 8006cce:	0fdd      	lsrs	r5, r3, #31
 8006cd0:	18ed      	adds	r5, r5, r3
 8006cd2:	9b01      	ldr	r3, [sp, #4]
 8006cd4:	9802      	ldr	r0, [sp, #8]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	181b      	adds	r3, r3, r0
 8006cda:	106d      	asrs	r5, r5, #1
 8006cdc:	42ab      	cmp	r3, r5
 8006cde:	d900      	bls.n	8006ce2 <__ssputs_r+0x3e>
 8006ce0:	001d      	movs	r5, r3
 8006ce2:	0553      	lsls	r3, r2, #21
 8006ce4:	d532      	bpl.n	8006d4c <__ssputs_r+0xa8>
 8006ce6:	0029      	movs	r1, r5
 8006ce8:	0038      	movs	r0, r7
 8006cea:	f000 fb49 	bl	8007380 <_malloc_r>
 8006cee:	1e06      	subs	r6, r0, #0
 8006cf0:	d109      	bne.n	8006d06 <__ssputs_r+0x62>
 8006cf2:	230c      	movs	r3, #12
 8006cf4:	603b      	str	r3, [r7, #0]
 8006cf6:	2340      	movs	r3, #64	; 0x40
 8006cf8:	2001      	movs	r0, #1
 8006cfa:	89a2      	ldrh	r2, [r4, #12]
 8006cfc:	4240      	negs	r0, r0
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	81a3      	strh	r3, [r4, #12]
 8006d02:	b005      	add	sp, #20
 8006d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d06:	9a02      	ldr	r2, [sp, #8]
 8006d08:	6921      	ldr	r1, [r4, #16]
 8006d0a:	f7ff ff99 	bl	8006c40 <memcpy>
 8006d0e:	89a3      	ldrh	r3, [r4, #12]
 8006d10:	4a14      	ldr	r2, [pc, #80]	; (8006d64 <__ssputs_r+0xc0>)
 8006d12:	401a      	ands	r2, r3
 8006d14:	2380      	movs	r3, #128	; 0x80
 8006d16:	4313      	orrs	r3, r2
 8006d18:	81a3      	strh	r3, [r4, #12]
 8006d1a:	9b02      	ldr	r3, [sp, #8]
 8006d1c:	6126      	str	r6, [r4, #16]
 8006d1e:	18f6      	adds	r6, r6, r3
 8006d20:	6026      	str	r6, [r4, #0]
 8006d22:	6165      	str	r5, [r4, #20]
 8006d24:	9e01      	ldr	r6, [sp, #4]
 8006d26:	1aed      	subs	r5, r5, r3
 8006d28:	60a5      	str	r5, [r4, #8]
 8006d2a:	9b01      	ldr	r3, [sp, #4]
 8006d2c:	429e      	cmp	r6, r3
 8006d2e:	d900      	bls.n	8006d32 <__ssputs_r+0x8e>
 8006d30:	9e01      	ldr	r6, [sp, #4]
 8006d32:	0032      	movs	r2, r6
 8006d34:	9903      	ldr	r1, [sp, #12]
 8006d36:	6820      	ldr	r0, [r4, #0]
 8006d38:	f000 faa3 	bl	8007282 <memmove>
 8006d3c:	68a3      	ldr	r3, [r4, #8]
 8006d3e:	2000      	movs	r0, #0
 8006d40:	1b9b      	subs	r3, r3, r6
 8006d42:	60a3      	str	r3, [r4, #8]
 8006d44:	6823      	ldr	r3, [r4, #0]
 8006d46:	199e      	adds	r6, r3, r6
 8006d48:	6026      	str	r6, [r4, #0]
 8006d4a:	e7da      	b.n	8006d02 <__ssputs_r+0x5e>
 8006d4c:	002a      	movs	r2, r5
 8006d4e:	0038      	movs	r0, r7
 8006d50:	f000 fb8c 	bl	800746c <_realloc_r>
 8006d54:	1e06      	subs	r6, r0, #0
 8006d56:	d1e0      	bne.n	8006d1a <__ssputs_r+0x76>
 8006d58:	0038      	movs	r0, r7
 8006d5a:	6921      	ldr	r1, [r4, #16]
 8006d5c:	f000 faa4 	bl	80072a8 <_free_r>
 8006d60:	e7c7      	b.n	8006cf2 <__ssputs_r+0x4e>
 8006d62:	46c0      	nop			; (mov r8, r8)
 8006d64:	fffffb7f 	.word	0xfffffb7f

08006d68 <_svfiprintf_r>:
 8006d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d6a:	b0a1      	sub	sp, #132	; 0x84
 8006d6c:	9003      	str	r0, [sp, #12]
 8006d6e:	001d      	movs	r5, r3
 8006d70:	898b      	ldrh	r3, [r1, #12]
 8006d72:	000f      	movs	r7, r1
 8006d74:	0016      	movs	r6, r2
 8006d76:	061b      	lsls	r3, r3, #24
 8006d78:	d511      	bpl.n	8006d9e <_svfiprintf_r+0x36>
 8006d7a:	690b      	ldr	r3, [r1, #16]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d10e      	bne.n	8006d9e <_svfiprintf_r+0x36>
 8006d80:	2140      	movs	r1, #64	; 0x40
 8006d82:	f000 fafd 	bl	8007380 <_malloc_r>
 8006d86:	6038      	str	r0, [r7, #0]
 8006d88:	6138      	str	r0, [r7, #16]
 8006d8a:	2800      	cmp	r0, #0
 8006d8c:	d105      	bne.n	8006d9a <_svfiprintf_r+0x32>
 8006d8e:	230c      	movs	r3, #12
 8006d90:	9a03      	ldr	r2, [sp, #12]
 8006d92:	3801      	subs	r0, #1
 8006d94:	6013      	str	r3, [r2, #0]
 8006d96:	b021      	add	sp, #132	; 0x84
 8006d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d9a:	2340      	movs	r3, #64	; 0x40
 8006d9c:	617b      	str	r3, [r7, #20]
 8006d9e:	2300      	movs	r3, #0
 8006da0:	ac08      	add	r4, sp, #32
 8006da2:	6163      	str	r3, [r4, #20]
 8006da4:	3320      	adds	r3, #32
 8006da6:	7663      	strb	r3, [r4, #25]
 8006da8:	3310      	adds	r3, #16
 8006daa:	76a3      	strb	r3, [r4, #26]
 8006dac:	9507      	str	r5, [sp, #28]
 8006dae:	0035      	movs	r5, r6
 8006db0:	782b      	ldrb	r3, [r5, #0]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d001      	beq.n	8006dba <_svfiprintf_r+0x52>
 8006db6:	2b25      	cmp	r3, #37	; 0x25
 8006db8:	d147      	bne.n	8006e4a <_svfiprintf_r+0xe2>
 8006dba:	1bab      	subs	r3, r5, r6
 8006dbc:	9305      	str	r3, [sp, #20]
 8006dbe:	42b5      	cmp	r5, r6
 8006dc0:	d00c      	beq.n	8006ddc <_svfiprintf_r+0x74>
 8006dc2:	0032      	movs	r2, r6
 8006dc4:	0039      	movs	r1, r7
 8006dc6:	9803      	ldr	r0, [sp, #12]
 8006dc8:	f7ff ff6c 	bl	8006ca4 <__ssputs_r>
 8006dcc:	1c43      	adds	r3, r0, #1
 8006dce:	d100      	bne.n	8006dd2 <_svfiprintf_r+0x6a>
 8006dd0:	e0ae      	b.n	8006f30 <_svfiprintf_r+0x1c8>
 8006dd2:	6962      	ldr	r2, [r4, #20]
 8006dd4:	9b05      	ldr	r3, [sp, #20]
 8006dd6:	4694      	mov	ip, r2
 8006dd8:	4463      	add	r3, ip
 8006dda:	6163      	str	r3, [r4, #20]
 8006ddc:	782b      	ldrb	r3, [r5, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d100      	bne.n	8006de4 <_svfiprintf_r+0x7c>
 8006de2:	e0a5      	b.n	8006f30 <_svfiprintf_r+0x1c8>
 8006de4:	2201      	movs	r2, #1
 8006de6:	2300      	movs	r3, #0
 8006de8:	4252      	negs	r2, r2
 8006dea:	6062      	str	r2, [r4, #4]
 8006dec:	a904      	add	r1, sp, #16
 8006dee:	3254      	adds	r2, #84	; 0x54
 8006df0:	1852      	adds	r2, r2, r1
 8006df2:	1c6e      	adds	r6, r5, #1
 8006df4:	6023      	str	r3, [r4, #0]
 8006df6:	60e3      	str	r3, [r4, #12]
 8006df8:	60a3      	str	r3, [r4, #8]
 8006dfa:	7013      	strb	r3, [r2, #0]
 8006dfc:	65a3      	str	r3, [r4, #88]	; 0x58
 8006dfe:	2205      	movs	r2, #5
 8006e00:	7831      	ldrb	r1, [r6, #0]
 8006e02:	4854      	ldr	r0, [pc, #336]	; (8006f54 <_svfiprintf_r+0x1ec>)
 8006e04:	f000 fa32 	bl	800726c <memchr>
 8006e08:	1c75      	adds	r5, r6, #1
 8006e0a:	2800      	cmp	r0, #0
 8006e0c:	d11f      	bne.n	8006e4e <_svfiprintf_r+0xe6>
 8006e0e:	6822      	ldr	r2, [r4, #0]
 8006e10:	06d3      	lsls	r3, r2, #27
 8006e12:	d504      	bpl.n	8006e1e <_svfiprintf_r+0xb6>
 8006e14:	2353      	movs	r3, #83	; 0x53
 8006e16:	a904      	add	r1, sp, #16
 8006e18:	185b      	adds	r3, r3, r1
 8006e1a:	2120      	movs	r1, #32
 8006e1c:	7019      	strb	r1, [r3, #0]
 8006e1e:	0713      	lsls	r3, r2, #28
 8006e20:	d504      	bpl.n	8006e2c <_svfiprintf_r+0xc4>
 8006e22:	2353      	movs	r3, #83	; 0x53
 8006e24:	a904      	add	r1, sp, #16
 8006e26:	185b      	adds	r3, r3, r1
 8006e28:	212b      	movs	r1, #43	; 0x2b
 8006e2a:	7019      	strb	r1, [r3, #0]
 8006e2c:	7833      	ldrb	r3, [r6, #0]
 8006e2e:	2b2a      	cmp	r3, #42	; 0x2a
 8006e30:	d016      	beq.n	8006e60 <_svfiprintf_r+0xf8>
 8006e32:	0035      	movs	r5, r6
 8006e34:	2100      	movs	r1, #0
 8006e36:	200a      	movs	r0, #10
 8006e38:	68e3      	ldr	r3, [r4, #12]
 8006e3a:	782a      	ldrb	r2, [r5, #0]
 8006e3c:	1c6e      	adds	r6, r5, #1
 8006e3e:	3a30      	subs	r2, #48	; 0x30
 8006e40:	2a09      	cmp	r2, #9
 8006e42:	d94e      	bls.n	8006ee2 <_svfiprintf_r+0x17a>
 8006e44:	2900      	cmp	r1, #0
 8006e46:	d111      	bne.n	8006e6c <_svfiprintf_r+0x104>
 8006e48:	e017      	b.n	8006e7a <_svfiprintf_r+0x112>
 8006e4a:	3501      	adds	r5, #1
 8006e4c:	e7b0      	b.n	8006db0 <_svfiprintf_r+0x48>
 8006e4e:	4b41      	ldr	r3, [pc, #260]	; (8006f54 <_svfiprintf_r+0x1ec>)
 8006e50:	6822      	ldr	r2, [r4, #0]
 8006e52:	1ac0      	subs	r0, r0, r3
 8006e54:	2301      	movs	r3, #1
 8006e56:	4083      	lsls	r3, r0
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	002e      	movs	r6, r5
 8006e5c:	6023      	str	r3, [r4, #0]
 8006e5e:	e7ce      	b.n	8006dfe <_svfiprintf_r+0x96>
 8006e60:	9b07      	ldr	r3, [sp, #28]
 8006e62:	1d19      	adds	r1, r3, #4
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	9107      	str	r1, [sp, #28]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	db01      	blt.n	8006e70 <_svfiprintf_r+0x108>
 8006e6c:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e6e:	e004      	b.n	8006e7a <_svfiprintf_r+0x112>
 8006e70:	425b      	negs	r3, r3
 8006e72:	60e3      	str	r3, [r4, #12]
 8006e74:	2302      	movs	r3, #2
 8006e76:	4313      	orrs	r3, r2
 8006e78:	6023      	str	r3, [r4, #0]
 8006e7a:	782b      	ldrb	r3, [r5, #0]
 8006e7c:	2b2e      	cmp	r3, #46	; 0x2e
 8006e7e:	d10a      	bne.n	8006e96 <_svfiprintf_r+0x12e>
 8006e80:	786b      	ldrb	r3, [r5, #1]
 8006e82:	2b2a      	cmp	r3, #42	; 0x2a
 8006e84:	d135      	bne.n	8006ef2 <_svfiprintf_r+0x18a>
 8006e86:	9b07      	ldr	r3, [sp, #28]
 8006e88:	3502      	adds	r5, #2
 8006e8a:	1d1a      	adds	r2, r3, #4
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	9207      	str	r2, [sp, #28]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	db2b      	blt.n	8006eec <_svfiprintf_r+0x184>
 8006e94:	9309      	str	r3, [sp, #36]	; 0x24
 8006e96:	4e30      	ldr	r6, [pc, #192]	; (8006f58 <_svfiprintf_r+0x1f0>)
 8006e98:	2203      	movs	r2, #3
 8006e9a:	0030      	movs	r0, r6
 8006e9c:	7829      	ldrb	r1, [r5, #0]
 8006e9e:	f000 f9e5 	bl	800726c <memchr>
 8006ea2:	2800      	cmp	r0, #0
 8006ea4:	d006      	beq.n	8006eb4 <_svfiprintf_r+0x14c>
 8006ea6:	2340      	movs	r3, #64	; 0x40
 8006ea8:	1b80      	subs	r0, r0, r6
 8006eaa:	4083      	lsls	r3, r0
 8006eac:	6822      	ldr	r2, [r4, #0]
 8006eae:	3501      	adds	r5, #1
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	6023      	str	r3, [r4, #0]
 8006eb4:	7829      	ldrb	r1, [r5, #0]
 8006eb6:	2206      	movs	r2, #6
 8006eb8:	4828      	ldr	r0, [pc, #160]	; (8006f5c <_svfiprintf_r+0x1f4>)
 8006eba:	1c6e      	adds	r6, r5, #1
 8006ebc:	7621      	strb	r1, [r4, #24]
 8006ebe:	f000 f9d5 	bl	800726c <memchr>
 8006ec2:	2800      	cmp	r0, #0
 8006ec4:	d03c      	beq.n	8006f40 <_svfiprintf_r+0x1d8>
 8006ec6:	4b26      	ldr	r3, [pc, #152]	; (8006f60 <_svfiprintf_r+0x1f8>)
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d125      	bne.n	8006f18 <_svfiprintf_r+0x1b0>
 8006ecc:	2207      	movs	r2, #7
 8006ece:	9b07      	ldr	r3, [sp, #28]
 8006ed0:	3307      	adds	r3, #7
 8006ed2:	4393      	bics	r3, r2
 8006ed4:	3308      	adds	r3, #8
 8006ed6:	9307      	str	r3, [sp, #28]
 8006ed8:	6963      	ldr	r3, [r4, #20]
 8006eda:	9a04      	ldr	r2, [sp, #16]
 8006edc:	189b      	adds	r3, r3, r2
 8006ede:	6163      	str	r3, [r4, #20]
 8006ee0:	e765      	b.n	8006dae <_svfiprintf_r+0x46>
 8006ee2:	4343      	muls	r3, r0
 8006ee4:	0035      	movs	r5, r6
 8006ee6:	2101      	movs	r1, #1
 8006ee8:	189b      	adds	r3, r3, r2
 8006eea:	e7a6      	b.n	8006e3a <_svfiprintf_r+0xd2>
 8006eec:	2301      	movs	r3, #1
 8006eee:	425b      	negs	r3, r3
 8006ef0:	e7d0      	b.n	8006e94 <_svfiprintf_r+0x12c>
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	200a      	movs	r0, #10
 8006ef6:	001a      	movs	r2, r3
 8006ef8:	3501      	adds	r5, #1
 8006efa:	6063      	str	r3, [r4, #4]
 8006efc:	7829      	ldrb	r1, [r5, #0]
 8006efe:	1c6e      	adds	r6, r5, #1
 8006f00:	3930      	subs	r1, #48	; 0x30
 8006f02:	2909      	cmp	r1, #9
 8006f04:	d903      	bls.n	8006f0e <_svfiprintf_r+0x1a6>
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d0c5      	beq.n	8006e96 <_svfiprintf_r+0x12e>
 8006f0a:	9209      	str	r2, [sp, #36]	; 0x24
 8006f0c:	e7c3      	b.n	8006e96 <_svfiprintf_r+0x12e>
 8006f0e:	4342      	muls	r2, r0
 8006f10:	0035      	movs	r5, r6
 8006f12:	2301      	movs	r3, #1
 8006f14:	1852      	adds	r2, r2, r1
 8006f16:	e7f1      	b.n	8006efc <_svfiprintf_r+0x194>
 8006f18:	ab07      	add	r3, sp, #28
 8006f1a:	9300      	str	r3, [sp, #0]
 8006f1c:	003a      	movs	r2, r7
 8006f1e:	0021      	movs	r1, r4
 8006f20:	4b10      	ldr	r3, [pc, #64]	; (8006f64 <_svfiprintf_r+0x1fc>)
 8006f22:	9803      	ldr	r0, [sp, #12]
 8006f24:	e000      	b.n	8006f28 <_svfiprintf_r+0x1c0>
 8006f26:	bf00      	nop
 8006f28:	9004      	str	r0, [sp, #16]
 8006f2a:	9b04      	ldr	r3, [sp, #16]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	d1d3      	bne.n	8006ed8 <_svfiprintf_r+0x170>
 8006f30:	89bb      	ldrh	r3, [r7, #12]
 8006f32:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006f34:	065b      	lsls	r3, r3, #25
 8006f36:	d400      	bmi.n	8006f3a <_svfiprintf_r+0x1d2>
 8006f38:	e72d      	b.n	8006d96 <_svfiprintf_r+0x2e>
 8006f3a:	2001      	movs	r0, #1
 8006f3c:	4240      	negs	r0, r0
 8006f3e:	e72a      	b.n	8006d96 <_svfiprintf_r+0x2e>
 8006f40:	ab07      	add	r3, sp, #28
 8006f42:	9300      	str	r3, [sp, #0]
 8006f44:	003a      	movs	r2, r7
 8006f46:	0021      	movs	r1, r4
 8006f48:	4b06      	ldr	r3, [pc, #24]	; (8006f64 <_svfiprintf_r+0x1fc>)
 8006f4a:	9803      	ldr	r0, [sp, #12]
 8006f4c:	f000 f87c 	bl	8007048 <_printf_i>
 8006f50:	e7ea      	b.n	8006f28 <_svfiprintf_r+0x1c0>
 8006f52:	46c0      	nop			; (mov r8, r8)
 8006f54:	080084bc 	.word	0x080084bc
 8006f58:	080084c2 	.word	0x080084c2
 8006f5c:	080084c6 	.word	0x080084c6
 8006f60:	00000000 	.word	0x00000000
 8006f64:	08006ca5 	.word	0x08006ca5

08006f68 <_printf_common>:
 8006f68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f6a:	0015      	movs	r5, r2
 8006f6c:	9301      	str	r3, [sp, #4]
 8006f6e:	688a      	ldr	r2, [r1, #8]
 8006f70:	690b      	ldr	r3, [r1, #16]
 8006f72:	000c      	movs	r4, r1
 8006f74:	9000      	str	r0, [sp, #0]
 8006f76:	4293      	cmp	r3, r2
 8006f78:	da00      	bge.n	8006f7c <_printf_common+0x14>
 8006f7a:	0013      	movs	r3, r2
 8006f7c:	0022      	movs	r2, r4
 8006f7e:	602b      	str	r3, [r5, #0]
 8006f80:	3243      	adds	r2, #67	; 0x43
 8006f82:	7812      	ldrb	r2, [r2, #0]
 8006f84:	2a00      	cmp	r2, #0
 8006f86:	d001      	beq.n	8006f8c <_printf_common+0x24>
 8006f88:	3301      	adds	r3, #1
 8006f8a:	602b      	str	r3, [r5, #0]
 8006f8c:	6823      	ldr	r3, [r4, #0]
 8006f8e:	069b      	lsls	r3, r3, #26
 8006f90:	d502      	bpl.n	8006f98 <_printf_common+0x30>
 8006f92:	682b      	ldr	r3, [r5, #0]
 8006f94:	3302      	adds	r3, #2
 8006f96:	602b      	str	r3, [r5, #0]
 8006f98:	6822      	ldr	r2, [r4, #0]
 8006f9a:	2306      	movs	r3, #6
 8006f9c:	0017      	movs	r7, r2
 8006f9e:	401f      	ands	r7, r3
 8006fa0:	421a      	tst	r2, r3
 8006fa2:	d027      	beq.n	8006ff4 <_printf_common+0x8c>
 8006fa4:	0023      	movs	r3, r4
 8006fa6:	3343      	adds	r3, #67	; 0x43
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	1e5a      	subs	r2, r3, #1
 8006fac:	4193      	sbcs	r3, r2
 8006fae:	6822      	ldr	r2, [r4, #0]
 8006fb0:	0692      	lsls	r2, r2, #26
 8006fb2:	d430      	bmi.n	8007016 <_printf_common+0xae>
 8006fb4:	0022      	movs	r2, r4
 8006fb6:	9901      	ldr	r1, [sp, #4]
 8006fb8:	9800      	ldr	r0, [sp, #0]
 8006fba:	9e08      	ldr	r6, [sp, #32]
 8006fbc:	3243      	adds	r2, #67	; 0x43
 8006fbe:	47b0      	blx	r6
 8006fc0:	1c43      	adds	r3, r0, #1
 8006fc2:	d025      	beq.n	8007010 <_printf_common+0xa8>
 8006fc4:	2306      	movs	r3, #6
 8006fc6:	6820      	ldr	r0, [r4, #0]
 8006fc8:	682a      	ldr	r2, [r5, #0]
 8006fca:	68e1      	ldr	r1, [r4, #12]
 8006fcc:	2500      	movs	r5, #0
 8006fce:	4003      	ands	r3, r0
 8006fd0:	2b04      	cmp	r3, #4
 8006fd2:	d103      	bne.n	8006fdc <_printf_common+0x74>
 8006fd4:	1a8d      	subs	r5, r1, r2
 8006fd6:	43eb      	mvns	r3, r5
 8006fd8:	17db      	asrs	r3, r3, #31
 8006fda:	401d      	ands	r5, r3
 8006fdc:	68a3      	ldr	r3, [r4, #8]
 8006fde:	6922      	ldr	r2, [r4, #16]
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	dd01      	ble.n	8006fe8 <_printf_common+0x80>
 8006fe4:	1a9b      	subs	r3, r3, r2
 8006fe6:	18ed      	adds	r5, r5, r3
 8006fe8:	2700      	movs	r7, #0
 8006fea:	42bd      	cmp	r5, r7
 8006fec:	d120      	bne.n	8007030 <_printf_common+0xc8>
 8006fee:	2000      	movs	r0, #0
 8006ff0:	e010      	b.n	8007014 <_printf_common+0xac>
 8006ff2:	3701      	adds	r7, #1
 8006ff4:	68e3      	ldr	r3, [r4, #12]
 8006ff6:	682a      	ldr	r2, [r5, #0]
 8006ff8:	1a9b      	subs	r3, r3, r2
 8006ffa:	42bb      	cmp	r3, r7
 8006ffc:	ddd2      	ble.n	8006fa4 <_printf_common+0x3c>
 8006ffe:	0022      	movs	r2, r4
 8007000:	2301      	movs	r3, #1
 8007002:	9901      	ldr	r1, [sp, #4]
 8007004:	9800      	ldr	r0, [sp, #0]
 8007006:	9e08      	ldr	r6, [sp, #32]
 8007008:	3219      	adds	r2, #25
 800700a:	47b0      	blx	r6
 800700c:	1c43      	adds	r3, r0, #1
 800700e:	d1f0      	bne.n	8006ff2 <_printf_common+0x8a>
 8007010:	2001      	movs	r0, #1
 8007012:	4240      	negs	r0, r0
 8007014:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007016:	2030      	movs	r0, #48	; 0x30
 8007018:	18e1      	adds	r1, r4, r3
 800701a:	3143      	adds	r1, #67	; 0x43
 800701c:	7008      	strb	r0, [r1, #0]
 800701e:	0021      	movs	r1, r4
 8007020:	1c5a      	adds	r2, r3, #1
 8007022:	3145      	adds	r1, #69	; 0x45
 8007024:	7809      	ldrb	r1, [r1, #0]
 8007026:	18a2      	adds	r2, r4, r2
 8007028:	3243      	adds	r2, #67	; 0x43
 800702a:	3302      	adds	r3, #2
 800702c:	7011      	strb	r1, [r2, #0]
 800702e:	e7c1      	b.n	8006fb4 <_printf_common+0x4c>
 8007030:	0022      	movs	r2, r4
 8007032:	2301      	movs	r3, #1
 8007034:	9901      	ldr	r1, [sp, #4]
 8007036:	9800      	ldr	r0, [sp, #0]
 8007038:	9e08      	ldr	r6, [sp, #32]
 800703a:	321a      	adds	r2, #26
 800703c:	47b0      	blx	r6
 800703e:	1c43      	adds	r3, r0, #1
 8007040:	d0e6      	beq.n	8007010 <_printf_common+0xa8>
 8007042:	3701      	adds	r7, #1
 8007044:	e7d1      	b.n	8006fea <_printf_common+0x82>
	...

08007048 <_printf_i>:
 8007048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800704a:	b08b      	sub	sp, #44	; 0x2c
 800704c:	9206      	str	r2, [sp, #24]
 800704e:	000a      	movs	r2, r1
 8007050:	3243      	adds	r2, #67	; 0x43
 8007052:	9307      	str	r3, [sp, #28]
 8007054:	9005      	str	r0, [sp, #20]
 8007056:	9204      	str	r2, [sp, #16]
 8007058:	7e0a      	ldrb	r2, [r1, #24]
 800705a:	000c      	movs	r4, r1
 800705c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800705e:	2a78      	cmp	r2, #120	; 0x78
 8007060:	d807      	bhi.n	8007072 <_printf_i+0x2a>
 8007062:	2a62      	cmp	r2, #98	; 0x62
 8007064:	d809      	bhi.n	800707a <_printf_i+0x32>
 8007066:	2a00      	cmp	r2, #0
 8007068:	d100      	bne.n	800706c <_printf_i+0x24>
 800706a:	e0c1      	b.n	80071f0 <_printf_i+0x1a8>
 800706c:	2a58      	cmp	r2, #88	; 0x58
 800706e:	d100      	bne.n	8007072 <_printf_i+0x2a>
 8007070:	e08c      	b.n	800718c <_printf_i+0x144>
 8007072:	0026      	movs	r6, r4
 8007074:	3642      	adds	r6, #66	; 0x42
 8007076:	7032      	strb	r2, [r6, #0]
 8007078:	e022      	b.n	80070c0 <_printf_i+0x78>
 800707a:	0010      	movs	r0, r2
 800707c:	3863      	subs	r0, #99	; 0x63
 800707e:	2815      	cmp	r0, #21
 8007080:	d8f7      	bhi.n	8007072 <_printf_i+0x2a>
 8007082:	f7f9 f83d 	bl	8000100 <__gnu_thumb1_case_shi>
 8007086:	0016      	.short	0x0016
 8007088:	fff6001f 	.word	0xfff6001f
 800708c:	fff6fff6 	.word	0xfff6fff6
 8007090:	001ffff6 	.word	0x001ffff6
 8007094:	fff6fff6 	.word	0xfff6fff6
 8007098:	fff6fff6 	.word	0xfff6fff6
 800709c:	003600a8 	.word	0x003600a8
 80070a0:	fff6009a 	.word	0xfff6009a
 80070a4:	00b9fff6 	.word	0x00b9fff6
 80070a8:	0036fff6 	.word	0x0036fff6
 80070ac:	fff6fff6 	.word	0xfff6fff6
 80070b0:	009e      	.short	0x009e
 80070b2:	0026      	movs	r6, r4
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	3642      	adds	r6, #66	; 0x42
 80070b8:	1d11      	adds	r1, r2, #4
 80070ba:	6019      	str	r1, [r3, #0]
 80070bc:	6813      	ldr	r3, [r2, #0]
 80070be:	7033      	strb	r3, [r6, #0]
 80070c0:	2301      	movs	r3, #1
 80070c2:	e0a7      	b.n	8007214 <_printf_i+0x1cc>
 80070c4:	6808      	ldr	r0, [r1, #0]
 80070c6:	6819      	ldr	r1, [r3, #0]
 80070c8:	1d0a      	adds	r2, r1, #4
 80070ca:	0605      	lsls	r5, r0, #24
 80070cc:	d50b      	bpl.n	80070e6 <_printf_i+0x9e>
 80070ce:	680d      	ldr	r5, [r1, #0]
 80070d0:	601a      	str	r2, [r3, #0]
 80070d2:	2d00      	cmp	r5, #0
 80070d4:	da03      	bge.n	80070de <_printf_i+0x96>
 80070d6:	232d      	movs	r3, #45	; 0x2d
 80070d8:	9a04      	ldr	r2, [sp, #16]
 80070da:	426d      	negs	r5, r5
 80070dc:	7013      	strb	r3, [r2, #0]
 80070de:	4b61      	ldr	r3, [pc, #388]	; (8007264 <_printf_i+0x21c>)
 80070e0:	270a      	movs	r7, #10
 80070e2:	9303      	str	r3, [sp, #12]
 80070e4:	e01b      	b.n	800711e <_printf_i+0xd6>
 80070e6:	680d      	ldr	r5, [r1, #0]
 80070e8:	601a      	str	r2, [r3, #0]
 80070ea:	0641      	lsls	r1, r0, #25
 80070ec:	d5f1      	bpl.n	80070d2 <_printf_i+0x8a>
 80070ee:	b22d      	sxth	r5, r5
 80070f0:	e7ef      	b.n	80070d2 <_printf_i+0x8a>
 80070f2:	680d      	ldr	r5, [r1, #0]
 80070f4:	6819      	ldr	r1, [r3, #0]
 80070f6:	1d08      	adds	r0, r1, #4
 80070f8:	6018      	str	r0, [r3, #0]
 80070fa:	062e      	lsls	r6, r5, #24
 80070fc:	d501      	bpl.n	8007102 <_printf_i+0xba>
 80070fe:	680d      	ldr	r5, [r1, #0]
 8007100:	e003      	b.n	800710a <_printf_i+0xc2>
 8007102:	066d      	lsls	r5, r5, #25
 8007104:	d5fb      	bpl.n	80070fe <_printf_i+0xb6>
 8007106:	680d      	ldr	r5, [r1, #0]
 8007108:	b2ad      	uxth	r5, r5
 800710a:	4b56      	ldr	r3, [pc, #344]	; (8007264 <_printf_i+0x21c>)
 800710c:	2708      	movs	r7, #8
 800710e:	9303      	str	r3, [sp, #12]
 8007110:	2a6f      	cmp	r2, #111	; 0x6f
 8007112:	d000      	beq.n	8007116 <_printf_i+0xce>
 8007114:	3702      	adds	r7, #2
 8007116:	0023      	movs	r3, r4
 8007118:	2200      	movs	r2, #0
 800711a:	3343      	adds	r3, #67	; 0x43
 800711c:	701a      	strb	r2, [r3, #0]
 800711e:	6863      	ldr	r3, [r4, #4]
 8007120:	60a3      	str	r3, [r4, #8]
 8007122:	2b00      	cmp	r3, #0
 8007124:	db03      	blt.n	800712e <_printf_i+0xe6>
 8007126:	2204      	movs	r2, #4
 8007128:	6821      	ldr	r1, [r4, #0]
 800712a:	4391      	bics	r1, r2
 800712c:	6021      	str	r1, [r4, #0]
 800712e:	2d00      	cmp	r5, #0
 8007130:	d102      	bne.n	8007138 <_printf_i+0xf0>
 8007132:	9e04      	ldr	r6, [sp, #16]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00c      	beq.n	8007152 <_printf_i+0x10a>
 8007138:	9e04      	ldr	r6, [sp, #16]
 800713a:	0028      	movs	r0, r5
 800713c:	0039      	movs	r1, r7
 800713e:	f7f9 f86f 	bl	8000220 <__aeabi_uidivmod>
 8007142:	9b03      	ldr	r3, [sp, #12]
 8007144:	3e01      	subs	r6, #1
 8007146:	5c5b      	ldrb	r3, [r3, r1]
 8007148:	7033      	strb	r3, [r6, #0]
 800714a:	002b      	movs	r3, r5
 800714c:	0005      	movs	r5, r0
 800714e:	429f      	cmp	r7, r3
 8007150:	d9f3      	bls.n	800713a <_printf_i+0xf2>
 8007152:	2f08      	cmp	r7, #8
 8007154:	d109      	bne.n	800716a <_printf_i+0x122>
 8007156:	6823      	ldr	r3, [r4, #0]
 8007158:	07db      	lsls	r3, r3, #31
 800715a:	d506      	bpl.n	800716a <_printf_i+0x122>
 800715c:	6863      	ldr	r3, [r4, #4]
 800715e:	6922      	ldr	r2, [r4, #16]
 8007160:	4293      	cmp	r3, r2
 8007162:	dc02      	bgt.n	800716a <_printf_i+0x122>
 8007164:	2330      	movs	r3, #48	; 0x30
 8007166:	3e01      	subs	r6, #1
 8007168:	7033      	strb	r3, [r6, #0]
 800716a:	9b04      	ldr	r3, [sp, #16]
 800716c:	1b9b      	subs	r3, r3, r6
 800716e:	6123      	str	r3, [r4, #16]
 8007170:	9b07      	ldr	r3, [sp, #28]
 8007172:	0021      	movs	r1, r4
 8007174:	9300      	str	r3, [sp, #0]
 8007176:	9805      	ldr	r0, [sp, #20]
 8007178:	9b06      	ldr	r3, [sp, #24]
 800717a:	aa09      	add	r2, sp, #36	; 0x24
 800717c:	f7ff fef4 	bl	8006f68 <_printf_common>
 8007180:	1c43      	adds	r3, r0, #1
 8007182:	d14c      	bne.n	800721e <_printf_i+0x1d6>
 8007184:	2001      	movs	r0, #1
 8007186:	4240      	negs	r0, r0
 8007188:	b00b      	add	sp, #44	; 0x2c
 800718a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800718c:	3145      	adds	r1, #69	; 0x45
 800718e:	700a      	strb	r2, [r1, #0]
 8007190:	4a34      	ldr	r2, [pc, #208]	; (8007264 <_printf_i+0x21c>)
 8007192:	9203      	str	r2, [sp, #12]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	6821      	ldr	r1, [r4, #0]
 8007198:	ca20      	ldmia	r2!, {r5}
 800719a:	601a      	str	r2, [r3, #0]
 800719c:	0608      	lsls	r0, r1, #24
 800719e:	d516      	bpl.n	80071ce <_printf_i+0x186>
 80071a0:	07cb      	lsls	r3, r1, #31
 80071a2:	d502      	bpl.n	80071aa <_printf_i+0x162>
 80071a4:	2320      	movs	r3, #32
 80071a6:	4319      	orrs	r1, r3
 80071a8:	6021      	str	r1, [r4, #0]
 80071aa:	2710      	movs	r7, #16
 80071ac:	2d00      	cmp	r5, #0
 80071ae:	d1b2      	bne.n	8007116 <_printf_i+0xce>
 80071b0:	2320      	movs	r3, #32
 80071b2:	6822      	ldr	r2, [r4, #0]
 80071b4:	439a      	bics	r2, r3
 80071b6:	6022      	str	r2, [r4, #0]
 80071b8:	e7ad      	b.n	8007116 <_printf_i+0xce>
 80071ba:	2220      	movs	r2, #32
 80071bc:	6809      	ldr	r1, [r1, #0]
 80071be:	430a      	orrs	r2, r1
 80071c0:	6022      	str	r2, [r4, #0]
 80071c2:	0022      	movs	r2, r4
 80071c4:	2178      	movs	r1, #120	; 0x78
 80071c6:	3245      	adds	r2, #69	; 0x45
 80071c8:	7011      	strb	r1, [r2, #0]
 80071ca:	4a27      	ldr	r2, [pc, #156]	; (8007268 <_printf_i+0x220>)
 80071cc:	e7e1      	b.n	8007192 <_printf_i+0x14a>
 80071ce:	0648      	lsls	r0, r1, #25
 80071d0:	d5e6      	bpl.n	80071a0 <_printf_i+0x158>
 80071d2:	b2ad      	uxth	r5, r5
 80071d4:	e7e4      	b.n	80071a0 <_printf_i+0x158>
 80071d6:	681a      	ldr	r2, [r3, #0]
 80071d8:	680d      	ldr	r5, [r1, #0]
 80071da:	1d10      	adds	r0, r2, #4
 80071dc:	6949      	ldr	r1, [r1, #20]
 80071de:	6018      	str	r0, [r3, #0]
 80071e0:	6813      	ldr	r3, [r2, #0]
 80071e2:	062e      	lsls	r6, r5, #24
 80071e4:	d501      	bpl.n	80071ea <_printf_i+0x1a2>
 80071e6:	6019      	str	r1, [r3, #0]
 80071e8:	e002      	b.n	80071f0 <_printf_i+0x1a8>
 80071ea:	066d      	lsls	r5, r5, #25
 80071ec:	d5fb      	bpl.n	80071e6 <_printf_i+0x19e>
 80071ee:	8019      	strh	r1, [r3, #0]
 80071f0:	2300      	movs	r3, #0
 80071f2:	9e04      	ldr	r6, [sp, #16]
 80071f4:	6123      	str	r3, [r4, #16]
 80071f6:	e7bb      	b.n	8007170 <_printf_i+0x128>
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	1d11      	adds	r1, r2, #4
 80071fc:	6019      	str	r1, [r3, #0]
 80071fe:	6816      	ldr	r6, [r2, #0]
 8007200:	2100      	movs	r1, #0
 8007202:	0030      	movs	r0, r6
 8007204:	6862      	ldr	r2, [r4, #4]
 8007206:	f000 f831 	bl	800726c <memchr>
 800720a:	2800      	cmp	r0, #0
 800720c:	d001      	beq.n	8007212 <_printf_i+0x1ca>
 800720e:	1b80      	subs	r0, r0, r6
 8007210:	6060      	str	r0, [r4, #4]
 8007212:	6863      	ldr	r3, [r4, #4]
 8007214:	6123      	str	r3, [r4, #16]
 8007216:	2300      	movs	r3, #0
 8007218:	9a04      	ldr	r2, [sp, #16]
 800721a:	7013      	strb	r3, [r2, #0]
 800721c:	e7a8      	b.n	8007170 <_printf_i+0x128>
 800721e:	6923      	ldr	r3, [r4, #16]
 8007220:	0032      	movs	r2, r6
 8007222:	9906      	ldr	r1, [sp, #24]
 8007224:	9805      	ldr	r0, [sp, #20]
 8007226:	9d07      	ldr	r5, [sp, #28]
 8007228:	47a8      	blx	r5
 800722a:	1c43      	adds	r3, r0, #1
 800722c:	d0aa      	beq.n	8007184 <_printf_i+0x13c>
 800722e:	6823      	ldr	r3, [r4, #0]
 8007230:	079b      	lsls	r3, r3, #30
 8007232:	d415      	bmi.n	8007260 <_printf_i+0x218>
 8007234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007236:	68e0      	ldr	r0, [r4, #12]
 8007238:	4298      	cmp	r0, r3
 800723a:	daa5      	bge.n	8007188 <_printf_i+0x140>
 800723c:	0018      	movs	r0, r3
 800723e:	e7a3      	b.n	8007188 <_printf_i+0x140>
 8007240:	0022      	movs	r2, r4
 8007242:	2301      	movs	r3, #1
 8007244:	9906      	ldr	r1, [sp, #24]
 8007246:	9805      	ldr	r0, [sp, #20]
 8007248:	9e07      	ldr	r6, [sp, #28]
 800724a:	3219      	adds	r2, #25
 800724c:	47b0      	blx	r6
 800724e:	1c43      	adds	r3, r0, #1
 8007250:	d098      	beq.n	8007184 <_printf_i+0x13c>
 8007252:	3501      	adds	r5, #1
 8007254:	68e3      	ldr	r3, [r4, #12]
 8007256:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007258:	1a9b      	subs	r3, r3, r2
 800725a:	42ab      	cmp	r3, r5
 800725c:	dcf0      	bgt.n	8007240 <_printf_i+0x1f8>
 800725e:	e7e9      	b.n	8007234 <_printf_i+0x1ec>
 8007260:	2500      	movs	r5, #0
 8007262:	e7f7      	b.n	8007254 <_printf_i+0x20c>
 8007264:	080084cd 	.word	0x080084cd
 8007268:	080084de 	.word	0x080084de

0800726c <memchr>:
 800726c:	b2c9      	uxtb	r1, r1
 800726e:	1882      	adds	r2, r0, r2
 8007270:	4290      	cmp	r0, r2
 8007272:	d101      	bne.n	8007278 <memchr+0xc>
 8007274:	2000      	movs	r0, #0
 8007276:	4770      	bx	lr
 8007278:	7803      	ldrb	r3, [r0, #0]
 800727a:	428b      	cmp	r3, r1
 800727c:	d0fb      	beq.n	8007276 <memchr+0xa>
 800727e:	3001      	adds	r0, #1
 8007280:	e7f6      	b.n	8007270 <memchr+0x4>

08007282 <memmove>:
 8007282:	b510      	push	{r4, lr}
 8007284:	4288      	cmp	r0, r1
 8007286:	d902      	bls.n	800728e <memmove+0xc>
 8007288:	188b      	adds	r3, r1, r2
 800728a:	4298      	cmp	r0, r3
 800728c:	d303      	bcc.n	8007296 <memmove+0x14>
 800728e:	2300      	movs	r3, #0
 8007290:	e007      	b.n	80072a2 <memmove+0x20>
 8007292:	5c8b      	ldrb	r3, [r1, r2]
 8007294:	5483      	strb	r3, [r0, r2]
 8007296:	3a01      	subs	r2, #1
 8007298:	d2fb      	bcs.n	8007292 <memmove+0x10>
 800729a:	bd10      	pop	{r4, pc}
 800729c:	5ccc      	ldrb	r4, [r1, r3]
 800729e:	54c4      	strb	r4, [r0, r3]
 80072a0:	3301      	adds	r3, #1
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d1fa      	bne.n	800729c <memmove+0x1a>
 80072a6:	e7f8      	b.n	800729a <memmove+0x18>

080072a8 <_free_r>:
 80072a8:	b570      	push	{r4, r5, r6, lr}
 80072aa:	0005      	movs	r5, r0
 80072ac:	2900      	cmp	r1, #0
 80072ae:	d010      	beq.n	80072d2 <_free_r+0x2a>
 80072b0:	1f0c      	subs	r4, r1, #4
 80072b2:	6823      	ldr	r3, [r4, #0]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	da00      	bge.n	80072ba <_free_r+0x12>
 80072b8:	18e4      	adds	r4, r4, r3
 80072ba:	0028      	movs	r0, r5
 80072bc:	f000 f918 	bl	80074f0 <__malloc_lock>
 80072c0:	4a1d      	ldr	r2, [pc, #116]	; (8007338 <_free_r+0x90>)
 80072c2:	6813      	ldr	r3, [r2, #0]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d105      	bne.n	80072d4 <_free_r+0x2c>
 80072c8:	6063      	str	r3, [r4, #4]
 80072ca:	6014      	str	r4, [r2, #0]
 80072cc:	0028      	movs	r0, r5
 80072ce:	f000 f917 	bl	8007500 <__malloc_unlock>
 80072d2:	bd70      	pop	{r4, r5, r6, pc}
 80072d4:	42a3      	cmp	r3, r4
 80072d6:	d908      	bls.n	80072ea <_free_r+0x42>
 80072d8:	6821      	ldr	r1, [r4, #0]
 80072da:	1860      	adds	r0, r4, r1
 80072dc:	4283      	cmp	r3, r0
 80072de:	d1f3      	bne.n	80072c8 <_free_r+0x20>
 80072e0:	6818      	ldr	r0, [r3, #0]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	1841      	adds	r1, r0, r1
 80072e6:	6021      	str	r1, [r4, #0]
 80072e8:	e7ee      	b.n	80072c8 <_free_r+0x20>
 80072ea:	001a      	movs	r2, r3
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d001      	beq.n	80072f6 <_free_r+0x4e>
 80072f2:	42a3      	cmp	r3, r4
 80072f4:	d9f9      	bls.n	80072ea <_free_r+0x42>
 80072f6:	6811      	ldr	r1, [r2, #0]
 80072f8:	1850      	adds	r0, r2, r1
 80072fa:	42a0      	cmp	r0, r4
 80072fc:	d10b      	bne.n	8007316 <_free_r+0x6e>
 80072fe:	6820      	ldr	r0, [r4, #0]
 8007300:	1809      	adds	r1, r1, r0
 8007302:	1850      	adds	r0, r2, r1
 8007304:	6011      	str	r1, [r2, #0]
 8007306:	4283      	cmp	r3, r0
 8007308:	d1e0      	bne.n	80072cc <_free_r+0x24>
 800730a:	6818      	ldr	r0, [r3, #0]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	1841      	adds	r1, r0, r1
 8007310:	6011      	str	r1, [r2, #0]
 8007312:	6053      	str	r3, [r2, #4]
 8007314:	e7da      	b.n	80072cc <_free_r+0x24>
 8007316:	42a0      	cmp	r0, r4
 8007318:	d902      	bls.n	8007320 <_free_r+0x78>
 800731a:	230c      	movs	r3, #12
 800731c:	602b      	str	r3, [r5, #0]
 800731e:	e7d5      	b.n	80072cc <_free_r+0x24>
 8007320:	6821      	ldr	r1, [r4, #0]
 8007322:	1860      	adds	r0, r4, r1
 8007324:	4283      	cmp	r3, r0
 8007326:	d103      	bne.n	8007330 <_free_r+0x88>
 8007328:	6818      	ldr	r0, [r3, #0]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	1841      	adds	r1, r0, r1
 800732e:	6021      	str	r1, [r4, #0]
 8007330:	6063      	str	r3, [r4, #4]
 8007332:	6054      	str	r4, [r2, #4]
 8007334:	e7ca      	b.n	80072cc <_free_r+0x24>
 8007336:	46c0      	nop			; (mov r8, r8)
 8007338:	2000071c 	.word	0x2000071c

0800733c <sbrk_aligned>:
 800733c:	b570      	push	{r4, r5, r6, lr}
 800733e:	4e0f      	ldr	r6, [pc, #60]	; (800737c <sbrk_aligned+0x40>)
 8007340:	000d      	movs	r5, r1
 8007342:	6831      	ldr	r1, [r6, #0]
 8007344:	0004      	movs	r4, r0
 8007346:	2900      	cmp	r1, #0
 8007348:	d102      	bne.n	8007350 <sbrk_aligned+0x14>
 800734a:	f000 f8bf 	bl	80074cc <_sbrk_r>
 800734e:	6030      	str	r0, [r6, #0]
 8007350:	0029      	movs	r1, r5
 8007352:	0020      	movs	r0, r4
 8007354:	f000 f8ba 	bl	80074cc <_sbrk_r>
 8007358:	1c43      	adds	r3, r0, #1
 800735a:	d00a      	beq.n	8007372 <sbrk_aligned+0x36>
 800735c:	2303      	movs	r3, #3
 800735e:	1cc5      	adds	r5, r0, #3
 8007360:	439d      	bics	r5, r3
 8007362:	42a8      	cmp	r0, r5
 8007364:	d007      	beq.n	8007376 <sbrk_aligned+0x3a>
 8007366:	1a29      	subs	r1, r5, r0
 8007368:	0020      	movs	r0, r4
 800736a:	f000 f8af 	bl	80074cc <_sbrk_r>
 800736e:	1c43      	adds	r3, r0, #1
 8007370:	d101      	bne.n	8007376 <sbrk_aligned+0x3a>
 8007372:	2501      	movs	r5, #1
 8007374:	426d      	negs	r5, r5
 8007376:	0028      	movs	r0, r5
 8007378:	bd70      	pop	{r4, r5, r6, pc}
 800737a:	46c0      	nop			; (mov r8, r8)
 800737c:	20000720 	.word	0x20000720

08007380 <_malloc_r>:
 8007380:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007382:	2203      	movs	r2, #3
 8007384:	1ccb      	adds	r3, r1, #3
 8007386:	4393      	bics	r3, r2
 8007388:	3308      	adds	r3, #8
 800738a:	0006      	movs	r6, r0
 800738c:	001f      	movs	r7, r3
 800738e:	2b0c      	cmp	r3, #12
 8007390:	d232      	bcs.n	80073f8 <_malloc_r+0x78>
 8007392:	270c      	movs	r7, #12
 8007394:	42b9      	cmp	r1, r7
 8007396:	d831      	bhi.n	80073fc <_malloc_r+0x7c>
 8007398:	0030      	movs	r0, r6
 800739a:	f000 f8a9 	bl	80074f0 <__malloc_lock>
 800739e:	4d32      	ldr	r5, [pc, #200]	; (8007468 <_malloc_r+0xe8>)
 80073a0:	682b      	ldr	r3, [r5, #0]
 80073a2:	001c      	movs	r4, r3
 80073a4:	2c00      	cmp	r4, #0
 80073a6:	d12e      	bne.n	8007406 <_malloc_r+0x86>
 80073a8:	0039      	movs	r1, r7
 80073aa:	0030      	movs	r0, r6
 80073ac:	f7ff ffc6 	bl	800733c <sbrk_aligned>
 80073b0:	0004      	movs	r4, r0
 80073b2:	1c43      	adds	r3, r0, #1
 80073b4:	d11e      	bne.n	80073f4 <_malloc_r+0x74>
 80073b6:	682c      	ldr	r4, [r5, #0]
 80073b8:	0025      	movs	r5, r4
 80073ba:	2d00      	cmp	r5, #0
 80073bc:	d14a      	bne.n	8007454 <_malloc_r+0xd4>
 80073be:	6823      	ldr	r3, [r4, #0]
 80073c0:	0029      	movs	r1, r5
 80073c2:	18e3      	adds	r3, r4, r3
 80073c4:	0030      	movs	r0, r6
 80073c6:	9301      	str	r3, [sp, #4]
 80073c8:	f000 f880 	bl	80074cc <_sbrk_r>
 80073cc:	9b01      	ldr	r3, [sp, #4]
 80073ce:	4283      	cmp	r3, r0
 80073d0:	d143      	bne.n	800745a <_malloc_r+0xda>
 80073d2:	6823      	ldr	r3, [r4, #0]
 80073d4:	3703      	adds	r7, #3
 80073d6:	1aff      	subs	r7, r7, r3
 80073d8:	2303      	movs	r3, #3
 80073da:	439f      	bics	r7, r3
 80073dc:	3708      	adds	r7, #8
 80073de:	2f0c      	cmp	r7, #12
 80073e0:	d200      	bcs.n	80073e4 <_malloc_r+0x64>
 80073e2:	270c      	movs	r7, #12
 80073e4:	0039      	movs	r1, r7
 80073e6:	0030      	movs	r0, r6
 80073e8:	f7ff ffa8 	bl	800733c <sbrk_aligned>
 80073ec:	1c43      	adds	r3, r0, #1
 80073ee:	d034      	beq.n	800745a <_malloc_r+0xda>
 80073f0:	6823      	ldr	r3, [r4, #0]
 80073f2:	19df      	adds	r7, r3, r7
 80073f4:	6027      	str	r7, [r4, #0]
 80073f6:	e013      	b.n	8007420 <_malloc_r+0xa0>
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	dacb      	bge.n	8007394 <_malloc_r+0x14>
 80073fc:	230c      	movs	r3, #12
 80073fe:	2500      	movs	r5, #0
 8007400:	6033      	str	r3, [r6, #0]
 8007402:	0028      	movs	r0, r5
 8007404:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007406:	6822      	ldr	r2, [r4, #0]
 8007408:	1bd1      	subs	r1, r2, r7
 800740a:	d420      	bmi.n	800744e <_malloc_r+0xce>
 800740c:	290b      	cmp	r1, #11
 800740e:	d917      	bls.n	8007440 <_malloc_r+0xc0>
 8007410:	19e2      	adds	r2, r4, r7
 8007412:	6027      	str	r7, [r4, #0]
 8007414:	42a3      	cmp	r3, r4
 8007416:	d111      	bne.n	800743c <_malloc_r+0xbc>
 8007418:	602a      	str	r2, [r5, #0]
 800741a:	6863      	ldr	r3, [r4, #4]
 800741c:	6011      	str	r1, [r2, #0]
 800741e:	6053      	str	r3, [r2, #4]
 8007420:	0030      	movs	r0, r6
 8007422:	0025      	movs	r5, r4
 8007424:	f000 f86c 	bl	8007500 <__malloc_unlock>
 8007428:	2207      	movs	r2, #7
 800742a:	350b      	adds	r5, #11
 800742c:	1d23      	adds	r3, r4, #4
 800742e:	4395      	bics	r5, r2
 8007430:	1aea      	subs	r2, r5, r3
 8007432:	429d      	cmp	r5, r3
 8007434:	d0e5      	beq.n	8007402 <_malloc_r+0x82>
 8007436:	1b5b      	subs	r3, r3, r5
 8007438:	50a3      	str	r3, [r4, r2]
 800743a:	e7e2      	b.n	8007402 <_malloc_r+0x82>
 800743c:	605a      	str	r2, [r3, #4]
 800743e:	e7ec      	b.n	800741a <_malloc_r+0x9a>
 8007440:	6862      	ldr	r2, [r4, #4]
 8007442:	42a3      	cmp	r3, r4
 8007444:	d101      	bne.n	800744a <_malloc_r+0xca>
 8007446:	602a      	str	r2, [r5, #0]
 8007448:	e7ea      	b.n	8007420 <_malloc_r+0xa0>
 800744a:	605a      	str	r2, [r3, #4]
 800744c:	e7e8      	b.n	8007420 <_malloc_r+0xa0>
 800744e:	0023      	movs	r3, r4
 8007450:	6864      	ldr	r4, [r4, #4]
 8007452:	e7a7      	b.n	80073a4 <_malloc_r+0x24>
 8007454:	002c      	movs	r4, r5
 8007456:	686d      	ldr	r5, [r5, #4]
 8007458:	e7af      	b.n	80073ba <_malloc_r+0x3a>
 800745a:	230c      	movs	r3, #12
 800745c:	0030      	movs	r0, r6
 800745e:	6033      	str	r3, [r6, #0]
 8007460:	f000 f84e 	bl	8007500 <__malloc_unlock>
 8007464:	e7cd      	b.n	8007402 <_malloc_r+0x82>
 8007466:	46c0      	nop			; (mov r8, r8)
 8007468:	2000071c 	.word	0x2000071c

0800746c <_realloc_r>:
 800746c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800746e:	0007      	movs	r7, r0
 8007470:	000e      	movs	r6, r1
 8007472:	0014      	movs	r4, r2
 8007474:	2900      	cmp	r1, #0
 8007476:	d105      	bne.n	8007484 <_realloc_r+0x18>
 8007478:	0011      	movs	r1, r2
 800747a:	f7ff ff81 	bl	8007380 <_malloc_r>
 800747e:	0005      	movs	r5, r0
 8007480:	0028      	movs	r0, r5
 8007482:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007484:	2a00      	cmp	r2, #0
 8007486:	d103      	bne.n	8007490 <_realloc_r+0x24>
 8007488:	f7ff ff0e 	bl	80072a8 <_free_r>
 800748c:	0025      	movs	r5, r4
 800748e:	e7f7      	b.n	8007480 <_realloc_r+0x14>
 8007490:	f000 f83e 	bl	8007510 <_malloc_usable_size_r>
 8007494:	9001      	str	r0, [sp, #4]
 8007496:	4284      	cmp	r4, r0
 8007498:	d803      	bhi.n	80074a2 <_realloc_r+0x36>
 800749a:	0035      	movs	r5, r6
 800749c:	0843      	lsrs	r3, r0, #1
 800749e:	42a3      	cmp	r3, r4
 80074a0:	d3ee      	bcc.n	8007480 <_realloc_r+0x14>
 80074a2:	0021      	movs	r1, r4
 80074a4:	0038      	movs	r0, r7
 80074a6:	f7ff ff6b 	bl	8007380 <_malloc_r>
 80074aa:	1e05      	subs	r5, r0, #0
 80074ac:	d0e8      	beq.n	8007480 <_realloc_r+0x14>
 80074ae:	9b01      	ldr	r3, [sp, #4]
 80074b0:	0022      	movs	r2, r4
 80074b2:	429c      	cmp	r4, r3
 80074b4:	d900      	bls.n	80074b8 <_realloc_r+0x4c>
 80074b6:	001a      	movs	r2, r3
 80074b8:	0031      	movs	r1, r6
 80074ba:	0028      	movs	r0, r5
 80074bc:	f7ff fbc0 	bl	8006c40 <memcpy>
 80074c0:	0031      	movs	r1, r6
 80074c2:	0038      	movs	r0, r7
 80074c4:	f7ff fef0 	bl	80072a8 <_free_r>
 80074c8:	e7da      	b.n	8007480 <_realloc_r+0x14>
	...

080074cc <_sbrk_r>:
 80074cc:	2300      	movs	r3, #0
 80074ce:	b570      	push	{r4, r5, r6, lr}
 80074d0:	4d06      	ldr	r5, [pc, #24]	; (80074ec <_sbrk_r+0x20>)
 80074d2:	0004      	movs	r4, r0
 80074d4:	0008      	movs	r0, r1
 80074d6:	602b      	str	r3, [r5, #0]
 80074d8:	f7fa fdd2 	bl	8002080 <_sbrk>
 80074dc:	1c43      	adds	r3, r0, #1
 80074de:	d103      	bne.n	80074e8 <_sbrk_r+0x1c>
 80074e0:	682b      	ldr	r3, [r5, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d000      	beq.n	80074e8 <_sbrk_r+0x1c>
 80074e6:	6023      	str	r3, [r4, #0]
 80074e8:	bd70      	pop	{r4, r5, r6, pc}
 80074ea:	46c0      	nop			; (mov r8, r8)
 80074ec:	20000724 	.word	0x20000724

080074f0 <__malloc_lock>:
 80074f0:	b510      	push	{r4, lr}
 80074f2:	4802      	ldr	r0, [pc, #8]	; (80074fc <__malloc_lock+0xc>)
 80074f4:	f000 f814 	bl	8007520 <__retarget_lock_acquire_recursive>
 80074f8:	bd10      	pop	{r4, pc}
 80074fa:	46c0      	nop			; (mov r8, r8)
 80074fc:	20000728 	.word	0x20000728

08007500 <__malloc_unlock>:
 8007500:	b510      	push	{r4, lr}
 8007502:	4802      	ldr	r0, [pc, #8]	; (800750c <__malloc_unlock+0xc>)
 8007504:	f000 f80d 	bl	8007522 <__retarget_lock_release_recursive>
 8007508:	bd10      	pop	{r4, pc}
 800750a:	46c0      	nop			; (mov r8, r8)
 800750c:	20000728 	.word	0x20000728

08007510 <_malloc_usable_size_r>:
 8007510:	1f0b      	subs	r3, r1, #4
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	1f18      	subs	r0, r3, #4
 8007516:	2b00      	cmp	r3, #0
 8007518:	da01      	bge.n	800751e <_malloc_usable_size_r+0xe>
 800751a:	580b      	ldr	r3, [r1, r0]
 800751c:	18c0      	adds	r0, r0, r3
 800751e:	4770      	bx	lr

08007520 <__retarget_lock_acquire_recursive>:
 8007520:	4770      	bx	lr

08007522 <__retarget_lock_release_recursive>:
 8007522:	4770      	bx	lr

08007524 <_init>:
 8007524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007526:	46c0      	nop			; (mov r8, r8)
 8007528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800752a:	bc08      	pop	{r3}
 800752c:	469e      	mov	lr, r3
 800752e:	4770      	bx	lr

08007530 <_fini>:
 8007530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007532:	46c0      	nop			; (mov r8, r8)
 8007534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007536:	bc08      	pop	{r3}
 8007538:	469e      	mov	lr, r3
 800753a:	4770      	bx	lr
