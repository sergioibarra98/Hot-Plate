
HOT_PLATE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ba8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fb4  08006c60  08006c60  00016c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c14  08007c14  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08007c14  08007c14  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007c14  08007c14  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c14  08007c14  00017c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c18  08007c18  00017c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007c1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000067c  20000090  08007cac  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000070c  08007cac  0002070c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001315f  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c9e  00000000  00000000  00033217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  00035eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001080  00000000  00000000  000370a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b70  00000000  00000000  00038128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015421  00000000  00000000  0004fc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092940  00000000  00000000  000650b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f79f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044a8  00000000  00000000  000f7a4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000090 	.word	0x20000090
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08006c48 	.word	0x08006c48

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000094 	.word	0x20000094
 80000fc:	08006c48 	.word	0x08006c48

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f806 	bl	8000228 <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__aeabi_idiv0>:
 8000228:	4770      	bx	lr
 800022a:	46c0      	nop			; (mov r8, r8)

0800022c <__aeabi_fmul>:
 800022c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800022e:	464f      	mov	r7, r9
 8000230:	4646      	mov	r6, r8
 8000232:	46d6      	mov	lr, sl
 8000234:	0244      	lsls	r4, r0, #9
 8000236:	0045      	lsls	r5, r0, #1
 8000238:	b5c0      	push	{r6, r7, lr}
 800023a:	0a64      	lsrs	r4, r4, #9
 800023c:	1c0f      	adds	r7, r1, #0
 800023e:	0e2d      	lsrs	r5, r5, #24
 8000240:	0fc6      	lsrs	r6, r0, #31
 8000242:	2d00      	cmp	r5, #0
 8000244:	d100      	bne.n	8000248 <__aeabi_fmul+0x1c>
 8000246:	e08d      	b.n	8000364 <__aeabi_fmul+0x138>
 8000248:	2dff      	cmp	r5, #255	; 0xff
 800024a:	d100      	bne.n	800024e <__aeabi_fmul+0x22>
 800024c:	e092      	b.n	8000374 <__aeabi_fmul+0x148>
 800024e:	2300      	movs	r3, #0
 8000250:	2080      	movs	r0, #128	; 0x80
 8000252:	4699      	mov	r9, r3
 8000254:	469a      	mov	sl, r3
 8000256:	00e4      	lsls	r4, r4, #3
 8000258:	04c0      	lsls	r0, r0, #19
 800025a:	4304      	orrs	r4, r0
 800025c:	3d7f      	subs	r5, #127	; 0x7f
 800025e:	0278      	lsls	r0, r7, #9
 8000260:	0a43      	lsrs	r3, r0, #9
 8000262:	4698      	mov	r8, r3
 8000264:	007b      	lsls	r3, r7, #1
 8000266:	0e1b      	lsrs	r3, r3, #24
 8000268:	0fff      	lsrs	r7, r7, #31
 800026a:	2b00      	cmp	r3, #0
 800026c:	d100      	bne.n	8000270 <__aeabi_fmul+0x44>
 800026e:	e070      	b.n	8000352 <__aeabi_fmul+0x126>
 8000270:	2bff      	cmp	r3, #255	; 0xff
 8000272:	d100      	bne.n	8000276 <__aeabi_fmul+0x4a>
 8000274:	e086      	b.n	8000384 <__aeabi_fmul+0x158>
 8000276:	4642      	mov	r2, r8
 8000278:	00d0      	lsls	r0, r2, #3
 800027a:	2280      	movs	r2, #128	; 0x80
 800027c:	3b7f      	subs	r3, #127	; 0x7f
 800027e:	18ed      	adds	r5, r5, r3
 8000280:	2300      	movs	r3, #0
 8000282:	04d2      	lsls	r2, r2, #19
 8000284:	4302      	orrs	r2, r0
 8000286:	4690      	mov	r8, r2
 8000288:	469c      	mov	ip, r3
 800028a:	0031      	movs	r1, r6
 800028c:	464b      	mov	r3, r9
 800028e:	4079      	eors	r1, r7
 8000290:	1c68      	adds	r0, r5, #1
 8000292:	2b0f      	cmp	r3, #15
 8000294:	d81c      	bhi.n	80002d0 <__aeabi_fmul+0xa4>
 8000296:	4a76      	ldr	r2, [pc, #472]	; (8000470 <__aeabi_fmul+0x244>)
 8000298:	009b      	lsls	r3, r3, #2
 800029a:	58d3      	ldr	r3, [r2, r3]
 800029c:	469f      	mov	pc, r3
 800029e:	0039      	movs	r1, r7
 80002a0:	4644      	mov	r4, r8
 80002a2:	46e2      	mov	sl, ip
 80002a4:	4653      	mov	r3, sl
 80002a6:	2b02      	cmp	r3, #2
 80002a8:	d00f      	beq.n	80002ca <__aeabi_fmul+0x9e>
 80002aa:	2b03      	cmp	r3, #3
 80002ac:	d100      	bne.n	80002b0 <__aeabi_fmul+0x84>
 80002ae:	e0d7      	b.n	8000460 <__aeabi_fmul+0x234>
 80002b0:	2b01      	cmp	r3, #1
 80002b2:	d137      	bne.n	8000324 <__aeabi_fmul+0xf8>
 80002b4:	2000      	movs	r0, #0
 80002b6:	2400      	movs	r4, #0
 80002b8:	05c0      	lsls	r0, r0, #23
 80002ba:	4320      	orrs	r0, r4
 80002bc:	07c9      	lsls	r1, r1, #31
 80002be:	4308      	orrs	r0, r1
 80002c0:	bce0      	pop	{r5, r6, r7}
 80002c2:	46ba      	mov	sl, r7
 80002c4:	46b1      	mov	r9, r6
 80002c6:	46a8      	mov	r8, r5
 80002c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ca:	20ff      	movs	r0, #255	; 0xff
 80002cc:	2400      	movs	r4, #0
 80002ce:	e7f3      	b.n	80002b8 <__aeabi_fmul+0x8c>
 80002d0:	0c26      	lsrs	r6, r4, #16
 80002d2:	0424      	lsls	r4, r4, #16
 80002d4:	0c22      	lsrs	r2, r4, #16
 80002d6:	4644      	mov	r4, r8
 80002d8:	0424      	lsls	r4, r4, #16
 80002da:	0c24      	lsrs	r4, r4, #16
 80002dc:	4643      	mov	r3, r8
 80002de:	0027      	movs	r7, r4
 80002e0:	0c1b      	lsrs	r3, r3, #16
 80002e2:	4357      	muls	r7, r2
 80002e4:	4374      	muls	r4, r6
 80002e6:	435a      	muls	r2, r3
 80002e8:	435e      	muls	r6, r3
 80002ea:	1912      	adds	r2, r2, r4
 80002ec:	0c3b      	lsrs	r3, r7, #16
 80002ee:	189b      	adds	r3, r3, r2
 80002f0:	429c      	cmp	r4, r3
 80002f2:	d903      	bls.n	80002fc <__aeabi_fmul+0xd0>
 80002f4:	2280      	movs	r2, #128	; 0x80
 80002f6:	0252      	lsls	r2, r2, #9
 80002f8:	4694      	mov	ip, r2
 80002fa:	4466      	add	r6, ip
 80002fc:	043f      	lsls	r7, r7, #16
 80002fe:	041a      	lsls	r2, r3, #16
 8000300:	0c3f      	lsrs	r7, r7, #16
 8000302:	19d2      	adds	r2, r2, r7
 8000304:	0194      	lsls	r4, r2, #6
 8000306:	1e67      	subs	r7, r4, #1
 8000308:	41bc      	sbcs	r4, r7
 800030a:	0c1b      	lsrs	r3, r3, #16
 800030c:	0e92      	lsrs	r2, r2, #26
 800030e:	199b      	adds	r3, r3, r6
 8000310:	4314      	orrs	r4, r2
 8000312:	019b      	lsls	r3, r3, #6
 8000314:	431c      	orrs	r4, r3
 8000316:	011b      	lsls	r3, r3, #4
 8000318:	d400      	bmi.n	800031c <__aeabi_fmul+0xf0>
 800031a:	e09b      	b.n	8000454 <__aeabi_fmul+0x228>
 800031c:	2301      	movs	r3, #1
 800031e:	0862      	lsrs	r2, r4, #1
 8000320:	401c      	ands	r4, r3
 8000322:	4314      	orrs	r4, r2
 8000324:	0002      	movs	r2, r0
 8000326:	327f      	adds	r2, #127	; 0x7f
 8000328:	2a00      	cmp	r2, #0
 800032a:	dd64      	ble.n	80003f6 <__aeabi_fmul+0x1ca>
 800032c:	0763      	lsls	r3, r4, #29
 800032e:	d004      	beq.n	800033a <__aeabi_fmul+0x10e>
 8000330:	230f      	movs	r3, #15
 8000332:	4023      	ands	r3, r4
 8000334:	2b04      	cmp	r3, #4
 8000336:	d000      	beq.n	800033a <__aeabi_fmul+0x10e>
 8000338:	3404      	adds	r4, #4
 800033a:	0123      	lsls	r3, r4, #4
 800033c:	d503      	bpl.n	8000346 <__aeabi_fmul+0x11a>
 800033e:	0002      	movs	r2, r0
 8000340:	4b4c      	ldr	r3, [pc, #304]	; (8000474 <__aeabi_fmul+0x248>)
 8000342:	3280      	adds	r2, #128	; 0x80
 8000344:	401c      	ands	r4, r3
 8000346:	2afe      	cmp	r2, #254	; 0xfe
 8000348:	dcbf      	bgt.n	80002ca <__aeabi_fmul+0x9e>
 800034a:	01a4      	lsls	r4, r4, #6
 800034c:	0a64      	lsrs	r4, r4, #9
 800034e:	b2d0      	uxtb	r0, r2
 8000350:	e7b2      	b.n	80002b8 <__aeabi_fmul+0x8c>
 8000352:	4643      	mov	r3, r8
 8000354:	2b00      	cmp	r3, #0
 8000356:	d13d      	bne.n	80003d4 <__aeabi_fmul+0x1a8>
 8000358:	464a      	mov	r2, r9
 800035a:	3301      	adds	r3, #1
 800035c:	431a      	orrs	r2, r3
 800035e:	4691      	mov	r9, r2
 8000360:	469c      	mov	ip, r3
 8000362:	e792      	b.n	800028a <__aeabi_fmul+0x5e>
 8000364:	2c00      	cmp	r4, #0
 8000366:	d129      	bne.n	80003bc <__aeabi_fmul+0x190>
 8000368:	2304      	movs	r3, #4
 800036a:	4699      	mov	r9, r3
 800036c:	3b03      	subs	r3, #3
 800036e:	2500      	movs	r5, #0
 8000370:	469a      	mov	sl, r3
 8000372:	e774      	b.n	800025e <__aeabi_fmul+0x32>
 8000374:	2c00      	cmp	r4, #0
 8000376:	d11b      	bne.n	80003b0 <__aeabi_fmul+0x184>
 8000378:	2308      	movs	r3, #8
 800037a:	4699      	mov	r9, r3
 800037c:	3b06      	subs	r3, #6
 800037e:	25ff      	movs	r5, #255	; 0xff
 8000380:	469a      	mov	sl, r3
 8000382:	e76c      	b.n	800025e <__aeabi_fmul+0x32>
 8000384:	4643      	mov	r3, r8
 8000386:	35ff      	adds	r5, #255	; 0xff
 8000388:	2b00      	cmp	r3, #0
 800038a:	d10b      	bne.n	80003a4 <__aeabi_fmul+0x178>
 800038c:	2302      	movs	r3, #2
 800038e:	464a      	mov	r2, r9
 8000390:	431a      	orrs	r2, r3
 8000392:	4691      	mov	r9, r2
 8000394:	469c      	mov	ip, r3
 8000396:	e778      	b.n	800028a <__aeabi_fmul+0x5e>
 8000398:	4653      	mov	r3, sl
 800039a:	0031      	movs	r1, r6
 800039c:	2b02      	cmp	r3, #2
 800039e:	d000      	beq.n	80003a2 <__aeabi_fmul+0x176>
 80003a0:	e783      	b.n	80002aa <__aeabi_fmul+0x7e>
 80003a2:	e792      	b.n	80002ca <__aeabi_fmul+0x9e>
 80003a4:	2303      	movs	r3, #3
 80003a6:	464a      	mov	r2, r9
 80003a8:	431a      	orrs	r2, r3
 80003aa:	4691      	mov	r9, r2
 80003ac:	469c      	mov	ip, r3
 80003ae:	e76c      	b.n	800028a <__aeabi_fmul+0x5e>
 80003b0:	230c      	movs	r3, #12
 80003b2:	4699      	mov	r9, r3
 80003b4:	3b09      	subs	r3, #9
 80003b6:	25ff      	movs	r5, #255	; 0xff
 80003b8:	469a      	mov	sl, r3
 80003ba:	e750      	b.n	800025e <__aeabi_fmul+0x32>
 80003bc:	0020      	movs	r0, r4
 80003be:	f000 f8c9 	bl	8000554 <__clzsi2>
 80003c2:	2576      	movs	r5, #118	; 0x76
 80003c4:	1f43      	subs	r3, r0, #5
 80003c6:	409c      	lsls	r4, r3
 80003c8:	2300      	movs	r3, #0
 80003ca:	426d      	negs	r5, r5
 80003cc:	4699      	mov	r9, r3
 80003ce:	469a      	mov	sl, r3
 80003d0:	1a2d      	subs	r5, r5, r0
 80003d2:	e744      	b.n	800025e <__aeabi_fmul+0x32>
 80003d4:	4640      	mov	r0, r8
 80003d6:	f000 f8bd 	bl	8000554 <__clzsi2>
 80003da:	4642      	mov	r2, r8
 80003dc:	1f43      	subs	r3, r0, #5
 80003de:	409a      	lsls	r2, r3
 80003e0:	2300      	movs	r3, #0
 80003e2:	1a2d      	subs	r5, r5, r0
 80003e4:	4690      	mov	r8, r2
 80003e6:	469c      	mov	ip, r3
 80003e8:	3d76      	subs	r5, #118	; 0x76
 80003ea:	e74e      	b.n	800028a <__aeabi_fmul+0x5e>
 80003ec:	2480      	movs	r4, #128	; 0x80
 80003ee:	2100      	movs	r1, #0
 80003f0:	20ff      	movs	r0, #255	; 0xff
 80003f2:	03e4      	lsls	r4, r4, #15
 80003f4:	e760      	b.n	80002b8 <__aeabi_fmul+0x8c>
 80003f6:	2301      	movs	r3, #1
 80003f8:	1a9b      	subs	r3, r3, r2
 80003fa:	2b1b      	cmp	r3, #27
 80003fc:	dd00      	ble.n	8000400 <__aeabi_fmul+0x1d4>
 80003fe:	e759      	b.n	80002b4 <__aeabi_fmul+0x88>
 8000400:	0022      	movs	r2, r4
 8000402:	309e      	adds	r0, #158	; 0x9e
 8000404:	40da      	lsrs	r2, r3
 8000406:	4084      	lsls	r4, r0
 8000408:	0013      	movs	r3, r2
 800040a:	1e62      	subs	r2, r4, #1
 800040c:	4194      	sbcs	r4, r2
 800040e:	431c      	orrs	r4, r3
 8000410:	0763      	lsls	r3, r4, #29
 8000412:	d004      	beq.n	800041e <__aeabi_fmul+0x1f2>
 8000414:	230f      	movs	r3, #15
 8000416:	4023      	ands	r3, r4
 8000418:	2b04      	cmp	r3, #4
 800041a:	d000      	beq.n	800041e <__aeabi_fmul+0x1f2>
 800041c:	3404      	adds	r4, #4
 800041e:	0163      	lsls	r3, r4, #5
 8000420:	d51a      	bpl.n	8000458 <__aeabi_fmul+0x22c>
 8000422:	2001      	movs	r0, #1
 8000424:	2400      	movs	r4, #0
 8000426:	e747      	b.n	80002b8 <__aeabi_fmul+0x8c>
 8000428:	2080      	movs	r0, #128	; 0x80
 800042a:	03c0      	lsls	r0, r0, #15
 800042c:	4204      	tst	r4, r0
 800042e:	d009      	beq.n	8000444 <__aeabi_fmul+0x218>
 8000430:	4643      	mov	r3, r8
 8000432:	4203      	tst	r3, r0
 8000434:	d106      	bne.n	8000444 <__aeabi_fmul+0x218>
 8000436:	4644      	mov	r4, r8
 8000438:	4304      	orrs	r4, r0
 800043a:	0264      	lsls	r4, r4, #9
 800043c:	0039      	movs	r1, r7
 800043e:	20ff      	movs	r0, #255	; 0xff
 8000440:	0a64      	lsrs	r4, r4, #9
 8000442:	e739      	b.n	80002b8 <__aeabi_fmul+0x8c>
 8000444:	2080      	movs	r0, #128	; 0x80
 8000446:	03c0      	lsls	r0, r0, #15
 8000448:	4304      	orrs	r4, r0
 800044a:	0264      	lsls	r4, r4, #9
 800044c:	0031      	movs	r1, r6
 800044e:	20ff      	movs	r0, #255	; 0xff
 8000450:	0a64      	lsrs	r4, r4, #9
 8000452:	e731      	b.n	80002b8 <__aeabi_fmul+0x8c>
 8000454:	0028      	movs	r0, r5
 8000456:	e765      	b.n	8000324 <__aeabi_fmul+0xf8>
 8000458:	01a4      	lsls	r4, r4, #6
 800045a:	2000      	movs	r0, #0
 800045c:	0a64      	lsrs	r4, r4, #9
 800045e:	e72b      	b.n	80002b8 <__aeabi_fmul+0x8c>
 8000460:	2080      	movs	r0, #128	; 0x80
 8000462:	03c0      	lsls	r0, r0, #15
 8000464:	4304      	orrs	r4, r0
 8000466:	0264      	lsls	r4, r4, #9
 8000468:	20ff      	movs	r0, #255	; 0xff
 800046a:	0a64      	lsrs	r4, r4, #9
 800046c:	e724      	b.n	80002b8 <__aeabi_fmul+0x8c>
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	08006c90 	.word	0x08006c90
 8000474:	f7ffffff 	.word	0xf7ffffff

08000478 <__aeabi_f2iz>:
 8000478:	0241      	lsls	r1, r0, #9
 800047a:	0042      	lsls	r2, r0, #1
 800047c:	0fc3      	lsrs	r3, r0, #31
 800047e:	0a49      	lsrs	r1, r1, #9
 8000480:	2000      	movs	r0, #0
 8000482:	0e12      	lsrs	r2, r2, #24
 8000484:	2a7e      	cmp	r2, #126	; 0x7e
 8000486:	dd03      	ble.n	8000490 <__aeabi_f2iz+0x18>
 8000488:	2a9d      	cmp	r2, #157	; 0x9d
 800048a:	dd02      	ble.n	8000492 <__aeabi_f2iz+0x1a>
 800048c:	4a09      	ldr	r2, [pc, #36]	; (80004b4 <__aeabi_f2iz+0x3c>)
 800048e:	1898      	adds	r0, r3, r2
 8000490:	4770      	bx	lr
 8000492:	2080      	movs	r0, #128	; 0x80
 8000494:	0400      	lsls	r0, r0, #16
 8000496:	4301      	orrs	r1, r0
 8000498:	2a95      	cmp	r2, #149	; 0x95
 800049a:	dc07      	bgt.n	80004ac <__aeabi_f2iz+0x34>
 800049c:	2096      	movs	r0, #150	; 0x96
 800049e:	1a82      	subs	r2, r0, r2
 80004a0:	40d1      	lsrs	r1, r2
 80004a2:	4248      	negs	r0, r1
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d1f3      	bne.n	8000490 <__aeabi_f2iz+0x18>
 80004a8:	0008      	movs	r0, r1
 80004aa:	e7f1      	b.n	8000490 <__aeabi_f2iz+0x18>
 80004ac:	3a96      	subs	r2, #150	; 0x96
 80004ae:	4091      	lsls	r1, r2
 80004b0:	e7f7      	b.n	80004a2 <__aeabi_f2iz+0x2a>
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	7fffffff 	.word	0x7fffffff

080004b8 <__aeabi_i2f>:
 80004b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ba:	2800      	cmp	r0, #0
 80004bc:	d013      	beq.n	80004e6 <__aeabi_i2f+0x2e>
 80004be:	17c3      	asrs	r3, r0, #31
 80004c0:	18c6      	adds	r6, r0, r3
 80004c2:	405e      	eors	r6, r3
 80004c4:	0fc4      	lsrs	r4, r0, #31
 80004c6:	0030      	movs	r0, r6
 80004c8:	f000 f844 	bl	8000554 <__clzsi2>
 80004cc:	239e      	movs	r3, #158	; 0x9e
 80004ce:	0005      	movs	r5, r0
 80004d0:	1a1b      	subs	r3, r3, r0
 80004d2:	2b96      	cmp	r3, #150	; 0x96
 80004d4:	dc0f      	bgt.n	80004f6 <__aeabi_i2f+0x3e>
 80004d6:	2808      	cmp	r0, #8
 80004d8:	dd01      	ble.n	80004de <__aeabi_i2f+0x26>
 80004da:	3d08      	subs	r5, #8
 80004dc:	40ae      	lsls	r6, r5
 80004de:	0276      	lsls	r6, r6, #9
 80004e0:	0a76      	lsrs	r6, r6, #9
 80004e2:	b2d8      	uxtb	r0, r3
 80004e4:	e002      	b.n	80004ec <__aeabi_i2f+0x34>
 80004e6:	2400      	movs	r4, #0
 80004e8:	2000      	movs	r0, #0
 80004ea:	2600      	movs	r6, #0
 80004ec:	05c0      	lsls	r0, r0, #23
 80004ee:	4330      	orrs	r0, r6
 80004f0:	07e4      	lsls	r4, r4, #31
 80004f2:	4320      	orrs	r0, r4
 80004f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004f6:	2b99      	cmp	r3, #153	; 0x99
 80004f8:	dd0c      	ble.n	8000514 <__aeabi_i2f+0x5c>
 80004fa:	2205      	movs	r2, #5
 80004fc:	0031      	movs	r1, r6
 80004fe:	1a12      	subs	r2, r2, r0
 8000500:	40d1      	lsrs	r1, r2
 8000502:	000a      	movs	r2, r1
 8000504:	0001      	movs	r1, r0
 8000506:	0030      	movs	r0, r6
 8000508:	311b      	adds	r1, #27
 800050a:	4088      	lsls	r0, r1
 800050c:	1e41      	subs	r1, r0, #1
 800050e:	4188      	sbcs	r0, r1
 8000510:	4302      	orrs	r2, r0
 8000512:	0016      	movs	r6, r2
 8000514:	2d05      	cmp	r5, #5
 8000516:	dc12      	bgt.n	800053e <__aeabi_i2f+0x86>
 8000518:	0031      	movs	r1, r6
 800051a:	4f0d      	ldr	r7, [pc, #52]	; (8000550 <__aeabi_i2f+0x98>)
 800051c:	4039      	ands	r1, r7
 800051e:	0772      	lsls	r2, r6, #29
 8000520:	d009      	beq.n	8000536 <__aeabi_i2f+0x7e>
 8000522:	200f      	movs	r0, #15
 8000524:	4030      	ands	r0, r6
 8000526:	2804      	cmp	r0, #4
 8000528:	d005      	beq.n	8000536 <__aeabi_i2f+0x7e>
 800052a:	3104      	adds	r1, #4
 800052c:	014a      	lsls	r2, r1, #5
 800052e:	d502      	bpl.n	8000536 <__aeabi_i2f+0x7e>
 8000530:	239f      	movs	r3, #159	; 0x9f
 8000532:	4039      	ands	r1, r7
 8000534:	1b5b      	subs	r3, r3, r5
 8000536:	0189      	lsls	r1, r1, #6
 8000538:	0a4e      	lsrs	r6, r1, #9
 800053a:	b2d8      	uxtb	r0, r3
 800053c:	e7d6      	b.n	80004ec <__aeabi_i2f+0x34>
 800053e:	1f6a      	subs	r2, r5, #5
 8000540:	4096      	lsls	r6, r2
 8000542:	0031      	movs	r1, r6
 8000544:	4f02      	ldr	r7, [pc, #8]	; (8000550 <__aeabi_i2f+0x98>)
 8000546:	4039      	ands	r1, r7
 8000548:	0772      	lsls	r2, r6, #29
 800054a:	d0f4      	beq.n	8000536 <__aeabi_i2f+0x7e>
 800054c:	e7e9      	b.n	8000522 <__aeabi_i2f+0x6a>
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	fbffffff 	.word	0xfbffffff

08000554 <__clzsi2>:
 8000554:	211c      	movs	r1, #28
 8000556:	2301      	movs	r3, #1
 8000558:	041b      	lsls	r3, r3, #16
 800055a:	4298      	cmp	r0, r3
 800055c:	d301      	bcc.n	8000562 <__clzsi2+0xe>
 800055e:	0c00      	lsrs	r0, r0, #16
 8000560:	3910      	subs	r1, #16
 8000562:	0a1b      	lsrs	r3, r3, #8
 8000564:	4298      	cmp	r0, r3
 8000566:	d301      	bcc.n	800056c <__clzsi2+0x18>
 8000568:	0a00      	lsrs	r0, r0, #8
 800056a:	3908      	subs	r1, #8
 800056c:	091b      	lsrs	r3, r3, #4
 800056e:	4298      	cmp	r0, r3
 8000570:	d301      	bcc.n	8000576 <__clzsi2+0x22>
 8000572:	0900      	lsrs	r0, r0, #4
 8000574:	3904      	subs	r1, #4
 8000576:	a202      	add	r2, pc, #8	; (adr r2, 8000580 <__clzsi2+0x2c>)
 8000578:	5c10      	ldrb	r0, [r2, r0]
 800057a:	1840      	adds	r0, r0, r1
 800057c:	4770      	bx	lr
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	02020304 	.word	0x02020304
 8000584:	01010101 	.word	0x01010101
	...

08000590 <FIRFilter_Init>:
//Fstop 10kHz
//Apass 0.1dB
//Astop 55dB
int16_t H_FIR[FIR_FILTER_LENGHT] = {0, 3, 11, 22, 30, 30, 22, 11, 3, 0};

void FIRFilter_Init(FIRFilter *fir) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	//Clear fiilter buffer
	for(int16_t n = 0; n < FIR_FILTER_LENGHT; n++) {
 8000598:	230e      	movs	r3, #14
 800059a:	18fb      	adds	r3, r7, r3
 800059c:	2200      	movs	r2, #0
 800059e:	801a      	strh	r2, [r3, #0]
 80005a0:	e010      	b.n	80005c4 <FIRFilter_Init+0x34>
		fir->buf[n] = 0;
 80005a2:	200e      	movs	r0, #14
 80005a4:	183b      	adds	r3, r7, r0
 80005a6:	2200      	movs	r2, #0
 80005a8:	5e9a      	ldrsh	r2, [r3, r2]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	0052      	lsls	r2, r2, #1
 80005ae:	2100      	movs	r1, #0
 80005b0:	52d1      	strh	r1, [r2, r3]
	for(int16_t n = 0; n < FIR_FILTER_LENGHT; n++) {
 80005b2:	0001      	movs	r1, r0
 80005b4:	187b      	adds	r3, r7, r1
 80005b6:	2200      	movs	r2, #0
 80005b8:	5e9b      	ldrsh	r3, [r3, r2]
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	3301      	adds	r3, #1
 80005be:	b29a      	uxth	r2, r3
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	801a      	strh	r2, [r3, #0]
 80005c4:	230e      	movs	r3, #14
 80005c6:	18fb      	adds	r3, r7, r3
 80005c8:	2200      	movs	r2, #0
 80005ca:	5e9b      	ldrsh	r3, [r3, r2]
 80005cc:	2b09      	cmp	r3, #9
 80005ce:	dde8      	ble.n	80005a2 <FIRFilter_Init+0x12>
	}

	//Reset buffer Index
	fir->bufIndex = 0;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2200      	movs	r2, #0
 80005d4:	829a      	strh	r2, [r3, #20]

	//Clear filter output
	fir->output = 0;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2200      	movs	r2, #0
 80005da:	82da      	strh	r2, [r3, #22]
}
 80005dc:	46c0      	nop			; (mov r8, r8)
 80005de:	46bd      	mov	sp, r7
 80005e0:	b004      	add	sp, #16
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <FIRFilter_Update>:

int16_t FIRFilter_Update(FIRFilter *fir, int16_t inp) {
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	000a      	movs	r2, r1
 80005ee:	1cbb      	adds	r3, r7, #2
 80005f0:	801a      	strh	r2, [r3, #0]
	//Store latest sample in buffer in degrees and transformed to fixed point (8,7)
	inp = ((inp >> 5) - (inp >> 7) + (inp >> 9) - (inp >> 11) + 20) << 7;		//CSD 0.025027 * inp + 3.056846
 80005f2:	1cbb      	adds	r3, r7, #2
 80005f4:	2200      	movs	r2, #0
 80005f6:	5e9b      	ldrsh	r3, [r3, r2]
 80005f8:	115b      	asrs	r3, r3, #5
 80005fa:	b21b      	sxth	r3, r3
 80005fc:	001a      	movs	r2, r3
 80005fe:	1cbb      	adds	r3, r7, #2
 8000600:	2100      	movs	r1, #0
 8000602:	5e5b      	ldrsh	r3, [r3, r1]
 8000604:	11db      	asrs	r3, r3, #7
 8000606:	b21b      	sxth	r3, r3
 8000608:	1ad3      	subs	r3, r2, r3
 800060a:	1cba      	adds	r2, r7, #2
 800060c:	2100      	movs	r1, #0
 800060e:	5e52      	ldrsh	r2, [r2, r1]
 8000610:	1252      	asrs	r2, r2, #9
 8000612:	b212      	sxth	r2, r2
 8000614:	189b      	adds	r3, r3, r2
 8000616:	1cba      	adds	r2, r7, #2
 8000618:	2100      	movs	r1, #0
 800061a:	5e52      	ldrsh	r2, [r2, r1]
 800061c:	12d2      	asrs	r2, r2, #11
 800061e:	b212      	sxth	r2, r2
 8000620:	1a9b      	subs	r3, r3, r2
 8000622:	3314      	adds	r3, #20
 8000624:	01da      	lsls	r2, r3, #7
 8000626:	1cbb      	adds	r3, r7, #2
 8000628:	801a      	strh	r2, [r3, #0]

	fir->buf[fir->bufIndex] = inp;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2214      	movs	r2, #20
 800062e:	5e9b      	ldrsh	r3, [r3, r2]
 8000630:	001a      	movs	r2, r3
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	0052      	lsls	r2, r2, #1
 8000636:	1cb9      	adds	r1, r7, #2
 8000638:	8809      	ldrh	r1, [r1, #0]
 800063a:	52d1      	strh	r1, [r2, r3]

	//Increment buffer index and wrap if necessary
	fir->bufIndex = fir->bufIndex + 1;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2214      	movs	r2, #20
 8000640:	5e9b      	ldrsh	r3, [r3, r2]
 8000642:	b29b      	uxth	r3, r3
 8000644:	3301      	adds	r3, #1
 8000646:	b29b      	uxth	r3, r3
 8000648:	b21a      	sxth	r2, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	829a      	strh	r2, [r3, #20]

	if (fir->bufIndex == FIR_FILTER_LENGHT) {
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2214      	movs	r2, #20
 8000652:	5e9b      	ldrsh	r3, [r3, r2]
 8000654:	2b0a      	cmp	r3, #10
 8000656:	d102      	bne.n	800065e <FIRFilter_Update+0x7a>
		fir->bufIndex = 0;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	2200      	movs	r2, #0
 800065c:	829a      	strh	r2, [r3, #20]
	}

	//Compute new output sample
	fir->output = 0;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2200      	movs	r2, #0
 8000662:	82da      	strh	r2, [r3, #22]

	int16_t sumIndex = fir->bufIndex;
 8000664:	230e      	movs	r3, #14
 8000666:	18fb      	adds	r3, r7, r3
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	8a92      	ldrh	r2, [r2, #20]
 800066c:	801a      	strh	r2, [r3, #0]

	for (int16_t n = 1; n < FIR_FILTER_LENGHT>>1; n++) {	//n = 1 por coeficientes 0
 800066e:	230c      	movs	r3, #12
 8000670:	18fb      	adds	r3, r7, r3
 8000672:	2201      	movs	r2, #1
 8000674:	801a      	strh	r2, [r3, #0]
 8000676:	e03e      	b.n	80006f6 <FIRFilter_Update+0x112>
		//Decrement Index and wrap if necessary
		if (sumIndex > 0) {
 8000678:	210e      	movs	r1, #14
 800067a:	187b      	adds	r3, r7, r1
 800067c:	2200      	movs	r2, #0
 800067e:	5e9b      	ldrsh	r3, [r3, r2]
 8000680:	2b00      	cmp	r3, #0
 8000682:	dd08      	ble.n	8000696 <FIRFilter_Update+0xb2>
			sumIndex--;
 8000684:	187b      	adds	r3, r7, r1
 8000686:	2200      	movs	r2, #0
 8000688:	5e9b      	ldrsh	r3, [r3, r2]
 800068a:	b29b      	uxth	r3, r3
 800068c:	3b01      	subs	r3, #1
 800068e:	b29a      	uxth	r2, r3
 8000690:	187b      	adds	r3, r7, r1
 8000692:	801a      	strh	r2, [r3, #0]
 8000694:	e003      	b.n	800069e <FIRFilter_Update+0xba>
		} else {
			sumIndex = FIR_FILTER_LENGHT - 1;
 8000696:	230e      	movs	r3, #14
 8000698:	18fb      	adds	r3, r7, r3
 800069a:	2209      	movs	r2, #9
 800069c:	801a      	strh	r2, [r3, #0]
		}

		fir->output = fir->output + (((H_FIR[n] + H_FIR[FIR_FILTER_LENGHT - n - 1]) * fir->buf[sumIndex])>>7);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	2216      	movs	r2, #22
 80006a2:	5e9b      	ldrsh	r3, [r3, r2]
 80006a4:	b29a      	uxth	r2, r3
 80006a6:	240c      	movs	r4, #12
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	2100      	movs	r1, #0
 80006ac:	5e59      	ldrsh	r1, [r3, r1]
 80006ae:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <FIRFilter_Update+0x13c>)
 80006b0:	0049      	lsls	r1, r1, #1
 80006b2:	5ecb      	ldrsh	r3, [r1, r3]
 80006b4:	0018      	movs	r0, r3
 80006b6:	193b      	adds	r3, r7, r4
 80006b8:	2100      	movs	r1, #0
 80006ba:	5e5b      	ldrsh	r3, [r3, r1]
 80006bc:	2109      	movs	r1, #9
 80006be:	1ac9      	subs	r1, r1, r3
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <FIRFilter_Update+0x13c>)
 80006c2:	0049      	lsls	r1, r1, #1
 80006c4:	5ecb      	ldrsh	r3, [r1, r3]
 80006c6:	18c3      	adds	r3, r0, r3
 80006c8:	210e      	movs	r1, #14
 80006ca:	1879      	adds	r1, r7, r1
 80006cc:	2000      	movs	r0, #0
 80006ce:	5e08      	ldrsh	r0, [r1, r0]
 80006d0:	6879      	ldr	r1, [r7, #4]
 80006d2:	0040      	lsls	r0, r0, #1
 80006d4:	5e41      	ldrsh	r1, [r0, r1]
 80006d6:	434b      	muls	r3, r1
 80006d8:	11db      	asrs	r3, r3, #7
 80006da:	b29b      	uxth	r3, r3
 80006dc:	18d3      	adds	r3, r2, r3
 80006de:	b29b      	uxth	r3, r3
 80006e0:	b21a      	sxth	r2, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	82da      	strh	r2, [r3, #22]
	for (int16_t n = 1; n < FIR_FILTER_LENGHT>>1; n++) {	//n = 1 por coeficientes 0
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	2200      	movs	r2, #0
 80006ea:	5e9b      	ldrsh	r3, [r3, r2]
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	3301      	adds	r3, #1
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	193b      	adds	r3, r7, r4
 80006f4:	801a      	strh	r2, [r3, #0]
 80006f6:	230c      	movs	r3, #12
 80006f8:	18fb      	adds	r3, r7, r3
 80006fa:	2200      	movs	r2, #0
 80006fc:	5e9b      	ldrsh	r3, [r3, r2]
 80006fe:	2b04      	cmp	r3, #4
 8000700:	ddba      	ble.n	8000678 <FIRFilter_Update+0x94>
	}
	fir->output = fir->output >> 7;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2216      	movs	r2, #22
 8000706:	5e9b      	ldrsh	r3, [r3, r2]
 8000708:	11db      	asrs	r3, r3, #7
 800070a:	b21a      	sxth	r2, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	82da      	strh	r2, [r3, #22]

	//Return filter output
	return fir->output;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	2216      	movs	r2, #22
 8000714:	5e9b      	ldrsh	r3, [r3, r2]
}
 8000716:	0018      	movs	r0, r3
 8000718:	46bd      	mov	sp, r7
 800071a:	b005      	add	sp, #20
 800071c:	bd90      	pop	{r4, r7, pc}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	20000000 	.word	0x20000000

08000724 <PID_Init>:
#include "PI.h"

void PID_Init(PIDREG3 *pid) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	/** Initial PID Temperature values */
	pid->Up			= 0;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2200      	movs	r2, #0
 8000730:	811a      	strh	r2, [r3, #8]
	pid->Ui			= 0;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2200      	movs	r2, #0
 8000736:	815a      	strh	r2, [r3, #10]
	pid->Ud			= 0;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2200      	movs	r2, #0
 800073c:	819a      	strh	r2, [r3, #12]
	pid->OutPreSat	= 0;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	2200      	movs	r2, #0
 8000742:	81da      	strh	r2, [r3, #14]
	pid->Out		= 0;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2200      	movs	r2, #0
 8000748:	829a      	strh	r2, [r3, #20]
	pid->SatErr		= 0;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2200      	movs	r2, #0
 800074e:	82da      	strh	r2, [r3, #22]
	pid->Up1		= 0;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2200      	movs	r2, #0
 8000754:	83da      	strh	r2, [r3, #30]
	pid->Kp			= 1;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	2201      	movs	r2, #1
 800075a:	80da      	strh	r2, [r3, #6]
	pid->Ki			= 1;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	2201      	movs	r2, #1
 8000760:	831a      	strh	r2, [r3, #24]
	pid->Kc			= 1;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2201      	movs	r2, #1
 8000766:	835a      	strh	r2, [r3, #26]
	pid->Kd			= 0;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	2200      	movs	r2, #0
 800076c:	839a      	strh	r2, [r3, #28]
	pid->OutMax		= 1520;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	22be      	movs	r2, #190	; 0xbe
 8000772:	00d2      	lsls	r2, r2, #3
 8000774:	821a      	strh	r2, [r3, #16]
	pid->OutMin		= 1;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2201      	movs	r2, #1
 800077a:	825a      	strh	r2, [r3, #18]
}
 800077c:	46c0      	nop			; (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	b002      	add	sp, #8
 8000782:	bd80      	pop	{r7, pc}

08000784 <PID_Update>:
//	pid->Out = _IQsat(pid->OutPreSat, pid->OutMax, pid->OutMin);
//	pid->SatErr = pid->Out - pid->OutPreSat;
//	return pid->Out;
//}

int16_t PID_Update(PIDREG3 *pid) {																					\
 8000784:	b590      	push	{r4, r7, lr}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	pid->Err = pid->Ref - pid->Fdb; 									/* Compute the error */						\
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2200      	movs	r2, #0
 8000790:	5e9b      	ldrsh	r3, [r3, r2]
 8000792:	b29a      	uxth	r2, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2102      	movs	r1, #2
 8000798:	5e5b      	ldrsh	r3, [r3, r1]
 800079a:	b29b      	uxth	r3, r3
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	b29b      	uxth	r3, r3
 80007a0:	b21a      	sxth	r2, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	809a      	strh	r2, [r3, #4]
	pid->Up= (pid->Kp*pid->Err);										/* Compute the proportional output */		\
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2206      	movs	r2, #6
 80007aa:	5e9b      	ldrsh	r3, [r3, r2]
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	2104      	movs	r1, #4
 80007b2:	5e52      	ldrsh	r2, [r2, r1]
 80007b4:	b292      	uxth	r2, r2
 80007b6:	4353      	muls	r3, r2
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	b21a      	sxth	r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	811a      	strh	r2, [r3, #8]
	pid->Ui= pid->Ui + (pid->Ki*pid->Up) + (pid->Kc*pid->SatErr);				/* Compute the integral output */			\
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	220a      	movs	r2, #10
 80007c4:	5e9b      	ldrsh	r3, [r3, r2]
 80007c6:	b29a      	uxth	r2, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	211a      	movs	r1, #26
 80007cc:	5e5b      	ldrsh	r3, [r3, r1]
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	6879      	ldr	r1, [r7, #4]
 80007d2:	2016      	movs	r0, #22
 80007d4:	5e09      	ldrsh	r1, [r1, r0]
 80007d6:	b289      	uxth	r1, r1
 80007d8:	434b      	muls	r3, r1
 80007da:	b299      	uxth	r1, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2018      	movs	r0, #24
 80007e0:	5e1b      	ldrsh	r3, [r3, r0]
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	2408      	movs	r4, #8
 80007e8:	5f00      	ldrsh	r0, [r0, r4]
 80007ea:	b280      	uxth	r0, r0
 80007ec:	4343      	muls	r3, r0
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	18cb      	adds	r3, r1, r3
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	18d3      	adds	r3, r2, r3
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	b21a      	sxth	r2, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	815a      	strh	r2, [r3, #10]
	pid->OutPreSat= pid->Up + pid->Ui;								/* Compute the pre-saturated output */		\
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	2208      	movs	r2, #8
 8000802:	5e9b      	ldrsh	r3, [r3, r2]
 8000804:	b29a      	uxth	r2, r3
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	210a      	movs	r1, #10
 800080a:	5e5b      	ldrsh	r3, [r3, r1]
 800080c:	b29b      	uxth	r3, r3
 800080e:	18d3      	adds	r3, r2, r3
 8000810:	b29b      	uxth	r3, r3
 8000812:	b21a      	sxth	r2, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	81da      	strh	r2, [r3, #14]
	pid->Out = _IQsat(pid->OutPreSat, pid->OutMax, pid->OutMin);		/* Saturate the output */					\
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2112      	movs	r1, #18
 800081c:	5e59      	ldrsh	r1, [r3, r1]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2210      	movs	r2, #16
 8000822:	5e9a      	ldrsh	r2, [r3, r2]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	200e      	movs	r0, #14
 8000828:	5e1b      	ldrsh	r3, [r3, r0]
 800082a:	1c1c      	adds	r4, r3, #0
 800082c:	1c10      	adds	r0, r2, #0
 800082e:	b202      	sxth	r2, r0
 8000830:	b223      	sxth	r3, r4
 8000832:	429a      	cmp	r2, r3
 8000834:	dd00      	ble.n	8000838 <PID_Update+0xb4>
 8000836:	1c20      	adds	r0, r4, #0
 8000838:	b203      	sxth	r3, r0
 800083a:	1c18      	adds	r0, r3, #0
 800083c:	b20a      	sxth	r2, r1
 800083e:	b203      	sxth	r3, r0
 8000840:	429a      	cmp	r2, r3
 8000842:	da00      	bge.n	8000846 <PID_Update+0xc2>
 8000844:	1c01      	adds	r1, r0, #0
 8000846:	b20a      	sxth	r2, r1
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	829a      	strh	r2, [r3, #20]
	pid->SatErr = pid->Out - pid->OutPreSat;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2214      	movs	r2, #20
 8000850:	5e9b      	ldrsh	r3, [r3, r2]
 8000852:	b29a      	uxth	r2, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	210e      	movs	r1, #14
 8000858:	5e5b      	ldrsh	r3, [r3, r1]
 800085a:	b29b      	uxth	r3, r3
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	b29b      	uxth	r3, r3
 8000860:	b21a      	sxth	r2, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	82da      	strh	r2, [r3, #22]
	return pid->Out;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2214      	movs	r2, #20
 800086a:	5e9b      	ldrsh	r3, [r3, r2]
}
 800086c:	0018      	movs	r0, r3
 800086e:	46bd      	mov	sp, r7
 8000870:	b003      	add	sp, #12
 8000872:	bd90      	pop	{r4, r7, pc}

08000874 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800087a:	f001 fa6d 	bl	8001d58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800087e:	f000 f99d 	bl	8000bbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000882:	f000 fc0f 	bl	80010a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000886:	f000 fa63 	bl	8000d50 <MX_I2C1_Init>
  MX_I2C2_Init();
 800088a:	f000 faa1 	bl	8000dd0 <MX_I2C2_Init>
  MX_ADC1_Init();
 800088e:	f000 f9f1 	bl	8000c74 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000892:	f000 fb87 	bl	8000fa4 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000896:	f000 fadb 	bl	8000e50 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //INITS
  ssd1306_Init();
 800089a:	f001 f821 	bl	80018e0 <ssd1306_Init>
  FIRFilter_Init(&fir);
 800089e:	4bae      	ldr	r3, [pc, #696]	; (8000b58 <main+0x2e4>)
 80008a0:	0018      	movs	r0, r3
 80008a2:	f7ff fe75 	bl	8000590 <FIRFilter_Init>
  PID_Init(&PI_temp);
 80008a6:	4bad      	ldr	r3, [pc, #692]	; (8000b5c <main+0x2e8>)
 80008a8:	0018      	movs	r0, r3
 80008aa:	f7ff ff3b 	bl	8000724 <PID_Init>

  //ACD calibration and trigger
  while(HAL_ADCEx_Calibration_Start(&hadc1) != HAL_OK);
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	4bab      	ldr	r3, [pc, #684]	; (8000b60 <main+0x2ec>)
 80008b2:	0018      	movs	r0, r3
 80008b4:	f002 faa4 	bl	8002e00 <HAL_ADCEx_Calibration_Start>
 80008b8:	1e03      	subs	r3, r0, #0
 80008ba:	d1f9      	bne.n	80008b0 <main+0x3c>
  HAL_ADC_Start_IT(&hadc1);
 80008bc:	4ba8      	ldr	r3, [pc, #672]	; (8000b60 <main+0x2ec>)
 80008be:	0018      	movs	r0, r3
 80008c0:	f001 fdb6 	bl	8002430 <HAL_ADC_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80008c4:	4ba7      	ldr	r3, [pc, #668]	; (8000b64 <main+0x2f0>)
 80008c6:	2104      	movs	r1, #4
 80008c8:	0018      	movs	r0, r3
 80008ca:	f004 fbb3 	bl	8005034 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //GUI
	  switch(state){
 80008ce:	4ba6      	ldr	r3, [pc, #664]	; (8000b68 <main+0x2f4>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	5e9b      	ldrsh	r3, [r3, r2]
 80008d4:	2b1f      	cmp	r3, #31
 80008d6:	d900      	bls.n	80008da <main+0x66>
 80008d8:	e089      	b.n	80009ee <main+0x17a>
 80008da:	009a      	lsls	r2, r3, #2
 80008dc:	4ba3      	ldr	r3, [pc, #652]	; (8000b6c <main+0x2f8>)
 80008de:	18d3      	adds	r3, r2, r3
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	469f      	mov	pc, r3
	  case 0:
		  ssd1306_WriteScreen(" HEATER ", Font_11x18);
 80008e4:	4ba2      	ldr	r3, [pc, #648]	; (8000b70 <main+0x2fc>)
 80008e6:	48a3      	ldr	r0, [pc, #652]	; (8000b74 <main+0x300>)
 80008e8:	6819      	ldr	r1, [r3, #0]
 80008ea:	685a      	ldr	r2, [r3, #4]
 80008ec:	f000 fc68 	bl	80011c0 <ssd1306_WriteScreen>
		  break;
 80008f0:	e07e      	b.n	80009f0 <main+0x17c>
	  case 1:
		  ssd1306_WriteScreen("START", Font_11x18);
 80008f2:	4b9f      	ldr	r3, [pc, #636]	; (8000b70 <main+0x2fc>)
 80008f4:	48a0      	ldr	r0, [pc, #640]	; (8000b78 <main+0x304>)
 80008f6:	6819      	ldr	r1, [r3, #0]
 80008f8:	685a      	ldr	r2, [r3, #4]
 80008fa:	f000 fc61 	bl	80011c0 <ssd1306_WriteScreen>
		  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80008fe:	4b9f      	ldr	r3, [pc, #636]	; (8000b7c <main+0x308>)
 8000900:	2104      	movs	r1, #4
 8000902:	0018      	movs	r0, r3
 8000904:	f004 fc6e 	bl	80051e4 <HAL_TIM_PWM_Stop>
		  break;
 8000908:	e072      	b.n	80009f0 <main+0x17c>
	  case 11:
		  //Start PWM
		  TIM3->CCR2 = (TIM_CCR2_CCR2 & (duty - 1));
 800090a:	4b9d      	ldr	r3, [pc, #628]	; (8000b80 <main+0x30c>)
 800090c:	2200      	movs	r2, #0
 800090e:	5e9b      	ldrsh	r3, [r3, r2]
 8000910:	3b01      	subs	r3, #1
 8000912:	001a      	movs	r2, r3
 8000914:	4b9b      	ldr	r3, [pc, #620]	; (8000b84 <main+0x310>)
 8000916:	0412      	lsls	r2, r2, #16
 8000918:	0c12      	lsrs	r2, r2, #16
 800091a:	639a      	str	r2, [r3, #56]	; 0x38
		  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800091c:	4b97      	ldr	r3, [pc, #604]	; (8000b7c <main+0x308>)
 800091e:	2104      	movs	r1, #4
 8000920:	0018      	movs	r0, r3
 8000922:	f004 fb87 	bl	8005034 <HAL_TIM_PWM_Start>
		  //Refresh Screen
		  sprintf(string, "%5d~C", temp);
 8000926:	4b98      	ldr	r3, [pc, #608]	; (8000b88 <main+0x314>)
 8000928:	2200      	movs	r2, #0
 800092a:	5e9b      	ldrsh	r3, [r3, r2]
 800092c:	001a      	movs	r2, r3
 800092e:	4997      	ldr	r1, [pc, #604]	; (8000b8c <main+0x318>)
 8000930:	4b97      	ldr	r3, [pc, #604]	; (8000b90 <main+0x31c>)
 8000932:	0018      	movs	r0, r3
 8000934:	f005 fd28 	bl	8006388 <siprintf>
		  ssd1306_WriteScreen(string, Font_11x18);
 8000938:	4b8d      	ldr	r3, [pc, #564]	; (8000b70 <main+0x2fc>)
 800093a:	4895      	ldr	r0, [pc, #596]	; (8000b90 <main+0x31c>)
 800093c:	6819      	ldr	r1, [r3, #0]
 800093e:	685a      	ldr	r2, [r3, #4]
 8000940:	f000 fc3e 	bl	80011c0 <ssd1306_WriteScreen>

		  break;
 8000944:	e054      	b.n	80009f0 <main+0x17c>
	  case 2:
		  ssd1306_WriteScreen("CONFIG", Font_11x18);
 8000946:	4b8a      	ldr	r3, [pc, #552]	; (8000b70 <main+0x2fc>)
 8000948:	4892      	ldr	r0, [pc, #584]	; (8000b94 <main+0x320>)
 800094a:	6819      	ldr	r1, [r3, #0]
 800094c:	685a      	ldr	r2, [r3, #4]
 800094e:	f000 fc37 	bl	80011c0 <ssd1306_WriteScreen>
		  break;
 8000952:	e04d      	b.n	80009f0 <main+0x17c>
	  case 21:
		  sprintf(string, "%5d~C", ref_Temp);
 8000954:	4b90      	ldr	r3, [pc, #576]	; (8000b98 <main+0x324>)
 8000956:	2200      	movs	r2, #0
 8000958:	5e9b      	ldrsh	r3, [r3, r2]
 800095a:	001a      	movs	r2, r3
 800095c:	498b      	ldr	r1, [pc, #556]	; (8000b8c <main+0x318>)
 800095e:	4b8c      	ldr	r3, [pc, #560]	; (8000b90 <main+0x31c>)
 8000960:	0018      	movs	r0, r3
 8000962:	f005 fd11 	bl	8006388 <siprintf>
		  ssd1306_WriteScreen(string, Font_11x18);
 8000966:	4b82      	ldr	r3, [pc, #520]	; (8000b70 <main+0x2fc>)
 8000968:	4889      	ldr	r0, [pc, #548]	; (8000b90 <main+0x31c>)
 800096a:	6819      	ldr	r1, [r3, #0]
 800096c:	685a      	ldr	r2, [r3, #4]
 800096e:	f000 fc27 	bl	80011c0 <ssd1306_WriteScreen>
		  break;
 8000972:	e03d      	b.n	80009f0 <main+0x17c>
	  case 3:
		  ssd1306_WriteScreen("VIEW", Font_11x18);
 8000974:	4b7e      	ldr	r3, [pc, #504]	; (8000b70 <main+0x2fc>)
 8000976:	4889      	ldr	r0, [pc, #548]	; (8000b9c <main+0x328>)
 8000978:	6819      	ldr	r1, [r3, #0]
 800097a:	685a      	ldr	r2, [r3, #4]
 800097c:	f000 fc20 	bl	80011c0 <ssd1306_WriteScreen>
		  break;
 8000980:	e036      	b.n	80009f0 <main+0x17c>
	  case 31:
		  HAL_I2C_Mem_Read(&hi2c1, I2C_PD_ADDRESS, I2C_PD_REG_VBUS, 2, tempVoltage, 2, HAL_MAX_DELAY);
 8000982:	2310      	movs	r3, #16
 8000984:	b299      	uxth	r1, r3
 8000986:	23d1      	movs	r3, #209	; 0xd1
 8000988:	011b      	lsls	r3, r3, #4
 800098a:	b29a      	uxth	r2, r3
 800098c:	4884      	ldr	r0, [pc, #528]	; (8000ba0 <main+0x32c>)
 800098e:	2301      	movs	r3, #1
 8000990:	425b      	negs	r3, r3
 8000992:	9302      	str	r3, [sp, #8]
 8000994:	2302      	movs	r3, #2
 8000996:	9301      	str	r3, [sp, #4]
 8000998:	4b82      	ldr	r3, [pc, #520]	; (8000ba4 <main+0x330>)
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	2302      	movs	r3, #2
 800099e:	f002 ff4d 	bl	800383c <HAL_I2C_Mem_Read>
		  voltage = ((tempVoltage[1]<<8)+tempVoltage[0]) * (float)0.1;
 80009a2:	4b80      	ldr	r3, [pc, #512]	; (8000ba4 <main+0x330>)
 80009a4:	785b      	ldrb	r3, [r3, #1]
 80009a6:	021b      	lsls	r3, r3, #8
 80009a8:	4a7e      	ldr	r2, [pc, #504]	; (8000ba4 <main+0x330>)
 80009aa:	7812      	ldrb	r2, [r2, #0]
 80009ac:	189b      	adds	r3, r3, r2
 80009ae:	0018      	movs	r0, r3
 80009b0:	f7ff fd82 	bl	80004b8 <__aeabi_i2f>
 80009b4:	1c03      	adds	r3, r0, #0
 80009b6:	497c      	ldr	r1, [pc, #496]	; (8000ba8 <main+0x334>)
 80009b8:	1c18      	adds	r0, r3, #0
 80009ba:	f7ff fc37 	bl	800022c <__aeabi_fmul>
 80009be:	1c03      	adds	r3, r0, #0
 80009c0:	1c18      	adds	r0, r3, #0
 80009c2:	f7ff fd59 	bl	8000478 <__aeabi_f2iz>
 80009c6:	0003      	movs	r3, r0
 80009c8:	b21a      	sxth	r2, r3
 80009ca:	4b78      	ldr	r3, [pc, #480]	; (8000bac <main+0x338>)
 80009cc:	801a      	strh	r2, [r3, #0]

		  sprintf(string, "%dV", voltage);
 80009ce:	4b77      	ldr	r3, [pc, #476]	; (8000bac <main+0x338>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	5e9b      	ldrsh	r3, [r3, r2]
 80009d4:	001a      	movs	r2, r3
 80009d6:	4976      	ldr	r1, [pc, #472]	; (8000bb0 <main+0x33c>)
 80009d8:	4b6d      	ldr	r3, [pc, #436]	; (8000b90 <main+0x31c>)
 80009da:	0018      	movs	r0, r3
 80009dc:	f005 fcd4 	bl	8006388 <siprintf>
		  ssd1306_WriteScreen(string, Font_11x18);
 80009e0:	4b63      	ldr	r3, [pc, #396]	; (8000b70 <main+0x2fc>)
 80009e2:	486b      	ldr	r0, [pc, #428]	; (8000b90 <main+0x31c>)
 80009e4:	6819      	ldr	r1, [r3, #0]
 80009e6:	685a      	ldr	r2, [r3, #4]
 80009e8:	f000 fbea 	bl	80011c0 <ssd1306_WriteScreen>
		  break;
 80009ec:	e000      	b.n	80009f0 <main+0x17c>
	  default:
		  break;
 80009ee:	46c0      	nop			; (mov r8, r8)
	  }

	  //NEXT STATE
	  if(btn != BTN_NONE){
 80009f0:	4b70      	ldr	r3, [pc, #448]	; (8000bb4 <main+0x340>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b03      	cmp	r3, #3
 80009f6:	d100      	bne.n	80009fa <main+0x186>
 80009f8:	e769      	b.n	80008ce <main+0x5a>
		  switch (state){
 80009fa:	4b5b      	ldr	r3, [pc, #364]	; (8000b68 <main+0x2f4>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	5e9b      	ldrsh	r3, [r3, r2]
 8000a00:	2b1f      	cmp	r3, #31
 8000a02:	d900      	bls.n	8000a06 <main+0x192>
 8000a04:	e0a0      	b.n	8000b48 <main+0x2d4>
 8000a06:	009a      	lsls	r2, r3, #2
 8000a08:	4b6b      	ldr	r3, [pc, #428]	; (8000bb8 <main+0x344>)
 8000a0a:	18d3      	adds	r3, r2, r3
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	469f      	mov	pc, r3
		  case 0:
			  state = 1;
 8000a10:	4b55      	ldr	r3, [pc, #340]	; (8000b68 <main+0x2f4>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	801a      	strh	r2, [r3, #0]
			  break;
 8000a16:	e09b      	b.n	8000b50 <main+0x2dc>
		  case 1:
			  if(btn == BTN_OK){
 8000a18:	4b66      	ldr	r3, [pc, #408]	; (8000bb4 <main+0x340>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d103      	bne.n	8000a28 <main+0x1b4>
				  state = 11;
 8000a20:	4b51      	ldr	r3, [pc, #324]	; (8000b68 <main+0x2f4>)
 8000a22:	220b      	movs	r2, #11
 8000a24:	801a      	strh	r2, [r3, #0]
			  } else if (btn == BTN_DOWN){
				  state = 3;
			  } else {
				  state = 0;
			  }
			  break;
 8000a26:	e093      	b.n	8000b50 <main+0x2dc>
			  } else if (btn == BTN_UP){
 8000a28:	4b62      	ldr	r3, [pc, #392]	; (8000bb4 <main+0x340>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d103      	bne.n	8000a38 <main+0x1c4>
				  state = 2;
 8000a30:	4b4d      	ldr	r3, [pc, #308]	; (8000b68 <main+0x2f4>)
 8000a32:	2202      	movs	r2, #2
 8000a34:	801a      	strh	r2, [r3, #0]
			  break;
 8000a36:	e08b      	b.n	8000b50 <main+0x2dc>
			  } else if (btn == BTN_DOWN){
 8000a38:	4b5e      	ldr	r3, [pc, #376]	; (8000bb4 <main+0x340>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b02      	cmp	r3, #2
 8000a3e:	d103      	bne.n	8000a48 <main+0x1d4>
				  state = 3;
 8000a40:	4b49      	ldr	r3, [pc, #292]	; (8000b68 <main+0x2f4>)
 8000a42:	2203      	movs	r2, #3
 8000a44:	801a      	strh	r2, [r3, #0]
			  break;
 8000a46:	e083      	b.n	8000b50 <main+0x2dc>
				  state = 0;
 8000a48:	4b47      	ldr	r3, [pc, #284]	; (8000b68 <main+0x2f4>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	801a      	strh	r2, [r3, #0]
			  break;
 8000a4e:	e07f      	b.n	8000b50 <main+0x2dc>
		  case 2:
			  if(btn == BTN_OK){
 8000a50:	4b58      	ldr	r3, [pc, #352]	; (8000bb4 <main+0x340>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d103      	bne.n	8000a60 <main+0x1ec>
				  state = 21;
 8000a58:	4b43      	ldr	r3, [pc, #268]	; (8000b68 <main+0x2f4>)
 8000a5a:	2215      	movs	r2, #21
 8000a5c:	801a      	strh	r2, [r3, #0]
			  } else if (btn == BTN_DOWN){
				  state = 1;
			  } else {
				  state = 0;
			  }
			  break;
 8000a5e:	e077      	b.n	8000b50 <main+0x2dc>
			  } else if (btn == BTN_UP){
 8000a60:	4b54      	ldr	r3, [pc, #336]	; (8000bb4 <main+0x340>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d103      	bne.n	8000a70 <main+0x1fc>
				  state = 3;
 8000a68:	4b3f      	ldr	r3, [pc, #252]	; (8000b68 <main+0x2f4>)
 8000a6a:	2203      	movs	r2, #3
 8000a6c:	801a      	strh	r2, [r3, #0]
			  break;
 8000a6e:	e06f      	b.n	8000b50 <main+0x2dc>
			  } else if (btn == BTN_DOWN){
 8000a70:	4b50      	ldr	r3, [pc, #320]	; (8000bb4 <main+0x340>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b02      	cmp	r3, #2
 8000a76:	d103      	bne.n	8000a80 <main+0x20c>
				  state = 1;
 8000a78:	4b3b      	ldr	r3, [pc, #236]	; (8000b68 <main+0x2f4>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	801a      	strh	r2, [r3, #0]
			  break;
 8000a7e:	e067      	b.n	8000b50 <main+0x2dc>
				  state = 0;
 8000a80:	4b39      	ldr	r3, [pc, #228]	; (8000b68 <main+0x2f4>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	801a      	strh	r2, [r3, #0]
			  break;
 8000a86:	e063      	b.n	8000b50 <main+0x2dc>
		  case 21:
			  if(btn == BTN_OK){
 8000a88:	4b4a      	ldr	r3, [pc, #296]	; (8000bb4 <main+0x340>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d103      	bne.n	8000a98 <main+0x224>
				  state = 2;
 8000a90:	4b35      	ldr	r3, [pc, #212]	; (8000b68 <main+0x2f4>)
 8000a92:	2202      	movs	r2, #2
 8000a94:	801a      	strh	r2, [r3, #0]
			  } else if (btn == BTN_DOWN){
				  ref_Temp--;
			  } else {
				  state = 0;
			  }
			  break;
 8000a96:	e05b      	b.n	8000b50 <main+0x2dc>
			  } else if (btn == BTN_UP){
 8000a98:	4b46      	ldr	r3, [pc, #280]	; (8000bb4 <main+0x340>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d109      	bne.n	8000ab4 <main+0x240>
				  ref_Temp++;
 8000aa0:	4b3d      	ldr	r3, [pc, #244]	; (8000b98 <main+0x324>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	5e9b      	ldrsh	r3, [r3, r2]
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	b29b      	uxth	r3, r3
 8000aac:	b21a      	sxth	r2, r3
 8000aae:	4b3a      	ldr	r3, [pc, #232]	; (8000b98 <main+0x324>)
 8000ab0:	801a      	strh	r2, [r3, #0]
			  break;
 8000ab2:	e04d      	b.n	8000b50 <main+0x2dc>
			  } else if (btn == BTN_DOWN){
 8000ab4:	4b3f      	ldr	r3, [pc, #252]	; (8000bb4 <main+0x340>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b02      	cmp	r3, #2
 8000aba:	d109      	bne.n	8000ad0 <main+0x25c>
				  ref_Temp--;
 8000abc:	4b36      	ldr	r3, [pc, #216]	; (8000b98 <main+0x324>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	5e9b      	ldrsh	r3, [r3, r2]
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	3b01      	subs	r3, #1
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	b21a      	sxth	r2, r3
 8000aca:	4b33      	ldr	r3, [pc, #204]	; (8000b98 <main+0x324>)
 8000acc:	801a      	strh	r2, [r3, #0]
			  break;
 8000ace:	e03f      	b.n	8000b50 <main+0x2dc>
				  state = 0;
 8000ad0:	4b25      	ldr	r3, [pc, #148]	; (8000b68 <main+0x2f4>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	801a      	strh	r2, [r3, #0]
			  break;
 8000ad6:	e03b      	b.n	8000b50 <main+0x2dc>
		  case 3:
			  if(btn == BTN_OK){
 8000ad8:	4b36      	ldr	r3, [pc, #216]	; (8000bb4 <main+0x340>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d103      	bne.n	8000ae8 <main+0x274>
				  state = 31;
 8000ae0:	4b21      	ldr	r3, [pc, #132]	; (8000b68 <main+0x2f4>)
 8000ae2:	221f      	movs	r2, #31
 8000ae4:	801a      	strh	r2, [r3, #0]
			  } else if (btn == BTN_DOWN){
				  state = 2;
			  } else {
				  state = 0;
			  }
			  break;
 8000ae6:	e033      	b.n	8000b50 <main+0x2dc>
			  } else if (btn == BTN_UP){
 8000ae8:	4b32      	ldr	r3, [pc, #200]	; (8000bb4 <main+0x340>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d103      	bne.n	8000af8 <main+0x284>
				  state = 1;
 8000af0:	4b1d      	ldr	r3, [pc, #116]	; (8000b68 <main+0x2f4>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	801a      	strh	r2, [r3, #0]
			  break;
 8000af6:	e02b      	b.n	8000b50 <main+0x2dc>
			  } else if (btn == BTN_DOWN){
 8000af8:	4b2e      	ldr	r3, [pc, #184]	; (8000bb4 <main+0x340>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b02      	cmp	r3, #2
 8000afe:	d103      	bne.n	8000b08 <main+0x294>
				  state = 2;
 8000b00:	4b19      	ldr	r3, [pc, #100]	; (8000b68 <main+0x2f4>)
 8000b02:	2202      	movs	r2, #2
 8000b04:	801a      	strh	r2, [r3, #0]
			  break;
 8000b06:	e023      	b.n	8000b50 <main+0x2dc>
				  state = 0;
 8000b08:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <main+0x2f4>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	801a      	strh	r2, [r3, #0]
			  break;
 8000b0e:	e01f      	b.n	8000b50 <main+0x2dc>
		  case 31:
			  if(btn == BTN_OK){
 8000b10:	4b28      	ldr	r3, [pc, #160]	; (8000bb4 <main+0x340>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d103      	bne.n	8000b20 <main+0x2ac>
				  state = 3;
 8000b18:	4b13      	ldr	r3, [pc, #76]	; (8000b68 <main+0x2f4>)
 8000b1a:	2203      	movs	r2, #3
 8000b1c:	801a      	strh	r2, [r3, #0]
			  } else if (btn == BTN_DOWN){
				  state = 3;
			  } else {
				  state = 0;
			  }
			  break;
 8000b1e:	e017      	b.n	8000b50 <main+0x2dc>
			  } else if (btn == BTN_UP){
 8000b20:	4b24      	ldr	r3, [pc, #144]	; (8000bb4 <main+0x340>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d103      	bne.n	8000b30 <main+0x2bc>
				  state = 3;
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <main+0x2f4>)
 8000b2a:	2203      	movs	r2, #3
 8000b2c:	801a      	strh	r2, [r3, #0]
			  break;
 8000b2e:	e00f      	b.n	8000b50 <main+0x2dc>
			  } else if (btn == BTN_DOWN){
 8000b30:	4b20      	ldr	r3, [pc, #128]	; (8000bb4 <main+0x340>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b02      	cmp	r3, #2
 8000b36:	d103      	bne.n	8000b40 <main+0x2cc>
				  state = 3;
 8000b38:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <main+0x2f4>)
 8000b3a:	2203      	movs	r2, #3
 8000b3c:	801a      	strh	r2, [r3, #0]
			  break;
 8000b3e:	e007      	b.n	8000b50 <main+0x2dc>
				  state = 0;
 8000b40:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <main+0x2f4>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	801a      	strh	r2, [r3, #0]
			  break;
 8000b46:	e003      	b.n	8000b50 <main+0x2dc>
		  default:
			  state = 0;
 8000b48:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <main+0x2f4>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	801a      	strh	r2, [r3, #0]
			  break;
 8000b4e:	46c0      	nop			; (mov r8, r8)
		  }

		  btn = BTN_NONE;
 8000b50:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <main+0x340>)
 8000b52:	2203      	movs	r2, #3
 8000b54:	701a      	strb	r2, [r3, #0]
	  switch(state){
 8000b56:	e6ba      	b.n	80008ce <main+0x5a>
 8000b58:	20000250 	.word	0x20000250
 8000b5c:	20000268 	.word	0x20000268
 8000b60:	200000ac 	.word	0x200000ac
 8000b64:	200001b8 	.word	0x200001b8
 8000b68:	20000288 	.word	0x20000288
 8000b6c:	08006cd0 	.word	0x08006cd0
 8000b70:	2000001c 	.word	0x2000001c
 8000b74:	08006c60 	.word	0x08006c60
 8000b78:	08006c6c 	.word	0x08006c6c
 8000b7c:	20000204 	.word	0x20000204
 8000b80:	2000028e 	.word	0x2000028e
 8000b84:	40000400 	.word	0x40000400
 8000b88:	20000290 	.word	0x20000290
 8000b8c:	08006c74 	.word	0x08006c74
 8000b90:	20000294 	.word	0x20000294
 8000b94:	08006c7c 	.word	0x08006c7c
 8000b98:	20000016 	.word	0x20000016
 8000b9c:	08006c84 	.word	0x08006c84
 8000ba0:	20000110 	.word	0x20000110
 8000ba4:	2000028c 	.word	0x2000028c
 8000ba8:	3dcccccd 	.word	0x3dcccccd
 8000bac:	2000028a 	.word	0x2000028a
 8000bb0:	08006c8c 	.word	0x08006c8c
 8000bb4:	20000014 	.word	0x20000014
 8000bb8:	08006d50 	.word	0x08006d50

08000bbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b093      	sub	sp, #76	; 0x4c
 8000bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc2:	2414      	movs	r4, #20
 8000bc4:	193b      	adds	r3, r7, r4
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	2334      	movs	r3, #52	; 0x34
 8000bca:	001a      	movs	r2, r3
 8000bcc:	2100      	movs	r1, #0
 8000bce:	f005 fbd2 	bl	8006376 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd2:	1d3b      	adds	r3, r7, #4
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	2310      	movs	r3, #16
 8000bd8:	001a      	movs	r2, r3
 8000bda:	2100      	movs	r1, #0
 8000bdc:	f005 fbcb 	bl	8006376 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000be0:	2380      	movs	r3, #128	; 0x80
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	0018      	movs	r0, r3
 8000be6:	f003 fad1 	bl	800418c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bea:	193b      	adds	r3, r7, r4
 8000bec:	2202      	movs	r2, #2
 8000bee:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bf0:	193b      	adds	r3, r7, r4
 8000bf2:	2280      	movs	r2, #128	; 0x80
 8000bf4:	0052      	lsls	r2, r2, #1
 8000bf6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000bf8:	0021      	movs	r1, r4
 8000bfa:	187b      	adds	r3, r7, r1
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	2240      	movs	r2, #64	; 0x40
 8000c04:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c06:	187b      	adds	r3, r7, r1
 8000c08:	2202      	movs	r2, #2
 8000c0a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	2202      	movs	r2, #2
 8000c10:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000c12:	187b      	adds	r3, r7, r1
 8000c14:	2200      	movs	r2, #0
 8000c16:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	2208      	movs	r2, #8
 8000c1c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	2280      	movs	r2, #128	; 0x80
 8000c22:	0292      	lsls	r2, r2, #10
 8000c24:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c26:	187b      	adds	r3, r7, r1
 8000c28:	2280      	movs	r2, #128	; 0x80
 8000c2a:	0592      	lsls	r2, r2, #22
 8000c2c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c2e:	187b      	adds	r3, r7, r1
 8000c30:	0018      	movs	r0, r3
 8000c32:	f003 faf7 	bl	8004224 <HAL_RCC_OscConfig>
 8000c36:	1e03      	subs	r3, r0, #0
 8000c38:	d001      	beq.n	8000c3e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c3a:	f000 fb5d 	bl	80012f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	2207      	movs	r2, #7
 8000c42:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	2202      	movs	r2, #2
 8000c48:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	2280      	movs	r2, #128	; 0x80
 8000c4e:	0112      	lsls	r2, r2, #4
 8000c50:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	2200      	movs	r2, #0
 8000c56:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f003 fdf1 	bl	8004844 <HAL_RCC_ClockConfig>
 8000c62:	1e03      	subs	r3, r0, #0
 8000c64:	d001      	beq.n	8000c6a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000c66:	f000 fb47 	bl	80012f8 <Error_Handler>
  }
}
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	b013      	add	sp, #76	; 0x4c
 8000c70:	bd90      	pop	{r4, r7, pc}
	...

08000c74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	230c      	movs	r3, #12
 8000c80:	001a      	movs	r2, r3
 8000c82:	2100      	movs	r1, #0
 8000c84:	f005 fb77 	bl	8006376 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c88:	4b2e      	ldr	r3, [pc, #184]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000c8a:	4a2f      	ldr	r2, [pc, #188]	; (8000d48 <MX_ADC1_Init+0xd4>)
 8000c8c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c8e:	4b2d      	ldr	r3, [pc, #180]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000c90:	2280      	movs	r2, #128	; 0x80
 8000c92:	05d2      	lsls	r2, r2, #23
 8000c94:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c96:	4b2b      	ldr	r3, [pc, #172]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c9c:	4b29      	ldr	r3, [pc, #164]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ca2:	4b28      	ldr	r3, [pc, #160]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ca8:	4b26      	ldr	r3, [pc, #152]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000caa:	2204      	movs	r2, #4
 8000cac:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000cae:	4b25      	ldr	r3, [pc, #148]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000cb4:	4b23      	ldr	r3, [pc, #140]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cba:	4b22      	ldr	r3, [pc, #136]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000cc0:	4b20      	ldr	r3, [pc, #128]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cc6:	4b1f      	ldr	r3, [pc, #124]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000cc8:	2220      	movs	r2, #32
 8000cca:	2100      	movs	r1, #0
 8000ccc:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO2;
 8000cce:	4b1d      	ldr	r3, [pc, #116]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000cd0:	2280      	movs	r2, #128	; 0x80
 8000cd2:	00d2      	lsls	r2, r2, #3
 8000cd4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000cd6:	4b1b      	ldr	r3, [pc, #108]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000cd8:	2280      	movs	r2, #128	; 0x80
 8000cda:	00d2      	lsls	r2, r2, #3
 8000cdc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cde:	4b19      	ldr	r3, [pc, #100]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000ce0:	222c      	movs	r2, #44	; 0x2c
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ce6:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000cec:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000cf2:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000cf8:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000cfa:	223c      	movs	r2, #60	; 0x3c
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000d00:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d06:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f001 f9e9 	bl	80020e0 <HAL_ADC_Init>
 8000d0e:	1e03      	subs	r3, r0, #0
 8000d10:	d001      	beq.n	8000d16 <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
 8000d12:	f000 faf1 	bl	80012f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	4a0c      	ldr	r2, [pc, #48]	; (8000d4c <MX_ADC1_Init+0xd8>)
 8000d1a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	2200      	movs	r2, #0
 8000d20:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d28:	1d3a      	adds	r2, r7, #4
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <MX_ADC1_Init+0xd0>)
 8000d2c:	0011      	movs	r1, r2
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f001 fd2a 	bl	8002788 <HAL_ADC_ConfigChannel>
 8000d34:	1e03      	subs	r3, r0, #0
 8000d36:	d001      	beq.n	8000d3c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000d38:	f000 fade 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d3c:	46c0      	nop			; (mov r8, r8)
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	b004      	add	sp, #16
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	200000ac 	.word	0x200000ac
 8000d48:	40012400 	.word	0x40012400
 8000d4c:	24000200 	.word	0x24000200

08000d50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d54:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d56:	4a1c      	ldr	r2, [pc, #112]	; (8000dc8 <MX_I2C1_Init+0x78>)
 8000d58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000d5a:	4b1a      	ldr	r3, [pc, #104]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d5c:	4a1b      	ldr	r2, [pc, #108]	; (8000dcc <MX_I2C1_Init+0x7c>)
 8000d5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 16;
 8000d60:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d62:	2210      	movs	r2, #16
 8000d64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d66:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d6c:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d72:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d7e:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f002 fb91 	bl	80034b4 <HAL_I2C_Init>
 8000d92:	1e03      	subs	r3, r0, #0
 8000d94:	d001      	beq.n	8000d9a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d96:	f000 faaf 	bl	80012f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d9a:	4b0a      	ldr	r3, [pc, #40]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f003 f95c 	bl	800405c <HAL_I2CEx_ConfigAnalogFilter>
 8000da4:	1e03      	subs	r3, r0, #0
 8000da6:	d001      	beq.n	8000dac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000da8:	f000 faa6 	bl	80012f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <MX_I2C1_Init+0x74>)
 8000dae:	2100      	movs	r1, #0
 8000db0:	0018      	movs	r0, r3
 8000db2:	f003 f99f 	bl	80040f4 <HAL_I2CEx_ConfigDigitalFilter>
 8000db6:	1e03      	subs	r3, r0, #0
 8000db8:	d001      	beq.n	8000dbe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dba:	f000 fa9d 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000110 	.word	0x20000110
 8000dc8:	40005400 	.word	0x40005400
 8000dcc:	00707cbb 	.word	0x00707cbb

08000dd0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000dd4:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <MX_I2C2_Init+0x74>)
 8000dd6:	4a1c      	ldr	r2, [pc, #112]	; (8000e48 <MX_I2C2_Init+0x78>)
 8000dd8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00300F38;
 8000dda:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <MX_I2C2_Init+0x74>)
 8000ddc:	4a1b      	ldr	r2, [pc, #108]	; (8000e4c <MX_I2C2_Init+0x7c>)
 8000dde:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000de0:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <MX_I2C2_Init+0x74>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000de6:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <MX_I2C2_Init+0x74>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dec:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <MX_I2C2_Init+0x74>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000df2:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <MX_I2C2_Init+0x74>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <MX_I2C2_Init+0x74>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <MX_I2C2_Init+0x74>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e04:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <MX_I2C2_Init+0x74>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <MX_I2C2_Init+0x74>)
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f002 fb51 	bl	80034b4 <HAL_I2C_Init>
 8000e12:	1e03      	subs	r3, r0, #0
 8000e14:	d001      	beq.n	8000e1a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000e16:	f000 fa6f 	bl	80012f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <MX_I2C2_Init+0x74>)
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	0018      	movs	r0, r3
 8000e20:	f003 f91c 	bl	800405c <HAL_I2CEx_ConfigAnalogFilter>
 8000e24:	1e03      	subs	r3, r0, #0
 8000e26:	d001      	beq.n	8000e2c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000e28:	f000 fa66 	bl	80012f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000e2c:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <MX_I2C2_Init+0x74>)
 8000e2e:	2100      	movs	r1, #0
 8000e30:	0018      	movs	r0, r3
 8000e32:	f003 f95f 	bl	80040f4 <HAL_I2CEx_ConfigDigitalFilter>
 8000e36:	1e03      	subs	r3, r0, #0
 8000e38:	d001      	beq.n	8000e3e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000e3a:	f000 fa5d 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000164 	.word	0x20000164
 8000e48:	40005800 	.word	0x40005800
 8000e4c:	00300f38 	.word	0x00300f38

08000e50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b098      	sub	sp, #96	; 0x60
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e56:	2354      	movs	r3, #84	; 0x54
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	230c      	movs	r3, #12
 8000e5e:	001a      	movs	r2, r3
 8000e60:	2100      	movs	r1, #0
 8000e62:	f005 fa88 	bl	8006376 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e66:	2338      	movs	r3, #56	; 0x38
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	231c      	movs	r3, #28
 8000e6e:	001a      	movs	r2, r3
 8000e70:	2100      	movs	r1, #0
 8000e72:	f005 fa80 	bl	8006376 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	0018      	movs	r0, r3
 8000e7a:	2334      	movs	r3, #52	; 0x34
 8000e7c:	001a      	movs	r2, r3
 8000e7e:	2100      	movs	r1, #0
 8000e80:	f005 fa79 	bl	8006376 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e84:	4b44      	ldr	r3, [pc, #272]	; (8000f98 <MX_TIM1_Init+0x148>)
 8000e86:	4a45      	ldr	r2, [pc, #276]	; (8000f9c <MX_TIM1_Init+0x14c>)
 8000e88:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 32;
 8000e8a:	4b43      	ldr	r3, [pc, #268]	; (8000f98 <MX_TIM1_Init+0x148>)
 8000e8c:	2220      	movs	r2, #32
 8000e8e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e90:	4b41      	ldr	r3, [pc, #260]	; (8000f98 <MX_TIM1_Init+0x148>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000e96:	4b40      	ldr	r3, [pc, #256]	; (8000f98 <MX_TIM1_Init+0x148>)
 8000e98:	4a41      	ldr	r2, [pc, #260]	; (8000fa0 <MX_TIM1_Init+0x150>)
 8000e9a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9c:	4b3e      	ldr	r3, [pc, #248]	; (8000f98 <MX_TIM1_Init+0x148>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ea2:	4b3d      	ldr	r3, [pc, #244]	; (8000f98 <MX_TIM1_Init+0x148>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea8:	4b3b      	ldr	r3, [pc, #236]	; (8000f98 <MX_TIM1_Init+0x148>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000eae:	4b3a      	ldr	r3, [pc, #232]	; (8000f98 <MX_TIM1_Init+0x148>)
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	f004 f867 	bl	8004f84 <HAL_TIM_PWM_Init>
 8000eb6:	1e03      	subs	r3, r0, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000eba:	f000 fa1d 	bl	80012f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ebe:	2154      	movs	r1, #84	; 0x54
 8000ec0:	187b      	adds	r3, r7, r1
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8000ec6:	187b      	adds	r3, r7, r1
 8000ec8:	2280      	movs	r2, #128	; 0x80
 8000eca:	0392      	lsls	r2, r2, #14
 8000ecc:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ece:	187b      	adds	r3, r7, r1
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ed4:	187a      	adds	r2, r7, r1
 8000ed6:	4b30      	ldr	r3, [pc, #192]	; (8000f98 <MX_TIM1_Init+0x148>)
 8000ed8:	0011      	movs	r1, r2
 8000eda:	0018      	movs	r0, r3
 8000edc:	f005 f8f8 	bl	80060d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee0:	1e03      	subs	r3, r0, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000ee4:	f000 fa08 	bl	80012f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ee8:	2138      	movs	r1, #56	; 0x38
 8000eea:	187b      	adds	r3, r7, r1
 8000eec:	2260      	movs	r2, #96	; 0x60
 8000eee:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000ef0:	187b      	adds	r3, r7, r1
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ef6:	187b      	adds	r3, r7, r1
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000efc:	187b      	adds	r3, r7, r1
 8000efe:	2200      	movs	r2, #0
 8000f00:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f02:	187b      	adds	r3, r7, r1
 8000f04:	2200      	movs	r2, #0
 8000f06:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f08:	187b      	adds	r3, r7, r1
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f0e:	187b      	adds	r3, r7, r1
 8000f10:	2200      	movs	r2, #0
 8000f12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f14:	1879      	adds	r1, r7, r1
 8000f16:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <MX_TIM1_Init+0x148>)
 8000f18:	2204      	movs	r2, #4
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	f004 fb1a 	bl	8005554 <HAL_TIM_PWM_ConfigChannel>
 8000f20:	1e03      	subs	r3, r0, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8000f24:	f000 f9e8 	bl	80012f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f28:	1d3b      	adds	r3, r7, #4
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	2200      	movs	r2, #0
 8000f32:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	2200      	movs	r2, #0
 8000f44:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f46:	1d3b      	adds	r3, r7, #4
 8000f48:	2280      	movs	r2, #128	; 0x80
 8000f4a:	0192      	lsls	r2, r2, #6
 8000f4c:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	2200      	movs	r2, #0
 8000f52:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000f54:	1d3b      	adds	r3, r7, #4
 8000f56:	2200      	movs	r2, #0
 8000f58:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f60:	1d3b      	adds	r3, r7, #4
 8000f62:	2280      	movs	r2, #128	; 0x80
 8000f64:	0492      	lsls	r2, r2, #18
 8000f66:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	2200      	movs	r2, #0
 8000f72:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	2200      	movs	r2, #0
 8000f78:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f7a:	1d3a      	adds	r2, r7, #4
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <MX_TIM1_Init+0x148>)
 8000f7e:	0011      	movs	r1, r2
 8000f80:	0018      	movs	r0, r3
 8000f82:	f005 f907 	bl	8006194 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f86:	1e03      	subs	r3, r0, #0
 8000f88:	d001      	beq.n	8000f8e <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 8000f8a:	f000 f9b5 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f8e:	46c0      	nop			; (mov r8, r8)
 8000f90:	46bd      	mov	sp, r7
 8000f92:	b018      	add	sp, #96	; 0x60
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	200001b8 	.word	0x200001b8
 8000f9c:	40012c00 	.word	0x40012c00
 8000fa0:	000003e7 	.word	0x000003e7

08000fa4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08e      	sub	sp, #56	; 0x38
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000faa:	2328      	movs	r3, #40	; 0x28
 8000fac:	18fb      	adds	r3, r7, r3
 8000fae:	0018      	movs	r0, r3
 8000fb0:	2310      	movs	r3, #16
 8000fb2:	001a      	movs	r2, r3
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	f005 f9de 	bl	8006376 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fba:	231c      	movs	r3, #28
 8000fbc:	18fb      	adds	r3, r7, r3
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	230c      	movs	r3, #12
 8000fc2:	001a      	movs	r2, r3
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	f005 f9d6 	bl	8006376 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fca:	003b      	movs	r3, r7
 8000fcc:	0018      	movs	r0, r3
 8000fce:	231c      	movs	r3, #28
 8000fd0:	001a      	movs	r2, r3
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	f005 f9cf 	bl	8006376 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fd8:	4b2f      	ldr	r3, [pc, #188]	; (8001098 <MX_TIM3_Init+0xf4>)
 8000fda:	4a30      	ldr	r2, [pc, #192]	; (800109c <MX_TIM3_Init+0xf8>)
 8000fdc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000fde:	4b2e      	ldr	r3, [pc, #184]	; (8001098 <MX_TIM3_Init+0xf4>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe4:	4b2c      	ldr	r3, [pc, #176]	; (8001098 <MX_TIM3_Init+0xf4>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1600-1;
 8000fea:	4b2b      	ldr	r3, [pc, #172]	; (8001098 <MX_TIM3_Init+0xf4>)
 8000fec:	4a2c      	ldr	r2, [pc, #176]	; (80010a0 <MX_TIM3_Init+0xfc>)
 8000fee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff0:	4b29      	ldr	r3, [pc, #164]	; (8001098 <MX_TIM3_Init+0xf4>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff6:	4b28      	ldr	r3, [pc, #160]	; (8001098 <MX_TIM3_Init+0xf4>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ffc:	4b26      	ldr	r3, [pc, #152]	; (8001098 <MX_TIM3_Init+0xf4>)
 8000ffe:	0018      	movs	r0, r3
 8001000:	f003 ff1a 	bl	8004e38 <HAL_TIM_Base_Init>
 8001004:	1e03      	subs	r3, r0, #0
 8001006:	d001      	beq.n	800100c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001008:	f000 f976 	bl	80012f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800100c:	2128      	movs	r1, #40	; 0x28
 800100e:	187b      	adds	r3, r7, r1
 8001010:	2280      	movs	r2, #128	; 0x80
 8001012:	0152      	lsls	r2, r2, #5
 8001014:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001016:	187a      	adds	r2, r7, r1
 8001018:	4b1f      	ldr	r3, [pc, #124]	; (8001098 <MX_TIM3_Init+0xf4>)
 800101a:	0011      	movs	r1, r2
 800101c:	0018      	movs	r0, r3
 800101e:	f004 fb99 	bl	8005754 <HAL_TIM_ConfigClockSource>
 8001022:	1e03      	subs	r3, r0, #0
 8001024:	d001      	beq.n	800102a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001026:	f000 f967 	bl	80012f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800102a:	4b1b      	ldr	r3, [pc, #108]	; (8001098 <MX_TIM3_Init+0xf4>)
 800102c:	0018      	movs	r0, r3
 800102e:	f003 ffa9 	bl	8004f84 <HAL_TIM_PWM_Init>
 8001032:	1e03      	subs	r3, r0, #0
 8001034:	d001      	beq.n	800103a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001036:	f000 f95f 	bl	80012f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800103a:	211c      	movs	r1, #28
 800103c:	187b      	adds	r3, r7, r1
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001042:	187b      	adds	r3, r7, r1
 8001044:	2200      	movs	r2, #0
 8001046:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001048:	187a      	adds	r2, r7, r1
 800104a:	4b13      	ldr	r3, [pc, #76]	; (8001098 <MX_TIM3_Init+0xf4>)
 800104c:	0011      	movs	r1, r2
 800104e:	0018      	movs	r0, r3
 8001050:	f005 f83e 	bl	80060d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001054:	1e03      	subs	r3, r0, #0
 8001056:	d001      	beq.n	800105c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8001058:	f000 f94e 	bl	80012f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800105c:	003b      	movs	r3, r7
 800105e:	2260      	movs	r2, #96	; 0x60
 8001060:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001062:	003b      	movs	r3, r7
 8001064:	2200      	movs	r2, #0
 8001066:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001068:	003b      	movs	r3, r7
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800106e:	003b      	movs	r3, r7
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001074:	0039      	movs	r1, r7
 8001076:	4b08      	ldr	r3, [pc, #32]	; (8001098 <MX_TIM3_Init+0xf4>)
 8001078:	2204      	movs	r2, #4
 800107a:	0018      	movs	r0, r3
 800107c:	f004 fa6a 	bl	8005554 <HAL_TIM_PWM_ConfigChannel>
 8001080:	1e03      	subs	r3, r0, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8001084:	f000 f938 	bl	80012f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001088:	4b03      	ldr	r3, [pc, #12]	; (8001098 <MX_TIM3_Init+0xf4>)
 800108a:	0018      	movs	r0, r3
 800108c:	f000 fa84 	bl	8001598 <HAL_TIM_MspPostInit>

}
 8001090:	46c0      	nop			; (mov r8, r8)
 8001092:	46bd      	mov	sp, r7
 8001094:	b00e      	add	sp, #56	; 0x38
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20000204 	.word	0x20000204
 800109c:	40000400 	.word	0x40000400
 80010a0:	0000063f 	.word	0x0000063f

080010a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a4:	b590      	push	{r4, r7, lr}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010aa:	240c      	movs	r4, #12
 80010ac:	193b      	adds	r3, r7, r4
 80010ae:	0018      	movs	r0, r3
 80010b0:	2314      	movs	r3, #20
 80010b2:	001a      	movs	r2, r3
 80010b4:	2100      	movs	r1, #0
 80010b6:	f005 f95e 	bl	8006376 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ba:	4b3e      	ldr	r3, [pc, #248]	; (80011b4 <MX_GPIO_Init+0x110>)
 80010bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010be:	4b3d      	ldr	r3, [pc, #244]	; (80011b4 <MX_GPIO_Init+0x110>)
 80010c0:	2102      	movs	r1, #2
 80010c2:	430a      	orrs	r2, r1
 80010c4:	635a      	str	r2, [r3, #52]	; 0x34
 80010c6:	4b3b      	ldr	r3, [pc, #236]	; (80011b4 <MX_GPIO_Init+0x110>)
 80010c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ca:	2202      	movs	r2, #2
 80010cc:	4013      	ands	r3, r2
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d2:	4b38      	ldr	r3, [pc, #224]	; (80011b4 <MX_GPIO_Init+0x110>)
 80010d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010d6:	4b37      	ldr	r3, [pc, #220]	; (80011b4 <MX_GPIO_Init+0x110>)
 80010d8:	2101      	movs	r1, #1
 80010da:	430a      	orrs	r2, r1
 80010dc:	635a      	str	r2, [r3, #52]	; 0x34
 80010de:	4b35      	ldr	r3, [pc, #212]	; (80011b4 <MX_GPIO_Init+0x110>)
 80010e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010e2:	2201      	movs	r2, #1
 80010e4:	4013      	ands	r3, r2
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_TEST_Pin|GPIO_LED_Pin, GPIO_PIN_RESET);
 80010ea:	4933      	ldr	r1, [pc, #204]	; (80011b8 <MX_GPIO_Init+0x114>)
 80010ec:	23a0      	movs	r3, #160	; 0xa0
 80010ee:	05db      	lsls	r3, r3, #23
 80010f0:	2200      	movs	r2, #0
 80010f2:	0018      	movs	r0, r3
 80010f4:	f002 f98c 	bl	8003410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_TEST_Pin */
  GPIO_InitStruct.Pin = GPIO_TEST_Pin;
 80010f8:	193b      	adds	r3, r7, r4
 80010fa:	2204      	movs	r2, #4
 80010fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fe:	193b      	adds	r3, r7, r4
 8001100:	2201      	movs	r2, #1
 8001102:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	193b      	adds	r3, r7, r4
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110a:	193b      	adds	r3, r7, r4
 800110c:	2203      	movs	r2, #3
 800110e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIO_TEST_GPIO_Port, &GPIO_InitStruct);
 8001110:	193a      	adds	r2, r7, r4
 8001112:	23a0      	movs	r3, #160	; 0xa0
 8001114:	05db      	lsls	r3, r3, #23
 8001116:	0011      	movs	r1, r2
 8001118:	0018      	movs	r0, r3
 800111a:	f002 f815 	bl	8003148 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_BTN_OK_Pin */
  GPIO_InitStruct.Pin = GPIO_BTN_OK_Pin;
 800111e:	193b      	adds	r3, r7, r4
 8001120:	2204      	movs	r2, #4
 8001122:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001124:	193b      	adds	r3, r7, r4
 8001126:	2284      	movs	r2, #132	; 0x84
 8001128:	0392      	lsls	r2, r2, #14
 800112a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	193b      	adds	r3, r7, r4
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_BTN_OK_GPIO_Port, &GPIO_InitStruct);
 8001132:	193b      	adds	r3, r7, r4
 8001134:	4a21      	ldr	r2, [pc, #132]	; (80011bc <MX_GPIO_Init+0x118>)
 8001136:	0019      	movs	r1, r3
 8001138:	0010      	movs	r0, r2
 800113a:	f002 f805 	bl	8003148 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_BTN_UP_Pin GPIO_BTN_DOWN_Pin */
  GPIO_InitStruct.Pin = GPIO_BTN_UP_Pin|GPIO_BTN_DOWN_Pin;
 800113e:	193b      	adds	r3, r7, r4
 8001140:	22c0      	movs	r2, #192	; 0xc0
 8001142:	0092      	lsls	r2, r2, #2
 8001144:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001146:	193b      	adds	r3, r7, r4
 8001148:	2284      	movs	r2, #132	; 0x84
 800114a:	0392      	lsls	r2, r2, #14
 800114c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	193b      	adds	r3, r7, r4
 8001150:	2200      	movs	r2, #0
 8001152:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001154:	193a      	adds	r2, r7, r4
 8001156:	23a0      	movs	r3, #160	; 0xa0
 8001158:	05db      	lsls	r3, r3, #23
 800115a:	0011      	movs	r1, r2
 800115c:	0018      	movs	r0, r3
 800115e:	f001 fff3 	bl	8003148 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_LED_Pin;
 8001162:	0021      	movs	r1, r4
 8001164:	187b      	adds	r3, r7, r1
 8001166:	2280      	movs	r2, #128	; 0x80
 8001168:	0212      	lsls	r2, r2, #8
 800116a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116c:	187b      	adds	r3, r7, r1
 800116e:	2201      	movs	r2, #1
 8001170:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	187b      	adds	r3, r7, r1
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001178:	187b      	adds	r3, r7, r1
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 800117e:	187a      	adds	r2, r7, r1
 8001180:	23a0      	movs	r3, #160	; 0xa0
 8001182:	05db      	lsls	r3, r3, #23
 8001184:	0011      	movs	r1, r2
 8001186:	0018      	movs	r0, r3
 8001188:	f001 ffde 	bl	8003148 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 800118c:	2200      	movs	r2, #0
 800118e:	2100      	movs	r1, #0
 8001190:	2006      	movs	r0, #6
 8001192:	f001 ffb3 	bl	80030fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8001196:	2006      	movs	r0, #6
 8001198:	f001 ffc5 	bl	8003126 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800119c:	2200      	movs	r2, #0
 800119e:	2100      	movs	r1, #0
 80011a0:	2007      	movs	r0, #7
 80011a2:	f001 ffab 	bl	80030fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80011a6:	2007      	movs	r0, #7
 80011a8:	f001 ffbd 	bl	8003126 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011ac:	46c0      	nop			; (mov r8, r8)
 80011ae:	46bd      	mov	sp, r7
 80011b0:	b009      	add	sp, #36	; 0x24
 80011b2:	bd90      	pop	{r4, r7, pc}
 80011b4:	40021000 	.word	0x40021000
 80011b8:	00008004 	.word	0x00008004
 80011bc:	50000400 	.word	0x50000400

080011c0 <ssd1306_WriteScreen>:

/* USER CODE BEGIN 4 */
static void ssd1306_WriteScreen(char* str, FontDef Font){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	1d3b      	adds	r3, r7, #4
 80011ca:	6019      	str	r1, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
	  ssd1306_Fill(Black);
 80011ce:	2000      	movs	r0, #0
 80011d0:	f000 fbf2 	bl	80019b8 <ssd1306_Fill>
	  ssd1306_SetCursor(32, 0);
 80011d4:	2100      	movs	r1, #0
 80011d6:	2020      	movs	r0, #32
 80011d8:	f000 fd66 	bl	8001ca8 <ssd1306_SetCursor>
	  ssd1306_WriteString(str, Font, White);
 80011dc:	1d3a      	adds	r2, r7, #4
 80011de:	68f8      	ldr	r0, [r7, #12]
 80011e0:	2301      	movs	r3, #1
 80011e2:	6811      	ldr	r1, [r2, #0]
 80011e4:	6852      	ldr	r2, [r2, #4]
 80011e6:	f000 fd35 	bl	8001c54 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 80011ea:	f000 fc09 	bl	8001a00 <ssd1306_UpdateScreen>
}
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	46bd      	mov	sp, r7
 80011f2:	b004      	add	sp, #16
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	0002      	movs	r2, r0
 8001200:	1dbb      	adds	r3, r7, #6
 8001202:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == GPIO_BTN_OK_Pin) {
 8001204:	1dbb      	adds	r3, r7, #6
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	2b04      	cmp	r3, #4
 800120a:	d103      	bne.n	8001214 <HAL_GPIO_EXTI_Falling_Callback+0x1c>
		btn = BTN_OK;
 800120c:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 800120e:	2200      	movs	r2, #0
 8001210:	701a      	strb	r2, [r3, #0]
	} else if (GPIO_Pin == GPIO_BTN_UP_Pin){
		btn = BTN_UP;
	} else if (GPIO_Pin == GPIO_BTN_DOWN_Pin) {
		btn = BTN_DOWN;
	}
}
 8001212:	e012      	b.n	800123a <HAL_GPIO_EXTI_Falling_Callback+0x42>
	} else if (GPIO_Pin == GPIO_BTN_UP_Pin){
 8001214:	1dbb      	adds	r3, r7, #6
 8001216:	881a      	ldrh	r2, [r3, #0]
 8001218:	2380      	movs	r3, #128	; 0x80
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	429a      	cmp	r2, r3
 800121e:	d103      	bne.n	8001228 <HAL_GPIO_EXTI_Falling_Callback+0x30>
		btn = BTN_UP;
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 8001222:	2201      	movs	r2, #1
 8001224:	701a      	strb	r2, [r3, #0]
}
 8001226:	e008      	b.n	800123a <HAL_GPIO_EXTI_Falling_Callback+0x42>
	} else if (GPIO_Pin == GPIO_BTN_DOWN_Pin) {
 8001228:	1dbb      	adds	r3, r7, #6
 800122a:	881a      	ldrh	r2, [r3, #0]
 800122c:	2380      	movs	r3, #128	; 0x80
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	429a      	cmp	r2, r3
 8001232:	d102      	bne.n	800123a <HAL_GPIO_EXTI_Falling_Callback+0x42>
		btn = BTN_DOWN;
 8001234:	4b03      	ldr	r3, [pc, #12]	; (8001244 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 8001236:	2202      	movs	r2, #2
 8001238:	701a      	strb	r2, [r3, #0]
}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	46bd      	mov	sp, r7
 800123e:	b002      	add	sp, #8
 8001240:	bd80      	pop	{r7, pc}
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	20000014 	.word	0x20000014

08001248 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIO_TEST_GPIO_Port, GPIO_TEST_Pin, GPIO_PIN_SET);
 8001250:	23a0      	movs	r3, #160	; 0xa0
 8001252:	05db      	lsls	r3, r3, #23
 8001254:	2201      	movs	r2, #1
 8001256:	2104      	movs	r1, #4
 8001258:	0018      	movs	r0, r3
 800125a:	f002 f8d9 	bl	8003410 <HAL_GPIO_WritePin>
	int16_t adcValue = HAL_ADC_GetValue(hadc);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	0018      	movs	r0, r3
 8001262:	f001 f95d 	bl	8002520 <HAL_ADC_GetValue>
 8001266:	0002      	movs	r2, r0
 8001268:	210e      	movs	r1, #14
 800126a:	187b      	adds	r3, r7, r1
 800126c:	801a      	strh	r2, [r3, #0]
	temp = FIRFilter_Update(&fir, adcValue);
 800126e:	187b      	adds	r3, r7, r1
 8001270:	2200      	movs	r2, #0
 8001272:	5e9a      	ldrsh	r2, [r3, r2]
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <HAL_ADC_ConvCpltCallback+0x78>)
 8001276:	0011      	movs	r1, r2
 8001278:	0018      	movs	r0, r3
 800127a:	f7ff f9b3 	bl	80005e4 <FIRFilter_Update>
 800127e:	0003      	movs	r3, r0
 8001280:	001a      	movs	r2, r3
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001284:	801a      	strh	r2, [r3, #0]

	PI_temp.Ref = ref_Temp;
 8001286:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <HAL_ADC_ConvCpltCallback+0x80>)
 8001288:	2200      	movs	r2, #0
 800128a:	5e9a      	ldrsh	r2, [r3, r2]
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <HAL_ADC_ConvCpltCallback+0x84>)
 800128e:	801a      	strh	r2, [r3, #0]
	PI_temp.Fdb = temp;
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001292:	2200      	movs	r2, #0
 8001294:	5e9a      	ldrsh	r2, [r3, r2]
 8001296:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <HAL_ADC_ConvCpltCallback+0x84>)
 8001298:	805a      	strh	r2, [r3, #2]
//	PID_MACRO (PI_temp);
	duty = PID_Update(&PI_temp);
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <HAL_ADC_ConvCpltCallback+0x84>)
 800129c:	0018      	movs	r0, r3
 800129e:	f7ff fa71 	bl	8000784 <PID_Update>
 80012a2:	0003      	movs	r3, r0
 80012a4:	001a      	movs	r2, r3
 80012a6:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <HAL_ADC_ConvCpltCallback+0x88>)
 80012a8:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIO_TEST_GPIO_Port, GPIO_TEST_Pin, GPIO_PIN_RESET);
 80012aa:	23a0      	movs	r3, #160	; 0xa0
 80012ac:	05db      	lsls	r3, r3, #23
 80012ae:	2200      	movs	r2, #0
 80012b0:	2104      	movs	r1, #4
 80012b2:	0018      	movs	r0, r3
 80012b4:	f002 f8ac 	bl	8003410 <HAL_GPIO_WritePin>
}
 80012b8:	46c0      	nop			; (mov r8, r8)
 80012ba:	46bd      	mov	sp, r7
 80012bc:	b004      	add	sp, #16
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000250 	.word	0x20000250
 80012c4:	20000290 	.word	0x20000290
 80012c8:	20000016 	.word	0x20000016
 80012cc:	20000268 	.word	0x20000268
 80012d0:	2000028e 	.word	0x2000028e

080012d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d101      	bne.n	80012ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012e6:	f000 fd57 	bl	8001d98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	46bd      	mov	sp, r7
 80012ee:	b002      	add	sp, #8
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	40014800 	.word	0x40014800

080012f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012fc:	b672      	cpsid	i
}
 80012fe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001300:	e7fe      	b.n	8001300 <Error_Handler+0x8>
	...

08001304 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800130a:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <HAL_MspInit+0x44>)
 800130c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <HAL_MspInit+0x44>)
 8001310:	2101      	movs	r1, #1
 8001312:	430a      	orrs	r2, r1
 8001314:	641a      	str	r2, [r3, #64]	; 0x40
 8001316:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <HAL_MspInit+0x44>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	2201      	movs	r2, #1
 800131c:	4013      	ands	r3, r2
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <HAL_MspInit+0x44>)
 8001324:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <HAL_MspInit+0x44>)
 8001328:	2180      	movs	r1, #128	; 0x80
 800132a:	0549      	lsls	r1, r1, #21
 800132c:	430a      	orrs	r2, r1
 800132e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001330:	4b05      	ldr	r3, [pc, #20]	; (8001348 <HAL_MspInit+0x44>)
 8001332:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001334:	2380      	movs	r3, #128	; 0x80
 8001336:	055b      	lsls	r3, r3, #21
 8001338:	4013      	ands	r3, r2
 800133a:	603b      	str	r3, [r7, #0]
 800133c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133e:	46c0      	nop			; (mov r8, r8)
 8001340:	46bd      	mov	sp, r7
 8001342:	b002      	add	sp, #8
 8001344:	bd80      	pop	{r7, pc}
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	40021000 	.word	0x40021000

0800134c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800134c:	b590      	push	{r4, r7, lr}
 800134e:	b08b      	sub	sp, #44	; 0x2c
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	2414      	movs	r4, #20
 8001356:	193b      	adds	r3, r7, r4
 8001358:	0018      	movs	r0, r3
 800135a:	2314      	movs	r3, #20
 800135c:	001a      	movs	r2, r3
 800135e:	2100      	movs	r1, #0
 8001360:	f005 f809 	bl	8006376 <memset>
  if(hadc->Instance==ADC1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a1b      	ldr	r2, [pc, #108]	; (80013d8 <HAL_ADC_MspInit+0x8c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d130      	bne.n	80013d0 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800136e:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <HAL_ADC_MspInit+0x90>)
 8001370:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001372:	4b1a      	ldr	r3, [pc, #104]	; (80013dc <HAL_ADC_MspInit+0x90>)
 8001374:	2180      	movs	r1, #128	; 0x80
 8001376:	0349      	lsls	r1, r1, #13
 8001378:	430a      	orrs	r2, r1
 800137a:	641a      	str	r2, [r3, #64]	; 0x40
 800137c:	4b17      	ldr	r3, [pc, #92]	; (80013dc <HAL_ADC_MspInit+0x90>)
 800137e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001380:	2380      	movs	r3, #128	; 0x80
 8001382:	035b      	lsls	r3, r3, #13
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138a:	4b14      	ldr	r3, [pc, #80]	; (80013dc <HAL_ADC_MspInit+0x90>)
 800138c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800138e:	4b13      	ldr	r3, [pc, #76]	; (80013dc <HAL_ADC_MspInit+0x90>)
 8001390:	2102      	movs	r1, #2
 8001392:	430a      	orrs	r2, r1
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
 8001396:	4b11      	ldr	r3, [pc, #68]	; (80013dc <HAL_ADC_MspInit+0x90>)
 8001398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800139a:	2202      	movs	r2, #2
 800139c:	4013      	ands	r3, r2
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC_NTC_Pin;
 80013a2:	193b      	adds	r3, r7, r4
 80013a4:	2202      	movs	r2, #2
 80013a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a8:	193b      	adds	r3, r7, r4
 80013aa:	2203      	movs	r2, #3
 80013ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	193b      	adds	r3, r7, r4
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(ADC_NTC_GPIO_Port, &GPIO_InitStruct);
 80013b4:	193b      	adds	r3, r7, r4
 80013b6:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <HAL_ADC_MspInit+0x94>)
 80013b8:	0019      	movs	r1, r3
 80013ba:	0010      	movs	r0, r2
 80013bc:	f001 fec4 	bl	8003148 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80013c0:	2200      	movs	r2, #0
 80013c2:	2100      	movs	r1, #0
 80013c4:	200c      	movs	r0, #12
 80013c6:	f001 fe99 	bl	80030fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80013ca:	200c      	movs	r0, #12
 80013cc:	f001 feab 	bl	8003126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013d0:	46c0      	nop			; (mov r8, r8)
 80013d2:	46bd      	mov	sp, r7
 80013d4:	b00b      	add	sp, #44	; 0x2c
 80013d6:	bd90      	pop	{r4, r7, pc}
 80013d8:	40012400 	.word	0x40012400
 80013dc:	40021000 	.word	0x40021000
 80013e0:	50000400 	.word	0x50000400

080013e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013e4:	b590      	push	{r4, r7, lr}
 80013e6:	b093      	sub	sp, #76	; 0x4c
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	2334      	movs	r3, #52	; 0x34
 80013ee:	18fb      	adds	r3, r7, r3
 80013f0:	0018      	movs	r0, r3
 80013f2:	2314      	movs	r3, #20
 80013f4:	001a      	movs	r2, r3
 80013f6:	2100      	movs	r1, #0
 80013f8:	f004 ffbd 	bl	8006376 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013fc:	241c      	movs	r4, #28
 80013fe:	193b      	adds	r3, r7, r4
 8001400:	0018      	movs	r0, r3
 8001402:	2318      	movs	r3, #24
 8001404:	001a      	movs	r2, r3
 8001406:	2100      	movs	r1, #0
 8001408:	f004 ffb5 	bl	8006376 <memset>
  if(hi2c->Instance==I2C1)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a3e      	ldr	r2, [pc, #248]	; (800150c <HAL_I2C_MspInit+0x128>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d13f      	bne.n	8001496 <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001416:	193b      	adds	r3, r7, r4
 8001418:	2220      	movs	r2, #32
 800141a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800141c:	193b      	adds	r3, r7, r4
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001422:	193b      	adds	r3, r7, r4
 8001424:	0018      	movs	r0, r3
 8001426:	f003 fbe1 	bl	8004bec <HAL_RCCEx_PeriphCLKConfig>
 800142a:	1e03      	subs	r3, r0, #0
 800142c:	d001      	beq.n	8001432 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800142e:	f7ff ff63 	bl	80012f8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001432:	4b37      	ldr	r3, [pc, #220]	; (8001510 <HAL_I2C_MspInit+0x12c>)
 8001434:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001436:	4b36      	ldr	r3, [pc, #216]	; (8001510 <HAL_I2C_MspInit+0x12c>)
 8001438:	2102      	movs	r1, #2
 800143a:	430a      	orrs	r2, r1
 800143c:	635a      	str	r2, [r3, #52]	; 0x34
 800143e:	4b34      	ldr	r3, [pc, #208]	; (8001510 <HAL_I2C_MspInit+0x12c>)
 8001440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001442:	2202      	movs	r2, #2
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
 8001448:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C_PD_SDA_Pin|I2C_PD_SCL_Pin;
 800144a:	2134      	movs	r1, #52	; 0x34
 800144c:	187b      	adds	r3, r7, r1
 800144e:	22c0      	movs	r2, #192	; 0xc0
 8001450:	0092      	lsls	r2, r2, #2
 8001452:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001454:	187b      	adds	r3, r7, r1
 8001456:	2212      	movs	r2, #18
 8001458:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	187b      	adds	r3, r7, r1
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	187b      	adds	r3, r7, r1
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001466:	187b      	adds	r3, r7, r1
 8001468:	2206      	movs	r2, #6
 800146a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146c:	187b      	adds	r3, r7, r1
 800146e:	4a29      	ldr	r2, [pc, #164]	; (8001514 <HAL_I2C_MspInit+0x130>)
 8001470:	0019      	movs	r1, r3
 8001472:	0010      	movs	r0, r2
 8001474:	f001 fe68 	bl	8003148 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001478:	4b25      	ldr	r3, [pc, #148]	; (8001510 <HAL_I2C_MspInit+0x12c>)
 800147a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800147c:	4b24      	ldr	r3, [pc, #144]	; (8001510 <HAL_I2C_MspInit+0x12c>)
 800147e:	2180      	movs	r1, #128	; 0x80
 8001480:	0389      	lsls	r1, r1, #14
 8001482:	430a      	orrs	r2, r1
 8001484:	63da      	str	r2, [r3, #60]	; 0x3c
 8001486:	4b22      	ldr	r3, [pc, #136]	; (8001510 <HAL_I2C_MspInit+0x12c>)
 8001488:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800148a:	2380      	movs	r3, #128	; 0x80
 800148c:	039b      	lsls	r3, r3, #14
 800148e:	4013      	ands	r3, r2
 8001490:	617b      	str	r3, [r7, #20]
 8001492:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001494:	e036      	b.n	8001504 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C2)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a1f      	ldr	r2, [pc, #124]	; (8001518 <HAL_I2C_MspInit+0x134>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d131      	bne.n	8001504 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a0:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <HAL_I2C_MspInit+0x12c>)
 80014a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014a4:	4b1a      	ldr	r3, [pc, #104]	; (8001510 <HAL_I2C_MspInit+0x12c>)
 80014a6:	2101      	movs	r1, #1
 80014a8:	430a      	orrs	r2, r1
 80014aa:	635a      	str	r2, [r3, #52]	; 0x34
 80014ac:	4b18      	ldr	r3, [pc, #96]	; (8001510 <HAL_I2C_MspInit+0x12c>)
 80014ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014b0:	2201      	movs	r2, #1
 80014b2:	4013      	ands	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C_OLED_SCL_Pin|I2C_OLED_SDA_Pin;
 80014b8:	2134      	movs	r1, #52	; 0x34
 80014ba:	187b      	adds	r3, r7, r1
 80014bc:	22c0      	movs	r2, #192	; 0xc0
 80014be:	0152      	lsls	r2, r2, #5
 80014c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014c2:	187b      	adds	r3, r7, r1
 80014c4:	2212      	movs	r2, #18
 80014c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	187b      	adds	r3, r7, r1
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ce:	187b      	adds	r3, r7, r1
 80014d0:	2200      	movs	r2, #0
 80014d2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80014d4:	187b      	adds	r3, r7, r1
 80014d6:	2206      	movs	r2, #6
 80014d8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014da:	187a      	adds	r2, r7, r1
 80014dc:	23a0      	movs	r3, #160	; 0xa0
 80014de:	05db      	lsls	r3, r3, #23
 80014e0:	0011      	movs	r1, r2
 80014e2:	0018      	movs	r0, r3
 80014e4:	f001 fe30 	bl	8003148 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <HAL_I2C_MspInit+0x12c>)
 80014ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014ec:	4b08      	ldr	r3, [pc, #32]	; (8001510 <HAL_I2C_MspInit+0x12c>)
 80014ee:	2180      	movs	r1, #128	; 0x80
 80014f0:	03c9      	lsls	r1, r1, #15
 80014f2:	430a      	orrs	r2, r1
 80014f4:	63da      	str	r2, [r3, #60]	; 0x3c
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_I2C_MspInit+0x12c>)
 80014f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014fa:	2380      	movs	r3, #128	; 0x80
 80014fc:	03db      	lsls	r3, r3, #15
 80014fe:	4013      	ands	r3, r2
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	68fb      	ldr	r3, [r7, #12]
}
 8001504:	46c0      	nop			; (mov r8, r8)
 8001506:	46bd      	mov	sp, r7
 8001508:	b013      	add	sp, #76	; 0x4c
 800150a:	bd90      	pop	{r4, r7, pc}
 800150c:	40005400 	.word	0x40005400
 8001510:	40021000 	.word	0x40021000
 8001514:	50000400 	.word	0x50000400
 8001518:	40005800 	.word	0x40005800

0800151c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a0a      	ldr	r2, [pc, #40]	; (8001554 <HAL_TIM_PWM_MspInit+0x38>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d10d      	bne.n	800154a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800152e:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <HAL_TIM_PWM_MspInit+0x3c>)
 8001530:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <HAL_TIM_PWM_MspInit+0x3c>)
 8001534:	2180      	movs	r1, #128	; 0x80
 8001536:	0109      	lsls	r1, r1, #4
 8001538:	430a      	orrs	r2, r1
 800153a:	641a      	str	r2, [r3, #64]	; 0x40
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <HAL_TIM_PWM_MspInit+0x3c>)
 800153e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001540:	2380      	movs	r3, #128	; 0x80
 8001542:	011b      	lsls	r3, r3, #4
 8001544:	4013      	ands	r3, r2
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800154a:	46c0      	nop			; (mov r8, r8)
 800154c:	46bd      	mov	sp, r7
 800154e:	b004      	add	sp, #16
 8001550:	bd80      	pop	{r7, pc}
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	40012c00 	.word	0x40012c00
 8001558:	40021000 	.word	0x40021000

0800155c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a09      	ldr	r2, [pc, #36]	; (8001590 <HAL_TIM_Base_MspInit+0x34>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d10b      	bne.n	8001586 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800156e:	4b09      	ldr	r3, [pc, #36]	; (8001594 <HAL_TIM_Base_MspInit+0x38>)
 8001570:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001572:	4b08      	ldr	r3, [pc, #32]	; (8001594 <HAL_TIM_Base_MspInit+0x38>)
 8001574:	2102      	movs	r1, #2
 8001576:	430a      	orrs	r2, r1
 8001578:	63da      	str	r2, [r3, #60]	; 0x3c
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_TIM_Base_MspInit+0x38>)
 800157c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800157e:	2202      	movs	r2, #2
 8001580:	4013      	ands	r3, r2
 8001582:	60fb      	str	r3, [r7, #12]
 8001584:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	46bd      	mov	sp, r7
 800158a:	b004      	add	sp, #16
 800158c:	bd80      	pop	{r7, pc}
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	40000400 	.word	0x40000400
 8001594:	40021000 	.word	0x40021000

08001598 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001598:	b590      	push	{r4, r7, lr}
 800159a:	b089      	sub	sp, #36	; 0x24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	240c      	movs	r4, #12
 80015a2:	193b      	adds	r3, r7, r4
 80015a4:	0018      	movs	r0, r3
 80015a6:	2314      	movs	r3, #20
 80015a8:	001a      	movs	r2, r3
 80015aa:	2100      	movs	r1, #0
 80015ac:	f004 fee3 	bl	8006376 <memset>
  if(htim->Instance==TIM3)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a14      	ldr	r2, [pc, #80]	; (8001608 <HAL_TIM_MspPostInit+0x70>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d122      	bne.n	8001600 <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ba:	4b14      	ldr	r3, [pc, #80]	; (800160c <HAL_TIM_MspPostInit+0x74>)
 80015bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015be:	4b13      	ldr	r3, [pc, #76]	; (800160c <HAL_TIM_MspPostInit+0x74>)
 80015c0:	2101      	movs	r1, #1
 80015c2:	430a      	orrs	r2, r1
 80015c4:	635a      	str	r2, [r3, #52]	; 0x34
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <HAL_TIM_MspPostInit+0x74>)
 80015c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ca:	2201      	movs	r2, #1
 80015cc:	4013      	ands	r3, r2
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GATE_PWM_Pin;
 80015d2:	0021      	movs	r1, r4
 80015d4:	187b      	adds	r3, r7, r1
 80015d6:	2280      	movs	r2, #128	; 0x80
 80015d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	187b      	adds	r3, r7, r1
 80015dc:	2202      	movs	r2, #2
 80015de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	187b      	adds	r3, r7, r1
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e6:	187b      	adds	r3, r7, r1
 80015e8:	2200      	movs	r2, #0
 80015ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80015ec:	187b      	adds	r3, r7, r1
 80015ee:	2201      	movs	r2, #1
 80015f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GATE_PWM_GPIO_Port, &GPIO_InitStruct);
 80015f2:	187a      	adds	r2, r7, r1
 80015f4:	23a0      	movs	r3, #160	; 0xa0
 80015f6:	05db      	lsls	r3, r3, #23
 80015f8:	0011      	movs	r1, r2
 80015fa:	0018      	movs	r0, r3
 80015fc:	f001 fda4 	bl	8003148 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001600:	46c0      	nop			; (mov r8, r8)
 8001602:	46bd      	mov	sp, r7
 8001604:	b009      	add	sp, #36	; 0x24
 8001606:	bd90      	pop	{r4, r7, pc}
 8001608:	40000400 	.word	0x40000400
 800160c:	40021000 	.word	0x40021000

08001610 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001610:	b5b0      	push	{r4, r5, r7, lr}
 8001612:	b08c      	sub	sp, #48	; 0x30
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001618:	232b      	movs	r3, #43	; 0x2b
 800161a:	18fb      	adds	r3, r7, r3
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001620:	4b38      	ldr	r3, [pc, #224]	; (8001704 <HAL_InitTick+0xf4>)
 8001622:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001624:	4b37      	ldr	r3, [pc, #220]	; (8001704 <HAL_InitTick+0xf4>)
 8001626:	2180      	movs	r1, #128	; 0x80
 8001628:	02c9      	lsls	r1, r1, #11
 800162a:	430a      	orrs	r2, r1
 800162c:	641a      	str	r2, [r3, #64]	; 0x40
 800162e:	4b35      	ldr	r3, [pc, #212]	; (8001704 <HAL_InitTick+0xf4>)
 8001630:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001632:	2380      	movs	r3, #128	; 0x80
 8001634:	02db      	lsls	r3, r3, #11
 8001636:	4013      	ands	r3, r2
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800163c:	230c      	movs	r3, #12
 800163e:	18fa      	adds	r2, r7, r3
 8001640:	2410      	movs	r4, #16
 8001642:	193b      	adds	r3, r7, r4
 8001644:	0011      	movs	r1, r2
 8001646:	0018      	movs	r0, r3
 8001648:	f003 faa6 	bl	8004b98 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800164c:	193b      	adds	r3, r7, r4
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM17 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	2b00      	cmp	r3, #0
 8001656:	d104      	bne.n	8001662 <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001658:	f003 fa88 	bl	8004b6c <HAL_RCC_GetPCLK1Freq>
 800165c:	0003      	movs	r3, r0
 800165e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001660:	e004      	b.n	800166c <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001662:	f003 fa83 	bl	8004b6c <HAL_RCC_GetPCLK1Freq>
 8001666:	0003      	movs	r3, r0
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800166c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800166e:	4926      	ldr	r1, [pc, #152]	; (8001708 <HAL_InitTick+0xf8>)
 8001670:	0018      	movs	r0, r3
 8001672:	f7fe fd4f 	bl	8000114 <__udivsi3>
 8001676:	0003      	movs	r3, r0
 8001678:	3b01      	subs	r3, #1
 800167a:	623b      	str	r3, [r7, #32]

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 800167c:	4b23      	ldr	r3, [pc, #140]	; (800170c <HAL_InitTick+0xfc>)
 800167e:	4a24      	ldr	r2, [pc, #144]	; (8001710 <HAL_InitTick+0x100>)
 8001680:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001682:	4b22      	ldr	r3, [pc, #136]	; (800170c <HAL_InitTick+0xfc>)
 8001684:	4a23      	ldr	r2, [pc, #140]	; (8001714 <HAL_InitTick+0x104>)
 8001686:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001688:	4b20      	ldr	r3, [pc, #128]	; (800170c <HAL_InitTick+0xfc>)
 800168a:	6a3a      	ldr	r2, [r7, #32]
 800168c:	605a      	str	r2, [r3, #4]
  htim17.Init.ClockDivision = 0;
 800168e:	4b1f      	ldr	r3, [pc, #124]	; (800170c <HAL_InitTick+0xfc>)
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001694:	4b1d      	ldr	r3, [pc, #116]	; (800170c <HAL_InitTick+0xfc>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800169a:	4b1c      	ldr	r3, [pc, #112]	; (800170c <HAL_InitTick+0xfc>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 80016a0:	252b      	movs	r5, #43	; 0x2b
 80016a2:	197c      	adds	r4, r7, r5
 80016a4:	4b19      	ldr	r3, [pc, #100]	; (800170c <HAL_InitTick+0xfc>)
 80016a6:	0018      	movs	r0, r3
 80016a8:	f003 fbc6 	bl	8004e38 <HAL_TIM_Base_Init>
 80016ac:	0003      	movs	r3, r0
 80016ae:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80016b0:	197b      	adds	r3, r7, r5
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d11e      	bne.n	80016f6 <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 80016b8:	197c      	adds	r4, r7, r5
 80016ba:	4b14      	ldr	r3, [pc, #80]	; (800170c <HAL_InitTick+0xfc>)
 80016bc:	0018      	movs	r0, r3
 80016be:	f003 fc13 	bl	8004ee8 <HAL_TIM_Base_Start_IT>
 80016c2:	0003      	movs	r3, r0
 80016c4:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 80016c6:	197b      	adds	r3, r7, r5
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d113      	bne.n	80016f6 <HAL_InitTick+0xe6>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80016ce:	2016      	movs	r0, #22
 80016d0:	f001 fd29 	bl	8003126 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b03      	cmp	r3, #3
 80016d8:	d809      	bhi.n	80016ee <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	0019      	movs	r1, r3
 80016e0:	2016      	movs	r0, #22
 80016e2:	f001 fd0b 	bl	80030fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016e6:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <HAL_InitTick+0x108>)
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	e003      	b.n	80016f6 <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 80016ee:	232b      	movs	r3, #43	; 0x2b
 80016f0:	18fb      	adds	r3, r7, r3
 80016f2:	2201      	movs	r2, #1
 80016f4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 80016f6:	232b      	movs	r3, #43	; 0x2b
 80016f8:	18fb      	adds	r3, r7, r3
 80016fa:	781b      	ldrb	r3, [r3, #0]
}
 80016fc:	0018      	movs	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	b00c      	add	sp, #48	; 0x30
 8001702:	bdb0      	pop	{r4, r5, r7, pc}
 8001704:	40021000 	.word	0x40021000
 8001708:	000f4240 	.word	0x000f4240
 800170c:	200002a0 	.word	0x200002a0
 8001710:	40014800 	.word	0x40014800
 8001714:	000003e7 	.word	0x000003e7
 8001718:	20000024 	.word	0x20000024

0800171c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001720:	e7fe      	b.n	8001720 <NMI_Handler+0x4>

08001722 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001726:	e7fe      	b.n	8001726 <HardFault_Handler+0x4>

08001728 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800172c:	46c0      	nop			; (mov r8, r8)
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001740:	46c0      	nop			; (mov r8, r8)
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_BTN_OK_Pin);
 800174a:	2004      	movs	r0, #4
 800174c:	f001 fe7e 	bl	800344c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8001750:	46c0      	nop			; (mov r8, r8)
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_BTN_UP_Pin);
 800175a:	2380      	movs	r3, #128	; 0x80
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	0018      	movs	r0, r3
 8001760:	f001 fe74 	bl	800344c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_BTN_DOWN_Pin);
 8001764:	2380      	movs	r3, #128	; 0x80
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	0018      	movs	r0, r3
 800176a:	f001 fe6f 	bl	800344c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001778:	4b03      	ldr	r3, [pc, #12]	; (8001788 <ADC1_IRQHandler+0x14>)
 800177a:	0018      	movs	r0, r3
 800177c:	f000 fedc 	bl	8002538 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001780:	46c0      	nop			; (mov r8, r8)
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	200000ac 	.word	0x200000ac

0800178c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001790:	4b03      	ldr	r3, [pc, #12]	; (80017a0 <TIM17_IRQHandler+0x14>)
 8001792:	0018      	movs	r0, r3
 8001794:	f003 fdac 	bl	80052f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001798:	46c0      	nop			; (mov r8, r8)
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	46c0      	nop			; (mov r8, r8)
 80017a0:	200002a0 	.word	0x200002a0

080017a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017ac:	4a14      	ldr	r2, [pc, #80]	; (8001800 <_sbrk+0x5c>)
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <_sbrk+0x60>)
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b8:	4b13      	ldr	r3, [pc, #76]	; (8001808 <_sbrk+0x64>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d102      	bne.n	80017c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <_sbrk+0x64>)
 80017c2:	4a12      	ldr	r2, [pc, #72]	; (800180c <_sbrk+0x68>)
 80017c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017c6:	4b10      	ldr	r3, [pc, #64]	; (8001808 <_sbrk+0x64>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	18d3      	adds	r3, r2, r3
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d207      	bcs.n	80017e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d4:	f004 fd9c 	bl	8006310 <__errno>
 80017d8:	0003      	movs	r3, r0
 80017da:	220c      	movs	r2, #12
 80017dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017de:	2301      	movs	r3, #1
 80017e0:	425b      	negs	r3, r3
 80017e2:	e009      	b.n	80017f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e4:	4b08      	ldr	r3, [pc, #32]	; (8001808 <_sbrk+0x64>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ea:	4b07      	ldr	r3, [pc, #28]	; (8001808 <_sbrk+0x64>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	18d2      	adds	r2, r2, r3
 80017f2:	4b05      	ldr	r3, [pc, #20]	; (8001808 <_sbrk+0x64>)
 80017f4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80017f6:	68fb      	ldr	r3, [r7, #12]
}
 80017f8:	0018      	movs	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	b006      	add	sp, #24
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20002000 	.word	0x20002000
 8001804:	00000400 	.word	0x00000400
 8001808:	200002ec 	.word	0x200002ec
 800180c:	20000710 	.word	0x20000710

08001810 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001814:	46c0      	nop			; (mov r8, r8)
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800181c:	480d      	ldr	r0, [pc, #52]	; (8001854 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800181e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001820:	f7ff fff6 	bl	8001810 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001824:	480c      	ldr	r0, [pc, #48]	; (8001858 <LoopForever+0x6>)
  ldr r1, =_edata
 8001826:	490d      	ldr	r1, [pc, #52]	; (800185c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001828:	4a0d      	ldr	r2, [pc, #52]	; (8001860 <LoopForever+0xe>)
  movs r3, #0
 800182a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800182c:	e002      	b.n	8001834 <LoopCopyDataInit>

0800182e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800182e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001830:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001832:	3304      	adds	r3, #4

08001834 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001834:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001836:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001838:	d3f9      	bcc.n	800182e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800183a:	4a0a      	ldr	r2, [pc, #40]	; (8001864 <LoopForever+0x12>)
  ldr r4, =_ebss
 800183c:	4c0a      	ldr	r4, [pc, #40]	; (8001868 <LoopForever+0x16>)
  movs r3, #0
 800183e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001840:	e001      	b.n	8001846 <LoopFillZerobss>

08001842 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001842:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001844:	3204      	adds	r2, #4

08001846 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001846:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001848:	d3fb      	bcc.n	8001842 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800184a:	f004 fd67 	bl	800631c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800184e:	f7ff f811 	bl	8000874 <main>

08001852 <LoopForever>:

LoopForever:
  b LoopForever
 8001852:	e7fe      	b.n	8001852 <LoopForever>
  ldr   r0, =_estack
 8001854:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800185c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001860:	08007c1c 	.word	0x08007c1c
  ldr r2, =_sbss
 8001864:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001868:	2000070c 	.word	0x2000070c

0800186c <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800186c:	e7fe      	b.n	800186c <DMA1_Ch4_5_DMAMUX1_OVR_IRQHandler>

0800186e <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800186e:	b580      	push	{r7, lr}
 8001870:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001872:	46c0      	nop			; (mov r8, r8)
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af04      	add	r7, sp, #16
 800187e:	0002      	movs	r2, r0
 8001880:	1dfb      	adds	r3, r7, #7
 8001882:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001884:	4808      	ldr	r0, [pc, #32]	; (80018a8 <ssd1306_WriteCommand+0x30>)
 8001886:	2301      	movs	r3, #1
 8001888:	425b      	negs	r3, r3
 800188a:	9302      	str	r3, [sp, #8]
 800188c:	2301      	movs	r3, #1
 800188e:	9301      	str	r3, [sp, #4]
 8001890:	1dfb      	adds	r3, r7, #7
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	2301      	movs	r3, #1
 8001896:	2200      	movs	r2, #0
 8001898:	2178      	movs	r1, #120	; 0x78
 800189a:	f001 fea1 	bl	80035e0 <HAL_I2C_Mem_Write>
}
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	46bd      	mov	sp, r7
 80018a2:	b002      	add	sp, #8
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	46c0      	nop			; (mov r8, r8)
 80018a8:	20000164 	.word	0x20000164

080018ac <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af04      	add	r7, sp, #16
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	4808      	ldr	r0, [pc, #32]	; (80018dc <ssd1306_WriteData+0x30>)
 80018bc:	2201      	movs	r2, #1
 80018be:	4252      	negs	r2, r2
 80018c0:	9202      	str	r2, [sp, #8]
 80018c2:	9301      	str	r3, [sp, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	2301      	movs	r3, #1
 80018ca:	2240      	movs	r2, #64	; 0x40
 80018cc:	2178      	movs	r1, #120	; 0x78
 80018ce:	f001 fe87 	bl	80035e0 <HAL_I2C_Mem_Write>
}
 80018d2:	46c0      	nop			; (mov r8, r8)
 80018d4:	46bd      	mov	sp, r7
 80018d6:	b002      	add	sp, #8
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	20000164 	.word	0x20000164

080018e0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80018e4:	f7ff ffc3 	bl	800186e <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80018e8:	2064      	movs	r0, #100	; 0x64
 80018ea:	f000 fa71 	bl	8001dd0 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80018ee:	2000      	movs	r0, #0
 80018f0:	f000 fa0c 	bl	8001d0c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80018f4:	2020      	movs	r0, #32
 80018f6:	f7ff ffbf 	bl	8001878 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80018fa:	2000      	movs	r0, #0
 80018fc:	f7ff ffbc 	bl	8001878 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001900:	20b0      	movs	r0, #176	; 0xb0
 8001902:	f7ff ffb9 	bl	8001878 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 8001906:	20c0      	movs	r0, #192	; 0xc0
 8001908:	f7ff ffb6 	bl	8001878 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800190c:	2000      	movs	r0, #0
 800190e:	f7ff ffb3 	bl	8001878 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001912:	2010      	movs	r0, #16
 8001914:	f7ff ffb0 	bl	8001878 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001918:	2040      	movs	r0, #64	; 0x40
 800191a:	f7ff ffad 	bl	8001878 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800191e:	20ff      	movs	r0, #255	; 0xff
 8001920:	f000 f9dc 	bl	8001cdc <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
 8001924:	20a0      	movs	r0, #160	; 0xa0
 8001926:	f7ff ffa7 	bl	8001878 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800192a:	20a6      	movs	r0, #166	; 0xa6
 800192c:	f7ff ffa4 	bl	8001878 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001930:	20a8      	movs	r0, #168	; 0xa8
 8001932:	f7ff ffa1 	bl	8001878 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001936:	203f      	movs	r0, #63	; 0x3f
 8001938:	f7ff ff9e 	bl	8001878 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800193c:	20a4      	movs	r0, #164	; 0xa4
 800193e:	f7ff ff9b 	bl	8001878 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001942:	20d3      	movs	r0, #211	; 0xd3
 8001944:	f7ff ff98 	bl	8001878 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001948:	2000      	movs	r0, #0
 800194a:	f7ff ff95 	bl	8001878 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800194e:	20d5      	movs	r0, #213	; 0xd5
 8001950:	f7ff ff92 	bl	8001878 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001954:	20f0      	movs	r0, #240	; 0xf0
 8001956:	f7ff ff8f 	bl	8001878 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800195a:	20d9      	movs	r0, #217	; 0xd9
 800195c:	f7ff ff8c 	bl	8001878 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001960:	2022      	movs	r0, #34	; 0x22
 8001962:	f7ff ff89 	bl	8001878 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001966:	20da      	movs	r0, #218	; 0xda
 8001968:	f7ff ff86 	bl	8001878 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x02);
 800196c:	2002      	movs	r0, #2
 800196e:	f7ff ff83 	bl	8001878 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001972:	20db      	movs	r0, #219	; 0xdb
 8001974:	f7ff ff80 	bl	8001878 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001978:	2020      	movs	r0, #32
 800197a:	f7ff ff7d 	bl	8001878 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800197e:	208d      	movs	r0, #141	; 0x8d
 8001980:	f7ff ff7a 	bl	8001878 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001984:	2014      	movs	r0, #20
 8001986:	f7ff ff77 	bl	8001878 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800198a:	2001      	movs	r0, #1
 800198c:	f000 f9be 	bl	8001d0c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001990:	2000      	movs	r0, #0
 8001992:	f000 f811 	bl	80019b8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001996:	f000 f833 	bl	8001a00 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <ssd1306_Init+0xd4>)
 800199c:	2200      	movs	r2, #0
 800199e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80019a0:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <ssd1306_Init+0xd4>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80019a6:	4b03      	ldr	r3, [pc, #12]	; (80019b4 <ssd1306_Init+0xd4>)
 80019a8:	2201      	movs	r2, #1
 80019aa:	711a      	strb	r2, [r3, #4]
}
 80019ac:	46c0      	nop			; (mov r8, r8)
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	200006f0 	.word	0x200006f0

080019b8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	0002      	movs	r2, r0
 80019c0:	1dfb      	adds	r3, r7, #7
 80019c2:	701a      	strb	r2, [r3, #0]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80019c4:	2300      	movs	r3, #0
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	e00e      	b.n	80019e8 <ssd1306_Fill+0x30>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80019ca:	1dfb      	adds	r3, r7, #7
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <ssd1306_Fill+0x1e>
 80019d2:	2100      	movs	r1, #0
 80019d4:	e000      	b.n	80019d8 <ssd1306_Fill+0x20>
 80019d6:	21ff      	movs	r1, #255	; 0xff
 80019d8:	4a08      	ldr	r2, [pc, #32]	; (80019fc <ssd1306_Fill+0x44>)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	18d3      	adds	r3, r2, r3
 80019de:	1c0a      	adds	r2, r1, #0
 80019e0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	3301      	adds	r3, #1
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	2380      	movs	r3, #128	; 0x80
 80019ec:	00db      	lsls	r3, r3, #3
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d3eb      	bcc.n	80019ca <ssd1306_Fill+0x12>
    }
}
 80019f2:	46c0      	nop			; (mov r8, r8)
 80019f4:	46c0      	nop			; (mov r8, r8)
 80019f6:	46bd      	mov	sp, r7
 80019f8:	b004      	add	sp, #16
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	200002f0 	.word	0x200002f0

08001a00 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001a06:	1dfb      	adds	r3, r7, #7
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]
 8001a0c:	e01a      	b.n	8001a44 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001a0e:	1dfb      	adds	r3, r7, #7
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	3b50      	subs	r3, #80	; 0x50
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	0018      	movs	r0, r3
 8001a18:	f7ff ff2e 	bl	8001878 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	f7ff ff2b 	bl	8001878 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001a22:	2010      	movs	r0, #16
 8001a24:	f7ff ff28 	bl	8001878 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001a28:	1dfb      	adds	r3, r7, #7
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	01da      	lsls	r2, r3, #7
 8001a2e:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <ssd1306_UpdateScreen+0x58>)
 8001a30:	18d3      	adds	r3, r2, r3
 8001a32:	2180      	movs	r1, #128	; 0x80
 8001a34:	0018      	movs	r0, r3
 8001a36:	f7ff ff39 	bl	80018ac <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001a3a:	1dfb      	adds	r3, r7, #7
 8001a3c:	781a      	ldrb	r2, [r3, #0]
 8001a3e:	1dfb      	adds	r3, r7, #7
 8001a40:	3201      	adds	r2, #1
 8001a42:	701a      	strb	r2, [r3, #0]
 8001a44:	1dfb      	adds	r3, r7, #7
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b07      	cmp	r3, #7
 8001a4a:	d9e0      	bls.n	8001a0e <ssd1306_UpdateScreen+0xe>
    }
}
 8001a4c:	46c0      	nop			; (mov r8, r8)
 8001a4e:	46c0      	nop			; (mov r8, r8)
 8001a50:	46bd      	mov	sp, r7
 8001a52:	b002      	add	sp, #8
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	46c0      	nop			; (mov r8, r8)
 8001a58:	200002f0 	.word	0x200002f0

08001a5c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001a5c:	b590      	push	{r4, r7, lr}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	0004      	movs	r4, r0
 8001a64:	0008      	movs	r0, r1
 8001a66:	0011      	movs	r1, r2
 8001a68:	1dfb      	adds	r3, r7, #7
 8001a6a:	1c22      	adds	r2, r4, #0
 8001a6c:	701a      	strb	r2, [r3, #0]
 8001a6e:	1dbb      	adds	r3, r7, #6
 8001a70:	1c02      	adds	r2, r0, #0
 8001a72:	701a      	strb	r2, [r3, #0]
 8001a74:	1d7b      	adds	r3, r7, #5
 8001a76:	1c0a      	adds	r2, r1, #0
 8001a78:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001a7a:	1dfb      	adds	r3, r7, #7
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	b25b      	sxtb	r3, r3
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	db47      	blt.n	8001b14 <ssd1306_DrawPixel+0xb8>
 8001a84:	1dbb      	adds	r3, r7, #6
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b3f      	cmp	r3, #63	; 0x3f
 8001a8a:	d843      	bhi.n	8001b14 <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001a8c:	1d7b      	adds	r3, r7, #5
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d11e      	bne.n	8001ad2 <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001a94:	1dfb      	adds	r3, r7, #7
 8001a96:	781a      	ldrb	r2, [r3, #0]
 8001a98:	1dbb      	adds	r3, r7, #6
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	08db      	lsrs	r3, r3, #3
 8001a9e:	b2d8      	uxtb	r0, r3
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	01db      	lsls	r3, r3, #7
 8001aa4:	18d3      	adds	r3, r2, r3
 8001aa6:	4a1d      	ldr	r2, [pc, #116]	; (8001b1c <ssd1306_DrawPixel+0xc0>)
 8001aa8:	5cd3      	ldrb	r3, [r2, r3]
 8001aaa:	b25a      	sxtb	r2, r3
 8001aac:	1dbb      	adds	r3, r7, #6
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2107      	movs	r1, #7
 8001ab2:	400b      	ands	r3, r1
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	4099      	lsls	r1, r3
 8001ab8:	000b      	movs	r3, r1
 8001aba:	b25b      	sxtb	r3, r3
 8001abc:	4313      	orrs	r3, r2
 8001abe:	b259      	sxtb	r1, r3
 8001ac0:	1dfb      	adds	r3, r7, #7
 8001ac2:	781a      	ldrb	r2, [r3, #0]
 8001ac4:	0003      	movs	r3, r0
 8001ac6:	01db      	lsls	r3, r3, #7
 8001ac8:	18d3      	adds	r3, r2, r3
 8001aca:	b2c9      	uxtb	r1, r1
 8001acc:	4a13      	ldr	r2, [pc, #76]	; (8001b1c <ssd1306_DrawPixel+0xc0>)
 8001ace:	54d1      	strb	r1, [r2, r3]
 8001ad0:	e021      	b.n	8001b16 <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001ad2:	1dfb      	adds	r3, r7, #7
 8001ad4:	781a      	ldrb	r2, [r3, #0]
 8001ad6:	1dbb      	adds	r3, r7, #6
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	08db      	lsrs	r3, r3, #3
 8001adc:	b2d8      	uxtb	r0, r3
 8001ade:	0003      	movs	r3, r0
 8001ae0:	01db      	lsls	r3, r3, #7
 8001ae2:	18d3      	adds	r3, r2, r3
 8001ae4:	4a0d      	ldr	r2, [pc, #52]	; (8001b1c <ssd1306_DrawPixel+0xc0>)
 8001ae6:	5cd3      	ldrb	r3, [r2, r3]
 8001ae8:	b25b      	sxtb	r3, r3
 8001aea:	1dba      	adds	r2, r7, #6
 8001aec:	7812      	ldrb	r2, [r2, #0]
 8001aee:	2107      	movs	r1, #7
 8001af0:	400a      	ands	r2, r1
 8001af2:	2101      	movs	r1, #1
 8001af4:	4091      	lsls	r1, r2
 8001af6:	000a      	movs	r2, r1
 8001af8:	b252      	sxtb	r2, r2
 8001afa:	43d2      	mvns	r2, r2
 8001afc:	b252      	sxtb	r2, r2
 8001afe:	4013      	ands	r3, r2
 8001b00:	b259      	sxtb	r1, r3
 8001b02:	1dfb      	adds	r3, r7, #7
 8001b04:	781a      	ldrb	r2, [r3, #0]
 8001b06:	0003      	movs	r3, r0
 8001b08:	01db      	lsls	r3, r3, #7
 8001b0a:	18d3      	adds	r3, r2, r3
 8001b0c:	b2c9      	uxtb	r1, r1
 8001b0e:	4a03      	ldr	r2, [pc, #12]	; (8001b1c <ssd1306_DrawPixel+0xc0>)
 8001b10:	54d1      	strb	r1, [r2, r3]
 8001b12:	e000      	b.n	8001b16 <ssd1306_DrawPixel+0xba>
        return;
 8001b14:	46c0      	nop			; (mov r8, r8)
    }
}
 8001b16:	46bd      	mov	sp, r7
 8001b18:	b003      	add	sp, #12
 8001b1a:	bd90      	pop	{r4, r7, pc}
 8001b1c:	200002f0 	.word	0x200002f0

08001b20 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001b20:	b590      	push	{r4, r7, lr}
 8001b22:	b089      	sub	sp, #36	; 0x24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	0004      	movs	r4, r0
 8001b28:	1d38      	adds	r0, r7, #4
 8001b2a:	6001      	str	r1, [r0, #0]
 8001b2c:	6042      	str	r2, [r0, #4]
 8001b2e:	0019      	movs	r1, r3
 8001b30:	200f      	movs	r0, #15
 8001b32:	183b      	adds	r3, r7, r0
 8001b34:	1c22      	adds	r2, r4, #0
 8001b36:	701a      	strb	r2, [r3, #0]
 8001b38:	230e      	movs	r3, #14
 8001b3a:	18fb      	adds	r3, r7, r3
 8001b3c:	1c0a      	adds	r2, r1, #0
 8001b3e:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001b40:	183b      	adds	r3, r7, r0
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b1f      	cmp	r3, #31
 8001b46:	d903      	bls.n	8001b50 <ssd1306_WriteChar+0x30>
 8001b48:	183b      	adds	r3, r7, r0
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b7e      	cmp	r3, #126	; 0x7e
 8001b4e:	d901      	bls.n	8001b54 <ssd1306_WriteChar+0x34>
        return 0;
 8001b50:	2300      	movs	r3, #0
 8001b52:	e078      	b.n	8001c46 <ssd1306_WriteChar+0x126>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001b54:	4b3e      	ldr	r3, [pc, #248]	; (8001c50 <ssd1306_WriteChar+0x130>)
 8001b56:	881b      	ldrh	r3, [r3, #0]
 8001b58:	001a      	movs	r2, r3
 8001b5a:	1d3b      	adds	r3, r7, #4
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	18d3      	adds	r3, r2, r3
 8001b60:	2b80      	cmp	r3, #128	; 0x80
 8001b62:	dc07      	bgt.n	8001b74 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001b64:	4b3a      	ldr	r3, [pc, #232]	; (8001c50 <ssd1306_WriteChar+0x130>)
 8001b66:	885b      	ldrh	r3, [r3, #2]
 8001b68:	001a      	movs	r2, r3
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	785b      	ldrb	r3, [r3, #1]
 8001b6e:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001b70:	2b40      	cmp	r3, #64	; 0x40
 8001b72:	dd01      	ble.n	8001b78 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	e066      	b.n	8001c46 <ssd1306_WriteChar+0x126>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61fb      	str	r3, [r7, #28]
 8001b7c:	e051      	b.n	8001c22 <ssd1306_WriteChar+0x102>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001b7e:	1d3b      	adds	r3, r7, #4
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	230f      	movs	r3, #15
 8001b84:	18fb      	adds	r3, r7, r3
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	3b20      	subs	r3, #32
 8001b8a:	1d39      	adds	r1, r7, #4
 8001b8c:	7849      	ldrb	r1, [r1, #1]
 8001b8e:	434b      	muls	r3, r1
 8001b90:	0019      	movs	r1, r3
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	18cb      	adds	r3, r1, r3
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	18d3      	adds	r3, r2, r3
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61bb      	str	r3, [r7, #24]
 8001ba2:	e035      	b.n	8001c10 <ssd1306_WriteChar+0xf0>
            if((b << j) & 0x8000)  {
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	409a      	lsls	r2, r3
 8001baa:	2380      	movs	r3, #128	; 0x80
 8001bac:	021b      	lsls	r3, r3, #8
 8001bae:	4013      	ands	r3, r2
 8001bb0:	d014      	beq.n	8001bdc <ssd1306_WriteChar+0xbc>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001bb2:	4b27      	ldr	r3, [pc, #156]	; (8001c50 <ssd1306_WriteChar+0x130>)
 8001bb4:	881b      	ldrh	r3, [r3, #0]
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	18d3      	adds	r3, r2, r3
 8001bbe:	b2d8      	uxtb	r0, r3
 8001bc0:	4b23      	ldr	r3, [pc, #140]	; (8001c50 <ssd1306_WriteChar+0x130>)
 8001bc2:	885b      	ldrh	r3, [r3, #2]
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	18d3      	adds	r3, r2, r3
 8001bcc:	b2d9      	uxtb	r1, r3
 8001bce:	230e      	movs	r3, #14
 8001bd0:	18fb      	adds	r3, r7, r3
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	001a      	movs	r2, r3
 8001bd6:	f7ff ff41 	bl	8001a5c <ssd1306_DrawPixel>
 8001bda:	e016      	b.n	8001c0a <ssd1306_WriteChar+0xea>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001bdc:	4b1c      	ldr	r3, [pc, #112]	; (8001c50 <ssd1306_WriteChar+0x130>)
 8001bde:	881b      	ldrh	r3, [r3, #0]
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	18d3      	adds	r3, r2, r3
 8001be8:	b2d8      	uxtb	r0, r3
 8001bea:	4b19      	ldr	r3, [pc, #100]	; (8001c50 <ssd1306_WriteChar+0x130>)
 8001bec:	885b      	ldrh	r3, [r3, #2]
 8001bee:	b2da      	uxtb	r2, r3
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	18d3      	adds	r3, r2, r3
 8001bf6:	b2d9      	uxtb	r1, r3
 8001bf8:	230e      	movs	r3, #14
 8001bfa:	18fb      	adds	r3, r7, r3
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	425a      	negs	r2, r3
 8001c00:	4153      	adcs	r3, r2
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	001a      	movs	r2, r3
 8001c06:	f7ff ff29 	bl	8001a5c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	61bb      	str	r3, [r7, #24]
 8001c10:	1d3b      	adds	r3, r7, #4
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	001a      	movs	r2, r3
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d3c3      	bcc.n	8001ba4 <ssd1306_WriteChar+0x84>
    for(i = 0; i < Font.FontHeight; i++) {
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	61fb      	str	r3, [r7, #28]
 8001c22:	1d3b      	adds	r3, r7, #4
 8001c24:	785b      	ldrb	r3, [r3, #1]
 8001c26:	001a      	movs	r2, r3
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d3a7      	bcc.n	8001b7e <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001c2e:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <ssd1306_WriteChar+0x130>)
 8001c30:	881a      	ldrh	r2, [r3, #0]
 8001c32:	1d3b      	adds	r3, r7, #4
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	18d3      	adds	r3, r2, r3
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	4b04      	ldr	r3, [pc, #16]	; (8001c50 <ssd1306_WriteChar+0x130>)
 8001c3e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001c40:	230f      	movs	r3, #15
 8001c42:	18fb      	adds	r3, r7, r3
 8001c44:	781b      	ldrb	r3, [r3, #0]
}
 8001c46:	0018      	movs	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	b009      	add	sp, #36	; 0x24
 8001c4c:	bd90      	pop	{r4, r7, pc}
 8001c4e:	46c0      	nop			; (mov r8, r8)
 8001c50:	200006f0 	.word	0x200006f0

08001c54 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	1d38      	adds	r0, r7, #4
 8001c5e:	6001      	str	r1, [r0, #0]
 8001c60:	6042      	str	r2, [r0, #4]
 8001c62:	001a      	movs	r2, r3
 8001c64:	1cfb      	adds	r3, r7, #3
 8001c66:	701a      	strb	r2, [r3, #0]
    while (*str) {
 8001c68:	e014      	b.n	8001c94 <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	7818      	ldrb	r0, [r3, #0]
 8001c6e:	1cfb      	adds	r3, r7, #3
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	1d3a      	adds	r2, r7, #4
 8001c74:	6811      	ldr	r1, [r2, #0]
 8001c76:	6852      	ldr	r2, [r2, #4]
 8001c78:	f7ff ff52 	bl	8001b20 <ssd1306_WriteChar>
 8001c7c:	0003      	movs	r3, r0
 8001c7e:	001a      	movs	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d002      	beq.n	8001c8e <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	e008      	b.n	8001ca0 <ssd1306_WriteString+0x4c>
        }
        str++;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	3301      	adds	r3, #1
 8001c92:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d1e6      	bne.n	8001c6a <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	781b      	ldrb	r3, [r3, #0]
}
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	b004      	add	sp, #16
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	0002      	movs	r2, r0
 8001cb0:	1dfb      	adds	r3, r7, #7
 8001cb2:	701a      	strb	r2, [r3, #0]
 8001cb4:	1dbb      	adds	r3, r7, #6
 8001cb6:	1c0a      	adds	r2, r1, #0
 8001cb8:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 8001cba:	1dfb      	adds	r3, r7, #7
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <ssd1306_SetCursor+0x30>)
 8001cc2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001cc4:	1dbb      	adds	r3, r7, #6
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	4b03      	ldr	r3, [pc, #12]	; (8001cd8 <ssd1306_SetCursor+0x30>)
 8001ccc:	805a      	strh	r2, [r3, #2]
}
 8001cce:	46c0      	nop			; (mov r8, r8)
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	b002      	add	sp, #8
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	46c0      	nop			; (mov r8, r8)
 8001cd8:	200006f0 	.word	0x200006f0

08001cdc <ssd1306_SetContrast>:

void ssd1306_StopScroll(void){
	ssd1306_WriteCommand(0x2E);
}

void ssd1306_SetContrast(const uint8_t value) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	0002      	movs	r2, r0
 8001ce4:	1dfb      	adds	r3, r7, #7
 8001ce6:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001ce8:	210f      	movs	r1, #15
 8001cea:	187b      	adds	r3, r7, r1
 8001cec:	2281      	movs	r2, #129	; 0x81
 8001cee:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001cf0:	187b      	adds	r3, r7, r1
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	f7ff fdbf 	bl	8001878 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001cfa:	1dfb      	adds	r3, r7, #7
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	0018      	movs	r0, r3
 8001d00:	f7ff fdba 	bl	8001878 <ssd1306_WriteCommand>
}
 8001d04:	46c0      	nop			; (mov r8, r8)
 8001d06:	46bd      	mov	sp, r7
 8001d08:	b004      	add	sp, #16
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	0002      	movs	r2, r0
 8001d14:	1dfb      	adds	r3, r7, #7
 8001d16:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 8001d18:	1dfb      	adds	r3, r7, #7
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d007      	beq.n	8001d30 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 8001d20:	230f      	movs	r3, #15
 8001d22:	18fb      	adds	r3, r7, r3
 8001d24:	22af      	movs	r2, #175	; 0xaf
 8001d26:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 8001d28:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <ssd1306_SetDisplayOn+0x48>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	715a      	strb	r2, [r3, #5]
 8001d2e:	e006      	b.n	8001d3e <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 8001d30:	230f      	movs	r3, #15
 8001d32:	18fb      	adds	r3, r7, r3
 8001d34:	22ae      	movs	r2, #174	; 0xae
 8001d36:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 8001d38:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <ssd1306_SetDisplayOn+0x48>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001d3e:	230f      	movs	r3, #15
 8001d40:	18fb      	adds	r3, r7, r3
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	0018      	movs	r0, r3
 8001d46:	f7ff fd97 	bl	8001878 <ssd1306_WriteCommand>
}
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	b004      	add	sp, #16
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	46c0      	nop			; (mov r8, r8)
 8001d54:	200006f0 	.word	0x200006f0

08001d58 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d5e:	1dfb      	adds	r3, r7, #7
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d64:	4b0b      	ldr	r3, [pc, #44]	; (8001d94 <HAL_Init+0x3c>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <HAL_Init+0x3c>)
 8001d6a:	2180      	movs	r1, #128	; 0x80
 8001d6c:	0049      	lsls	r1, r1, #1
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d72:	2003      	movs	r0, #3
 8001d74:	f7ff fc4c 	bl	8001610 <HAL_InitTick>
 8001d78:	1e03      	subs	r3, r0, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001d7c:	1dfb      	adds	r3, r7, #7
 8001d7e:	2201      	movs	r2, #1
 8001d80:	701a      	strb	r2, [r3, #0]
 8001d82:	e001      	b.n	8001d88 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001d84:	f7ff fabe 	bl	8001304 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d88:	1dfb      	adds	r3, r7, #7
 8001d8a:	781b      	ldrb	r3, [r3, #0]
}
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	b002      	add	sp, #8
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40022000 	.word	0x40022000

08001d98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d9c:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <HAL_IncTick+0x1c>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	001a      	movs	r2, r3
 8001da2:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <HAL_IncTick+0x20>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	18d2      	adds	r2, r2, r3
 8001da8:	4b03      	ldr	r3, [pc, #12]	; (8001db8 <HAL_IncTick+0x20>)
 8001daa:	601a      	str	r2, [r3, #0]
}
 8001dac:	46c0      	nop			; (mov r8, r8)
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	46c0      	nop			; (mov r8, r8)
 8001db4:	20000028 	.word	0x20000028
 8001db8:	200006f8 	.word	0x200006f8

08001dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001dc0:	4b02      	ldr	r3, [pc, #8]	; (8001dcc <HAL_GetTick+0x10>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
}
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	46c0      	nop			; (mov r8, r8)
 8001dcc:	200006f8 	.word	0x200006f8

08001dd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dd8:	f7ff fff0 	bl	8001dbc <HAL_GetTick>
 8001ddc:	0003      	movs	r3, r0
 8001dde:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	3301      	adds	r3, #1
 8001de8:	d005      	beq.n	8001df6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dea:	4b0a      	ldr	r3, [pc, #40]	; (8001e14 <HAL_Delay+0x44>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	001a      	movs	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	189b      	adds	r3, r3, r2
 8001df4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001df6:	46c0      	nop			; (mov r8, r8)
 8001df8:	f7ff ffe0 	bl	8001dbc <HAL_GetTick>
 8001dfc:	0002      	movs	r2, r0
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d8f7      	bhi.n	8001df8 <HAL_Delay+0x28>
  {
  }
}
 8001e08:	46c0      	nop			; (mov r8, r8)
 8001e0a:	46c0      	nop			; (mov r8, r8)
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	b004      	add	sp, #16
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	46c0      	nop			; (mov r8, r8)
 8001e14:	20000028 	.word	0x20000028

08001e18 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a05      	ldr	r2, [pc, #20]	; (8001e3c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001e28:	401a      	ands	r2, r3
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	601a      	str	r2, [r3, #0]
}
 8001e32:	46c0      	nop			; (mov r8, r8)
 8001e34:	46bd      	mov	sp, r7
 8001e36:	b002      	add	sp, #8
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	46c0      	nop			; (mov r8, r8)
 8001e3c:	fe3fffff 	.word	0xfe3fffff

08001e40 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	23e0      	movs	r3, #224	; 0xe0
 8001e4e:	045b      	lsls	r3, r3, #17
 8001e50:	4013      	ands	r3, r2
}
 8001e52:	0018      	movs	r0, r3
 8001e54:	46bd      	mov	sp, r7
 8001e56:	b002      	add	sp, #8
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b084      	sub	sp, #16
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	60f8      	str	r0, [r7, #12]
 8001e62:	60b9      	str	r1, [r7, #8]
 8001e64:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	2104      	movs	r1, #4
 8001e6e:	400a      	ands	r2, r1
 8001e70:	2107      	movs	r1, #7
 8001e72:	4091      	lsls	r1, r2
 8001e74:	000a      	movs	r2, r1
 8001e76:	43d2      	mvns	r2, r2
 8001e78:	401a      	ands	r2, r3
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	2104      	movs	r1, #4
 8001e7e:	400b      	ands	r3, r1
 8001e80:	6879      	ldr	r1, [r7, #4]
 8001e82:	4099      	lsls	r1, r3
 8001e84:	000b      	movs	r3, r1
 8001e86:	431a      	orrs	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001e8c:	46c0      	nop			; (mov r8, r8)
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	b004      	add	sp, #16
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
 8001e9c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	2104      	movs	r1, #4
 8001ea6:	400a      	ands	r2, r1
 8001ea8:	2107      	movs	r1, #7
 8001eaa:	4091      	lsls	r1, r2
 8001eac:	000a      	movs	r2, r1
 8001eae:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	2104      	movs	r1, #4
 8001eb4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001eb6:	40da      	lsrs	r2, r3
 8001eb8:	0013      	movs	r3, r2
}
 8001eba:	0018      	movs	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	b002      	add	sp, #8
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	23c0      	movs	r3, #192	; 0xc0
 8001ed0:	011b      	lsls	r3, r3, #4
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d101      	bne.n	8001eda <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e000      	b.n	8001edc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	0018      	movs	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	b002      	add	sp, #8
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef4:	68ba      	ldr	r2, [r7, #8]
 8001ef6:	211f      	movs	r1, #31
 8001ef8:	400a      	ands	r2, r1
 8001efa:	210f      	movs	r1, #15
 8001efc:	4091      	lsls	r1, r2
 8001efe:	000a      	movs	r2, r1
 8001f00:	43d2      	mvns	r2, r2
 8001f02:	401a      	ands	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	0e9b      	lsrs	r3, r3, #26
 8001f08:	210f      	movs	r1, #15
 8001f0a:	4019      	ands	r1, r3
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	201f      	movs	r0, #31
 8001f10:	4003      	ands	r3, r0
 8001f12:	4099      	lsls	r1, r3
 8001f14:	000b      	movs	r3, r1
 8001f16:	431a      	orrs	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f1c:	46c0      	nop			; (mov r8, r8)
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	b004      	add	sp, #16
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	035b      	lsls	r3, r3, #13
 8001f36:	0b5b      	lsrs	r3, r3, #13
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f3e:	46c0      	nop			; (mov r8, r8)
 8001f40:	46bd      	mov	sp, r7
 8001f42:	b002      	add	sp, #8
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
 8001f4e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	0352      	lsls	r2, r2, #13
 8001f58:	0b52      	lsrs	r2, r2, #13
 8001f5a:	43d2      	mvns	r2, r2
 8001f5c:	401a      	ands	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f62:	46c0      	nop			; (mov r8, r8)
 8001f64:	46bd      	mov	sp, r7
 8001f66:	b002      	add	sp, #8
 8001f68:	bd80      	pop	{r7, pc}

08001f6a <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(ADC_TypeDef *ADCx)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b082      	sub	sp, #8
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	2203      	movs	r2, #3
 8001f78:	4013      	ands	r3, r2
}
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	b002      	add	sp, #8
 8001f80:	bd80      	pop	{r7, pc}
	...

08001f84 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	695b      	ldr	r3, [r3, #20]
 8001f94:	68ba      	ldr	r2, [r7, #8]
 8001f96:	0212      	lsls	r2, r2, #8
 8001f98:	43d2      	mvns	r2, r2
 8001f9a:	401a      	ands	r2, r3
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	021b      	lsls	r3, r3, #8
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	400b      	ands	r3, r1
 8001fa4:	4904      	ldr	r1, [pc, #16]	; (8001fb8 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001fa6:	400b      	ands	r3, r1
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	b004      	add	sp, #16
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	46c0      	nop			; (mov r8, r8)
 8001fb8:	07ffff00 	.word	0x07ffff00

08001fbc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	4a05      	ldr	r2, [pc, #20]	; (8001fe0 <LL_ADC_EnableInternalRegulator+0x24>)
 8001fca:	4013      	ands	r3, r2
 8001fcc:	2280      	movs	r2, #128	; 0x80
 8001fce:	0552      	lsls	r2, r2, #21
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	b002      	add	sp, #8
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	46c0      	nop			; (mov r8, r8)
 8001fe0:	6fffffe8 	.word	0x6fffffe8

08001fe4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	055b      	lsls	r3, r3, #21
 8001ff4:	401a      	ands	r2, r3
 8001ff6:	2380      	movs	r3, #128	; 0x80
 8001ff8:	055b      	lsls	r3, r3, #21
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d101      	bne.n	8002002 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001ffe:	2301      	movs	r3, #1
 8002000:	e000      	b.n	8002004 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002002:	2300      	movs	r3, #0
}
 8002004:	0018      	movs	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	b002      	add	sp, #8
 800200a:	bd80      	pop	{r7, pc}

0800200c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	4a04      	ldr	r2, [pc, #16]	; (800202c <LL_ADC_Enable+0x20>)
 800201a:	4013      	ands	r3, r2
 800201c:	2201      	movs	r2, #1
 800201e:	431a      	orrs	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002024:	46c0      	nop			; (mov r8, r8)
 8002026:	46bd      	mov	sp, r7
 8002028:	b002      	add	sp, #8
 800202a:	bd80      	pop	{r7, pc}
 800202c:	7fffffe8 	.word	0x7fffffe8

08002030 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	4a04      	ldr	r2, [pc, #16]	; (8002050 <LL_ADC_Disable+0x20>)
 800203e:	4013      	ands	r3, r2
 8002040:	2202      	movs	r2, #2
 8002042:	431a      	orrs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002048:	46c0      	nop			; (mov r8, r8)
 800204a:	46bd      	mov	sp, r7
 800204c:	b002      	add	sp, #8
 800204e:	bd80      	pop	{r7, pc}
 8002050:	7fffffe8 	.word	0x7fffffe8

08002054 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	2201      	movs	r2, #1
 8002062:	4013      	ands	r3, r2
 8002064:	2b01      	cmp	r3, #1
 8002066:	d101      	bne.n	800206c <LL_ADC_IsEnabled+0x18>
 8002068:	2301      	movs	r3, #1
 800206a:	e000      	b.n	800206e <LL_ADC_IsEnabled+0x1a>
 800206c:	2300      	movs	r3, #0
}
 800206e:	0018      	movs	r0, r3
 8002070:	46bd      	mov	sp, r7
 8002072:	b002      	add	sp, #8
 8002074:	bd80      	pop	{r7, pc}

08002076 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	2202      	movs	r2, #2
 8002084:	4013      	ands	r3, r2
 8002086:	2b02      	cmp	r3, #2
 8002088:	d101      	bne.n	800208e <LL_ADC_IsDisableOngoing+0x18>
 800208a:	2301      	movs	r3, #1
 800208c:	e000      	b.n	8002090 <LL_ADC_IsDisableOngoing+0x1a>
 800208e:	2300      	movs	r3, #0
}
 8002090:	0018      	movs	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	b002      	add	sp, #8
 8002096:	bd80      	pop	{r7, pc}

08002098 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	4a04      	ldr	r2, [pc, #16]	; (80020b8 <LL_ADC_REG_StartConversion+0x20>)
 80020a6:	4013      	ands	r3, r2
 80020a8:	2204      	movs	r2, #4
 80020aa:	431a      	orrs	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80020b0:	46c0      	nop			; (mov r8, r8)
 80020b2:	46bd      	mov	sp, r7
 80020b4:	b002      	add	sp, #8
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	7fffffe8 	.word	0x7fffffe8

080020bc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	2204      	movs	r2, #4
 80020ca:	4013      	ands	r3, r2
 80020cc:	2b04      	cmp	r3, #4
 80020ce:	d101      	bne.n	80020d4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80020d0:	2301      	movs	r3, #1
 80020d2:	e000      	b.n	80020d6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	0018      	movs	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	b002      	add	sp, #8
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020e8:	231f      	movs	r3, #31
 80020ea:	18fb      	adds	r3, r7, r3
 80020ec:	2200      	movs	r2, #0
 80020ee:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e17f      	b.n	8002406 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10a      	bne.n	8002124 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	0018      	movs	r0, r3
 8002112:	f7ff f91b 	bl	800134c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2254      	movs	r2, #84	; 0x54
 8002120:	2100      	movs	r1, #0
 8002122:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	0018      	movs	r0, r3
 800212a:	f7ff ff5b 	bl	8001fe4 <LL_ADC_IsInternalRegulatorEnabled>
 800212e:	1e03      	subs	r3, r0, #0
 8002130:	d115      	bne.n	800215e <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	0018      	movs	r0, r3
 8002138:	f7ff ff40 	bl	8001fbc <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800213c:	4bb4      	ldr	r3, [pc, #720]	; (8002410 <HAL_ADC_Init+0x330>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	49b4      	ldr	r1, [pc, #720]	; (8002414 <HAL_ADC_Init+0x334>)
 8002142:	0018      	movs	r0, r3
 8002144:	f7fd ffe6 	bl	8000114 <__udivsi3>
 8002148:	0003      	movs	r3, r0
 800214a:	3301      	adds	r3, #1
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002150:	e002      	b.n	8002158 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	3b01      	subs	r3, #1
 8002156:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1f9      	bne.n	8002152 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	0018      	movs	r0, r3
 8002164:	f7ff ff3e 	bl	8001fe4 <LL_ADC_IsInternalRegulatorEnabled>
 8002168:	1e03      	subs	r3, r0, #0
 800216a:	d10f      	bne.n	800218c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002170:	2210      	movs	r2, #16
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217c:	2201      	movs	r2, #1
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002184:	231f      	movs	r3, #31
 8002186:	18fb      	adds	r3, r7, r3
 8002188:	2201      	movs	r2, #1
 800218a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	0018      	movs	r0, r3
 8002192:	f7ff ff93 	bl	80020bc <LL_ADC_REG_IsConversionOngoing>
 8002196:	0003      	movs	r3, r0
 8002198:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219e:	2210      	movs	r2, #16
 80021a0:	4013      	ands	r3, r2
 80021a2:	d000      	beq.n	80021a6 <HAL_ADC_Init+0xc6>
 80021a4:	e122      	b.n	80023ec <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d000      	beq.n	80021ae <HAL_ADC_Init+0xce>
 80021ac:	e11e      	b.n	80023ec <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b2:	4a99      	ldr	r2, [pc, #612]	; (8002418 <HAL_ADC_Init+0x338>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	2202      	movs	r2, #2
 80021b8:	431a      	orrs	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	0018      	movs	r0, r3
 80021c4:	f7ff ff46 	bl	8002054 <LL_ADC_IsEnabled>
 80021c8:	1e03      	subs	r3, r0, #0
 80021ca:	d000      	beq.n	80021ce <HAL_ADC_Init+0xee>
 80021cc:	e0ad      	b.n	800232a <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	7e1b      	ldrb	r3, [r3, #24]
 80021d6:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80021d8:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	7e5b      	ldrb	r3, [r3, #25]
 80021de:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80021e0:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	7e9b      	ldrb	r3, [r3, #26]
 80021e6:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80021e8:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d002      	beq.n	80021f8 <HAL_ADC_Init+0x118>
 80021f2:	2380      	movs	r3, #128	; 0x80
 80021f4:	015b      	lsls	r3, r3, #5
 80021f6:	e000      	b.n	80021fa <HAL_ADC_Init+0x11a>
 80021f8:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80021fa:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002200:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	2b00      	cmp	r3, #0
 8002208:	da04      	bge.n	8002214 <HAL_ADC_Init+0x134>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	085b      	lsrs	r3, r3, #1
 8002212:	e001      	b.n	8002218 <HAL_ADC_Init+0x138>
 8002214:	2380      	movs	r3, #128	; 0x80
 8002216:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8002218:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	212c      	movs	r1, #44	; 0x2c
 800221e:	5c5b      	ldrb	r3, [r3, r1]
 8002220:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002222:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2220      	movs	r2, #32
 800222e:	5c9b      	ldrb	r3, [r3, r2]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d115      	bne.n	8002260 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	7e9b      	ldrb	r3, [r3, #26]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d105      	bne.n	8002248 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	2280      	movs	r2, #128	; 0x80
 8002240:	0252      	lsls	r2, r2, #9
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
 8002246:	e00b      	b.n	8002260 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224c:	2220      	movs	r2, #32
 800224e:	431a      	orrs	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002258:	2201      	movs	r2, #1
 800225a:	431a      	orrs	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00a      	beq.n	800227e <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800226c:	23e0      	movs	r3, #224	; 0xe0
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002276:	4313      	orrs	r3, r2
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	4a65      	ldr	r2, [pc, #404]	; (800241c <HAL_ADC_Init+0x33c>)
 8002286:	4013      	ands	r3, r2
 8002288:	0019      	movs	r1, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	430a      	orrs	r2, r1
 8002292:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	0f9b      	lsrs	r3, r3, #30
 800229a:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80022a0:	4313      	orrs	r3, r2
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	223c      	movs	r2, #60	; 0x3c
 80022ac:	5c9b      	ldrb	r3, [r3, r2]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d111      	bne.n	80022d6 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	0f9b      	lsrs	r3, r3, #30
 80022b8:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80022be:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80022c4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80022ca:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	2201      	movs	r2, #1
 80022d2:	4313      	orrs	r3, r2
 80022d4:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	4a50      	ldr	r2, [pc, #320]	; (8002420 <HAL_ADC_Init+0x340>)
 80022de:	4013      	ands	r3, r2
 80022e0:	0019      	movs	r1, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	23c0      	movs	r3, #192	; 0xc0
 80022f2:	061b      	lsls	r3, r3, #24
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d018      	beq.n	800232a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80022fc:	2380      	movs	r3, #128	; 0x80
 80022fe:	05db      	lsls	r3, r3, #23
 8002300:	429a      	cmp	r2, r3
 8002302:	d012      	beq.n	800232a <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002308:	2380      	movs	r3, #128	; 0x80
 800230a:	061b      	lsls	r3, r3, #24
 800230c:	429a      	cmp	r2, r3
 800230e:	d00c      	beq.n	800232a <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002310:	4b44      	ldr	r3, [pc, #272]	; (8002424 <HAL_ADC_Init+0x344>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a44      	ldr	r2, [pc, #272]	; (8002428 <HAL_ADC_Init+0x348>)
 8002316:	4013      	ands	r3, r2
 8002318:	0019      	movs	r1, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	23f0      	movs	r3, #240	; 0xf0
 8002320:	039b      	lsls	r3, r3, #14
 8002322:	401a      	ands	r2, r3
 8002324:	4b3f      	ldr	r3, [pc, #252]	; (8002424 <HAL_ADC_Init+0x344>)
 8002326:	430a      	orrs	r2, r1
 8002328:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6818      	ldr	r0, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002332:	001a      	movs	r2, r3
 8002334:	2100      	movs	r1, #0
 8002336:	f7ff fd90 	bl	8001e5a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6818      	ldr	r0, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002342:	493a      	ldr	r1, [pc, #232]	; (800242c <HAL_ADC_Init+0x34c>)
 8002344:	001a      	movs	r2, r3
 8002346:	f7ff fd88 	bl	8001e5a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d109      	bne.n	8002366 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2110      	movs	r1, #16
 800235e:	4249      	negs	r1, r1
 8002360:	430a      	orrs	r2, r1
 8002362:	629a      	str	r2, [r3, #40]	; 0x28
 8002364:	e018      	b.n	8002398 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691a      	ldr	r2, [r3, #16]
 800236a:	2380      	movs	r3, #128	; 0x80
 800236c:	039b      	lsls	r3, r3, #14
 800236e:	429a      	cmp	r2, r3
 8002370:	d112      	bne.n	8002398 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	3b01      	subs	r3, #1
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	221c      	movs	r2, #28
 8002382:	4013      	ands	r3, r2
 8002384:	2210      	movs	r2, #16
 8002386:	4252      	negs	r2, r2
 8002388:	409a      	lsls	r2, r3
 800238a:	0011      	movs	r1, r2
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	430a      	orrs	r2, r1
 8002396:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2100      	movs	r1, #0
 800239e:	0018      	movs	r0, r3
 80023a0:	f7ff fd78 	bl	8001e94 <LL_ADC_GetSamplingTimeCommonChannels>
 80023a4:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d10b      	bne.n	80023c6 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b8:	2203      	movs	r2, #3
 80023ba:	4393      	bics	r3, r2
 80023bc:	2201      	movs	r2, #1
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80023c4:	e01c      	b.n	8002400 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ca:	2212      	movs	r2, #18
 80023cc:	4393      	bics	r3, r2
 80023ce:	2210      	movs	r2, #16
 80023d0:	431a      	orrs	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023da:	2201      	movs	r2, #1
 80023dc:	431a      	orrs	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80023e2:	231f      	movs	r3, #31
 80023e4:	18fb      	adds	r3, r7, r3
 80023e6:	2201      	movs	r2, #1
 80023e8:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80023ea:	e009      	b.n	8002400 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f0:	2210      	movs	r2, #16
 80023f2:	431a      	orrs	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80023f8:	231f      	movs	r3, #31
 80023fa:	18fb      	adds	r3, r7, r3
 80023fc:	2201      	movs	r2, #1
 80023fe:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002400:	231f      	movs	r3, #31
 8002402:	18fb      	adds	r3, r7, r3
 8002404:	781b      	ldrb	r3, [r3, #0]
}
 8002406:	0018      	movs	r0, r3
 8002408:	46bd      	mov	sp, r7
 800240a:	b008      	add	sp, #32
 800240c:	bd80      	pop	{r7, pc}
 800240e:	46c0      	nop			; (mov r8, r8)
 8002410:	20000018 	.word	0x20000018
 8002414:	00030d40 	.word	0x00030d40
 8002418:	fffffefd 	.word	0xfffffefd
 800241c:	fffe0201 	.word	0xfffe0201
 8002420:	1ffffc02 	.word	0x1ffffc02
 8002424:	40012708 	.word	0x40012708
 8002428:	ffc3ffff 	.word	0xffc3ffff
 800242c:	07ffff04 	.word	0x07ffff04

08002430 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002430:	b5b0      	push	{r4, r5, r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	0018      	movs	r0, r3
 800243e:	f7ff fe3d 	bl	80020bc <LL_ADC_REG_IsConversionOngoing>
 8002442:	1e03      	subs	r3, r0, #0
 8002444:	d15f      	bne.n	8002506 <HAL_ADC_Start_IT+0xd6>
  {
    __HAL_LOCK(hadc);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2254      	movs	r2, #84	; 0x54
 800244a:	5c9b      	ldrb	r3, [r3, r2]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d101      	bne.n	8002454 <HAL_ADC_Start_IT+0x24>
 8002450:	2302      	movs	r3, #2
 8002452:	e05f      	b.n	8002514 <HAL_ADC_Start_IT+0xe4>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2254      	movs	r2, #84	; 0x54
 8002458:	2101      	movs	r1, #1
 800245a:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800245c:	250f      	movs	r5, #15
 800245e:	197c      	adds	r4, r7, r5
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	0018      	movs	r0, r3
 8002464:	f000 fb68 	bl	8002b38 <ADC_Enable>
 8002468:	0003      	movs	r3, r0
 800246a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800246c:	197b      	adds	r3, r7, r5
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d143      	bne.n	80024fc <HAL_ADC_Start_IT+0xcc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002478:	4a28      	ldr	r2, [pc, #160]	; (800251c <HAL_ADC_Start_IT+0xec>)
 800247a:	4013      	ands	r3, r2
 800247c:	2280      	movs	r2, #128	; 0x80
 800247e:	0052      	lsls	r2, r2, #1
 8002480:	431a      	orrs	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY);


      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	221c      	movs	r2, #28
 8002492:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2254      	movs	r2, #84	; 0x54
 8002498:	2100      	movs	r1, #0
 800249a:	5499      	strb	r1, [r3, r2]

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	211c      	movs	r1, #28
 80024a8:	438a      	bics	r2, r1
 80024aa:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d108      	bne.n	80024c6 <HAL_ADC_Start_IT+0x96>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2108      	movs	r1, #8
 80024c0:	430a      	orrs	r2, r1
 80024c2:	605a      	str	r2, [r3, #4]
          break;
 80024c4:	e008      	b.n	80024d8 <HAL_ADC_Start_IT+0xa8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2104      	movs	r1, #4
 80024d2:	430a      	orrs	r2, r1
 80024d4:	605a      	str	r2, [r3, #4]
          break;
 80024d6:	46c0      	nop			; (mov r8, r8)

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d107      	bne.n	80024f0 <HAL_ADC_Start_IT+0xc0>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2110      	movs	r1, #16
 80024ec:	430a      	orrs	r2, r1
 80024ee:	605a      	str	r2, [r3, #4]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	0018      	movs	r0, r3
 80024f6:	f7ff fdcf 	bl	8002098 <LL_ADC_REG_StartConversion>
 80024fa:	e008      	b.n	800250e <HAL_ADC_Start_IT+0xde>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2254      	movs	r2, #84	; 0x54
 8002500:	2100      	movs	r1, #0
 8002502:	5499      	strb	r1, [r3, r2]
 8002504:	e003      	b.n	800250e <HAL_ADC_Start_IT+0xde>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002506:	230f      	movs	r3, #15
 8002508:	18fb      	adds	r3, r7, r3
 800250a:	2202      	movs	r2, #2
 800250c:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800250e:	230f      	movs	r3, #15
 8002510:	18fb      	adds	r3, r7, r3
 8002512:	781b      	ldrb	r3, [r3, #0]
}
 8002514:	0018      	movs	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	b004      	add	sp, #16
 800251a:	bdb0      	pop	{r4, r5, r7, pc}
 800251c:	fffff0fe 	.word	0xfffff0fe

08002520 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800252e:	0018      	movs	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	b002      	add	sp, #8
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	2202      	movs	r2, #2
 8002558:	4013      	ands	r3, r2
 800255a:	d017      	beq.n	800258c <HAL_ADC_IRQHandler+0x54>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2202      	movs	r2, #2
 8002560:	4013      	ands	r3, r2
 8002562:	d013      	beq.n	800258c <HAL_ADC_IRQHandler+0x54>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002568:	2210      	movs	r2, #16
 800256a:	4013      	ands	r3, r2
 800256c:	d106      	bne.n	800257c <HAL_ADC_IRQHandler+0x44>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002572:	2280      	movs	r2, #128	; 0x80
 8002574:	0112      	lsls	r2, r2, #4
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	659a      	str	r2, [r3, #88]	; 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	0018      	movs	r0, r3
 8002580:	f000 fd24 	bl	8002fcc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2202      	movs	r2, #2
 800258a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	2204      	movs	r2, #4
 8002590:	4013      	ands	r3, r2
 8002592:	d003      	beq.n	800259c <HAL_ADC_IRQHandler+0x64>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2204      	movs	r2, #4
 8002598:	4013      	ands	r3, r2
 800259a:	d107      	bne.n	80025ac <HAL_ADC_IRQHandler+0x74>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	2208      	movs	r2, #8
 80025a0:	4013      	ands	r3, r2
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80025a2:	d04d      	beq.n	8002640 <HAL_ADC_IRQHandler+0x108>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2208      	movs	r2, #8
 80025a8:	4013      	ands	r3, r2
 80025aa:	d049      	beq.n	8002640 <HAL_ADC_IRQHandler+0x108>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b0:	2210      	movs	r2, #16
 80025b2:	4013      	ands	r3, r2
 80025b4:	d106      	bne.n	80025c4 <HAL_ADC_IRQHandler+0x8c>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ba:	2280      	movs	r2, #128	; 0x80
 80025bc:	0092      	lsls	r2, r2, #2
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	0018      	movs	r0, r3
 80025ca:	f7ff fc7a 	bl	8001ec2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80025ce:	1e03      	subs	r3, r0, #0
 80025d0:	d02e      	beq.n	8002630 <HAL_ADC_IRQHandler+0xf8>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	7e9b      	ldrb	r3, [r3, #26]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d12a      	bne.n	8002630 <HAL_ADC_IRQHandler+0xf8>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2208      	movs	r2, #8
 80025e2:	4013      	ands	r3, r2
 80025e4:	2b08      	cmp	r3, #8
 80025e6:	d123      	bne.n	8002630 <HAL_ADC_IRQHandler+0xf8>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	0018      	movs	r0, r3
 80025ee:	f7ff fd65 	bl	80020bc <LL_ADC_REG_IsConversionOngoing>
 80025f2:	1e03      	subs	r3, r0, #0
 80025f4:	d110      	bne.n	8002618 <HAL_ADC_IRQHandler+0xe0>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	210c      	movs	r1, #12
 8002602:	438a      	bics	r2, r1
 8002604:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260a:	4a56      	ldr	r2, [pc, #344]	; (8002764 <HAL_ADC_IRQHandler+0x22c>)
 800260c:	4013      	ands	r3, r2
 800260e:	2201      	movs	r2, #1
 8002610:	431a      	orrs	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	659a      	str	r2, [r3, #88]	; 0x58
 8002616:	e00b      	b.n	8002630 <HAL_ADC_IRQHandler+0xf8>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261c:	2220      	movs	r2, #32
 800261e:	431a      	orrs	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002628:	2201      	movs	r2, #1
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	65da      	str	r2, [r3, #92]	; 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	0018      	movs	r0, r3
 8002634:	f7fe fe08 	bl	8001248 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	220c      	movs	r2, #12
 800263e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	2280      	movs	r2, #128	; 0x80
 8002644:	4013      	ands	r3, r2
 8002646:	d012      	beq.n	800266e <HAL_ADC_IRQHandler+0x136>
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2280      	movs	r2, #128	; 0x80
 800264c:	4013      	ands	r3, r2
 800264e:	d00e      	beq.n	800266e <HAL_ADC_IRQHandler+0x136>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002654:	2280      	movs	r2, #128	; 0x80
 8002656:	0252      	lsls	r2, r2, #9
 8002658:	431a      	orrs	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	0018      	movs	r0, r3
 8002662:	f000 f881 	bl	8002768 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2280      	movs	r2, #128	; 0x80
 800266c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	2380      	movs	r3, #128	; 0x80
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	4013      	ands	r3, r2
 8002676:	d014      	beq.n	80026a2 <HAL_ADC_IRQHandler+0x16a>
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	2380      	movs	r3, #128	; 0x80
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	4013      	ands	r3, r2
 8002680:	d00f      	beq.n	80026a2 <HAL_ADC_IRQHandler+0x16a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002686:	2280      	movs	r2, #128	; 0x80
 8002688:	0292      	lsls	r2, r2, #10
 800268a:	431a      	orrs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	0018      	movs	r0, r3
 8002694:	f000 fc8a 	bl	8002fac <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2280      	movs	r2, #128	; 0x80
 800269e:	0052      	lsls	r2, r2, #1
 80026a0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	2380      	movs	r3, #128	; 0x80
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4013      	ands	r3, r2
 80026aa:	d014      	beq.n	80026d6 <HAL_ADC_IRQHandler+0x19e>
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	2380      	movs	r3, #128	; 0x80
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	4013      	ands	r3, r2
 80026b4:	d00f      	beq.n	80026d6 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ba:	2280      	movs	r2, #128	; 0x80
 80026bc:	02d2      	lsls	r2, r2, #11
 80026be:	431a      	orrs	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	0018      	movs	r0, r3
 80026c8:	f000 fc78 	bl	8002fbc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2280      	movs	r2, #128	; 0x80
 80026d2:	0092      	lsls	r2, r2, #2
 80026d4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	2210      	movs	r2, #16
 80026da:	4013      	ands	r3, r2
 80026dc:	d02b      	beq.n	8002736 <HAL_ADC_IRQHandler+0x1fe>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2210      	movs	r2, #16
 80026e2:	4013      	ands	r3, r2
 80026e4:	d027      	beq.n	8002736 <HAL_ADC_IRQHandler+0x1fe>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d102      	bne.n	80026f4 <HAL_ADC_IRQHandler+0x1bc>
    {
      overrun_error = 1UL;
 80026ee:	2301      	movs	r3, #1
 80026f0:	617b      	str	r3, [r7, #20]
 80026f2:	e008      	b.n	8002706 <HAL_ADC_IRQHandler+0x1ce>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	0018      	movs	r0, r3
 80026fa:	f7ff fc36 	bl	8001f6a <LL_ADC_REG_GetDMATransfer>
 80026fe:	1e03      	subs	r3, r0, #0
 8002700:	d001      	beq.n	8002706 <HAL_ADC_IRQHandler+0x1ce>
      {
        overrun_error = 1UL;
 8002702:	2301      	movs	r3, #1
 8002704:	617b      	str	r3, [r7, #20]
      }
    }

    if (overrun_error == 1UL)
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d110      	bne.n	800272e <HAL_ADC_IRQHandler+0x1f6>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002710:	2280      	movs	r2, #128	; 0x80
 8002712:	00d2      	lsls	r2, r2, #3
 8002714:	431a      	orrs	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271e:	2202      	movs	r2, #2
 8002720:	431a      	orrs	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	65da      	str	r2, [r3, #92]	; 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	0018      	movs	r0, r3
 800272a:	f000 f825 	bl	8002778 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2210      	movs	r2, #16
 8002734:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check channel configuration ready flag ========== */
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	2380      	movs	r3, #128	; 0x80
 800273a:	019b      	lsls	r3, r3, #6
 800273c:	4013      	ands	r3, r2
 800273e:	d00d      	beq.n	800275c <HAL_ADC_IRQHandler+0x224>
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	2380      	movs	r3, #128	; 0x80
 8002744:	019b      	lsls	r3, r3, #6
 8002746:	4013      	ands	r3, r2
 8002748:	d008      	beq.n	800275c <HAL_ADC_IRQHandler+0x224>
  {
    /* Channel configuration ready callback */
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	0018      	movs	r0, r3
 800274e:	f000 fc45 	bl	8002fdc <HAL_ADCEx_ChannelConfigReadyCallback>

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2280      	movs	r2, #128	; 0x80
 8002758:	0192      	lsls	r2, r2, #6
 800275a:	601a      	str	r2, [r3, #0]
  }
}
 800275c:	46c0      	nop			; (mov r8, r8)
 800275e:	46bd      	mov	sp, r7
 8002760:	b006      	add	sp, #24
 8002762:	bd80      	pop	{r7, pc}
 8002764:	fffffefe 	.word	0xfffffefe

08002768 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002770:	46c0      	nop			; (mov r8, r8)
 8002772:	46bd      	mov	sp, r7
 8002774:	b002      	add	sp, #8
 8002776:	bd80      	pop	{r7, pc}

08002778 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002780:	46c0      	nop			; (mov r8, r8)
 8002782:	46bd      	mov	sp, r7
 8002784:	b002      	add	sp, #8
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002792:	2317      	movs	r3, #23
 8002794:	18fb      	adds	r3, r7, r3
 8002796:	2200      	movs	r2, #0
 8002798:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800279a:	2300      	movs	r3, #0
 800279c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2254      	movs	r2, #84	; 0x54
 80027a2:	5c9b      	ldrb	r3, [r3, r2]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d101      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x24>
 80027a8:	2302      	movs	r3, #2
 80027aa:	e1c0      	b.n	8002b2e <HAL_ADC_ConfigChannel+0x3a6>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2254      	movs	r2, #84	; 0x54
 80027b0:	2101      	movs	r1, #1
 80027b2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	0018      	movs	r0, r3
 80027ba:	f7ff fc7f 	bl	80020bc <LL_ADC_REG_IsConversionOngoing>
 80027be:	1e03      	subs	r3, r0, #0
 80027c0:	d000      	beq.n	80027c4 <HAL_ADC_ConfigChannel+0x3c>
 80027c2:	e1a3      	b.n	8002b0c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d100      	bne.n	80027ce <HAL_ADC_ConfigChannel+0x46>
 80027cc:	e143      	b.n	8002a56 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	691a      	ldr	r2, [r3, #16]
 80027d2:	2380      	movs	r3, #128	; 0x80
 80027d4:	061b      	lsls	r3, r3, #24
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d004      	beq.n	80027e4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80027de:	4ac1      	ldr	r2, [pc, #772]	; (8002ae4 <HAL_ADC_ConfigChannel+0x35c>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d108      	bne.n	80027f6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	0019      	movs	r1, r3
 80027ee:	0010      	movs	r0, r2
 80027f0:	f7ff fb98 	bl	8001f24 <LL_ADC_REG_SetSequencerChAdd>
 80027f4:	e0c9      	b.n	800298a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	211f      	movs	r1, #31
 8002800:	400b      	ands	r3, r1
 8002802:	210f      	movs	r1, #15
 8002804:	4099      	lsls	r1, r3
 8002806:	000b      	movs	r3, r1
 8002808:	43db      	mvns	r3, r3
 800280a:	4013      	ands	r3, r2
 800280c:	0019      	movs	r1, r3
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	035b      	lsls	r3, r3, #13
 8002814:	0b5b      	lsrs	r3, r3, #13
 8002816:	d105      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x9c>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	0e9b      	lsrs	r3, r3, #26
 800281e:	221f      	movs	r2, #31
 8002820:	4013      	ands	r3, r2
 8002822:	e098      	b.n	8002956 <HAL_ADC_ConfigChannel+0x1ce>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2201      	movs	r2, #1
 800282a:	4013      	ands	r3, r2
 800282c:	d000      	beq.n	8002830 <HAL_ADC_ConfigChannel+0xa8>
 800282e:	e091      	b.n	8002954 <HAL_ADC_ConfigChannel+0x1cc>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2202      	movs	r2, #2
 8002836:	4013      	ands	r3, r2
 8002838:	d000      	beq.n	800283c <HAL_ADC_ConfigChannel+0xb4>
 800283a:	e089      	b.n	8002950 <HAL_ADC_ConfigChannel+0x1c8>
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2204      	movs	r2, #4
 8002842:	4013      	ands	r3, r2
 8002844:	d000      	beq.n	8002848 <HAL_ADC_ConfigChannel+0xc0>
 8002846:	e081      	b.n	800294c <HAL_ADC_ConfigChannel+0x1c4>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2208      	movs	r2, #8
 800284e:	4013      	ands	r3, r2
 8002850:	d000      	beq.n	8002854 <HAL_ADC_ConfigChannel+0xcc>
 8002852:	e079      	b.n	8002948 <HAL_ADC_ConfigChannel+0x1c0>
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2210      	movs	r2, #16
 800285a:	4013      	ands	r3, r2
 800285c:	d000      	beq.n	8002860 <HAL_ADC_ConfigChannel+0xd8>
 800285e:	e071      	b.n	8002944 <HAL_ADC_ConfigChannel+0x1bc>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2220      	movs	r2, #32
 8002866:	4013      	ands	r3, r2
 8002868:	d000      	beq.n	800286c <HAL_ADC_ConfigChannel+0xe4>
 800286a:	e069      	b.n	8002940 <HAL_ADC_ConfigChannel+0x1b8>
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2240      	movs	r2, #64	; 0x40
 8002872:	4013      	ands	r3, r2
 8002874:	d000      	beq.n	8002878 <HAL_ADC_ConfigChannel+0xf0>
 8002876:	e061      	b.n	800293c <HAL_ADC_ConfigChannel+0x1b4>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2280      	movs	r2, #128	; 0x80
 800287e:	4013      	ands	r3, r2
 8002880:	d000      	beq.n	8002884 <HAL_ADC_ConfigChannel+0xfc>
 8002882:	e059      	b.n	8002938 <HAL_ADC_ConfigChannel+0x1b0>
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	2380      	movs	r3, #128	; 0x80
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	4013      	ands	r3, r2
 800288e:	d151      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x1ac>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	2380      	movs	r3, #128	; 0x80
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4013      	ands	r3, r2
 800289a:	d149      	bne.n	8002930 <HAL_ADC_ConfigChannel+0x1a8>
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	2380      	movs	r3, #128	; 0x80
 80028a2:	00db      	lsls	r3, r3, #3
 80028a4:	4013      	ands	r3, r2
 80028a6:	d141      	bne.n	800292c <HAL_ADC_ConfigChannel+0x1a4>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	2380      	movs	r3, #128	; 0x80
 80028ae:	011b      	lsls	r3, r3, #4
 80028b0:	4013      	ands	r3, r2
 80028b2:	d139      	bne.n	8002928 <HAL_ADC_ConfigChannel+0x1a0>
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	2380      	movs	r3, #128	; 0x80
 80028ba:	015b      	lsls	r3, r3, #5
 80028bc:	4013      	ands	r3, r2
 80028be:	d131      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x19c>
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	2380      	movs	r3, #128	; 0x80
 80028c6:	019b      	lsls	r3, r3, #6
 80028c8:	4013      	ands	r3, r2
 80028ca:	d129      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x198>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	2380      	movs	r3, #128	; 0x80
 80028d2:	01db      	lsls	r3, r3, #7
 80028d4:	4013      	ands	r3, r2
 80028d6:	d121      	bne.n	800291c <HAL_ADC_ConfigChannel+0x194>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	2380      	movs	r3, #128	; 0x80
 80028de:	021b      	lsls	r3, r3, #8
 80028e0:	4013      	ands	r3, r2
 80028e2:	d119      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x190>
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	2380      	movs	r3, #128	; 0x80
 80028ea:	025b      	lsls	r3, r3, #9
 80028ec:	4013      	ands	r3, r2
 80028ee:	d111      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x18c>
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	2380      	movs	r3, #128	; 0x80
 80028f6:	029b      	lsls	r3, r3, #10
 80028f8:	4013      	ands	r3, r2
 80028fa:	d109      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x188>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	2380      	movs	r3, #128	; 0x80
 8002902:	02db      	lsls	r3, r3, #11
 8002904:	4013      	ands	r3, r2
 8002906:	d001      	beq.n	800290c <HAL_ADC_ConfigChannel+0x184>
 8002908:	2312      	movs	r3, #18
 800290a:	e024      	b.n	8002956 <HAL_ADC_ConfigChannel+0x1ce>
 800290c:	2300      	movs	r3, #0
 800290e:	e022      	b.n	8002956 <HAL_ADC_ConfigChannel+0x1ce>
 8002910:	2311      	movs	r3, #17
 8002912:	e020      	b.n	8002956 <HAL_ADC_ConfigChannel+0x1ce>
 8002914:	2310      	movs	r3, #16
 8002916:	e01e      	b.n	8002956 <HAL_ADC_ConfigChannel+0x1ce>
 8002918:	230f      	movs	r3, #15
 800291a:	e01c      	b.n	8002956 <HAL_ADC_ConfigChannel+0x1ce>
 800291c:	230e      	movs	r3, #14
 800291e:	e01a      	b.n	8002956 <HAL_ADC_ConfigChannel+0x1ce>
 8002920:	230d      	movs	r3, #13
 8002922:	e018      	b.n	8002956 <HAL_ADC_ConfigChannel+0x1ce>
 8002924:	230c      	movs	r3, #12
 8002926:	e016      	b.n	8002956 <HAL_ADC_ConfigChannel+0x1ce>
 8002928:	230b      	movs	r3, #11
 800292a:	e014      	b.n	8002956 <HAL_ADC_ConfigChannel+0x1ce>
 800292c:	230a      	movs	r3, #10
 800292e:	e012      	b.n	8002956 <HAL_ADC_ConfigChannel+0x1ce>
 8002930:	2309      	movs	r3, #9
 8002932:	e010      	b.n	8002956 <HAL_ADC_ConfigChannel+0x1ce>
 8002934:	2308      	movs	r3, #8
 8002936:	e00e      	b.n	8002956 <HAL_ADC_ConfigChannel+0x1ce>
 8002938:	2307      	movs	r3, #7
 800293a:	e00c      	b.n	8002956 <HAL_ADC_ConfigChannel+0x1ce>
 800293c:	2306      	movs	r3, #6
 800293e:	e00a      	b.n	8002956 <HAL_ADC_ConfigChannel+0x1ce>
 8002940:	2305      	movs	r3, #5
 8002942:	e008      	b.n	8002956 <HAL_ADC_ConfigChannel+0x1ce>
 8002944:	2304      	movs	r3, #4
 8002946:	e006      	b.n	8002956 <HAL_ADC_ConfigChannel+0x1ce>
 8002948:	2303      	movs	r3, #3
 800294a:	e004      	b.n	8002956 <HAL_ADC_ConfigChannel+0x1ce>
 800294c:	2302      	movs	r3, #2
 800294e:	e002      	b.n	8002956 <HAL_ADC_ConfigChannel+0x1ce>
 8002950:	2301      	movs	r3, #1
 8002952:	e000      	b.n	8002956 <HAL_ADC_ConfigChannel+0x1ce>
 8002954:	2300      	movs	r3, #0
 8002956:	683a      	ldr	r2, [r7, #0]
 8002958:	6852      	ldr	r2, [r2, #4]
 800295a:	201f      	movs	r0, #31
 800295c:	4002      	ands	r2, r0
 800295e:	4093      	lsls	r3, r2
 8002960:	000a      	movs	r2, r1
 8002962:	431a      	orrs	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	089b      	lsrs	r3, r3, #2
 800296e:	1c5a      	adds	r2, r3, #1
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	429a      	cmp	r2, r3
 8002976:	d808      	bhi.n	800298a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6818      	ldr	r0, [r3, #0]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	6859      	ldr	r1, [r3, #4]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	001a      	movs	r2, r3
 8002986:	f7ff faad 	bl	8001ee4 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6818      	ldr	r0, [r3, #0]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	6819      	ldr	r1, [r3, #0]
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	001a      	movs	r2, r3
 8002998:	f7ff faf4 	bl	8001f84 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	db00      	blt.n	80029a6 <HAL_ADC_ConfigChannel+0x21e>
 80029a4:	e0bc      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029a6:	4b50      	ldr	r3, [pc, #320]	; (8002ae8 <HAL_ADC_ConfigChannel+0x360>)
 80029a8:	0018      	movs	r0, r3
 80029aa:	f7ff fa49 	bl	8001e40 <LL_ADC_GetCommonPathInternalCh>
 80029ae:	0003      	movs	r3, r0
 80029b0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a4d      	ldr	r2, [pc, #308]	; (8002aec <HAL_ADC_ConfigChannel+0x364>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d122      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	2380      	movs	r3, #128	; 0x80
 80029c0:	041b      	lsls	r3, r3, #16
 80029c2:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80029c4:	d11d      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	2280      	movs	r2, #128	; 0x80
 80029ca:	0412      	lsls	r2, r2, #16
 80029cc:	4313      	orrs	r3, r2
 80029ce:	4a46      	ldr	r2, [pc, #280]	; (8002ae8 <HAL_ADC_ConfigChannel+0x360>)
 80029d0:	0019      	movs	r1, r3
 80029d2:	0010      	movs	r0, r2
 80029d4:	f7ff fa20 	bl	8001e18 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029d8:	4b45      	ldr	r3, [pc, #276]	; (8002af0 <HAL_ADC_ConfigChannel+0x368>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4945      	ldr	r1, [pc, #276]	; (8002af4 <HAL_ADC_ConfigChannel+0x36c>)
 80029de:	0018      	movs	r0, r3
 80029e0:	f7fd fb98 	bl	8000114 <__udivsi3>
 80029e4:	0003      	movs	r3, r0
 80029e6:	1c5a      	adds	r2, r3, #1
 80029e8:	0013      	movs	r3, r2
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	189b      	adds	r3, r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029f2:	e002      	b.n	80029fa <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1f9      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002a00:	e08e      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a3c      	ldr	r2, [pc, #240]	; (8002af8 <HAL_ADC_ConfigChannel+0x370>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d10e      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	2380      	movs	r3, #128	; 0x80
 8002a10:	045b      	lsls	r3, r3, #17
 8002a12:	4013      	ands	r3, r2
 8002a14:	d109      	bne.n	8002a2a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	2280      	movs	r2, #128	; 0x80
 8002a1a:	0452      	lsls	r2, r2, #17
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	4a32      	ldr	r2, [pc, #200]	; (8002ae8 <HAL_ADC_ConfigChannel+0x360>)
 8002a20:	0019      	movs	r1, r3
 8002a22:	0010      	movs	r0, r2
 8002a24:	f7ff f9f8 	bl	8001e18 <LL_ADC_SetCommonPathInternalCh>
 8002a28:	e07a      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a33      	ldr	r2, [pc, #204]	; (8002afc <HAL_ADC_ConfigChannel+0x374>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d000      	beq.n	8002a36 <HAL_ADC_ConfigChannel+0x2ae>
 8002a34:	e074      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	2380      	movs	r3, #128	; 0x80
 8002a3a:	03db      	lsls	r3, r3, #15
 8002a3c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002a3e:	d000      	beq.n	8002a42 <HAL_ADC_ConfigChannel+0x2ba>
 8002a40:	e06e      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	2280      	movs	r2, #128	; 0x80
 8002a46:	03d2      	lsls	r2, r2, #15
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	4a27      	ldr	r2, [pc, #156]	; (8002ae8 <HAL_ADC_ConfigChannel+0x360>)
 8002a4c:	0019      	movs	r1, r3
 8002a4e:	0010      	movs	r0, r2
 8002a50:	f7ff f9e2 	bl	8001e18 <LL_ADC_SetCommonPathInternalCh>
 8002a54:	e064      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691a      	ldr	r2, [r3, #16]
 8002a5a:	2380      	movs	r3, #128	; 0x80
 8002a5c:	061b      	lsls	r3, r3, #24
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d004      	beq.n	8002a6c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002a66:	4a1f      	ldr	r2, [pc, #124]	; (8002ae4 <HAL_ADC_ConfigChannel+0x35c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d107      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	0019      	movs	r1, r3
 8002a76:	0010      	movs	r0, r2
 8002a78:	f7ff fa65 	bl	8001f46 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	da4d      	bge.n	8002b20 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a84:	4b18      	ldr	r3, [pc, #96]	; (8002ae8 <HAL_ADC_ConfigChannel+0x360>)
 8002a86:	0018      	movs	r0, r3
 8002a88:	f7ff f9da 	bl	8001e40 <LL_ADC_GetCommonPathInternalCh>
 8002a8c:	0003      	movs	r3, r0
 8002a8e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a15      	ldr	r2, [pc, #84]	; (8002aec <HAL_ADC_ConfigChannel+0x364>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d108      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	4a18      	ldr	r2, [pc, #96]	; (8002b00 <HAL_ADC_ConfigChannel+0x378>)
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	4a11      	ldr	r2, [pc, #68]	; (8002ae8 <HAL_ADC_ConfigChannel+0x360>)
 8002aa2:	0019      	movs	r1, r3
 8002aa4:	0010      	movs	r0, r2
 8002aa6:	f7ff f9b7 	bl	8001e18 <LL_ADC_SetCommonPathInternalCh>
 8002aaa:	e039      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a11      	ldr	r2, [pc, #68]	; (8002af8 <HAL_ADC_ConfigChannel+0x370>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d108      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	4a12      	ldr	r2, [pc, #72]	; (8002b04 <HAL_ADC_ConfigChannel+0x37c>)
 8002aba:	4013      	ands	r3, r2
 8002abc:	4a0a      	ldr	r2, [pc, #40]	; (8002ae8 <HAL_ADC_ConfigChannel+0x360>)
 8002abe:	0019      	movs	r1, r3
 8002ac0:	0010      	movs	r0, r2
 8002ac2:	f7ff f9a9 	bl	8001e18 <LL_ADC_SetCommonPathInternalCh>
 8002ac6:	e02b      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a0b      	ldr	r2, [pc, #44]	; (8002afc <HAL_ADC_ConfigChannel+0x374>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d126      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	4a0c      	ldr	r2, [pc, #48]	; (8002b08 <HAL_ADC_ConfigChannel+0x380>)
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	4a03      	ldr	r2, [pc, #12]	; (8002ae8 <HAL_ADC_ConfigChannel+0x360>)
 8002ada:	0019      	movs	r1, r3
 8002adc:	0010      	movs	r0, r2
 8002ade:	f7ff f99b 	bl	8001e18 <LL_ADC_SetCommonPathInternalCh>
 8002ae2:	e01d      	b.n	8002b20 <HAL_ADC_ConfigChannel+0x398>
 8002ae4:	80000004 	.word	0x80000004
 8002ae8:	40012708 	.word	0x40012708
 8002aec:	b0001000 	.word	0xb0001000
 8002af0:	20000018 	.word	0x20000018
 8002af4:	00030d40 	.word	0x00030d40
 8002af8:	b8004000 	.word	0xb8004000
 8002afc:	b4002000 	.word	0xb4002000
 8002b00:	ff7fffff 	.word	0xff7fffff
 8002b04:	feffffff 	.word	0xfeffffff
 8002b08:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b10:	2220      	movs	r2, #32
 8002b12:	431a      	orrs	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002b18:	2317      	movs	r3, #23
 8002b1a:	18fb      	adds	r3, r7, r3
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2254      	movs	r2, #84	; 0x54
 8002b24:	2100      	movs	r1, #0
 8002b26:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002b28:	2317      	movs	r3, #23
 8002b2a:	18fb      	adds	r3, r7, r3
 8002b2c:	781b      	ldrb	r3, [r3, #0]
}
 8002b2e:	0018      	movs	r0, r3
 8002b30:	46bd      	mov	sp, r7
 8002b32:	b006      	add	sp, #24
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	46c0      	nop			; (mov r8, r8)

08002b38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f7ff fa83 	bl	8002054 <LL_ADC_IsEnabled>
 8002b4e:	1e03      	subs	r3, r0, #0
 8002b50:	d000      	beq.n	8002b54 <ADC_Enable+0x1c>
 8002b52:	e069      	b.n	8002c28 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	4a36      	ldr	r2, [pc, #216]	; (8002c34 <ADC_Enable+0xfc>)
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	d00d      	beq.n	8002b7c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b64:	2210      	movs	r2, #16
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b70:	2201      	movs	r2, #1
 8002b72:	431a      	orrs	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e056      	b.n	8002c2a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	0018      	movs	r0, r3
 8002b82:	f7ff fa43 	bl	800200c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 8002b86:	4b2c      	ldr	r3, [pc, #176]	; (8002c38 <ADC_Enable+0x100>)
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f7ff f959 	bl	8001e40 <LL_ADC_GetCommonPathInternalCh>
 8002b8e:	0002      	movs	r2, r0
 8002b90:	2380      	movs	r3, #128	; 0x80
 8002b92:	041b      	lsls	r3, r3, #16
 8002b94:	4013      	ands	r3, r2
 8002b96:	d00f      	beq.n	8002bb8 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b98:	4b28      	ldr	r3, [pc, #160]	; (8002c3c <ADC_Enable+0x104>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4928      	ldr	r1, [pc, #160]	; (8002c40 <ADC_Enable+0x108>)
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f7fd fab8 	bl	8000114 <__udivsi3>
 8002ba4:	0003      	movs	r3, r0
 8002ba6:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 8002ba8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002baa:	e002      	b.n	8002bb2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1f9      	bne.n	8002bac <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	7e5b      	ldrb	r3, [r3, #25]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d033      	beq.n	8002c28 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002bc0:	f7ff f8fc 	bl	8001dbc <HAL_GetTick>
 8002bc4:	0003      	movs	r3, r0
 8002bc6:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bc8:	e027      	b.n	8002c1a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f7ff fa40 	bl	8002054 <LL_ADC_IsEnabled>
 8002bd4:	1e03      	subs	r3, r0, #0
 8002bd6:	d104      	bne.n	8002be2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f7ff fa15 	bl	800200c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002be2:	f7ff f8eb 	bl	8001dbc <HAL_GetTick>
 8002be6:	0002      	movs	r2, r0
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d914      	bls.n	8002c1a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d00d      	beq.n	8002c1a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c02:	2210      	movs	r2, #16
 8002c04:	431a      	orrs	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0e:	2201      	movs	r2, #1
 8002c10:	431a      	orrs	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e007      	b.n	8002c2a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2201      	movs	r2, #1
 8002c22:	4013      	ands	r3, r2
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d1d0      	bne.n	8002bca <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	b004      	add	sp, #16
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	46c0      	nop			; (mov r8, r8)
 8002c34:	80000017 	.word	0x80000017
 8002c38:	40012708 	.word	0x40012708
 8002c3c:	20000018 	.word	0x20000018
 8002c40:	00030d40 	.word	0x00030d40

08002c44 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	0018      	movs	r0, r3
 8002c52:	f7ff fa10 	bl	8002076 <LL_ADC_IsDisableOngoing>
 8002c56:	0003      	movs	r3, r0
 8002c58:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f7ff f9f8 	bl	8002054 <LL_ADC_IsEnabled>
 8002c64:	1e03      	subs	r3, r0, #0
 8002c66:	d046      	beq.n	8002cf6 <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d143      	bne.n	8002cf6 <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	2205      	movs	r2, #5
 8002c76:	4013      	ands	r3, r2
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d10d      	bne.n	8002c98 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	0018      	movs	r0, r3
 8002c82:	f7ff f9d5 	bl	8002030 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2203      	movs	r2, #3
 8002c8c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c8e:	f7ff f895 	bl	8001dbc <HAL_GetTick>
 8002c92:	0003      	movs	r3, r0
 8002c94:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c96:	e028      	b.n	8002cea <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9c:	2210      	movs	r2, #16
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca8:	2201      	movs	r2, #1
 8002caa:	431a      	orrs	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e021      	b.n	8002cf8 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002cb4:	f7ff f882 	bl	8001dbc <HAL_GetTick>
 8002cb8:	0002      	movs	r2, r0
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d913      	bls.n	8002cea <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	4013      	ands	r3, r2
 8002ccc:	d00d      	beq.n	8002cea <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd2:	2210      	movs	r2, #16
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cde:	2201      	movs	r2, #1
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e006      	b.n	8002cf8 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	d1de      	bne.n	8002cb4 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	b004      	add	sp, #16
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <LL_ADC_SetCalibrationFactor>:
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	22b4      	movs	r2, #180	; 0xb4
 8002d0e:	589b      	ldr	r3, [r3, r2]
 8002d10:	227f      	movs	r2, #127	; 0x7f
 8002d12:	4393      	bics	r3, r2
 8002d14:	001a      	movs	r2, r3
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	21b4      	movs	r1, #180	; 0xb4
 8002d1e:	505a      	str	r2, [r3, r1]
}
 8002d20:	46c0      	nop			; (mov r8, r8)
 8002d22:	46bd      	mov	sp, r7
 8002d24:	b002      	add	sp, #8
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <LL_ADC_GetCalibrationFactor>:
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	22b4      	movs	r2, #180	; 0xb4
 8002d34:	589b      	ldr	r3, [r3, r2]
 8002d36:	227f      	movs	r2, #127	; 0x7f
 8002d38:	4013      	ands	r3, r2
}
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	b002      	add	sp, #8
 8002d40:	bd80      	pop	{r7, pc}
	...

08002d44 <LL_ADC_Enable>:
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	4a04      	ldr	r2, [pc, #16]	; (8002d64 <LL_ADC_Enable+0x20>)
 8002d52:	4013      	ands	r3, r2
 8002d54:	2201      	movs	r2, #1
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	609a      	str	r2, [r3, #8]
}
 8002d5c:	46c0      	nop			; (mov r8, r8)
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	b002      	add	sp, #8
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	7fffffe8 	.word	0x7fffffe8

08002d68 <LL_ADC_Disable>:
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	4a04      	ldr	r2, [pc, #16]	; (8002d88 <LL_ADC_Disable+0x20>)
 8002d76:	4013      	ands	r3, r2
 8002d78:	2202      	movs	r2, #2
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
}
 8002d80:	46c0      	nop			; (mov r8, r8)
 8002d82:	46bd      	mov	sp, r7
 8002d84:	b002      	add	sp, #8
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	7fffffe8 	.word	0x7fffffe8

08002d8c <LL_ADC_IsEnabled>:
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d101      	bne.n	8002da4 <LL_ADC_IsEnabled+0x18>
 8002da0:	2301      	movs	r3, #1
 8002da2:	e000      	b.n	8002da6 <LL_ADC_IsEnabled+0x1a>
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	0018      	movs	r0, r3
 8002da8:	46bd      	mov	sp, r7
 8002daa:	b002      	add	sp, #8
 8002dac:	bd80      	pop	{r7, pc}
	...

08002db0 <LL_ADC_StartCalibration>:
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	4a05      	ldr	r2, [pc, #20]	; (8002dd4 <LL_ADC_StartCalibration+0x24>)
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	2280      	movs	r2, #128	; 0x80
 8002dc2:	0612      	lsls	r2, r2, #24
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	609a      	str	r2, [r3, #8]
}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	b002      	add	sp, #8
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	46c0      	nop			; (mov r8, r8)
 8002dd4:	7fffffe8 	.word	0x7fffffe8

08002dd8 <LL_ADC_IsCalibrationOnGoing>:
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	0fdb      	lsrs	r3, r3, #31
 8002de6:	07da      	lsls	r2, r3, #31
 8002de8:	2380      	movs	r3, #128	; 0x80
 8002dea:	061b      	lsls	r3, r3, #24
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d101      	bne.n	8002df4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002df0:	2301      	movs	r3, #1
 8002df2:	e000      	b.n	8002df6 <LL_ADC_IsCalibrationOnGoing+0x1e>
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	0018      	movs	r0, r3
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	b002      	add	sp, #8
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8002e00:	b590      	push	{r4, r7, lr}
 8002e02:	b089      	sub	sp, #36	; 0x24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2254      	movs	r2, #84	; 0x54
 8002e14:	5c9b      	ldrb	r3, [r3, r2]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d101      	bne.n	8002e1e <HAL_ADCEx_Calibration_Start+0x1e>
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	e0ba      	b.n	8002f94 <HAL_ADCEx_Calibration_Start+0x194>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2254      	movs	r2, #84	; 0x54
 8002e22:	2101      	movs	r1, #1
 8002e24:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002e26:	2317      	movs	r3, #23
 8002e28:	18fc      	adds	r4, r7, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	f7ff ff09 	bl	8002c44 <ADC_Disable>
 8002e32:	0003      	movs	r3, r0
 8002e34:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f7ff ffa6 	bl	8002d8c <LL_ADC_IsEnabled>
 8002e40:	1e03      	subs	r3, r0, #0
 8002e42:	d000      	beq.n	8002e46 <HAL_ADCEx_Calibration_Start+0x46>
 8002e44:	e099      	b.n	8002f7a <HAL_ADCEx_Calibration_Start+0x17a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4a:	4a54      	ldr	r2, [pc, #336]	; (8002f9c <HAL_ADCEx_Calibration_Start+0x19c>)
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2202      	movs	r2, #2
 8002e50:	431a      	orrs	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	4a50      	ldr	r2, [pc, #320]	; (8002fa0 <HAL_ADCEx_Calibration_Start+0x1a0>)
 8002e5e:	4013      	ands	r3, r2
 8002e60:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68da      	ldr	r2, [r3, #12]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	494d      	ldr	r1, [pc, #308]	; (8002fa4 <HAL_ADCEx_Calibration_Start+0x1a4>)
 8002e6e:	400a      	ands	r2, r1
 8002e70:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002e72:	2300      	movs	r3, #0
 8002e74:	61fb      	str	r3, [r7, #28]
 8002e76:	e02d      	b.n	8002ed4 <HAL_ADCEx_Calibration_Start+0xd4>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	f7ff ff97 	bl	8002db0 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002e82:	e014      	b.n	8002eae <HAL_ADCEx_Calibration_Start+0xae>
      {
        wait_loop_index++;
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	3301      	adds	r3, #1
 8002e88:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	4a46      	ldr	r2, [pc, #280]	; (8002fa8 <HAL_ADCEx_Calibration_Start+0x1a8>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d90d      	bls.n	8002eae <HAL_ADCEx_Calibration_Start+0xae>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e96:	2212      	movs	r2, #18
 8002e98:	4393      	bics	r3, r2
 8002e9a:	2210      	movs	r2, #16
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2254      	movs	r2, #84	; 0x54
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e072      	b.n	8002f94 <HAL_ADCEx_Calibration_Start+0x194>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	f7ff ff90 	bl	8002dd8 <LL_ADC_IsCalibrationOnGoing>
 8002eb8:	1e03      	subs	r3, r0, #0
 8002eba:	d1e3      	bne.n	8002e84 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	0018      	movs	r0, r3
 8002ec2:	f7ff ff31 	bl	8002d28 <LL_ADC_GetCalibrationFactor>
 8002ec6:	0002      	movs	r2, r0
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	189b      	adds	r3, r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	61fb      	str	r3, [r7, #28]
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	2b07      	cmp	r3, #7
 8002ed8:	d9ce      	bls.n	8002e78 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8002eda:	69f9      	ldr	r1, [r7, #28]
 8002edc:	69b8      	ldr	r0, [r7, #24]
 8002ede:	f7fd f919 	bl	8000114 <__udivsi3>
 8002ee2:	0003      	movs	r3, r0
 8002ee4:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	0018      	movs	r0, r3
 8002eec:	f7ff ff2a 	bl	8002d44 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	0011      	movs	r1, r2
 8002ef8:	0018      	movs	r0, r3
 8002efa:	f7ff ff01 	bl	8002d00 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	0018      	movs	r0, r3
 8002f04:	f7ff ff30 	bl	8002d68 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f08:	f7fe ff58 	bl	8001dbc <HAL_GetTick>
 8002f0c:	0003      	movs	r3, r0
 8002f0e:	60fb      	str	r3, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002f10:	e01b      	b.n	8002f4a <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f12:	f7fe ff53 	bl	8001dbc <HAL_GetTick>
 8002f16:	0002      	movs	r2, r0
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d914      	bls.n	8002f4a <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	0018      	movs	r0, r3
 8002f26:	f7ff ff31 	bl	8002d8c <LL_ADC_IsEnabled>
 8002f2a:	1e03      	subs	r3, r0, #0
 8002f2c:	d00d      	beq.n	8002f4a <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f32:	2210      	movs	r2, #16
 8002f34:	431a      	orrs	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3e:	2201      	movs	r2, #1
 8002f40:	431a      	orrs	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e024      	b.n	8002f94 <HAL_ADCEx_Calibration_Start+0x194>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f7ff ff1c 	bl	8002d8c <LL_ADC_IsEnabled>
 8002f54:	1e03      	subs	r3, r0, #0
 8002f56:	d1dc      	bne.n	8002f12 <HAL_ADCEx_Calibration_Start+0x112>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68d9      	ldr	r1, [r3, #12]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f6c:	2203      	movs	r2, #3
 8002f6e:	4393      	bics	r3, r2
 8002f70:	2201      	movs	r2, #1
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	659a      	str	r2, [r3, #88]	; 0x58
 8002f78:	e005      	b.n	8002f86 <HAL_ADCEx_Calibration_Start+0x186>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7e:	2210      	movs	r2, #16
 8002f80:	431a      	orrs	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2254      	movs	r2, #84	; 0x54
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002f8e:	2317      	movs	r3, #23
 8002f90:	18fb      	adds	r3, r7, r3
 8002f92:	781b      	ldrb	r3, [r3, #0]
}
 8002f94:	0018      	movs	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	b009      	add	sp, #36	; 0x24
 8002f9a:	bd90      	pop	{r4, r7, pc}
 8002f9c:	fffffefd 	.word	0xfffffefd
 8002fa0:	00008003 	.word	0x00008003
 8002fa4:	ffff7ffc 	.word	0xffff7ffc
 8002fa8:	0002f1ff 	.word	0x0002f1ff

08002fac <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002fb4:	46c0      	nop			; (mov r8, r8)
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	b002      	add	sp, #8
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002fc4:	46c0      	nop			; (mov r8, r8)
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	b002      	add	sp, #8
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002fd4:	46c0      	nop			; (mov r8, r8)
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	b002      	add	sp, #8
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <HAL_ADCEx_ChannelConfigReadyCallback>:
  * @brief  ADC channel configuration ready callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_ChannelConfigReadyCallback(ADC_HandleTypeDef *hadc)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8002fe4:	46c0      	nop			; (mov r8, r8)
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	b002      	add	sp, #8
 8002fea:	bd80      	pop	{r7, pc}

08002fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	0002      	movs	r2, r0
 8002ff4:	1dfb      	adds	r3, r7, #7
 8002ff6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002ff8:	1dfb      	adds	r3, r7, #7
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b7f      	cmp	r3, #127	; 0x7f
 8002ffe:	d809      	bhi.n	8003014 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003000:	1dfb      	adds	r3, r7, #7
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	001a      	movs	r2, r3
 8003006:	231f      	movs	r3, #31
 8003008:	401a      	ands	r2, r3
 800300a:	4b04      	ldr	r3, [pc, #16]	; (800301c <__NVIC_EnableIRQ+0x30>)
 800300c:	2101      	movs	r1, #1
 800300e:	4091      	lsls	r1, r2
 8003010:	000a      	movs	r2, r1
 8003012:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003014:	46c0      	nop			; (mov r8, r8)
 8003016:	46bd      	mov	sp, r7
 8003018:	b002      	add	sp, #8
 800301a:	bd80      	pop	{r7, pc}
 800301c:	e000e100 	.word	0xe000e100

08003020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003020:	b590      	push	{r4, r7, lr}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	0002      	movs	r2, r0
 8003028:	6039      	str	r1, [r7, #0]
 800302a:	1dfb      	adds	r3, r7, #7
 800302c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800302e:	1dfb      	adds	r3, r7, #7
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	2b7f      	cmp	r3, #127	; 0x7f
 8003034:	d828      	bhi.n	8003088 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003036:	4a2f      	ldr	r2, [pc, #188]	; (80030f4 <__NVIC_SetPriority+0xd4>)
 8003038:	1dfb      	adds	r3, r7, #7
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	b25b      	sxtb	r3, r3
 800303e:	089b      	lsrs	r3, r3, #2
 8003040:	33c0      	adds	r3, #192	; 0xc0
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	589b      	ldr	r3, [r3, r2]
 8003046:	1dfa      	adds	r2, r7, #7
 8003048:	7812      	ldrb	r2, [r2, #0]
 800304a:	0011      	movs	r1, r2
 800304c:	2203      	movs	r2, #3
 800304e:	400a      	ands	r2, r1
 8003050:	00d2      	lsls	r2, r2, #3
 8003052:	21ff      	movs	r1, #255	; 0xff
 8003054:	4091      	lsls	r1, r2
 8003056:	000a      	movs	r2, r1
 8003058:	43d2      	mvns	r2, r2
 800305a:	401a      	ands	r2, r3
 800305c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	019b      	lsls	r3, r3, #6
 8003062:	22ff      	movs	r2, #255	; 0xff
 8003064:	401a      	ands	r2, r3
 8003066:	1dfb      	adds	r3, r7, #7
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	0018      	movs	r0, r3
 800306c:	2303      	movs	r3, #3
 800306e:	4003      	ands	r3, r0
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003074:	481f      	ldr	r0, [pc, #124]	; (80030f4 <__NVIC_SetPriority+0xd4>)
 8003076:	1dfb      	adds	r3, r7, #7
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	b25b      	sxtb	r3, r3
 800307c:	089b      	lsrs	r3, r3, #2
 800307e:	430a      	orrs	r2, r1
 8003080:	33c0      	adds	r3, #192	; 0xc0
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003086:	e031      	b.n	80030ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003088:	4a1b      	ldr	r2, [pc, #108]	; (80030f8 <__NVIC_SetPriority+0xd8>)
 800308a:	1dfb      	adds	r3, r7, #7
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	0019      	movs	r1, r3
 8003090:	230f      	movs	r3, #15
 8003092:	400b      	ands	r3, r1
 8003094:	3b08      	subs	r3, #8
 8003096:	089b      	lsrs	r3, r3, #2
 8003098:	3306      	adds	r3, #6
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	18d3      	adds	r3, r2, r3
 800309e:	3304      	adds	r3, #4
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	1dfa      	adds	r2, r7, #7
 80030a4:	7812      	ldrb	r2, [r2, #0]
 80030a6:	0011      	movs	r1, r2
 80030a8:	2203      	movs	r2, #3
 80030aa:	400a      	ands	r2, r1
 80030ac:	00d2      	lsls	r2, r2, #3
 80030ae:	21ff      	movs	r1, #255	; 0xff
 80030b0:	4091      	lsls	r1, r2
 80030b2:	000a      	movs	r2, r1
 80030b4:	43d2      	mvns	r2, r2
 80030b6:	401a      	ands	r2, r3
 80030b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	019b      	lsls	r3, r3, #6
 80030be:	22ff      	movs	r2, #255	; 0xff
 80030c0:	401a      	ands	r2, r3
 80030c2:	1dfb      	adds	r3, r7, #7
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	0018      	movs	r0, r3
 80030c8:	2303      	movs	r3, #3
 80030ca:	4003      	ands	r3, r0
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030d0:	4809      	ldr	r0, [pc, #36]	; (80030f8 <__NVIC_SetPriority+0xd8>)
 80030d2:	1dfb      	adds	r3, r7, #7
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	001c      	movs	r4, r3
 80030d8:	230f      	movs	r3, #15
 80030da:	4023      	ands	r3, r4
 80030dc:	3b08      	subs	r3, #8
 80030de:	089b      	lsrs	r3, r3, #2
 80030e0:	430a      	orrs	r2, r1
 80030e2:	3306      	adds	r3, #6
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	18c3      	adds	r3, r0, r3
 80030e8:	3304      	adds	r3, #4
 80030ea:	601a      	str	r2, [r3, #0]
}
 80030ec:	46c0      	nop			; (mov r8, r8)
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b003      	add	sp, #12
 80030f2:	bd90      	pop	{r4, r7, pc}
 80030f4:	e000e100 	.word	0xe000e100
 80030f8:	e000ed00 	.word	0xe000ed00

080030fc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	607a      	str	r2, [r7, #4]
 8003106:	210f      	movs	r1, #15
 8003108:	187b      	adds	r3, r7, r1
 800310a:	1c02      	adds	r2, r0, #0
 800310c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	187b      	adds	r3, r7, r1
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	b25b      	sxtb	r3, r3
 8003116:	0011      	movs	r1, r2
 8003118:	0018      	movs	r0, r3
 800311a:	f7ff ff81 	bl	8003020 <__NVIC_SetPriority>
}
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	46bd      	mov	sp, r7
 8003122:	b004      	add	sp, #16
 8003124:	bd80      	pop	{r7, pc}

08003126 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b082      	sub	sp, #8
 800312a:	af00      	add	r7, sp, #0
 800312c:	0002      	movs	r2, r0
 800312e:	1dfb      	adds	r3, r7, #7
 8003130:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003132:	1dfb      	adds	r3, r7, #7
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	b25b      	sxtb	r3, r3
 8003138:	0018      	movs	r0, r3
 800313a:	f7ff ff57 	bl	8002fec <__NVIC_EnableIRQ>
}
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	46bd      	mov	sp, r7
 8003142:	b002      	add	sp, #8
 8003144:	bd80      	pop	{r7, pc}
	...

08003148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b086      	sub	sp, #24
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003152:	2300      	movs	r3, #0
 8003154:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003156:	e147      	b.n	80033e8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2101      	movs	r1, #1
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	4091      	lsls	r1, r2
 8003162:	000a      	movs	r2, r1
 8003164:	4013      	ands	r3, r2
 8003166:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d100      	bne.n	8003170 <HAL_GPIO_Init+0x28>
 800316e:	e138      	b.n	80033e2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	2203      	movs	r2, #3
 8003176:	4013      	ands	r3, r2
 8003178:	2b01      	cmp	r3, #1
 800317a:	d005      	beq.n	8003188 <HAL_GPIO_Init+0x40>
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2203      	movs	r2, #3
 8003182:	4013      	ands	r3, r2
 8003184:	2b02      	cmp	r3, #2
 8003186:	d130      	bne.n	80031ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	2203      	movs	r2, #3
 8003194:	409a      	lsls	r2, r3
 8003196:	0013      	movs	r3, r2
 8003198:	43da      	mvns	r2, r3
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	4013      	ands	r3, r2
 800319e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	68da      	ldr	r2, [r3, #12]
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	409a      	lsls	r2, r3
 80031aa:	0013      	movs	r3, r2
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031be:	2201      	movs	r2, #1
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	409a      	lsls	r2, r3
 80031c4:	0013      	movs	r3, r2
 80031c6:	43da      	mvns	r2, r3
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	4013      	ands	r3, r2
 80031cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	091b      	lsrs	r3, r3, #4
 80031d4:	2201      	movs	r2, #1
 80031d6:	401a      	ands	r2, r3
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	409a      	lsls	r2, r3
 80031dc:	0013      	movs	r3, r2
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2203      	movs	r2, #3
 80031f0:	4013      	ands	r3, r2
 80031f2:	2b03      	cmp	r3, #3
 80031f4:	d017      	beq.n	8003226 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	2203      	movs	r2, #3
 8003202:	409a      	lsls	r2, r3
 8003204:	0013      	movs	r3, r2
 8003206:	43da      	mvns	r2, r3
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	4013      	ands	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	689a      	ldr	r2, [r3, #8]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	409a      	lsls	r2, r3
 8003218:	0013      	movs	r3, r2
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	4313      	orrs	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	2203      	movs	r2, #3
 800322c:	4013      	ands	r3, r2
 800322e:	2b02      	cmp	r3, #2
 8003230:	d123      	bne.n	800327a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	08da      	lsrs	r2, r3, #3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	3208      	adds	r2, #8
 800323a:	0092      	lsls	r2, r2, #2
 800323c:	58d3      	ldr	r3, [r2, r3]
 800323e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	2207      	movs	r2, #7
 8003244:	4013      	ands	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	220f      	movs	r2, #15
 800324a:	409a      	lsls	r2, r3
 800324c:	0013      	movs	r3, r2
 800324e:	43da      	mvns	r2, r3
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	4013      	ands	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	691a      	ldr	r2, [r3, #16]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2107      	movs	r1, #7
 800325e:	400b      	ands	r3, r1
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	409a      	lsls	r2, r3
 8003264:	0013      	movs	r3, r2
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	4313      	orrs	r3, r2
 800326a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	08da      	lsrs	r2, r3, #3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3208      	adds	r2, #8
 8003274:	0092      	lsls	r2, r2, #2
 8003276:	6939      	ldr	r1, [r7, #16]
 8003278:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	2203      	movs	r2, #3
 8003286:	409a      	lsls	r2, r3
 8003288:	0013      	movs	r3, r2
 800328a:	43da      	mvns	r2, r3
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	4013      	ands	r3, r2
 8003290:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2203      	movs	r2, #3
 8003298:	401a      	ands	r2, r3
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	409a      	lsls	r2, r3
 80032a0:	0013      	movs	r3, r2
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	23c0      	movs	r3, #192	; 0xc0
 80032b4:	029b      	lsls	r3, r3, #10
 80032b6:	4013      	ands	r3, r2
 80032b8:	d100      	bne.n	80032bc <HAL_GPIO_Init+0x174>
 80032ba:	e092      	b.n	80033e2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80032bc:	4a50      	ldr	r2, [pc, #320]	; (8003400 <HAL_GPIO_Init+0x2b8>)
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	089b      	lsrs	r3, r3, #2
 80032c2:	3318      	adds	r3, #24
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	589b      	ldr	r3, [r3, r2]
 80032c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2203      	movs	r2, #3
 80032ce:	4013      	ands	r3, r2
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	220f      	movs	r2, #15
 80032d4:	409a      	lsls	r2, r3
 80032d6:	0013      	movs	r3, r2
 80032d8:	43da      	mvns	r2, r3
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	4013      	ands	r3, r2
 80032de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	23a0      	movs	r3, #160	; 0xa0
 80032e4:	05db      	lsls	r3, r3, #23
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d013      	beq.n	8003312 <HAL_GPIO_Init+0x1ca>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a45      	ldr	r2, [pc, #276]	; (8003404 <HAL_GPIO_Init+0x2bc>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d00d      	beq.n	800330e <HAL_GPIO_Init+0x1c6>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a44      	ldr	r2, [pc, #272]	; (8003408 <HAL_GPIO_Init+0x2c0>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d007      	beq.n	800330a <HAL_GPIO_Init+0x1c2>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a43      	ldr	r2, [pc, #268]	; (800340c <HAL_GPIO_Init+0x2c4>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d101      	bne.n	8003306 <HAL_GPIO_Init+0x1be>
 8003302:	2303      	movs	r3, #3
 8003304:	e006      	b.n	8003314 <HAL_GPIO_Init+0x1cc>
 8003306:	2305      	movs	r3, #5
 8003308:	e004      	b.n	8003314 <HAL_GPIO_Init+0x1cc>
 800330a:	2302      	movs	r3, #2
 800330c:	e002      	b.n	8003314 <HAL_GPIO_Init+0x1cc>
 800330e:	2301      	movs	r3, #1
 8003310:	e000      	b.n	8003314 <HAL_GPIO_Init+0x1cc>
 8003312:	2300      	movs	r3, #0
 8003314:	697a      	ldr	r2, [r7, #20]
 8003316:	2103      	movs	r1, #3
 8003318:	400a      	ands	r2, r1
 800331a:	00d2      	lsls	r2, r2, #3
 800331c:	4093      	lsls	r3, r2
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	4313      	orrs	r3, r2
 8003322:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003324:	4936      	ldr	r1, [pc, #216]	; (8003400 <HAL_GPIO_Init+0x2b8>)
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	089b      	lsrs	r3, r3, #2
 800332a:	3318      	adds	r3, #24
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003332:	4b33      	ldr	r3, [pc, #204]	; (8003400 <HAL_GPIO_Init+0x2b8>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	43da      	mvns	r2, r3
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	4013      	ands	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	2380      	movs	r3, #128	; 0x80
 8003348:	035b      	lsls	r3, r3, #13
 800334a:	4013      	ands	r3, r2
 800334c:	d003      	beq.n	8003356 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800334e:	693a      	ldr	r2, [r7, #16]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4313      	orrs	r3, r2
 8003354:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003356:	4b2a      	ldr	r3, [pc, #168]	; (8003400 <HAL_GPIO_Init+0x2b8>)
 8003358:	693a      	ldr	r2, [r7, #16]
 800335a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800335c:	4b28      	ldr	r3, [pc, #160]	; (8003400 <HAL_GPIO_Init+0x2b8>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	43da      	mvns	r2, r3
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	4013      	ands	r3, r2
 800336a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	2380      	movs	r3, #128	; 0x80
 8003372:	039b      	lsls	r3, r3, #14
 8003374:	4013      	ands	r3, r2
 8003376:	d003      	beq.n	8003380 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003378:	693a      	ldr	r2, [r7, #16]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	4313      	orrs	r3, r2
 800337e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003380:	4b1f      	ldr	r3, [pc, #124]	; (8003400 <HAL_GPIO_Init+0x2b8>)
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003386:	4a1e      	ldr	r2, [pc, #120]	; (8003400 <HAL_GPIO_Init+0x2b8>)
 8003388:	2384      	movs	r3, #132	; 0x84
 800338a:	58d3      	ldr	r3, [r2, r3]
 800338c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	43da      	mvns	r2, r3
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	4013      	ands	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	2380      	movs	r3, #128	; 0x80
 800339e:	029b      	lsls	r3, r3, #10
 80033a0:	4013      	ands	r3, r2
 80033a2:	d003      	beq.n	80033ac <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80033a4:	693a      	ldr	r2, [r7, #16]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033ac:	4914      	ldr	r1, [pc, #80]	; (8003400 <HAL_GPIO_Init+0x2b8>)
 80033ae:	2284      	movs	r2, #132	; 0x84
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80033b4:	4a12      	ldr	r2, [pc, #72]	; (8003400 <HAL_GPIO_Init+0x2b8>)
 80033b6:	2380      	movs	r3, #128	; 0x80
 80033b8:	58d3      	ldr	r3, [r2, r3]
 80033ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	43da      	mvns	r2, r3
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	4013      	ands	r3, r2
 80033c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	2380      	movs	r3, #128	; 0x80
 80033cc:	025b      	lsls	r3, r3, #9
 80033ce:	4013      	ands	r3, r2
 80033d0:	d003      	beq.n	80033da <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033da:	4909      	ldr	r1, [pc, #36]	; (8003400 <HAL_GPIO_Init+0x2b8>)
 80033dc:	2280      	movs	r2, #128	; 0x80
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	3301      	adds	r3, #1
 80033e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	40da      	lsrs	r2, r3
 80033f0:	1e13      	subs	r3, r2, #0
 80033f2:	d000      	beq.n	80033f6 <HAL_GPIO_Init+0x2ae>
 80033f4:	e6b0      	b.n	8003158 <HAL_GPIO_Init+0x10>
  }
}
 80033f6:	46c0      	nop			; (mov r8, r8)
 80033f8:	46c0      	nop			; (mov r8, r8)
 80033fa:	46bd      	mov	sp, r7
 80033fc:	b006      	add	sp, #24
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40021800 	.word	0x40021800
 8003404:	50000400 	.word	0x50000400
 8003408:	50000800 	.word	0x50000800
 800340c:	50000c00 	.word	0x50000c00

08003410 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	0008      	movs	r0, r1
 800341a:	0011      	movs	r1, r2
 800341c:	1cbb      	adds	r3, r7, #2
 800341e:	1c02      	adds	r2, r0, #0
 8003420:	801a      	strh	r2, [r3, #0]
 8003422:	1c7b      	adds	r3, r7, #1
 8003424:	1c0a      	adds	r2, r1, #0
 8003426:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003428:	1c7b      	adds	r3, r7, #1
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d004      	beq.n	800343a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003430:	1cbb      	adds	r3, r7, #2
 8003432:	881a      	ldrh	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003438:	e003      	b.n	8003442 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800343a:	1cbb      	adds	r3, r7, #2
 800343c:	881a      	ldrh	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003442:	46c0      	nop			; (mov r8, r8)
 8003444:	46bd      	mov	sp, r7
 8003446:	b002      	add	sp, #8
 8003448:	bd80      	pop	{r7, pc}
	...

0800344c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	0002      	movs	r2, r0
 8003454:	1dbb      	adds	r3, r7, #6
 8003456:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8003458:	4b10      	ldr	r3, [pc, #64]	; (800349c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	1dba      	adds	r2, r7, #6
 800345e:	8812      	ldrh	r2, [r2, #0]
 8003460:	4013      	ands	r3, r2
 8003462:	d008      	beq.n	8003476 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003464:	4b0d      	ldr	r3, [pc, #52]	; (800349c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003466:	1dba      	adds	r2, r7, #6
 8003468:	8812      	ldrh	r2, [r2, #0]
 800346a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800346c:	1dbb      	adds	r3, r7, #6
 800346e:	881b      	ldrh	r3, [r3, #0]
 8003470:	0018      	movs	r0, r3
 8003472:	f000 f815 	bl	80034a0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8003476:	4b09      	ldr	r3, [pc, #36]	; (800349c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	1dba      	adds	r2, r7, #6
 800347c:	8812      	ldrh	r2, [r2, #0]
 800347e:	4013      	ands	r3, r2
 8003480:	d008      	beq.n	8003494 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003482:	4b06      	ldr	r3, [pc, #24]	; (800349c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003484:	1dba      	adds	r2, r7, #6
 8003486:	8812      	ldrh	r2, [r2, #0]
 8003488:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800348a:	1dbb      	adds	r3, r7, #6
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	0018      	movs	r0, r3
 8003490:	f7fd feb2 	bl	80011f8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003494:	46c0      	nop			; (mov r8, r8)
 8003496:	46bd      	mov	sp, r7
 8003498:	b002      	add	sp, #8
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40021800 	.word	0x40021800

080034a0 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	0002      	movs	r2, r0
 80034a8:	1dbb      	adds	r3, r7, #6
 80034aa:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80034ac:	46c0      	nop			; (mov r8, r8)
 80034ae:	46bd      	mov	sp, r7
 80034b0:	b002      	add	sp, #8
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e082      	b.n	80035cc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2241      	movs	r2, #65	; 0x41
 80034ca:	5c9b      	ldrb	r3, [r3, r2]
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d107      	bne.n	80034e2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2240      	movs	r2, #64	; 0x40
 80034d6:	2100      	movs	r1, #0
 80034d8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	0018      	movs	r0, r3
 80034de:	f7fd ff81 	bl	80013e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2241      	movs	r2, #65	; 0x41
 80034e6:	2124      	movs	r1, #36	; 0x24
 80034e8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2101      	movs	r1, #1
 80034f6:	438a      	bics	r2, r1
 80034f8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685a      	ldr	r2, [r3, #4]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4934      	ldr	r1, [pc, #208]	; (80035d4 <HAL_I2C_Init+0x120>)
 8003504:	400a      	ands	r2, r1
 8003506:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689a      	ldr	r2, [r3, #8]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4931      	ldr	r1, [pc, #196]	; (80035d8 <HAL_I2C_Init+0x124>)
 8003514:	400a      	ands	r2, r1
 8003516:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d108      	bne.n	8003532 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2180      	movs	r1, #128	; 0x80
 800352a:	0209      	lsls	r1, r1, #8
 800352c:	430a      	orrs	r2, r1
 800352e:	609a      	str	r2, [r3, #8]
 8003530:	e007      	b.n	8003542 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2184      	movs	r1, #132	; 0x84
 800353c:	0209      	lsls	r1, r1, #8
 800353e:	430a      	orrs	r2, r1
 8003540:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	2b02      	cmp	r3, #2
 8003548:	d104      	bne.n	8003554 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2280      	movs	r2, #128	; 0x80
 8003550:	0112      	lsls	r2, r2, #4
 8003552:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	685a      	ldr	r2, [r3, #4]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	491f      	ldr	r1, [pc, #124]	; (80035dc <HAL_I2C_Init+0x128>)
 8003560:	430a      	orrs	r2, r1
 8003562:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68da      	ldr	r2, [r3, #12]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	491a      	ldr	r1, [pc, #104]	; (80035d8 <HAL_I2C_Init+0x124>)
 8003570:	400a      	ands	r2, r1
 8003572:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	691a      	ldr	r2, [r3, #16]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	695b      	ldr	r3, [r3, #20]
 800357c:	431a      	orrs	r2, r3
 800357e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	69d9      	ldr	r1, [r3, #28]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1a      	ldr	r2, [r3, #32]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2101      	movs	r1, #1
 80035aa:	430a      	orrs	r2, r1
 80035ac:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2241      	movs	r2, #65	; 0x41
 80035b8:	2120      	movs	r1, #32
 80035ba:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2242      	movs	r2, #66	; 0x42
 80035c6:	2100      	movs	r1, #0
 80035c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	0018      	movs	r0, r3
 80035ce:	46bd      	mov	sp, r7
 80035d0:	b002      	add	sp, #8
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	f0ffffff 	.word	0xf0ffffff
 80035d8:	ffff7fff 	.word	0xffff7fff
 80035dc:	02008000 	.word	0x02008000

080035e0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035e0:	b590      	push	{r4, r7, lr}
 80035e2:	b089      	sub	sp, #36	; 0x24
 80035e4:	af02      	add	r7, sp, #8
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	000c      	movs	r4, r1
 80035ea:	0010      	movs	r0, r2
 80035ec:	0019      	movs	r1, r3
 80035ee:	230a      	movs	r3, #10
 80035f0:	18fb      	adds	r3, r7, r3
 80035f2:	1c22      	adds	r2, r4, #0
 80035f4:	801a      	strh	r2, [r3, #0]
 80035f6:	2308      	movs	r3, #8
 80035f8:	18fb      	adds	r3, r7, r3
 80035fa:	1c02      	adds	r2, r0, #0
 80035fc:	801a      	strh	r2, [r3, #0]
 80035fe:	1dbb      	adds	r3, r7, #6
 8003600:	1c0a      	adds	r2, r1, #0
 8003602:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2241      	movs	r2, #65	; 0x41
 8003608:	5c9b      	ldrb	r3, [r3, r2]
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b20      	cmp	r3, #32
 800360e:	d000      	beq.n	8003612 <HAL_I2C_Mem_Write+0x32>
 8003610:	e10c      	b.n	800382c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003614:	2b00      	cmp	r3, #0
 8003616:	d004      	beq.n	8003622 <HAL_I2C_Mem_Write+0x42>
 8003618:	232c      	movs	r3, #44	; 0x2c
 800361a:	18fb      	adds	r3, r7, r3
 800361c:	881b      	ldrh	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d105      	bne.n	800362e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2280      	movs	r2, #128	; 0x80
 8003626:	0092      	lsls	r2, r2, #2
 8003628:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e0ff      	b.n	800382e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2240      	movs	r2, #64	; 0x40
 8003632:	5c9b      	ldrb	r3, [r3, r2]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <HAL_I2C_Mem_Write+0x5c>
 8003638:	2302      	movs	r3, #2
 800363a:	e0f8      	b.n	800382e <HAL_I2C_Mem_Write+0x24e>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2240      	movs	r2, #64	; 0x40
 8003640:	2101      	movs	r1, #1
 8003642:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003644:	f7fe fbba 	bl	8001dbc <HAL_GetTick>
 8003648:	0003      	movs	r3, r0
 800364a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800364c:	2380      	movs	r3, #128	; 0x80
 800364e:	0219      	lsls	r1, r3, #8
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	9300      	str	r3, [sp, #0]
 8003656:	2319      	movs	r3, #25
 8003658:	2201      	movs	r2, #1
 800365a:	f000 fb0b 	bl	8003c74 <I2C_WaitOnFlagUntilTimeout>
 800365e:	1e03      	subs	r3, r0, #0
 8003660:	d001      	beq.n	8003666 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e0e3      	b.n	800382e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2241      	movs	r2, #65	; 0x41
 800366a:	2121      	movs	r1, #33	; 0x21
 800366c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2242      	movs	r2, #66	; 0x42
 8003672:	2140      	movs	r1, #64	; 0x40
 8003674:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003680:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	222c      	movs	r2, #44	; 0x2c
 8003686:	18ba      	adds	r2, r7, r2
 8003688:	8812      	ldrh	r2, [r2, #0]
 800368a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003692:	1dbb      	adds	r3, r7, #6
 8003694:	881c      	ldrh	r4, [r3, #0]
 8003696:	2308      	movs	r3, #8
 8003698:	18fb      	adds	r3, r7, r3
 800369a:	881a      	ldrh	r2, [r3, #0]
 800369c:	230a      	movs	r3, #10
 800369e:	18fb      	adds	r3, r7, r3
 80036a0:	8819      	ldrh	r1, [r3, #0]
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	9301      	str	r3, [sp, #4]
 80036a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	0023      	movs	r3, r4
 80036ae:	f000 f9f9 	bl	8003aa4 <I2C_RequestMemoryWrite>
 80036b2:	1e03      	subs	r3, r0, #0
 80036b4:	d005      	beq.n	80036c2 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2240      	movs	r2, #64	; 0x40
 80036ba:	2100      	movs	r1, #0
 80036bc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e0b5      	b.n	800382e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	2bff      	cmp	r3, #255	; 0xff
 80036ca:	d911      	bls.n	80036f0 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	22ff      	movs	r2, #255	; 0xff
 80036d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d6:	b2da      	uxtb	r2, r3
 80036d8:	2380      	movs	r3, #128	; 0x80
 80036da:	045c      	lsls	r4, r3, #17
 80036dc:	230a      	movs	r3, #10
 80036de:	18fb      	adds	r3, r7, r3
 80036e0:	8819      	ldrh	r1, [r3, #0]
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	2300      	movs	r3, #0
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	0023      	movs	r3, r4
 80036ea:	f000 fc7d 	bl	8003fe8 <I2C_TransferConfig>
 80036ee:	e012      	b.n	8003716 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f4:	b29a      	uxth	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	2380      	movs	r3, #128	; 0x80
 8003702:	049c      	lsls	r4, r3, #18
 8003704:	230a      	movs	r3, #10
 8003706:	18fb      	adds	r3, r7, r3
 8003708:	8819      	ldrh	r1, [r3, #0]
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	2300      	movs	r3, #0
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	0023      	movs	r3, r4
 8003712:	f000 fc69 	bl	8003fe8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	0018      	movs	r0, r3
 800371e:	f000 fae8 	bl	8003cf2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003722:	1e03      	subs	r3, r0, #0
 8003724:	d001      	beq.n	800372a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e081      	b.n	800382e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	781a      	ldrb	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003744:	b29b      	uxth	r3, r3
 8003746:	3b01      	subs	r3, #1
 8003748:	b29a      	uxth	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003752:	3b01      	subs	r3, #1
 8003754:	b29a      	uxth	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375e:	b29b      	uxth	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d03a      	beq.n	80037da <HAL_I2C_Mem_Write+0x1fa>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003768:	2b00      	cmp	r3, #0
 800376a:	d136      	bne.n	80037da <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800376c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	0013      	movs	r3, r2
 8003776:	2200      	movs	r2, #0
 8003778:	2180      	movs	r1, #128	; 0x80
 800377a:	f000 fa7b 	bl	8003c74 <I2C_WaitOnFlagUntilTimeout>
 800377e:	1e03      	subs	r3, r0, #0
 8003780:	d001      	beq.n	8003786 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e053      	b.n	800382e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800378a:	b29b      	uxth	r3, r3
 800378c:	2bff      	cmp	r3, #255	; 0xff
 800378e:	d911      	bls.n	80037b4 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	22ff      	movs	r2, #255	; 0xff
 8003794:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379a:	b2da      	uxtb	r2, r3
 800379c:	2380      	movs	r3, #128	; 0x80
 800379e:	045c      	lsls	r4, r3, #17
 80037a0:	230a      	movs	r3, #10
 80037a2:	18fb      	adds	r3, r7, r3
 80037a4:	8819      	ldrh	r1, [r3, #0]
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	2300      	movs	r3, #0
 80037aa:	9300      	str	r3, [sp, #0]
 80037ac:	0023      	movs	r3, r4
 80037ae:	f000 fc1b 	bl	8003fe8 <I2C_TransferConfig>
 80037b2:	e012      	b.n	80037da <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c2:	b2da      	uxtb	r2, r3
 80037c4:	2380      	movs	r3, #128	; 0x80
 80037c6:	049c      	lsls	r4, r3, #18
 80037c8:	230a      	movs	r3, #10
 80037ca:	18fb      	adds	r3, r7, r3
 80037cc:	8819      	ldrh	r1, [r3, #0]
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	2300      	movs	r3, #0
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	0023      	movs	r3, r4
 80037d6:	f000 fc07 	bl	8003fe8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037de:	b29b      	uxth	r3, r3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d198      	bne.n	8003716 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	0018      	movs	r0, r3
 80037ec:	f000 fac0 	bl	8003d70 <I2C_WaitOnSTOPFlagUntilTimeout>
 80037f0:	1e03      	subs	r3, r0, #0
 80037f2:	d001      	beq.n	80037f8 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e01a      	b.n	800382e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2220      	movs	r2, #32
 80037fe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	490b      	ldr	r1, [pc, #44]	; (8003838 <HAL_I2C_Mem_Write+0x258>)
 800380c:	400a      	ands	r2, r1
 800380e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2241      	movs	r2, #65	; 0x41
 8003814:	2120      	movs	r1, #32
 8003816:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2242      	movs	r2, #66	; 0x42
 800381c:	2100      	movs	r1, #0
 800381e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2240      	movs	r2, #64	; 0x40
 8003824:	2100      	movs	r1, #0
 8003826:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003828:	2300      	movs	r3, #0
 800382a:	e000      	b.n	800382e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800382c:	2302      	movs	r3, #2
  }
}
 800382e:	0018      	movs	r0, r3
 8003830:	46bd      	mov	sp, r7
 8003832:	b007      	add	sp, #28
 8003834:	bd90      	pop	{r4, r7, pc}
 8003836:	46c0      	nop			; (mov r8, r8)
 8003838:	fe00e800 	.word	0xfe00e800

0800383c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800383c:	b590      	push	{r4, r7, lr}
 800383e:	b089      	sub	sp, #36	; 0x24
 8003840:	af02      	add	r7, sp, #8
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	000c      	movs	r4, r1
 8003846:	0010      	movs	r0, r2
 8003848:	0019      	movs	r1, r3
 800384a:	230a      	movs	r3, #10
 800384c:	18fb      	adds	r3, r7, r3
 800384e:	1c22      	adds	r2, r4, #0
 8003850:	801a      	strh	r2, [r3, #0]
 8003852:	2308      	movs	r3, #8
 8003854:	18fb      	adds	r3, r7, r3
 8003856:	1c02      	adds	r2, r0, #0
 8003858:	801a      	strh	r2, [r3, #0]
 800385a:	1dbb      	adds	r3, r7, #6
 800385c:	1c0a      	adds	r2, r1, #0
 800385e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2241      	movs	r2, #65	; 0x41
 8003864:	5c9b      	ldrb	r3, [r3, r2]
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b20      	cmp	r3, #32
 800386a:	d000      	beq.n	800386e <HAL_I2C_Mem_Read+0x32>
 800386c:	e110      	b.n	8003a90 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800386e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003870:	2b00      	cmp	r3, #0
 8003872:	d004      	beq.n	800387e <HAL_I2C_Mem_Read+0x42>
 8003874:	232c      	movs	r3, #44	; 0x2c
 8003876:	18fb      	adds	r3, r7, r3
 8003878:	881b      	ldrh	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d105      	bne.n	800388a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2280      	movs	r2, #128	; 0x80
 8003882:	0092      	lsls	r2, r2, #2
 8003884:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e103      	b.n	8003a92 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2240      	movs	r2, #64	; 0x40
 800388e:	5c9b      	ldrb	r3, [r3, r2]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d101      	bne.n	8003898 <HAL_I2C_Mem_Read+0x5c>
 8003894:	2302      	movs	r3, #2
 8003896:	e0fc      	b.n	8003a92 <HAL_I2C_Mem_Read+0x256>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2240      	movs	r2, #64	; 0x40
 800389c:	2101      	movs	r1, #1
 800389e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038a0:	f7fe fa8c 	bl	8001dbc <HAL_GetTick>
 80038a4:	0003      	movs	r3, r0
 80038a6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038a8:	2380      	movs	r3, #128	; 0x80
 80038aa:	0219      	lsls	r1, r3, #8
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	2319      	movs	r3, #25
 80038b4:	2201      	movs	r2, #1
 80038b6:	f000 f9dd 	bl	8003c74 <I2C_WaitOnFlagUntilTimeout>
 80038ba:	1e03      	subs	r3, r0, #0
 80038bc:	d001      	beq.n	80038c2 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e0e7      	b.n	8003a92 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2241      	movs	r2, #65	; 0x41
 80038c6:	2122      	movs	r1, #34	; 0x22
 80038c8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2242      	movs	r2, #66	; 0x42
 80038ce:	2140      	movs	r1, #64	; 0x40
 80038d0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	222c      	movs	r2, #44	; 0x2c
 80038e2:	18ba      	adds	r2, r7, r2
 80038e4:	8812      	ldrh	r2, [r2, #0]
 80038e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038ee:	1dbb      	adds	r3, r7, #6
 80038f0:	881c      	ldrh	r4, [r3, #0]
 80038f2:	2308      	movs	r3, #8
 80038f4:	18fb      	adds	r3, r7, r3
 80038f6:	881a      	ldrh	r2, [r3, #0]
 80038f8:	230a      	movs	r3, #10
 80038fa:	18fb      	adds	r3, r7, r3
 80038fc:	8819      	ldrh	r1, [r3, #0]
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	9301      	str	r3, [sp, #4]
 8003904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	0023      	movs	r3, r4
 800390a:	f000 f92f 	bl	8003b6c <I2C_RequestMemoryRead>
 800390e:	1e03      	subs	r3, r0, #0
 8003910:	d005      	beq.n	800391e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2240      	movs	r2, #64	; 0x40
 8003916:	2100      	movs	r1, #0
 8003918:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e0b9      	b.n	8003a92 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003922:	b29b      	uxth	r3, r3
 8003924:	2bff      	cmp	r3, #255	; 0xff
 8003926:	d911      	bls.n	800394c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	22ff      	movs	r2, #255	; 0xff
 800392c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003932:	b2da      	uxtb	r2, r3
 8003934:	2380      	movs	r3, #128	; 0x80
 8003936:	045c      	lsls	r4, r3, #17
 8003938:	230a      	movs	r3, #10
 800393a:	18fb      	adds	r3, r7, r3
 800393c:	8819      	ldrh	r1, [r3, #0]
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	4b56      	ldr	r3, [pc, #344]	; (8003a9c <HAL_I2C_Mem_Read+0x260>)
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	0023      	movs	r3, r4
 8003946:	f000 fb4f 	bl	8003fe8 <I2C_TransferConfig>
 800394a:	e012      	b.n	8003972 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003950:	b29a      	uxth	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395a:	b2da      	uxtb	r2, r3
 800395c:	2380      	movs	r3, #128	; 0x80
 800395e:	049c      	lsls	r4, r3, #18
 8003960:	230a      	movs	r3, #10
 8003962:	18fb      	adds	r3, r7, r3
 8003964:	8819      	ldrh	r1, [r3, #0]
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	4b4c      	ldr	r3, [pc, #304]	; (8003a9c <HAL_I2C_Mem_Read+0x260>)
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	0023      	movs	r3, r4
 800396e:	f000 fb3b 	bl	8003fe8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003972:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	0013      	movs	r3, r2
 800397c:	2200      	movs	r2, #0
 800397e:	2104      	movs	r1, #4
 8003980:	f000 f978 	bl	8003c74 <I2C_WaitOnFlagUntilTimeout>
 8003984:	1e03      	subs	r3, r0, #0
 8003986:	d001      	beq.n	800398c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e082      	b.n	8003a92 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399e:	1c5a      	adds	r2, r3, #1
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a8:	3b01      	subs	r3, #1
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	3b01      	subs	r3, #1
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d03a      	beq.n	8003a3e <HAL_I2C_Mem_Read+0x202>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d136      	bne.n	8003a3e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039d2:	68f8      	ldr	r0, [r7, #12]
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	0013      	movs	r3, r2
 80039da:	2200      	movs	r2, #0
 80039dc:	2180      	movs	r1, #128	; 0x80
 80039de:	f000 f949 	bl	8003c74 <I2C_WaitOnFlagUntilTimeout>
 80039e2:	1e03      	subs	r3, r0, #0
 80039e4:	d001      	beq.n	80039ea <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e053      	b.n	8003a92 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	2bff      	cmp	r3, #255	; 0xff
 80039f2:	d911      	bls.n	8003a18 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	22ff      	movs	r2, #255	; 0xff
 80039f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039fe:	b2da      	uxtb	r2, r3
 8003a00:	2380      	movs	r3, #128	; 0x80
 8003a02:	045c      	lsls	r4, r3, #17
 8003a04:	230a      	movs	r3, #10
 8003a06:	18fb      	adds	r3, r7, r3
 8003a08:	8819      	ldrh	r1, [r3, #0]
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	0023      	movs	r3, r4
 8003a12:	f000 fae9 	bl	8003fe8 <I2C_TransferConfig>
 8003a16:	e012      	b.n	8003a3e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	2380      	movs	r3, #128	; 0x80
 8003a2a:	049c      	lsls	r4, r3, #18
 8003a2c:	230a      	movs	r3, #10
 8003a2e:	18fb      	adds	r3, r7, r3
 8003a30:	8819      	ldrh	r1, [r3, #0]
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	2300      	movs	r3, #0
 8003a36:	9300      	str	r3, [sp, #0]
 8003a38:	0023      	movs	r3, r4
 8003a3a:	f000 fad5 	bl	8003fe8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d194      	bne.n	8003972 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	0018      	movs	r0, r3
 8003a50:	f000 f98e 	bl	8003d70 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a54:	1e03      	subs	r3, r0, #0
 8003a56:	d001      	beq.n	8003a5c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e01a      	b.n	8003a92 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2220      	movs	r2, #32
 8003a62:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	490c      	ldr	r1, [pc, #48]	; (8003aa0 <HAL_I2C_Mem_Read+0x264>)
 8003a70:	400a      	ands	r2, r1
 8003a72:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2241      	movs	r2, #65	; 0x41
 8003a78:	2120      	movs	r1, #32
 8003a7a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2242      	movs	r2, #66	; 0x42
 8003a80:	2100      	movs	r1, #0
 8003a82:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2240      	movs	r2, #64	; 0x40
 8003a88:	2100      	movs	r1, #0
 8003a8a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	e000      	b.n	8003a92 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003a90:	2302      	movs	r3, #2
  }
}
 8003a92:	0018      	movs	r0, r3
 8003a94:	46bd      	mov	sp, r7
 8003a96:	b007      	add	sp, #28
 8003a98:	bd90      	pop	{r4, r7, pc}
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	80002400 	.word	0x80002400
 8003aa0:	fe00e800 	.word	0xfe00e800

08003aa4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003aa4:	b5b0      	push	{r4, r5, r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af02      	add	r7, sp, #8
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	000c      	movs	r4, r1
 8003aae:	0010      	movs	r0, r2
 8003ab0:	0019      	movs	r1, r3
 8003ab2:	250a      	movs	r5, #10
 8003ab4:	197b      	adds	r3, r7, r5
 8003ab6:	1c22      	adds	r2, r4, #0
 8003ab8:	801a      	strh	r2, [r3, #0]
 8003aba:	2308      	movs	r3, #8
 8003abc:	18fb      	adds	r3, r7, r3
 8003abe:	1c02      	adds	r2, r0, #0
 8003ac0:	801a      	strh	r2, [r3, #0]
 8003ac2:	1dbb      	adds	r3, r7, #6
 8003ac4:	1c0a      	adds	r2, r1, #0
 8003ac6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003ac8:	1dbb      	adds	r3, r7, #6
 8003aca:	881b      	ldrh	r3, [r3, #0]
 8003acc:	b2da      	uxtb	r2, r3
 8003ace:	2380      	movs	r3, #128	; 0x80
 8003ad0:	045c      	lsls	r4, r3, #17
 8003ad2:	197b      	adds	r3, r7, r5
 8003ad4:	8819      	ldrh	r1, [r3, #0]
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	4b23      	ldr	r3, [pc, #140]	; (8003b68 <I2C_RequestMemoryWrite+0xc4>)
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	0023      	movs	r3, r4
 8003ade:	f000 fa83 	bl	8003fe8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ae4:	6a39      	ldr	r1, [r7, #32]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	0018      	movs	r0, r3
 8003aea:	f000 f902 	bl	8003cf2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003aee:	1e03      	subs	r3, r0, #0
 8003af0:	d001      	beq.n	8003af6 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e033      	b.n	8003b5e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003af6:	1dbb      	adds	r3, r7, #6
 8003af8:	881b      	ldrh	r3, [r3, #0]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d107      	bne.n	8003b0e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003afe:	2308      	movs	r3, #8
 8003b00:	18fb      	adds	r3, r7, r3
 8003b02:	881b      	ldrh	r3, [r3, #0]
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	629a      	str	r2, [r3, #40]	; 0x28
 8003b0c:	e019      	b.n	8003b42 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b0e:	2308      	movs	r3, #8
 8003b10:	18fb      	adds	r3, r7, r3
 8003b12:	881b      	ldrh	r3, [r3, #0]
 8003b14:	0a1b      	lsrs	r3, r3, #8
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b22:	6a39      	ldr	r1, [r7, #32]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	0018      	movs	r0, r3
 8003b28:	f000 f8e3 	bl	8003cf2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b2c:	1e03      	subs	r3, r0, #0
 8003b2e:	d001      	beq.n	8003b34 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e014      	b.n	8003b5e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b34:	2308      	movs	r3, #8
 8003b36:	18fb      	adds	r3, r7, r3
 8003b38:	881b      	ldrh	r3, [r3, #0]
 8003b3a:	b2da      	uxtb	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003b42:	6a3a      	ldr	r2, [r7, #32]
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	0013      	movs	r3, r2
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	2180      	movs	r1, #128	; 0x80
 8003b50:	f000 f890 	bl	8003c74 <I2C_WaitOnFlagUntilTimeout>
 8003b54:	1e03      	subs	r3, r0, #0
 8003b56:	d001      	beq.n	8003b5c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e000      	b.n	8003b5e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	0018      	movs	r0, r3
 8003b60:	46bd      	mov	sp, r7
 8003b62:	b004      	add	sp, #16
 8003b64:	bdb0      	pop	{r4, r5, r7, pc}
 8003b66:	46c0      	nop			; (mov r8, r8)
 8003b68:	80002000 	.word	0x80002000

08003b6c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003b6c:	b5b0      	push	{r4, r5, r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af02      	add	r7, sp, #8
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	000c      	movs	r4, r1
 8003b76:	0010      	movs	r0, r2
 8003b78:	0019      	movs	r1, r3
 8003b7a:	250a      	movs	r5, #10
 8003b7c:	197b      	adds	r3, r7, r5
 8003b7e:	1c22      	adds	r2, r4, #0
 8003b80:	801a      	strh	r2, [r3, #0]
 8003b82:	2308      	movs	r3, #8
 8003b84:	18fb      	adds	r3, r7, r3
 8003b86:	1c02      	adds	r2, r0, #0
 8003b88:	801a      	strh	r2, [r3, #0]
 8003b8a:	1dbb      	adds	r3, r7, #6
 8003b8c:	1c0a      	adds	r2, r1, #0
 8003b8e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003b90:	1dbb      	adds	r3, r7, #6
 8003b92:	881b      	ldrh	r3, [r3, #0]
 8003b94:	b2da      	uxtb	r2, r3
 8003b96:	197b      	adds	r3, r7, r5
 8003b98:	8819      	ldrh	r1, [r3, #0]
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	4b23      	ldr	r3, [pc, #140]	; (8003c2c <I2C_RequestMemoryRead+0xc0>)
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	f000 fa21 	bl	8003fe8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ba6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba8:	6a39      	ldr	r1, [r7, #32]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	0018      	movs	r0, r3
 8003bae:	f000 f8a0 	bl	8003cf2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bb2:	1e03      	subs	r3, r0, #0
 8003bb4:	d001      	beq.n	8003bba <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e033      	b.n	8003c22 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bba:	1dbb      	adds	r3, r7, #6
 8003bbc:	881b      	ldrh	r3, [r3, #0]
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d107      	bne.n	8003bd2 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bc2:	2308      	movs	r3, #8
 8003bc4:	18fb      	adds	r3, r7, r3
 8003bc6:	881b      	ldrh	r3, [r3, #0]
 8003bc8:	b2da      	uxtb	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	629a      	str	r2, [r3, #40]	; 0x28
 8003bd0:	e019      	b.n	8003c06 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003bd2:	2308      	movs	r3, #8
 8003bd4:	18fb      	adds	r3, r7, r3
 8003bd6:	881b      	ldrh	r3, [r3, #0]
 8003bd8:	0a1b      	lsrs	r3, r3, #8
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be6:	6a39      	ldr	r1, [r7, #32]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	0018      	movs	r0, r3
 8003bec:	f000 f881 	bl	8003cf2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bf0:	1e03      	subs	r3, r0, #0
 8003bf2:	d001      	beq.n	8003bf8 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e014      	b.n	8003c22 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bf8:	2308      	movs	r3, #8
 8003bfa:	18fb      	adds	r3, r7, r3
 8003bfc:	881b      	ldrh	r3, [r3, #0]
 8003bfe:	b2da      	uxtb	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003c06:	6a3a      	ldr	r2, [r7, #32]
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	0013      	movs	r3, r2
 8003c10:	2200      	movs	r2, #0
 8003c12:	2140      	movs	r1, #64	; 0x40
 8003c14:	f000 f82e 	bl	8003c74 <I2C_WaitOnFlagUntilTimeout>
 8003c18:	1e03      	subs	r3, r0, #0
 8003c1a:	d001      	beq.n	8003c20 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e000      	b.n	8003c22 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	0018      	movs	r0, r3
 8003c24:	46bd      	mov	sp, r7
 8003c26:	b004      	add	sp, #16
 8003c28:	bdb0      	pop	{r4, r5, r7, pc}
 8003c2a:	46c0      	nop			; (mov r8, r8)
 8003c2c:	80002000 	.word	0x80002000

08003c30 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	2202      	movs	r2, #2
 8003c40:	4013      	ands	r3, r2
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d103      	bne.n	8003c4e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	2201      	movs	r2, #1
 8003c56:	4013      	ands	r3, r2
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d007      	beq.n	8003c6c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	699a      	ldr	r2, [r3, #24]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2101      	movs	r1, #1
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	619a      	str	r2, [r3, #24]
  }
}
 8003c6c:	46c0      	nop			; (mov r8, r8)
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	b002      	add	sp, #8
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	603b      	str	r3, [r7, #0]
 8003c80:	1dfb      	adds	r3, r7, #7
 8003c82:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c84:	e021      	b.n	8003cca <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	d01e      	beq.n	8003cca <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c8c:	f7fe f896 	bl	8001dbc <HAL_GetTick>
 8003c90:	0002      	movs	r2, r0
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d302      	bcc.n	8003ca2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d113      	bne.n	8003cca <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2241      	movs	r2, #65	; 0x41
 8003cb2:	2120      	movs	r1, #32
 8003cb4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2242      	movs	r2, #66	; 0x42
 8003cba:	2100      	movs	r1, #0
 8003cbc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2240      	movs	r2, #64	; 0x40
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e00f      	b.n	8003cea <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	425a      	negs	r2, r3
 8003cda:	4153      	adcs	r3, r2
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	001a      	movs	r2, r3
 8003ce0:	1dfb      	adds	r3, r7, #7
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d0ce      	beq.n	8003c86 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	0018      	movs	r0, r3
 8003cec:	46bd      	mov	sp, r7
 8003cee:	b004      	add	sp, #16
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b084      	sub	sp, #16
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	60f8      	str	r0, [r7, #12]
 8003cfa:	60b9      	str	r1, [r7, #8]
 8003cfc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003cfe:	e02b      	b.n	8003d58 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	68b9      	ldr	r1, [r7, #8]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	0018      	movs	r0, r3
 8003d08:	f000 f86e 	bl	8003de8 <I2C_IsErrorOccurred>
 8003d0c:	1e03      	subs	r3, r0, #0
 8003d0e:	d001      	beq.n	8003d14 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e029      	b.n	8003d68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	3301      	adds	r3, #1
 8003d18:	d01e      	beq.n	8003d58 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d1a:	f7fe f84f 	bl	8001dbc <HAL_GetTick>
 8003d1e:	0002      	movs	r2, r0
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	68ba      	ldr	r2, [r7, #8]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d302      	bcc.n	8003d30 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d113      	bne.n	8003d58 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d34:	2220      	movs	r2, #32
 8003d36:	431a      	orrs	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2241      	movs	r2, #65	; 0x41
 8003d40:	2120      	movs	r1, #32
 8003d42:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2242      	movs	r2, #66	; 0x42
 8003d48:	2100      	movs	r1, #0
 8003d4a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2240      	movs	r2, #64	; 0x40
 8003d50:	2100      	movs	r1, #0
 8003d52:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e007      	b.n	8003d68 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	4013      	ands	r3, r2
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d1cc      	bne.n	8003d00 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	0018      	movs	r0, r3
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	b004      	add	sp, #16
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d7c:	e028      	b.n	8003dd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	68b9      	ldr	r1, [r7, #8]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	0018      	movs	r0, r3
 8003d86:	f000 f82f 	bl	8003de8 <I2C_IsErrorOccurred>
 8003d8a:	1e03      	subs	r3, r0, #0
 8003d8c:	d001      	beq.n	8003d92 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e026      	b.n	8003de0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d92:	f7fe f813 	bl	8001dbc <HAL_GetTick>
 8003d96:	0002      	movs	r2, r0
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	68ba      	ldr	r2, [r7, #8]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d302      	bcc.n	8003da8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d113      	bne.n	8003dd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dac:	2220      	movs	r2, #32
 8003dae:	431a      	orrs	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2241      	movs	r2, #65	; 0x41
 8003db8:	2120      	movs	r1, #32
 8003dba:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2242      	movs	r2, #66	; 0x42
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2240      	movs	r2, #64	; 0x40
 8003dc8:	2100      	movs	r1, #0
 8003dca:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e007      	b.n	8003de0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	4013      	ands	r3, r2
 8003dda:	2b20      	cmp	r3, #32
 8003ddc:	d1cf      	bne.n	8003d7e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	0018      	movs	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	b004      	add	sp, #16
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003de8:	b590      	push	{r4, r7, lr}
 8003dea:	b08b      	sub	sp, #44	; 0x2c
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003df4:	2327      	movs	r3, #39	; 0x27
 8003df6:	18fb      	adds	r3, r7, r3
 8003df8:	2200      	movs	r2, #0
 8003dfa:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003e04:	2300      	movs	r3, #0
 8003e06:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	2210      	movs	r2, #16
 8003e10:	4013      	ands	r3, r2
 8003e12:	d100      	bne.n	8003e16 <I2C_IsErrorOccurred+0x2e>
 8003e14:	e082      	b.n	8003f1c <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2210      	movs	r2, #16
 8003e1c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e1e:	e060      	b.n	8003ee2 <I2C_IsErrorOccurred+0xfa>
 8003e20:	2427      	movs	r4, #39	; 0x27
 8003e22:	193b      	adds	r3, r7, r4
 8003e24:	193a      	adds	r2, r7, r4
 8003e26:	7812      	ldrb	r2, [r2, #0]
 8003e28:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	d058      	beq.n	8003ee2 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e30:	f7fd ffc4 	bl	8001dbc <HAL_GetTick>
 8003e34:	0002      	movs	r2, r0
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d306      	bcc.n	8003e4e <I2C_IsErrorOccurred+0x66>
 8003e40:	193b      	adds	r3, r7, r4
 8003e42:	193a      	adds	r2, r7, r4
 8003e44:	7812      	ldrb	r2, [r2, #0]
 8003e46:	701a      	strb	r2, [r3, #0]
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d149      	bne.n	8003ee2 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	2380      	movs	r3, #128	; 0x80
 8003e56:	01db      	lsls	r3, r3, #7
 8003e58:	4013      	ands	r3, r2
 8003e5a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003e5c:	2013      	movs	r0, #19
 8003e5e:	183b      	adds	r3, r7, r0
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	2142      	movs	r1, #66	; 0x42
 8003e64:	5c52      	ldrb	r2, [r2, r1]
 8003e66:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	699a      	ldr	r2, [r3, #24]
 8003e6e:	2380      	movs	r3, #128	; 0x80
 8003e70:	021b      	lsls	r3, r3, #8
 8003e72:	401a      	ands	r2, r3
 8003e74:	2380      	movs	r3, #128	; 0x80
 8003e76:	021b      	lsls	r3, r3, #8
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d126      	bne.n	8003eca <I2C_IsErrorOccurred+0xe2>
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	2380      	movs	r3, #128	; 0x80
 8003e80:	01db      	lsls	r3, r3, #7
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d021      	beq.n	8003eca <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8003e86:	183b      	adds	r3, r7, r0
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	2b20      	cmp	r3, #32
 8003e8c:	d01d      	beq.n	8003eca <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2180      	movs	r1, #128	; 0x80
 8003e9a:	01c9      	lsls	r1, r1, #7
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003ea0:	f7fd ff8c 	bl	8001dbc <HAL_GetTick>
 8003ea4:	0003      	movs	r3, r0
 8003ea6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ea8:	e00f      	b.n	8003eca <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003eaa:	f7fd ff87 	bl	8001dbc <HAL_GetTick>
 8003eae:	0002      	movs	r2, r0
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b19      	cmp	r3, #25
 8003eb6:	d908      	bls.n	8003eca <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003eb8:	6a3b      	ldr	r3, [r7, #32]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003ec0:	2327      	movs	r3, #39	; 0x27
 8003ec2:	18fb      	adds	r3, r7, r3
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	701a      	strb	r2, [r3, #0]

              break;
 8003ec8:	e00b      	b.n	8003ee2 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	2127      	movs	r1, #39	; 0x27
 8003ed6:	187a      	adds	r2, r7, r1
 8003ed8:	1879      	adds	r1, r7, r1
 8003eda:	7809      	ldrb	r1, [r1, #0]
 8003edc:	7011      	strb	r1, [r2, #0]
 8003ede:	2b20      	cmp	r3, #32
 8003ee0:	d1e3      	bne.n	8003eaa <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	2220      	movs	r2, #32
 8003eea:	4013      	ands	r3, r2
 8003eec:	2b20      	cmp	r3, #32
 8003eee:	d004      	beq.n	8003efa <I2C_IsErrorOccurred+0x112>
 8003ef0:	2327      	movs	r3, #39	; 0x27
 8003ef2:	18fb      	adds	r3, r7, r3
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d092      	beq.n	8003e20 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003efa:	2327      	movs	r3, #39	; 0x27
 8003efc:	18fb      	adds	r3, r7, r3
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d103      	bne.n	8003f0c <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
 8003f0e:	2204      	movs	r2, #4
 8003f10:	4313      	orrs	r3, r2
 8003f12:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003f14:	2327      	movs	r3, #39	; 0x27
 8003f16:	18fb      	adds	r3, r7, r3
 8003f18:	2201      	movs	r2, #1
 8003f1a:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	2380      	movs	r3, #128	; 0x80
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	d00c      	beq.n	8003f48 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003f2e:	6a3b      	ldr	r3, [r7, #32]
 8003f30:	2201      	movs	r2, #1
 8003f32:	4313      	orrs	r3, r2
 8003f34:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2280      	movs	r2, #128	; 0x80
 8003f3c:	0052      	lsls	r2, r2, #1
 8003f3e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f40:	2327      	movs	r3, #39	; 0x27
 8003f42:	18fb      	adds	r3, r7, r3
 8003f44:	2201      	movs	r2, #1
 8003f46:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	2380      	movs	r3, #128	; 0x80
 8003f4c:	00db      	lsls	r3, r3, #3
 8003f4e:	4013      	ands	r3, r2
 8003f50:	d00c      	beq.n	8003f6c <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003f52:	6a3b      	ldr	r3, [r7, #32]
 8003f54:	2208      	movs	r2, #8
 8003f56:	4313      	orrs	r3, r2
 8003f58:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2280      	movs	r2, #128	; 0x80
 8003f60:	00d2      	lsls	r2, r2, #3
 8003f62:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f64:	2327      	movs	r3, #39	; 0x27
 8003f66:	18fb      	adds	r3, r7, r3
 8003f68:	2201      	movs	r2, #1
 8003f6a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	2380      	movs	r3, #128	; 0x80
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	4013      	ands	r3, r2
 8003f74:	d00c      	beq.n	8003f90 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	2202      	movs	r2, #2
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2280      	movs	r2, #128	; 0x80
 8003f84:	0092      	lsls	r2, r2, #2
 8003f86:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f88:	2327      	movs	r3, #39	; 0x27
 8003f8a:	18fb      	adds	r3, r7, r3
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003f90:	2327      	movs	r3, #39	; 0x27
 8003f92:	18fb      	adds	r3, r7, r3
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d01d      	beq.n	8003fd6 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	f7ff fe47 	bl	8003c30 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	490d      	ldr	r1, [pc, #52]	; (8003fe4 <I2C_IsErrorOccurred+0x1fc>)
 8003fae:	400a      	ands	r2, r1
 8003fb0:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fb6:	6a3b      	ldr	r3, [r7, #32]
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2241      	movs	r2, #65	; 0x41
 8003fc2:	2120      	movs	r1, #32
 8003fc4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2242      	movs	r2, #66	; 0x42
 8003fca:	2100      	movs	r1, #0
 8003fcc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2240      	movs	r2, #64	; 0x40
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003fd6:	2327      	movs	r3, #39	; 0x27
 8003fd8:	18fb      	adds	r3, r7, r3
 8003fda:	781b      	ldrb	r3, [r3, #0]
}
 8003fdc:	0018      	movs	r0, r3
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	b00b      	add	sp, #44	; 0x2c
 8003fe2:	bd90      	pop	{r4, r7, pc}
 8003fe4:	fe00e800 	.word	0xfe00e800

08003fe8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003fe8:	b590      	push	{r4, r7, lr}
 8003fea:	b087      	sub	sp, #28
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	0008      	movs	r0, r1
 8003ff2:	0011      	movs	r1, r2
 8003ff4:	607b      	str	r3, [r7, #4]
 8003ff6:	240a      	movs	r4, #10
 8003ff8:	193b      	adds	r3, r7, r4
 8003ffa:	1c02      	adds	r2, r0, #0
 8003ffc:	801a      	strh	r2, [r3, #0]
 8003ffe:	2009      	movs	r0, #9
 8004000:	183b      	adds	r3, r7, r0
 8004002:	1c0a      	adds	r2, r1, #0
 8004004:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004006:	193b      	adds	r3, r7, r4
 8004008:	881b      	ldrh	r3, [r3, #0]
 800400a:	059b      	lsls	r3, r3, #22
 800400c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800400e:	183b      	adds	r3, r7, r0
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	0419      	lsls	r1, r3, #16
 8004014:	23ff      	movs	r3, #255	; 0xff
 8004016:	041b      	lsls	r3, r3, #16
 8004018:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800401a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004022:	4313      	orrs	r3, r2
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	085b      	lsrs	r3, r3, #1
 8004028:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004032:	0d51      	lsrs	r1, r2, #21
 8004034:	2280      	movs	r2, #128	; 0x80
 8004036:	00d2      	lsls	r2, r2, #3
 8004038:	400a      	ands	r2, r1
 800403a:	4907      	ldr	r1, [pc, #28]	; (8004058 <I2C_TransferConfig+0x70>)
 800403c:	430a      	orrs	r2, r1
 800403e:	43d2      	mvns	r2, r2
 8004040:	401a      	ands	r2, r3
 8004042:	0011      	movs	r1, r2
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	430a      	orrs	r2, r1
 800404c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800404e:	46c0      	nop			; (mov r8, r8)
 8004050:	46bd      	mov	sp, r7
 8004052:	b007      	add	sp, #28
 8004054:	bd90      	pop	{r4, r7, pc}
 8004056:	46c0      	nop			; (mov r8, r8)
 8004058:	03ff63ff 	.word	0x03ff63ff

0800405c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2241      	movs	r2, #65	; 0x41
 800406a:	5c9b      	ldrb	r3, [r3, r2]
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b20      	cmp	r3, #32
 8004070:	d138      	bne.n	80040e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2240      	movs	r2, #64	; 0x40
 8004076:	5c9b      	ldrb	r3, [r3, r2]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d101      	bne.n	8004080 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800407c:	2302      	movs	r3, #2
 800407e:	e032      	b.n	80040e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2240      	movs	r2, #64	; 0x40
 8004084:	2101      	movs	r1, #1
 8004086:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2241      	movs	r2, #65	; 0x41
 800408c:	2124      	movs	r1, #36	; 0x24
 800408e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2101      	movs	r1, #1
 800409c:	438a      	bics	r2, r1
 800409e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4911      	ldr	r1, [pc, #68]	; (80040f0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80040ac:	400a      	ands	r2, r1
 80040ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6819      	ldr	r1, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	683a      	ldr	r2, [r7, #0]
 80040bc:	430a      	orrs	r2, r1
 80040be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2101      	movs	r1, #1
 80040cc:	430a      	orrs	r2, r1
 80040ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2241      	movs	r2, #65	; 0x41
 80040d4:	2120      	movs	r1, #32
 80040d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2240      	movs	r2, #64	; 0x40
 80040dc:	2100      	movs	r1, #0
 80040de:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80040e0:	2300      	movs	r3, #0
 80040e2:	e000      	b.n	80040e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80040e4:	2302      	movs	r3, #2
  }
}
 80040e6:	0018      	movs	r0, r3
 80040e8:	46bd      	mov	sp, r7
 80040ea:	b002      	add	sp, #8
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	46c0      	nop			; (mov r8, r8)
 80040f0:	ffffefff 	.word	0xffffefff

080040f4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2241      	movs	r2, #65	; 0x41
 8004102:	5c9b      	ldrb	r3, [r3, r2]
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b20      	cmp	r3, #32
 8004108:	d139      	bne.n	800417e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2240      	movs	r2, #64	; 0x40
 800410e:	5c9b      	ldrb	r3, [r3, r2]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d101      	bne.n	8004118 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004114:	2302      	movs	r3, #2
 8004116:	e033      	b.n	8004180 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2240      	movs	r2, #64	; 0x40
 800411c:	2101      	movs	r1, #1
 800411e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2241      	movs	r2, #65	; 0x41
 8004124:	2124      	movs	r1, #36	; 0x24
 8004126:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2101      	movs	r1, #1
 8004134:	438a      	bics	r2, r1
 8004136:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4a11      	ldr	r2, [pc, #68]	; (8004188 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004144:	4013      	ands	r3, r2
 8004146:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	021b      	lsls	r3, r3, #8
 800414c:	68fa      	ldr	r2, [r7, #12]
 800414e:	4313      	orrs	r3, r2
 8004150:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2101      	movs	r1, #1
 8004166:	430a      	orrs	r2, r1
 8004168:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2241      	movs	r2, #65	; 0x41
 800416e:	2120      	movs	r1, #32
 8004170:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2240      	movs	r2, #64	; 0x40
 8004176:	2100      	movs	r1, #0
 8004178:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800417a:	2300      	movs	r3, #0
 800417c:	e000      	b.n	8004180 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800417e:	2302      	movs	r3, #2
  }
}
 8004180:	0018      	movs	r0, r3
 8004182:	46bd      	mov	sp, r7
 8004184:	b004      	add	sp, #16
 8004186:	bd80      	pop	{r7, pc}
 8004188:	fffff0ff 	.word	0xfffff0ff

0800418c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004194:	4b19      	ldr	r3, [pc, #100]	; (80041fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a19      	ldr	r2, [pc, #100]	; (8004200 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800419a:	4013      	ands	r3, r2
 800419c:	0019      	movs	r1, r3
 800419e:	4b17      	ldr	r3, [pc, #92]	; (80041fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	2380      	movs	r3, #128	; 0x80
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d11f      	bne.n	80041f0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80041b0:	4b14      	ldr	r3, [pc, #80]	; (8004204 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	0013      	movs	r3, r2
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	189b      	adds	r3, r3, r2
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	4912      	ldr	r1, [pc, #72]	; (8004208 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80041be:	0018      	movs	r0, r3
 80041c0:	f7fb ffa8 	bl	8000114 <__udivsi3>
 80041c4:	0003      	movs	r3, r0
 80041c6:	3301      	adds	r3, #1
 80041c8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041ca:	e008      	b.n	80041de <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d003      	beq.n	80041da <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	3b01      	subs	r3, #1
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	e001      	b.n	80041de <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e009      	b.n	80041f2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041de:	4b07      	ldr	r3, [pc, #28]	; (80041fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80041e0:	695a      	ldr	r2, [r3, #20]
 80041e2:	2380      	movs	r3, #128	; 0x80
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	401a      	ands	r2, r3
 80041e8:	2380      	movs	r3, #128	; 0x80
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d0ed      	beq.n	80041cc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	0018      	movs	r0, r3
 80041f4:	46bd      	mov	sp, r7
 80041f6:	b004      	add	sp, #16
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	46c0      	nop			; (mov r8, r8)
 80041fc:	40007000 	.word	0x40007000
 8004200:	fffff9ff 	.word	0xfffff9ff
 8004204:	20000018 	.word	0x20000018
 8004208:	000f4240 	.word	0x000f4240

0800420c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004210:	4b03      	ldr	r3, [pc, #12]	; (8004220 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	23e0      	movs	r3, #224	; 0xe0
 8004216:	01db      	lsls	r3, r3, #7
 8004218:	4013      	ands	r3, r2
}
 800421a:	0018      	movs	r0, r3
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	40021000 	.word	0x40021000

08004224 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b088      	sub	sp, #32
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e2f3      	b.n	800481e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2201      	movs	r2, #1
 800423c:	4013      	ands	r3, r2
 800423e:	d100      	bne.n	8004242 <HAL_RCC_OscConfig+0x1e>
 8004240:	e07c      	b.n	800433c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004242:	4bc3      	ldr	r3, [pc, #780]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	2238      	movs	r2, #56	; 0x38
 8004248:	4013      	ands	r3, r2
 800424a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800424c:	4bc0      	ldr	r3, [pc, #768]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	2203      	movs	r2, #3
 8004252:	4013      	ands	r3, r2
 8004254:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	2b10      	cmp	r3, #16
 800425a:	d102      	bne.n	8004262 <HAL_RCC_OscConfig+0x3e>
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	2b03      	cmp	r3, #3
 8004260:	d002      	beq.n	8004268 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	2b08      	cmp	r3, #8
 8004266:	d10b      	bne.n	8004280 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004268:	4bb9      	ldr	r3, [pc, #740]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	2380      	movs	r3, #128	; 0x80
 800426e:	029b      	lsls	r3, r3, #10
 8004270:	4013      	ands	r3, r2
 8004272:	d062      	beq.n	800433a <HAL_RCC_OscConfig+0x116>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d15e      	bne.n	800433a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e2ce      	b.n	800481e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	2380      	movs	r3, #128	; 0x80
 8004286:	025b      	lsls	r3, r3, #9
 8004288:	429a      	cmp	r2, r3
 800428a:	d107      	bne.n	800429c <HAL_RCC_OscConfig+0x78>
 800428c:	4bb0      	ldr	r3, [pc, #704]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	4baf      	ldr	r3, [pc, #700]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 8004292:	2180      	movs	r1, #128	; 0x80
 8004294:	0249      	lsls	r1, r1, #9
 8004296:	430a      	orrs	r2, r1
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	e020      	b.n	80042de <HAL_RCC_OscConfig+0xba>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	23a0      	movs	r3, #160	; 0xa0
 80042a2:	02db      	lsls	r3, r3, #11
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d10e      	bne.n	80042c6 <HAL_RCC_OscConfig+0xa2>
 80042a8:	4ba9      	ldr	r3, [pc, #676]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	4ba8      	ldr	r3, [pc, #672]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 80042ae:	2180      	movs	r1, #128	; 0x80
 80042b0:	02c9      	lsls	r1, r1, #11
 80042b2:	430a      	orrs	r2, r1
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	4ba6      	ldr	r3, [pc, #664]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	4ba5      	ldr	r3, [pc, #660]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 80042bc:	2180      	movs	r1, #128	; 0x80
 80042be:	0249      	lsls	r1, r1, #9
 80042c0:	430a      	orrs	r2, r1
 80042c2:	601a      	str	r2, [r3, #0]
 80042c4:	e00b      	b.n	80042de <HAL_RCC_OscConfig+0xba>
 80042c6:	4ba2      	ldr	r3, [pc, #648]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	4ba1      	ldr	r3, [pc, #644]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 80042cc:	49a1      	ldr	r1, [pc, #644]	; (8004554 <HAL_RCC_OscConfig+0x330>)
 80042ce:	400a      	ands	r2, r1
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	4b9f      	ldr	r3, [pc, #636]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	4b9e      	ldr	r3, [pc, #632]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 80042d8:	499f      	ldr	r1, [pc, #636]	; (8004558 <HAL_RCC_OscConfig+0x334>)
 80042da:	400a      	ands	r2, r1
 80042dc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d014      	beq.n	8004310 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e6:	f7fd fd69 	bl	8001dbc <HAL_GetTick>
 80042ea:	0003      	movs	r3, r0
 80042ec:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042f0:	f7fd fd64 	bl	8001dbc <HAL_GetTick>
 80042f4:	0002      	movs	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b64      	cmp	r3, #100	; 0x64
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e28d      	b.n	800481e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004302:	4b93      	ldr	r3, [pc, #588]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	2380      	movs	r3, #128	; 0x80
 8004308:	029b      	lsls	r3, r3, #10
 800430a:	4013      	ands	r3, r2
 800430c:	d0f0      	beq.n	80042f0 <HAL_RCC_OscConfig+0xcc>
 800430e:	e015      	b.n	800433c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004310:	f7fd fd54 	bl	8001dbc <HAL_GetTick>
 8004314:	0003      	movs	r3, r0
 8004316:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004318:	e008      	b.n	800432c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800431a:	f7fd fd4f 	bl	8001dbc <HAL_GetTick>
 800431e:	0002      	movs	r2, r0
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b64      	cmp	r3, #100	; 0x64
 8004326:	d901      	bls.n	800432c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e278      	b.n	800481e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800432c:	4b88      	ldr	r3, [pc, #544]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	2380      	movs	r3, #128	; 0x80
 8004332:	029b      	lsls	r3, r3, #10
 8004334:	4013      	ands	r3, r2
 8004336:	d1f0      	bne.n	800431a <HAL_RCC_OscConfig+0xf6>
 8004338:	e000      	b.n	800433c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800433a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2202      	movs	r2, #2
 8004342:	4013      	ands	r3, r2
 8004344:	d100      	bne.n	8004348 <HAL_RCC_OscConfig+0x124>
 8004346:	e099      	b.n	800447c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004348:	4b81      	ldr	r3, [pc, #516]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	2238      	movs	r2, #56	; 0x38
 800434e:	4013      	ands	r3, r2
 8004350:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004352:	4b7f      	ldr	r3, [pc, #508]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	2203      	movs	r2, #3
 8004358:	4013      	ands	r3, r2
 800435a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	2b10      	cmp	r3, #16
 8004360:	d102      	bne.n	8004368 <HAL_RCC_OscConfig+0x144>
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2b02      	cmp	r3, #2
 8004366:	d002      	beq.n	800436e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d135      	bne.n	80043da <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800436e:	4b78      	ldr	r3, [pc, #480]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	2380      	movs	r3, #128	; 0x80
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	4013      	ands	r3, r2
 8004378:	d005      	beq.n	8004386 <HAL_RCC_OscConfig+0x162>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e24b      	b.n	800481e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004386:	4b72      	ldr	r3, [pc, #456]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	4a74      	ldr	r2, [pc, #464]	; (800455c <HAL_RCC_OscConfig+0x338>)
 800438c:	4013      	ands	r3, r2
 800438e:	0019      	movs	r1, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	021a      	lsls	r2, r3, #8
 8004396:	4b6e      	ldr	r3, [pc, #440]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 8004398:	430a      	orrs	r2, r1
 800439a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d112      	bne.n	80043c8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80043a2:	4b6b      	ldr	r3, [pc, #428]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a6e      	ldr	r2, [pc, #440]	; (8004560 <HAL_RCC_OscConfig+0x33c>)
 80043a8:	4013      	ands	r3, r2
 80043aa:	0019      	movs	r1, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	691a      	ldr	r2, [r3, #16]
 80043b0:	4b67      	ldr	r3, [pc, #412]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 80043b2:	430a      	orrs	r2, r1
 80043b4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80043b6:	4b66      	ldr	r3, [pc, #408]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	0adb      	lsrs	r3, r3, #11
 80043bc:	2207      	movs	r2, #7
 80043be:	4013      	ands	r3, r2
 80043c0:	4a68      	ldr	r2, [pc, #416]	; (8004564 <HAL_RCC_OscConfig+0x340>)
 80043c2:	40da      	lsrs	r2, r3
 80043c4:	4b68      	ldr	r3, [pc, #416]	; (8004568 <HAL_RCC_OscConfig+0x344>)
 80043c6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80043c8:	4b68      	ldr	r3, [pc, #416]	; (800456c <HAL_RCC_OscConfig+0x348>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	0018      	movs	r0, r3
 80043ce:	f7fd f91f 	bl	8001610 <HAL_InitTick>
 80043d2:	1e03      	subs	r3, r0, #0
 80043d4:	d051      	beq.n	800447a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e221      	b.n	800481e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d030      	beq.n	8004444 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80043e2:	4b5b      	ldr	r3, [pc, #364]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a5e      	ldr	r2, [pc, #376]	; (8004560 <HAL_RCC_OscConfig+0x33c>)
 80043e8:	4013      	ands	r3, r2
 80043ea:	0019      	movs	r1, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	691a      	ldr	r2, [r3, #16]
 80043f0:	4b57      	ldr	r3, [pc, #348]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 80043f2:	430a      	orrs	r2, r1
 80043f4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80043f6:	4b56      	ldr	r3, [pc, #344]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	4b55      	ldr	r3, [pc, #340]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 80043fc:	2180      	movs	r1, #128	; 0x80
 80043fe:	0049      	lsls	r1, r1, #1
 8004400:	430a      	orrs	r2, r1
 8004402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004404:	f7fd fcda 	bl	8001dbc <HAL_GetTick>
 8004408:	0003      	movs	r3, r0
 800440a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800440c:	e008      	b.n	8004420 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800440e:	f7fd fcd5 	bl	8001dbc <HAL_GetTick>
 8004412:	0002      	movs	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e1fe      	b.n	800481e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004420:	4b4b      	ldr	r3, [pc, #300]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	2380      	movs	r3, #128	; 0x80
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	4013      	ands	r3, r2
 800442a:	d0f0      	beq.n	800440e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800442c:	4b48      	ldr	r3, [pc, #288]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	4a4a      	ldr	r2, [pc, #296]	; (800455c <HAL_RCC_OscConfig+0x338>)
 8004432:	4013      	ands	r3, r2
 8004434:	0019      	movs	r1, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	021a      	lsls	r2, r3, #8
 800443c:	4b44      	ldr	r3, [pc, #272]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 800443e:	430a      	orrs	r2, r1
 8004440:	605a      	str	r2, [r3, #4]
 8004442:	e01b      	b.n	800447c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004444:	4b42      	ldr	r3, [pc, #264]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	4b41      	ldr	r3, [pc, #260]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 800444a:	4949      	ldr	r1, [pc, #292]	; (8004570 <HAL_RCC_OscConfig+0x34c>)
 800444c:	400a      	ands	r2, r1
 800444e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004450:	f7fd fcb4 	bl	8001dbc <HAL_GetTick>
 8004454:	0003      	movs	r3, r0
 8004456:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004458:	e008      	b.n	800446c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800445a:	f7fd fcaf 	bl	8001dbc <HAL_GetTick>
 800445e:	0002      	movs	r2, r0
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b02      	cmp	r3, #2
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e1d8      	b.n	800481e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800446c:	4b38      	ldr	r3, [pc, #224]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	2380      	movs	r3, #128	; 0x80
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	4013      	ands	r3, r2
 8004476:	d1f0      	bne.n	800445a <HAL_RCC_OscConfig+0x236>
 8004478:	e000      	b.n	800447c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800447a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2208      	movs	r2, #8
 8004482:	4013      	ands	r3, r2
 8004484:	d047      	beq.n	8004516 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004486:	4b32      	ldr	r3, [pc, #200]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	2238      	movs	r2, #56	; 0x38
 800448c:	4013      	ands	r3, r2
 800448e:	2b18      	cmp	r3, #24
 8004490:	d10a      	bne.n	80044a8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004492:	4b2f      	ldr	r3, [pc, #188]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 8004494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004496:	2202      	movs	r2, #2
 8004498:	4013      	ands	r3, r2
 800449a:	d03c      	beq.n	8004516 <HAL_RCC_OscConfig+0x2f2>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d138      	bne.n	8004516 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e1ba      	b.n	800481e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	699b      	ldr	r3, [r3, #24]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d019      	beq.n	80044e4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80044b0:	4b27      	ldr	r3, [pc, #156]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 80044b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80044b4:	4b26      	ldr	r3, [pc, #152]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 80044b6:	2101      	movs	r1, #1
 80044b8:	430a      	orrs	r2, r1
 80044ba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044bc:	f7fd fc7e 	bl	8001dbc <HAL_GetTick>
 80044c0:	0003      	movs	r3, r0
 80044c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044c4:	e008      	b.n	80044d8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044c6:	f7fd fc79 	bl	8001dbc <HAL_GetTick>
 80044ca:	0002      	movs	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d901      	bls.n	80044d8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e1a2      	b.n	800481e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044d8:	4b1d      	ldr	r3, [pc, #116]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 80044da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044dc:	2202      	movs	r2, #2
 80044de:	4013      	ands	r3, r2
 80044e0:	d0f1      	beq.n	80044c6 <HAL_RCC_OscConfig+0x2a2>
 80044e2:	e018      	b.n	8004516 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80044e4:	4b1a      	ldr	r3, [pc, #104]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 80044e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80044e8:	4b19      	ldr	r3, [pc, #100]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 80044ea:	2101      	movs	r1, #1
 80044ec:	438a      	bics	r2, r1
 80044ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f0:	f7fd fc64 	bl	8001dbc <HAL_GetTick>
 80044f4:	0003      	movs	r3, r0
 80044f6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044f8:	e008      	b.n	800450c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044fa:	f7fd fc5f 	bl	8001dbc <HAL_GetTick>
 80044fe:	0002      	movs	r2, r0
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d901      	bls.n	800450c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e188      	b.n	800481e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800450c:	4b10      	ldr	r3, [pc, #64]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 800450e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004510:	2202      	movs	r2, #2
 8004512:	4013      	ands	r3, r2
 8004514:	d1f1      	bne.n	80044fa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2204      	movs	r2, #4
 800451c:	4013      	ands	r3, r2
 800451e:	d100      	bne.n	8004522 <HAL_RCC_OscConfig+0x2fe>
 8004520:	e0c6      	b.n	80046b0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004522:	231f      	movs	r3, #31
 8004524:	18fb      	adds	r3, r7, r3
 8004526:	2200      	movs	r2, #0
 8004528:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800452a:	4b09      	ldr	r3, [pc, #36]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	2238      	movs	r2, #56	; 0x38
 8004530:	4013      	ands	r3, r2
 8004532:	2b20      	cmp	r3, #32
 8004534:	d11e      	bne.n	8004574 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004536:	4b06      	ldr	r3, [pc, #24]	; (8004550 <HAL_RCC_OscConfig+0x32c>)
 8004538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800453a:	2202      	movs	r2, #2
 800453c:	4013      	ands	r3, r2
 800453e:	d100      	bne.n	8004542 <HAL_RCC_OscConfig+0x31e>
 8004540:	e0b6      	b.n	80046b0 <HAL_RCC_OscConfig+0x48c>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d000      	beq.n	800454c <HAL_RCC_OscConfig+0x328>
 800454a:	e0b1      	b.n	80046b0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e166      	b.n	800481e <HAL_RCC_OscConfig+0x5fa>
 8004550:	40021000 	.word	0x40021000
 8004554:	fffeffff 	.word	0xfffeffff
 8004558:	fffbffff 	.word	0xfffbffff
 800455c:	ffff80ff 	.word	0xffff80ff
 8004560:	ffffc7ff 	.word	0xffffc7ff
 8004564:	00f42400 	.word	0x00f42400
 8004568:	20000018 	.word	0x20000018
 800456c:	20000024 	.word	0x20000024
 8004570:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004574:	4bac      	ldr	r3, [pc, #688]	; (8004828 <HAL_RCC_OscConfig+0x604>)
 8004576:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004578:	2380      	movs	r3, #128	; 0x80
 800457a:	055b      	lsls	r3, r3, #21
 800457c:	4013      	ands	r3, r2
 800457e:	d101      	bne.n	8004584 <HAL_RCC_OscConfig+0x360>
 8004580:	2301      	movs	r3, #1
 8004582:	e000      	b.n	8004586 <HAL_RCC_OscConfig+0x362>
 8004584:	2300      	movs	r3, #0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d011      	beq.n	80045ae <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800458a:	4ba7      	ldr	r3, [pc, #668]	; (8004828 <HAL_RCC_OscConfig+0x604>)
 800458c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800458e:	4ba6      	ldr	r3, [pc, #664]	; (8004828 <HAL_RCC_OscConfig+0x604>)
 8004590:	2180      	movs	r1, #128	; 0x80
 8004592:	0549      	lsls	r1, r1, #21
 8004594:	430a      	orrs	r2, r1
 8004596:	63da      	str	r2, [r3, #60]	; 0x3c
 8004598:	4ba3      	ldr	r3, [pc, #652]	; (8004828 <HAL_RCC_OscConfig+0x604>)
 800459a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800459c:	2380      	movs	r3, #128	; 0x80
 800459e:	055b      	lsls	r3, r3, #21
 80045a0:	4013      	ands	r3, r2
 80045a2:	60fb      	str	r3, [r7, #12]
 80045a4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80045a6:	231f      	movs	r3, #31
 80045a8:	18fb      	adds	r3, r7, r3
 80045aa:	2201      	movs	r2, #1
 80045ac:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045ae:	4b9f      	ldr	r3, [pc, #636]	; (800482c <HAL_RCC_OscConfig+0x608>)
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	2380      	movs	r3, #128	; 0x80
 80045b4:	005b      	lsls	r3, r3, #1
 80045b6:	4013      	ands	r3, r2
 80045b8:	d11a      	bne.n	80045f0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045ba:	4b9c      	ldr	r3, [pc, #624]	; (800482c <HAL_RCC_OscConfig+0x608>)
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	4b9b      	ldr	r3, [pc, #620]	; (800482c <HAL_RCC_OscConfig+0x608>)
 80045c0:	2180      	movs	r1, #128	; 0x80
 80045c2:	0049      	lsls	r1, r1, #1
 80045c4:	430a      	orrs	r2, r1
 80045c6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80045c8:	f7fd fbf8 	bl	8001dbc <HAL_GetTick>
 80045cc:	0003      	movs	r3, r0
 80045ce:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045d0:	e008      	b.n	80045e4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045d2:	f7fd fbf3 	bl	8001dbc <HAL_GetTick>
 80045d6:	0002      	movs	r2, r0
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d901      	bls.n	80045e4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e11c      	b.n	800481e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045e4:	4b91      	ldr	r3, [pc, #580]	; (800482c <HAL_RCC_OscConfig+0x608>)
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	2380      	movs	r3, #128	; 0x80
 80045ea:	005b      	lsls	r3, r3, #1
 80045ec:	4013      	ands	r3, r2
 80045ee:	d0f0      	beq.n	80045d2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d106      	bne.n	8004606 <HAL_RCC_OscConfig+0x3e2>
 80045f8:	4b8b      	ldr	r3, [pc, #556]	; (8004828 <HAL_RCC_OscConfig+0x604>)
 80045fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045fc:	4b8a      	ldr	r3, [pc, #552]	; (8004828 <HAL_RCC_OscConfig+0x604>)
 80045fe:	2101      	movs	r1, #1
 8004600:	430a      	orrs	r2, r1
 8004602:	65da      	str	r2, [r3, #92]	; 0x5c
 8004604:	e01c      	b.n	8004640 <HAL_RCC_OscConfig+0x41c>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	2b05      	cmp	r3, #5
 800460c:	d10c      	bne.n	8004628 <HAL_RCC_OscConfig+0x404>
 800460e:	4b86      	ldr	r3, [pc, #536]	; (8004828 <HAL_RCC_OscConfig+0x604>)
 8004610:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004612:	4b85      	ldr	r3, [pc, #532]	; (8004828 <HAL_RCC_OscConfig+0x604>)
 8004614:	2104      	movs	r1, #4
 8004616:	430a      	orrs	r2, r1
 8004618:	65da      	str	r2, [r3, #92]	; 0x5c
 800461a:	4b83      	ldr	r3, [pc, #524]	; (8004828 <HAL_RCC_OscConfig+0x604>)
 800461c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800461e:	4b82      	ldr	r3, [pc, #520]	; (8004828 <HAL_RCC_OscConfig+0x604>)
 8004620:	2101      	movs	r1, #1
 8004622:	430a      	orrs	r2, r1
 8004624:	65da      	str	r2, [r3, #92]	; 0x5c
 8004626:	e00b      	b.n	8004640 <HAL_RCC_OscConfig+0x41c>
 8004628:	4b7f      	ldr	r3, [pc, #508]	; (8004828 <HAL_RCC_OscConfig+0x604>)
 800462a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800462c:	4b7e      	ldr	r3, [pc, #504]	; (8004828 <HAL_RCC_OscConfig+0x604>)
 800462e:	2101      	movs	r1, #1
 8004630:	438a      	bics	r2, r1
 8004632:	65da      	str	r2, [r3, #92]	; 0x5c
 8004634:	4b7c      	ldr	r3, [pc, #496]	; (8004828 <HAL_RCC_OscConfig+0x604>)
 8004636:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004638:	4b7b      	ldr	r3, [pc, #492]	; (8004828 <HAL_RCC_OscConfig+0x604>)
 800463a:	2104      	movs	r1, #4
 800463c:	438a      	bics	r2, r1
 800463e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d014      	beq.n	8004672 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004648:	f7fd fbb8 	bl	8001dbc <HAL_GetTick>
 800464c:	0003      	movs	r3, r0
 800464e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004650:	e009      	b.n	8004666 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004652:	f7fd fbb3 	bl	8001dbc <HAL_GetTick>
 8004656:	0002      	movs	r2, r0
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	4a74      	ldr	r2, [pc, #464]	; (8004830 <HAL_RCC_OscConfig+0x60c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e0db      	b.n	800481e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004666:	4b70      	ldr	r3, [pc, #448]	; (8004828 <HAL_RCC_OscConfig+0x604>)
 8004668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800466a:	2202      	movs	r2, #2
 800466c:	4013      	ands	r3, r2
 800466e:	d0f0      	beq.n	8004652 <HAL_RCC_OscConfig+0x42e>
 8004670:	e013      	b.n	800469a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004672:	f7fd fba3 	bl	8001dbc <HAL_GetTick>
 8004676:	0003      	movs	r3, r0
 8004678:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800467a:	e009      	b.n	8004690 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800467c:	f7fd fb9e 	bl	8001dbc <HAL_GetTick>
 8004680:	0002      	movs	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	4a6a      	ldr	r2, [pc, #424]	; (8004830 <HAL_RCC_OscConfig+0x60c>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e0c6      	b.n	800481e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004690:	4b65      	ldr	r3, [pc, #404]	; (8004828 <HAL_RCC_OscConfig+0x604>)
 8004692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004694:	2202      	movs	r2, #2
 8004696:	4013      	ands	r3, r2
 8004698:	d1f0      	bne.n	800467c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800469a:	231f      	movs	r3, #31
 800469c:	18fb      	adds	r3, r7, r3
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d105      	bne.n	80046b0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80046a4:	4b60      	ldr	r3, [pc, #384]	; (8004828 <HAL_RCC_OscConfig+0x604>)
 80046a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046a8:	4b5f      	ldr	r3, [pc, #380]	; (8004828 <HAL_RCC_OscConfig+0x604>)
 80046aa:	4962      	ldr	r1, [pc, #392]	; (8004834 <HAL_RCC_OscConfig+0x610>)
 80046ac:	400a      	ands	r2, r1
 80046ae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	69db      	ldr	r3, [r3, #28]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d100      	bne.n	80046ba <HAL_RCC_OscConfig+0x496>
 80046b8:	e0b0      	b.n	800481c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80046ba:	4b5b      	ldr	r3, [pc, #364]	; (8004828 <HAL_RCC_OscConfig+0x604>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	2238      	movs	r2, #56	; 0x38
 80046c0:	4013      	ands	r3, r2
 80046c2:	2b10      	cmp	r3, #16
 80046c4:	d100      	bne.n	80046c8 <HAL_RCC_OscConfig+0x4a4>
 80046c6:	e078      	b.n	80047ba <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	69db      	ldr	r3, [r3, #28]
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d153      	bne.n	8004778 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046d0:	4b55      	ldr	r3, [pc, #340]	; (8004828 <HAL_RCC_OscConfig+0x604>)
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	4b54      	ldr	r3, [pc, #336]	; (8004828 <HAL_RCC_OscConfig+0x604>)
 80046d6:	4958      	ldr	r1, [pc, #352]	; (8004838 <HAL_RCC_OscConfig+0x614>)
 80046d8:	400a      	ands	r2, r1
 80046da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046dc:	f7fd fb6e 	bl	8001dbc <HAL_GetTick>
 80046e0:	0003      	movs	r3, r0
 80046e2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046e4:	e008      	b.n	80046f8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046e6:	f7fd fb69 	bl	8001dbc <HAL_GetTick>
 80046ea:	0002      	movs	r2, r0
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e092      	b.n	800481e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046f8:	4b4b      	ldr	r3, [pc, #300]	; (8004828 <HAL_RCC_OscConfig+0x604>)
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	2380      	movs	r3, #128	; 0x80
 80046fe:	049b      	lsls	r3, r3, #18
 8004700:	4013      	ands	r3, r2
 8004702:	d1f0      	bne.n	80046e6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004704:	4b48      	ldr	r3, [pc, #288]	; (8004828 <HAL_RCC_OscConfig+0x604>)
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	4a4c      	ldr	r2, [pc, #304]	; (800483c <HAL_RCC_OscConfig+0x618>)
 800470a:	4013      	ands	r3, r2
 800470c:	0019      	movs	r1, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a1a      	ldr	r2, [r3, #32]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	431a      	orrs	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471c:	021b      	lsls	r3, r3, #8
 800471e:	431a      	orrs	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004724:	431a      	orrs	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472a:	431a      	orrs	r2, r3
 800472c:	4b3e      	ldr	r3, [pc, #248]	; (8004828 <HAL_RCC_OscConfig+0x604>)
 800472e:	430a      	orrs	r2, r1
 8004730:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004732:	4b3d      	ldr	r3, [pc, #244]	; (8004828 <HAL_RCC_OscConfig+0x604>)
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	4b3c      	ldr	r3, [pc, #240]	; (8004828 <HAL_RCC_OscConfig+0x604>)
 8004738:	2180      	movs	r1, #128	; 0x80
 800473a:	0449      	lsls	r1, r1, #17
 800473c:	430a      	orrs	r2, r1
 800473e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004740:	4b39      	ldr	r3, [pc, #228]	; (8004828 <HAL_RCC_OscConfig+0x604>)
 8004742:	68da      	ldr	r2, [r3, #12]
 8004744:	4b38      	ldr	r3, [pc, #224]	; (8004828 <HAL_RCC_OscConfig+0x604>)
 8004746:	2180      	movs	r1, #128	; 0x80
 8004748:	0549      	lsls	r1, r1, #21
 800474a:	430a      	orrs	r2, r1
 800474c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800474e:	f7fd fb35 	bl	8001dbc <HAL_GetTick>
 8004752:	0003      	movs	r3, r0
 8004754:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004758:	f7fd fb30 	bl	8001dbc <HAL_GetTick>
 800475c:	0002      	movs	r2, r0
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e059      	b.n	800481e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800476a:	4b2f      	ldr	r3, [pc, #188]	; (8004828 <HAL_RCC_OscConfig+0x604>)
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	2380      	movs	r3, #128	; 0x80
 8004770:	049b      	lsls	r3, r3, #18
 8004772:	4013      	ands	r3, r2
 8004774:	d0f0      	beq.n	8004758 <HAL_RCC_OscConfig+0x534>
 8004776:	e051      	b.n	800481c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004778:	4b2b      	ldr	r3, [pc, #172]	; (8004828 <HAL_RCC_OscConfig+0x604>)
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	4b2a      	ldr	r3, [pc, #168]	; (8004828 <HAL_RCC_OscConfig+0x604>)
 800477e:	492e      	ldr	r1, [pc, #184]	; (8004838 <HAL_RCC_OscConfig+0x614>)
 8004780:	400a      	ands	r2, r1
 8004782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004784:	f7fd fb1a 	bl	8001dbc <HAL_GetTick>
 8004788:	0003      	movs	r3, r0
 800478a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800478c:	e008      	b.n	80047a0 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800478e:	f7fd fb15 	bl	8001dbc <HAL_GetTick>
 8004792:	0002      	movs	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e03e      	b.n	800481e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047a0:	4b21      	ldr	r3, [pc, #132]	; (8004828 <HAL_RCC_OscConfig+0x604>)
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	2380      	movs	r3, #128	; 0x80
 80047a6:	049b      	lsls	r3, r3, #18
 80047a8:	4013      	ands	r3, r2
 80047aa:	d1f0      	bne.n	800478e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80047ac:	4b1e      	ldr	r3, [pc, #120]	; (8004828 <HAL_RCC_OscConfig+0x604>)
 80047ae:	68da      	ldr	r2, [r3, #12]
 80047b0:	4b1d      	ldr	r3, [pc, #116]	; (8004828 <HAL_RCC_OscConfig+0x604>)
 80047b2:	4923      	ldr	r1, [pc, #140]	; (8004840 <HAL_RCC_OscConfig+0x61c>)
 80047b4:	400a      	ands	r2, r1
 80047b6:	60da      	str	r2, [r3, #12]
 80047b8:	e030      	b.n	800481c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d101      	bne.n	80047c6 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e02b      	b.n	800481e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80047c6:	4b18      	ldr	r3, [pc, #96]	; (8004828 <HAL_RCC_OscConfig+0x604>)
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	2203      	movs	r2, #3
 80047d0:	401a      	ands	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d11e      	bne.n	8004818 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	2270      	movs	r2, #112	; 0x70
 80047de:	401a      	ands	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d117      	bne.n	8004818 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	23fe      	movs	r3, #254	; 0xfe
 80047ec:	01db      	lsls	r3, r3, #7
 80047ee:	401a      	ands	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d10e      	bne.n	8004818 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	23f8      	movs	r3, #248	; 0xf8
 80047fe:	039b      	lsls	r3, r3, #14
 8004800:	401a      	ands	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004806:	429a      	cmp	r2, r3
 8004808:	d106      	bne.n	8004818 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	0f5b      	lsrs	r3, r3, #29
 800480e:	075a      	lsls	r2, r3, #29
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004814:	429a      	cmp	r2, r3
 8004816:	d001      	beq.n	800481c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e000      	b.n	800481e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	0018      	movs	r0, r3
 8004820:	46bd      	mov	sp, r7
 8004822:	b008      	add	sp, #32
 8004824:	bd80      	pop	{r7, pc}
 8004826:	46c0      	nop			; (mov r8, r8)
 8004828:	40021000 	.word	0x40021000
 800482c:	40007000 	.word	0x40007000
 8004830:	00001388 	.word	0x00001388
 8004834:	efffffff 	.word	0xefffffff
 8004838:	feffffff 	.word	0xfeffffff
 800483c:	1fc1808c 	.word	0x1fc1808c
 8004840:	effefffc 	.word	0xeffefffc

08004844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e0e9      	b.n	8004a2c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004858:	4b76      	ldr	r3, [pc, #472]	; (8004a34 <HAL_RCC_ClockConfig+0x1f0>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2207      	movs	r2, #7
 800485e:	4013      	ands	r3, r2
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	429a      	cmp	r2, r3
 8004864:	d91e      	bls.n	80048a4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004866:	4b73      	ldr	r3, [pc, #460]	; (8004a34 <HAL_RCC_ClockConfig+0x1f0>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2207      	movs	r2, #7
 800486c:	4393      	bics	r3, r2
 800486e:	0019      	movs	r1, r3
 8004870:	4b70      	ldr	r3, [pc, #448]	; (8004a34 <HAL_RCC_ClockConfig+0x1f0>)
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	430a      	orrs	r2, r1
 8004876:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004878:	f7fd faa0 	bl	8001dbc <HAL_GetTick>
 800487c:	0003      	movs	r3, r0
 800487e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004880:	e009      	b.n	8004896 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004882:	f7fd fa9b 	bl	8001dbc <HAL_GetTick>
 8004886:	0002      	movs	r2, r0
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	4a6a      	ldr	r2, [pc, #424]	; (8004a38 <HAL_RCC_ClockConfig+0x1f4>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e0ca      	b.n	8004a2c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004896:	4b67      	ldr	r3, [pc, #412]	; (8004a34 <HAL_RCC_ClockConfig+0x1f0>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	2207      	movs	r2, #7
 800489c:	4013      	ands	r3, r2
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d1ee      	bne.n	8004882 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2202      	movs	r2, #2
 80048aa:	4013      	ands	r3, r2
 80048ac:	d015      	beq.n	80048da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2204      	movs	r2, #4
 80048b4:	4013      	ands	r3, r2
 80048b6:	d006      	beq.n	80048c6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80048b8:	4b60      	ldr	r3, [pc, #384]	; (8004a3c <HAL_RCC_ClockConfig+0x1f8>)
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	4b5f      	ldr	r3, [pc, #380]	; (8004a3c <HAL_RCC_ClockConfig+0x1f8>)
 80048be:	21e0      	movs	r1, #224	; 0xe0
 80048c0:	01c9      	lsls	r1, r1, #7
 80048c2:	430a      	orrs	r2, r1
 80048c4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048c6:	4b5d      	ldr	r3, [pc, #372]	; (8004a3c <HAL_RCC_ClockConfig+0x1f8>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	4a5d      	ldr	r2, [pc, #372]	; (8004a40 <HAL_RCC_ClockConfig+0x1fc>)
 80048cc:	4013      	ands	r3, r2
 80048ce:	0019      	movs	r1, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	4b59      	ldr	r3, [pc, #356]	; (8004a3c <HAL_RCC_ClockConfig+0x1f8>)
 80048d6:	430a      	orrs	r2, r1
 80048d8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2201      	movs	r2, #1
 80048e0:	4013      	ands	r3, r2
 80048e2:	d057      	beq.n	8004994 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d107      	bne.n	80048fc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048ec:	4b53      	ldr	r3, [pc, #332]	; (8004a3c <HAL_RCC_ClockConfig+0x1f8>)
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	2380      	movs	r3, #128	; 0x80
 80048f2:	029b      	lsls	r3, r3, #10
 80048f4:	4013      	ands	r3, r2
 80048f6:	d12b      	bne.n	8004950 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e097      	b.n	8004a2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	2b02      	cmp	r3, #2
 8004902:	d107      	bne.n	8004914 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004904:	4b4d      	ldr	r3, [pc, #308]	; (8004a3c <HAL_RCC_ClockConfig+0x1f8>)
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	2380      	movs	r3, #128	; 0x80
 800490a:	049b      	lsls	r3, r3, #18
 800490c:	4013      	ands	r3, r2
 800490e:	d11f      	bne.n	8004950 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	e08b      	b.n	8004a2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d107      	bne.n	800492c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800491c:	4b47      	ldr	r3, [pc, #284]	; (8004a3c <HAL_RCC_ClockConfig+0x1f8>)
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	2380      	movs	r3, #128	; 0x80
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	4013      	ands	r3, r2
 8004926:	d113      	bne.n	8004950 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e07f      	b.n	8004a2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	2b03      	cmp	r3, #3
 8004932:	d106      	bne.n	8004942 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004934:	4b41      	ldr	r3, [pc, #260]	; (8004a3c <HAL_RCC_ClockConfig+0x1f8>)
 8004936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004938:	2202      	movs	r2, #2
 800493a:	4013      	ands	r3, r2
 800493c:	d108      	bne.n	8004950 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e074      	b.n	8004a2c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004942:	4b3e      	ldr	r3, [pc, #248]	; (8004a3c <HAL_RCC_ClockConfig+0x1f8>)
 8004944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004946:	2202      	movs	r2, #2
 8004948:	4013      	ands	r3, r2
 800494a:	d101      	bne.n	8004950 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e06d      	b.n	8004a2c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004950:	4b3a      	ldr	r3, [pc, #232]	; (8004a3c <HAL_RCC_ClockConfig+0x1f8>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	2207      	movs	r2, #7
 8004956:	4393      	bics	r3, r2
 8004958:	0019      	movs	r1, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	4b37      	ldr	r3, [pc, #220]	; (8004a3c <HAL_RCC_ClockConfig+0x1f8>)
 8004960:	430a      	orrs	r2, r1
 8004962:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004964:	f7fd fa2a 	bl	8001dbc <HAL_GetTick>
 8004968:	0003      	movs	r3, r0
 800496a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800496c:	e009      	b.n	8004982 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800496e:	f7fd fa25 	bl	8001dbc <HAL_GetTick>
 8004972:	0002      	movs	r2, r0
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	4a2f      	ldr	r2, [pc, #188]	; (8004a38 <HAL_RCC_ClockConfig+0x1f4>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e054      	b.n	8004a2c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004982:	4b2e      	ldr	r3, [pc, #184]	; (8004a3c <HAL_RCC_ClockConfig+0x1f8>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	2238      	movs	r2, #56	; 0x38
 8004988:	401a      	ands	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	429a      	cmp	r2, r3
 8004992:	d1ec      	bne.n	800496e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004994:	4b27      	ldr	r3, [pc, #156]	; (8004a34 <HAL_RCC_ClockConfig+0x1f0>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2207      	movs	r2, #7
 800499a:	4013      	ands	r3, r2
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	429a      	cmp	r2, r3
 80049a0:	d21e      	bcs.n	80049e0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049a2:	4b24      	ldr	r3, [pc, #144]	; (8004a34 <HAL_RCC_ClockConfig+0x1f0>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2207      	movs	r2, #7
 80049a8:	4393      	bics	r3, r2
 80049aa:	0019      	movs	r1, r3
 80049ac:	4b21      	ldr	r3, [pc, #132]	; (8004a34 <HAL_RCC_ClockConfig+0x1f0>)
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	430a      	orrs	r2, r1
 80049b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80049b4:	f7fd fa02 	bl	8001dbc <HAL_GetTick>
 80049b8:	0003      	movs	r3, r0
 80049ba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80049bc:	e009      	b.n	80049d2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049be:	f7fd f9fd 	bl	8001dbc <HAL_GetTick>
 80049c2:	0002      	movs	r2, r0
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	4a1b      	ldr	r2, [pc, #108]	; (8004a38 <HAL_RCC_ClockConfig+0x1f4>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d901      	bls.n	80049d2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e02c      	b.n	8004a2c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80049d2:	4b18      	ldr	r3, [pc, #96]	; (8004a34 <HAL_RCC_ClockConfig+0x1f0>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2207      	movs	r2, #7
 80049d8:	4013      	ands	r3, r2
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d1ee      	bne.n	80049be <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2204      	movs	r2, #4
 80049e6:	4013      	ands	r3, r2
 80049e8:	d009      	beq.n	80049fe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80049ea:	4b14      	ldr	r3, [pc, #80]	; (8004a3c <HAL_RCC_ClockConfig+0x1f8>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	4a15      	ldr	r2, [pc, #84]	; (8004a44 <HAL_RCC_ClockConfig+0x200>)
 80049f0:	4013      	ands	r3, r2
 80049f2:	0019      	movs	r1, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	68da      	ldr	r2, [r3, #12]
 80049f8:	4b10      	ldr	r3, [pc, #64]	; (8004a3c <HAL_RCC_ClockConfig+0x1f8>)
 80049fa:	430a      	orrs	r2, r1
 80049fc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80049fe:	f000 f829 	bl	8004a54 <HAL_RCC_GetSysClockFreq>
 8004a02:	0001      	movs	r1, r0
 8004a04:	4b0d      	ldr	r3, [pc, #52]	; (8004a3c <HAL_RCC_ClockConfig+0x1f8>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	0a1b      	lsrs	r3, r3, #8
 8004a0a:	220f      	movs	r2, #15
 8004a0c:	401a      	ands	r2, r3
 8004a0e:	4b0e      	ldr	r3, [pc, #56]	; (8004a48 <HAL_RCC_ClockConfig+0x204>)
 8004a10:	0092      	lsls	r2, r2, #2
 8004a12:	58d3      	ldr	r3, [r2, r3]
 8004a14:	221f      	movs	r2, #31
 8004a16:	4013      	ands	r3, r2
 8004a18:	000a      	movs	r2, r1
 8004a1a:	40da      	lsrs	r2, r3
 8004a1c:	4b0b      	ldr	r3, [pc, #44]	; (8004a4c <HAL_RCC_ClockConfig+0x208>)
 8004a1e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004a20:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <HAL_RCC_ClockConfig+0x20c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	0018      	movs	r0, r3
 8004a26:	f7fc fdf3 	bl	8001610 <HAL_InitTick>
 8004a2a:	0003      	movs	r3, r0
}
 8004a2c:	0018      	movs	r0, r3
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	b004      	add	sp, #16
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	40022000 	.word	0x40022000
 8004a38:	00001388 	.word	0x00001388
 8004a3c:	40021000 	.word	0x40021000
 8004a40:	fffff0ff 	.word	0xfffff0ff
 8004a44:	ffff8fff 	.word	0xffff8fff
 8004a48:	08006dd0 	.word	0x08006dd0
 8004a4c:	20000018 	.word	0x20000018
 8004a50:	20000024 	.word	0x20000024

08004a54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b086      	sub	sp, #24
 8004a58:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a5a:	4b3c      	ldr	r3, [pc, #240]	; (8004b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	2238      	movs	r2, #56	; 0x38
 8004a60:	4013      	ands	r3, r2
 8004a62:	d10f      	bne.n	8004a84 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004a64:	4b39      	ldr	r3, [pc, #228]	; (8004b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	0adb      	lsrs	r3, r3, #11
 8004a6a:	2207      	movs	r2, #7
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	2201      	movs	r2, #1
 8004a70:	409a      	lsls	r2, r3
 8004a72:	0013      	movs	r3, r2
 8004a74:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004a76:	6839      	ldr	r1, [r7, #0]
 8004a78:	4835      	ldr	r0, [pc, #212]	; (8004b50 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004a7a:	f7fb fb4b 	bl	8000114 <__udivsi3>
 8004a7e:	0003      	movs	r3, r0
 8004a80:	613b      	str	r3, [r7, #16]
 8004a82:	e05d      	b.n	8004b40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a84:	4b31      	ldr	r3, [pc, #196]	; (8004b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	2238      	movs	r2, #56	; 0x38
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	2b08      	cmp	r3, #8
 8004a8e:	d102      	bne.n	8004a96 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a90:	4b30      	ldr	r3, [pc, #192]	; (8004b54 <HAL_RCC_GetSysClockFreq+0x100>)
 8004a92:	613b      	str	r3, [r7, #16]
 8004a94:	e054      	b.n	8004b40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a96:	4b2d      	ldr	r3, [pc, #180]	; (8004b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	2238      	movs	r2, #56	; 0x38
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	2b10      	cmp	r3, #16
 8004aa0:	d138      	bne.n	8004b14 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004aa2:	4b2a      	ldr	r3, [pc, #168]	; (8004b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	2203      	movs	r2, #3
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004aac:	4b27      	ldr	r3, [pc, #156]	; (8004b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	091b      	lsrs	r3, r3, #4
 8004ab2:	2207      	movs	r2, #7
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2b03      	cmp	r3, #3
 8004abe:	d10d      	bne.n	8004adc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004ac0:	68b9      	ldr	r1, [r7, #8]
 8004ac2:	4824      	ldr	r0, [pc, #144]	; (8004b54 <HAL_RCC_GetSysClockFreq+0x100>)
 8004ac4:	f7fb fb26 	bl	8000114 <__udivsi3>
 8004ac8:	0003      	movs	r3, r0
 8004aca:	0019      	movs	r1, r3
 8004acc:	4b1f      	ldr	r3, [pc, #124]	; (8004b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	0a1b      	lsrs	r3, r3, #8
 8004ad2:	227f      	movs	r2, #127	; 0x7f
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	434b      	muls	r3, r1
 8004ad8:	617b      	str	r3, [r7, #20]
        break;
 8004ada:	e00d      	b.n	8004af8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004adc:	68b9      	ldr	r1, [r7, #8]
 8004ade:	481c      	ldr	r0, [pc, #112]	; (8004b50 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004ae0:	f7fb fb18 	bl	8000114 <__udivsi3>
 8004ae4:	0003      	movs	r3, r0
 8004ae6:	0019      	movs	r1, r3
 8004ae8:	4b18      	ldr	r3, [pc, #96]	; (8004b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	0a1b      	lsrs	r3, r3, #8
 8004aee:	227f      	movs	r2, #127	; 0x7f
 8004af0:	4013      	ands	r3, r2
 8004af2:	434b      	muls	r3, r1
 8004af4:	617b      	str	r3, [r7, #20]
        break;
 8004af6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004af8:	4b14      	ldr	r3, [pc, #80]	; (8004b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	0f5b      	lsrs	r3, r3, #29
 8004afe:	2207      	movs	r2, #7
 8004b00:	4013      	ands	r3, r2
 8004b02:	3301      	adds	r3, #1
 8004b04:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004b06:	6879      	ldr	r1, [r7, #4]
 8004b08:	6978      	ldr	r0, [r7, #20]
 8004b0a:	f7fb fb03 	bl	8000114 <__udivsi3>
 8004b0e:	0003      	movs	r3, r0
 8004b10:	613b      	str	r3, [r7, #16]
 8004b12:	e015      	b.n	8004b40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004b14:	4b0d      	ldr	r3, [pc, #52]	; (8004b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	2238      	movs	r2, #56	; 0x38
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	2b20      	cmp	r3, #32
 8004b1e:	d103      	bne.n	8004b28 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004b20:	2380      	movs	r3, #128	; 0x80
 8004b22:	021b      	lsls	r3, r3, #8
 8004b24:	613b      	str	r3, [r7, #16]
 8004b26:	e00b      	b.n	8004b40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004b28:	4b08      	ldr	r3, [pc, #32]	; (8004b4c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	2238      	movs	r2, #56	; 0x38
 8004b2e:	4013      	ands	r3, r2
 8004b30:	2b18      	cmp	r3, #24
 8004b32:	d103      	bne.n	8004b3c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004b34:	23fa      	movs	r3, #250	; 0xfa
 8004b36:	01db      	lsls	r3, r3, #7
 8004b38:	613b      	str	r3, [r7, #16]
 8004b3a:	e001      	b.n	8004b40 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004b40:	693b      	ldr	r3, [r7, #16]
}
 8004b42:	0018      	movs	r0, r3
 8004b44:	46bd      	mov	sp, r7
 8004b46:	b006      	add	sp, #24
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	46c0      	nop			; (mov r8, r8)
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	00f42400 	.word	0x00f42400
 8004b54:	007a1200 	.word	0x007a1200

08004b58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b5c:	4b02      	ldr	r3, [pc, #8]	; (8004b68 <HAL_RCC_GetHCLKFreq+0x10>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
}
 8004b60:	0018      	movs	r0, r3
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	46c0      	nop			; (mov r8, r8)
 8004b68:	20000018 	.word	0x20000018

08004b6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b6c:	b5b0      	push	{r4, r5, r7, lr}
 8004b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004b70:	f7ff fff2 	bl	8004b58 <HAL_RCC_GetHCLKFreq>
 8004b74:	0004      	movs	r4, r0
 8004b76:	f7ff fb49 	bl	800420c <LL_RCC_GetAPB1Prescaler>
 8004b7a:	0003      	movs	r3, r0
 8004b7c:	0b1a      	lsrs	r2, r3, #12
 8004b7e:	4b05      	ldr	r3, [pc, #20]	; (8004b94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b80:	0092      	lsls	r2, r2, #2
 8004b82:	58d3      	ldr	r3, [r2, r3]
 8004b84:	221f      	movs	r2, #31
 8004b86:	4013      	ands	r3, r2
 8004b88:	40dc      	lsrs	r4, r3
 8004b8a:	0023      	movs	r3, r4
}
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bdb0      	pop	{r4, r5, r7, pc}
 8004b92:	46c0      	nop			; (mov r8, r8)
 8004b94:	08006e10 	.word	0x08006e10

08004b98 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2207      	movs	r2, #7
 8004ba6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ba8:	4b0e      	ldr	r3, [pc, #56]	; (8004be4 <HAL_RCC_GetClockConfig+0x4c>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	2207      	movs	r2, #7
 8004bae:	401a      	ands	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004bb4:	4b0b      	ldr	r3, [pc, #44]	; (8004be4 <HAL_RCC_GetClockConfig+0x4c>)
 8004bb6:	689a      	ldr	r2, [r3, #8]
 8004bb8:	23f0      	movs	r3, #240	; 0xf0
 8004bba:	011b      	lsls	r3, r3, #4
 8004bbc:	401a      	ands	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8004bc2:	4b08      	ldr	r3, [pc, #32]	; (8004be4 <HAL_RCC_GetClockConfig+0x4c>)
 8004bc4:	689a      	ldr	r2, [r3, #8]
 8004bc6:	23e0      	movs	r3, #224	; 0xe0
 8004bc8:	01db      	lsls	r3, r3, #7
 8004bca:	401a      	ands	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004bd0:	4b05      	ldr	r3, [pc, #20]	; (8004be8 <HAL_RCC_GetClockConfig+0x50>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2207      	movs	r2, #7
 8004bd6:	401a      	ands	r2, r3
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	601a      	str	r2, [r3, #0]
}
 8004bdc:	46c0      	nop			; (mov r8, r8)
 8004bde:	46bd      	mov	sp, r7
 8004be0:	b002      	add	sp, #8
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	40021000 	.word	0x40021000
 8004be8:	40022000 	.word	0x40022000

08004bec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004bf4:	2313      	movs	r3, #19
 8004bf6:	18fb      	adds	r3, r7, r3
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004bfc:	2312      	movs	r3, #18
 8004bfe:	18fb      	adds	r3, r7, r3
 8004c00:	2200      	movs	r2, #0
 8004c02:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	2380      	movs	r3, #128	; 0x80
 8004c0a:	029b      	lsls	r3, r3, #10
 8004c0c:	4013      	ands	r3, r2
 8004c0e:	d100      	bne.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004c10:	e0a3      	b.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c12:	2011      	movs	r0, #17
 8004c14:	183b      	adds	r3, r7, r0
 8004c16:	2200      	movs	r2, #0
 8004c18:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c1a:	4b7f      	ldr	r3, [pc, #508]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004c1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c1e:	2380      	movs	r3, #128	; 0x80
 8004c20:	055b      	lsls	r3, r3, #21
 8004c22:	4013      	ands	r3, r2
 8004c24:	d110      	bne.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c26:	4b7c      	ldr	r3, [pc, #496]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004c28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c2a:	4b7b      	ldr	r3, [pc, #492]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004c2c:	2180      	movs	r1, #128	; 0x80
 8004c2e:	0549      	lsls	r1, r1, #21
 8004c30:	430a      	orrs	r2, r1
 8004c32:	63da      	str	r2, [r3, #60]	; 0x3c
 8004c34:	4b78      	ldr	r3, [pc, #480]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004c36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c38:	2380      	movs	r3, #128	; 0x80
 8004c3a:	055b      	lsls	r3, r3, #21
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	60bb      	str	r3, [r7, #8]
 8004c40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c42:	183b      	adds	r3, r7, r0
 8004c44:	2201      	movs	r2, #1
 8004c46:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c48:	4b74      	ldr	r3, [pc, #464]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	4b73      	ldr	r3, [pc, #460]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004c4e:	2180      	movs	r1, #128	; 0x80
 8004c50:	0049      	lsls	r1, r1, #1
 8004c52:	430a      	orrs	r2, r1
 8004c54:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c56:	f7fd f8b1 	bl	8001dbc <HAL_GetTick>
 8004c5a:	0003      	movs	r3, r0
 8004c5c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c5e:	e00b      	b.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c60:	f7fd f8ac 	bl	8001dbc <HAL_GetTick>
 8004c64:	0002      	movs	r2, r0
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d904      	bls.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004c6e:	2313      	movs	r3, #19
 8004c70:	18fb      	adds	r3, r7, r3
 8004c72:	2203      	movs	r2, #3
 8004c74:	701a      	strb	r2, [r3, #0]
        break;
 8004c76:	e005      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c78:	4b68      	ldr	r3, [pc, #416]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	2380      	movs	r3, #128	; 0x80
 8004c7e:	005b      	lsls	r3, r3, #1
 8004c80:	4013      	ands	r3, r2
 8004c82:	d0ed      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004c84:	2313      	movs	r3, #19
 8004c86:	18fb      	adds	r3, r7, r3
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d154      	bne.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c8e:	4b62      	ldr	r3, [pc, #392]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004c90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c92:	23c0      	movs	r3, #192	; 0xc0
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	4013      	ands	r3, r2
 8004c98:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d019      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	695b      	ldr	r3, [r3, #20]
 8004ca4:	697a      	ldr	r2, [r7, #20]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d014      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004caa:	4b5b      	ldr	r3, [pc, #364]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cae:	4a5c      	ldr	r2, [pc, #368]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cb4:	4b58      	ldr	r3, [pc, #352]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004cb6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004cb8:	4b57      	ldr	r3, [pc, #348]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004cba:	2180      	movs	r1, #128	; 0x80
 8004cbc:	0249      	lsls	r1, r1, #9
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004cc2:	4b55      	ldr	r3, [pc, #340]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004cc4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004cc6:	4b54      	ldr	r3, [pc, #336]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004cc8:	4956      	ldr	r1, [pc, #344]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8004cca:	400a      	ands	r2, r1
 8004ccc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004cce:	4b52      	ldr	r3, [pc, #328]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	4013      	ands	r3, r2
 8004cda:	d016      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cdc:	f7fd f86e 	bl	8001dbc <HAL_GetTick>
 8004ce0:	0003      	movs	r3, r0
 8004ce2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ce4:	e00c      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ce6:	f7fd f869 	bl	8001dbc <HAL_GetTick>
 8004cea:	0002      	movs	r2, r0
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	4a4d      	ldr	r2, [pc, #308]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d904      	bls.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004cf6:	2313      	movs	r3, #19
 8004cf8:	18fb      	adds	r3, r7, r3
 8004cfa:	2203      	movs	r2, #3
 8004cfc:	701a      	strb	r2, [r3, #0]
            break;
 8004cfe:	e004      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d00:	4b45      	ldr	r3, [pc, #276]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d04:	2202      	movs	r2, #2
 8004d06:	4013      	ands	r3, r2
 8004d08:	d0ed      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004d0a:	2313      	movs	r3, #19
 8004d0c:	18fb      	adds	r3, r7, r3
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10a      	bne.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d14:	4b40      	ldr	r3, [pc, #256]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d18:	4a41      	ldr	r2, [pc, #260]	; (8004e20 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	0019      	movs	r1, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	695a      	ldr	r2, [r3, #20]
 8004d22:	4b3d      	ldr	r3, [pc, #244]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004d24:	430a      	orrs	r2, r1
 8004d26:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d28:	e00c      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d2a:	2312      	movs	r3, #18
 8004d2c:	18fb      	adds	r3, r7, r3
 8004d2e:	2213      	movs	r2, #19
 8004d30:	18ba      	adds	r2, r7, r2
 8004d32:	7812      	ldrb	r2, [r2, #0]
 8004d34:	701a      	strb	r2, [r3, #0]
 8004d36:	e005      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d38:	2312      	movs	r3, #18
 8004d3a:	18fb      	adds	r3, r7, r3
 8004d3c:	2213      	movs	r2, #19
 8004d3e:	18ba      	adds	r2, r7, r2
 8004d40:	7812      	ldrb	r2, [r2, #0]
 8004d42:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d44:	2311      	movs	r3, #17
 8004d46:	18fb      	adds	r3, r7, r3
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d105      	bne.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d4e:	4b32      	ldr	r3, [pc, #200]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004d50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d52:	4b31      	ldr	r3, [pc, #196]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004d54:	4935      	ldr	r1, [pc, #212]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004d56:	400a      	ands	r2, r1
 8004d58:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	4013      	ands	r3, r2
 8004d62:	d009      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d64:	4b2c      	ldr	r3, [pc, #176]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d68:	2203      	movs	r2, #3
 8004d6a:	4393      	bics	r3, r2
 8004d6c:	0019      	movs	r1, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685a      	ldr	r2, [r3, #4]
 8004d72:	4b29      	ldr	r3, [pc, #164]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004d74:	430a      	orrs	r2, r1
 8004d76:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	4013      	ands	r3, r2
 8004d80:	d009      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d82:	4b25      	ldr	r3, [pc, #148]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d86:	4a2a      	ldr	r2, [pc, #168]	; (8004e30 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004d88:	4013      	ands	r3, r2
 8004d8a:	0019      	movs	r1, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	4b21      	ldr	r3, [pc, #132]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004d92:	430a      	orrs	r2, r1
 8004d94:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	2380      	movs	r3, #128	; 0x80
 8004d9c:	01db      	lsls	r3, r3, #7
 8004d9e:	4013      	ands	r3, r2
 8004da0:	d015      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004da2:	4b1d      	ldr	r3, [pc, #116]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	0899      	lsrs	r1, r3, #2
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	691a      	ldr	r2, [r3, #16]
 8004dae:	4b1a      	ldr	r3, [pc, #104]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004db0:	430a      	orrs	r2, r1
 8004db2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	691a      	ldr	r2, [r3, #16]
 8004db8:	2380      	movs	r3, #128	; 0x80
 8004dba:	05db      	lsls	r3, r3, #23
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d106      	bne.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004dc0:	4b15      	ldr	r3, [pc, #84]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004dc2:	68da      	ldr	r2, [r3, #12]
 8004dc4:	4b14      	ldr	r3, [pc, #80]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004dc6:	2180      	movs	r1, #128	; 0x80
 8004dc8:	0249      	lsls	r1, r1, #9
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	2380      	movs	r3, #128	; 0x80
 8004dd4:	011b      	lsls	r3, r3, #4
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	d016      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004dda:	4b0f      	ldr	r3, [pc, #60]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dde:	4a15      	ldr	r2, [pc, #84]	; (8004e34 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004de0:	4013      	ands	r3, r2
 8004de2:	0019      	movs	r1, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	68da      	ldr	r2, [r3, #12]
 8004de8:	4b0b      	ldr	r3, [pc, #44]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004dea:	430a      	orrs	r2, r1
 8004dec:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68da      	ldr	r2, [r3, #12]
 8004df2:	2380      	movs	r3, #128	; 0x80
 8004df4:	01db      	lsls	r3, r3, #7
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d106      	bne.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004dfa:	4b07      	ldr	r3, [pc, #28]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	4b06      	ldr	r3, [pc, #24]	; (8004e18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004e00:	2180      	movs	r1, #128	; 0x80
 8004e02:	0249      	lsls	r1, r1, #9
 8004e04:	430a      	orrs	r2, r1
 8004e06:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004e08:	2312      	movs	r3, #18
 8004e0a:	18fb      	adds	r3, r7, r3
 8004e0c:	781b      	ldrb	r3, [r3, #0]
}
 8004e0e:	0018      	movs	r0, r3
 8004e10:	46bd      	mov	sp, r7
 8004e12:	b006      	add	sp, #24
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	46c0      	nop			; (mov r8, r8)
 8004e18:	40021000 	.word	0x40021000
 8004e1c:	40007000 	.word	0x40007000
 8004e20:	fffffcff 	.word	0xfffffcff
 8004e24:	fffeffff 	.word	0xfffeffff
 8004e28:	00001388 	.word	0x00001388
 8004e2c:	efffffff 	.word	0xefffffff
 8004e30:	ffffcfff 	.word	0xffffcfff
 8004e34:	ffff3fff 	.word	0xffff3fff

08004e38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	e04a      	b.n	8004ee0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	223d      	movs	r2, #61	; 0x3d
 8004e4e:	5c9b      	ldrb	r3, [r3, r2]
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d107      	bne.n	8004e66 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	223c      	movs	r2, #60	; 0x3c
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	0018      	movs	r0, r3
 8004e62:	f7fc fb7b 	bl	800155c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	223d      	movs	r2, #61	; 0x3d
 8004e6a:	2102      	movs	r1, #2
 8004e6c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	3304      	adds	r3, #4
 8004e76:	0019      	movs	r1, r3
 8004e78:	0010      	movs	r0, r2
 8004e7a:	f000 fd61 	bl	8005940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2248      	movs	r2, #72	; 0x48
 8004e82:	2101      	movs	r1, #1
 8004e84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	223e      	movs	r2, #62	; 0x3e
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	5499      	strb	r1, [r3, r2]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	223f      	movs	r2, #63	; 0x3f
 8004e92:	2101      	movs	r1, #1
 8004e94:	5499      	strb	r1, [r3, r2]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2240      	movs	r2, #64	; 0x40
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	5499      	strb	r1, [r3, r2]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2241      	movs	r2, #65	; 0x41
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	5499      	strb	r1, [r3, r2]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2242      	movs	r2, #66	; 0x42
 8004eaa:	2101      	movs	r1, #1
 8004eac:	5499      	strb	r1, [r3, r2]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2243      	movs	r2, #67	; 0x43
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2244      	movs	r2, #68	; 0x44
 8004eba:	2101      	movs	r1, #1
 8004ebc:	5499      	strb	r1, [r3, r2]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2245      	movs	r2, #69	; 0x45
 8004ec2:	2101      	movs	r1, #1
 8004ec4:	5499      	strb	r1, [r3, r2]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2246      	movs	r2, #70	; 0x46
 8004eca:	2101      	movs	r1, #1
 8004ecc:	5499      	strb	r1, [r3, r2]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2247      	movs	r2, #71	; 0x47
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	223d      	movs	r2, #61	; 0x3d
 8004eda:	2101      	movs	r1, #1
 8004edc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	b002      	add	sp, #8
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	223d      	movs	r2, #61	; 0x3d
 8004ef4:	5c9b      	ldrb	r3, [r3, r2]
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d001      	beq.n	8004f00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e037      	b.n	8004f70 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	223d      	movs	r2, #61	; 0x3d
 8004f04:	2102      	movs	r1, #2
 8004f06:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68da      	ldr	r2, [r3, #12]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2101      	movs	r1, #1
 8004f14:	430a      	orrs	r2, r1
 8004f16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a16      	ldr	r2, [pc, #88]	; (8004f78 <HAL_TIM_Base_Start_IT+0x90>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d004      	beq.n	8004f2c <HAL_TIM_Base_Start_IT+0x44>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a15      	ldr	r2, [pc, #84]	; (8004f7c <HAL_TIM_Base_Start_IT+0x94>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d116      	bne.n	8004f5a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	4a13      	ldr	r2, [pc, #76]	; (8004f80 <HAL_TIM_Base_Start_IT+0x98>)
 8004f34:	4013      	ands	r3, r2
 8004f36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2b06      	cmp	r3, #6
 8004f3c:	d016      	beq.n	8004f6c <HAL_TIM_Base_Start_IT+0x84>
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	2380      	movs	r3, #128	; 0x80
 8004f42:	025b      	lsls	r3, r3, #9
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d011      	beq.n	8004f6c <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2101      	movs	r1, #1
 8004f54:	430a      	orrs	r2, r1
 8004f56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f58:	e008      	b.n	8004f6c <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2101      	movs	r1, #1
 8004f66:	430a      	orrs	r2, r1
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	e000      	b.n	8004f6e <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f6c:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	0018      	movs	r0, r3
 8004f72:	46bd      	mov	sp, r7
 8004f74:	b004      	add	sp, #16
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	40012c00 	.word	0x40012c00
 8004f7c:	40000400 	.word	0x40000400
 8004f80:	00010007 	.word	0x00010007

08004f84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d101      	bne.n	8004f96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e04a      	b.n	800502c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	223d      	movs	r2, #61	; 0x3d
 8004f9a:	5c9b      	ldrb	r3, [r3, r2]
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d107      	bne.n	8004fb2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	223c      	movs	r2, #60	; 0x3c
 8004fa6:	2100      	movs	r1, #0
 8004fa8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	0018      	movs	r0, r3
 8004fae:	f7fc fab5 	bl	800151c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	223d      	movs	r2, #61	; 0x3d
 8004fb6:	2102      	movs	r1, #2
 8004fb8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	3304      	adds	r3, #4
 8004fc2:	0019      	movs	r1, r3
 8004fc4:	0010      	movs	r0, r2
 8004fc6:	f000 fcbb 	bl	8005940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2248      	movs	r2, #72	; 0x48
 8004fce:	2101      	movs	r1, #1
 8004fd0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	223e      	movs	r2, #62	; 0x3e
 8004fd6:	2101      	movs	r1, #1
 8004fd8:	5499      	strb	r1, [r3, r2]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	223f      	movs	r2, #63	; 0x3f
 8004fde:	2101      	movs	r1, #1
 8004fe0:	5499      	strb	r1, [r3, r2]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2240      	movs	r2, #64	; 0x40
 8004fe6:	2101      	movs	r1, #1
 8004fe8:	5499      	strb	r1, [r3, r2]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2241      	movs	r2, #65	; 0x41
 8004fee:	2101      	movs	r1, #1
 8004ff0:	5499      	strb	r1, [r3, r2]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2242      	movs	r2, #66	; 0x42
 8004ff6:	2101      	movs	r1, #1
 8004ff8:	5499      	strb	r1, [r3, r2]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2243      	movs	r2, #67	; 0x43
 8004ffe:	2101      	movs	r1, #1
 8005000:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2244      	movs	r2, #68	; 0x44
 8005006:	2101      	movs	r1, #1
 8005008:	5499      	strb	r1, [r3, r2]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2245      	movs	r2, #69	; 0x45
 800500e:	2101      	movs	r1, #1
 8005010:	5499      	strb	r1, [r3, r2]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2246      	movs	r2, #70	; 0x46
 8005016:	2101      	movs	r1, #1
 8005018:	5499      	strb	r1, [r3, r2]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2247      	movs	r2, #71	; 0x47
 800501e:	2101      	movs	r1, #1
 8005020:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	223d      	movs	r2, #61	; 0x3d
 8005026:	2101      	movs	r1, #1
 8005028:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800502a:	2300      	movs	r3, #0
}
 800502c:	0018      	movs	r0, r3
 800502e:	46bd      	mov	sp, r7
 8005030:	b002      	add	sp, #8
 8005032:	bd80      	pop	{r7, pc}

08005034 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d108      	bne.n	8005056 <HAL_TIM_PWM_Start+0x22>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	223e      	movs	r2, #62	; 0x3e
 8005048:	5c9b      	ldrb	r3, [r3, r2]
 800504a:	b2db      	uxtb	r3, r3
 800504c:	3b01      	subs	r3, #1
 800504e:	1e5a      	subs	r2, r3, #1
 8005050:	4193      	sbcs	r3, r2
 8005052:	b2db      	uxtb	r3, r3
 8005054:	e037      	b.n	80050c6 <HAL_TIM_PWM_Start+0x92>
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2b04      	cmp	r3, #4
 800505a:	d108      	bne.n	800506e <HAL_TIM_PWM_Start+0x3a>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	223f      	movs	r2, #63	; 0x3f
 8005060:	5c9b      	ldrb	r3, [r3, r2]
 8005062:	b2db      	uxtb	r3, r3
 8005064:	3b01      	subs	r3, #1
 8005066:	1e5a      	subs	r2, r3, #1
 8005068:	4193      	sbcs	r3, r2
 800506a:	b2db      	uxtb	r3, r3
 800506c:	e02b      	b.n	80050c6 <HAL_TIM_PWM_Start+0x92>
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	2b08      	cmp	r3, #8
 8005072:	d108      	bne.n	8005086 <HAL_TIM_PWM_Start+0x52>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2240      	movs	r2, #64	; 0x40
 8005078:	5c9b      	ldrb	r3, [r3, r2]
 800507a:	b2db      	uxtb	r3, r3
 800507c:	3b01      	subs	r3, #1
 800507e:	1e5a      	subs	r2, r3, #1
 8005080:	4193      	sbcs	r3, r2
 8005082:	b2db      	uxtb	r3, r3
 8005084:	e01f      	b.n	80050c6 <HAL_TIM_PWM_Start+0x92>
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b0c      	cmp	r3, #12
 800508a:	d108      	bne.n	800509e <HAL_TIM_PWM_Start+0x6a>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2241      	movs	r2, #65	; 0x41
 8005090:	5c9b      	ldrb	r3, [r3, r2]
 8005092:	b2db      	uxtb	r3, r3
 8005094:	3b01      	subs	r3, #1
 8005096:	1e5a      	subs	r2, r3, #1
 8005098:	4193      	sbcs	r3, r2
 800509a:	b2db      	uxtb	r3, r3
 800509c:	e013      	b.n	80050c6 <HAL_TIM_PWM_Start+0x92>
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	2b10      	cmp	r3, #16
 80050a2:	d108      	bne.n	80050b6 <HAL_TIM_PWM_Start+0x82>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2242      	movs	r2, #66	; 0x42
 80050a8:	5c9b      	ldrb	r3, [r3, r2]
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	3b01      	subs	r3, #1
 80050ae:	1e5a      	subs	r2, r3, #1
 80050b0:	4193      	sbcs	r3, r2
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	e007      	b.n	80050c6 <HAL_TIM_PWM_Start+0x92>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2243      	movs	r2, #67	; 0x43
 80050ba:	5c9b      	ldrb	r3, [r3, r2]
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	3b01      	subs	r3, #1
 80050c0:	1e5a      	subs	r2, r3, #1
 80050c2:	4193      	sbcs	r3, r2
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d001      	beq.n	80050ce <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e07b      	b.n	80051c6 <HAL_TIM_PWM_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d104      	bne.n	80050de <HAL_TIM_PWM_Start+0xaa>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	223e      	movs	r2, #62	; 0x3e
 80050d8:	2102      	movs	r1, #2
 80050da:	5499      	strb	r1, [r3, r2]
 80050dc:	e023      	b.n	8005126 <HAL_TIM_PWM_Start+0xf2>
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b04      	cmp	r3, #4
 80050e2:	d104      	bne.n	80050ee <HAL_TIM_PWM_Start+0xba>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	223f      	movs	r2, #63	; 0x3f
 80050e8:	2102      	movs	r1, #2
 80050ea:	5499      	strb	r1, [r3, r2]
 80050ec:	e01b      	b.n	8005126 <HAL_TIM_PWM_Start+0xf2>
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d104      	bne.n	80050fe <HAL_TIM_PWM_Start+0xca>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2240      	movs	r2, #64	; 0x40
 80050f8:	2102      	movs	r1, #2
 80050fa:	5499      	strb	r1, [r3, r2]
 80050fc:	e013      	b.n	8005126 <HAL_TIM_PWM_Start+0xf2>
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b0c      	cmp	r3, #12
 8005102:	d104      	bne.n	800510e <HAL_TIM_PWM_Start+0xda>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2241      	movs	r2, #65	; 0x41
 8005108:	2102      	movs	r1, #2
 800510a:	5499      	strb	r1, [r3, r2]
 800510c:	e00b      	b.n	8005126 <HAL_TIM_PWM_Start+0xf2>
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b10      	cmp	r3, #16
 8005112:	d104      	bne.n	800511e <HAL_TIM_PWM_Start+0xea>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2242      	movs	r2, #66	; 0x42
 8005118:	2102      	movs	r1, #2
 800511a:	5499      	strb	r1, [r3, r2]
 800511c:	e003      	b.n	8005126 <HAL_TIM_PWM_Start+0xf2>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2243      	movs	r2, #67	; 0x43
 8005122:	2102      	movs	r1, #2
 8005124:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	6839      	ldr	r1, [r7, #0]
 800512c:	2201      	movs	r2, #1
 800512e:	0018      	movs	r0, r3
 8005130:	f000 ffaa 	bl	8006088 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a25      	ldr	r2, [pc, #148]	; (80051d0 <HAL_TIM_PWM_Start+0x19c>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d009      	beq.n	8005152 <HAL_TIM_PWM_Start+0x11e>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a24      	ldr	r2, [pc, #144]	; (80051d4 <HAL_TIM_PWM_Start+0x1a0>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d004      	beq.n	8005152 <HAL_TIM_PWM_Start+0x11e>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a22      	ldr	r2, [pc, #136]	; (80051d8 <HAL_TIM_PWM_Start+0x1a4>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d101      	bne.n	8005156 <HAL_TIM_PWM_Start+0x122>
 8005152:	2301      	movs	r3, #1
 8005154:	e000      	b.n	8005158 <HAL_TIM_PWM_Start+0x124>
 8005156:	2300      	movs	r3, #0
 8005158:	2b00      	cmp	r3, #0
 800515a:	d008      	beq.n	800516e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2180      	movs	r1, #128	; 0x80
 8005168:	0209      	lsls	r1, r1, #8
 800516a:	430a      	orrs	r2, r1
 800516c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a17      	ldr	r2, [pc, #92]	; (80051d0 <HAL_TIM_PWM_Start+0x19c>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d004      	beq.n	8005182 <HAL_TIM_PWM_Start+0x14e>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a17      	ldr	r2, [pc, #92]	; (80051dc <HAL_TIM_PWM_Start+0x1a8>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d116      	bne.n	80051b0 <HAL_TIM_PWM_Start+0x17c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	4a15      	ldr	r2, [pc, #84]	; (80051e0 <HAL_TIM_PWM_Start+0x1ac>)
 800518a:	4013      	ands	r3, r2
 800518c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2b06      	cmp	r3, #6
 8005192:	d016      	beq.n	80051c2 <HAL_TIM_PWM_Start+0x18e>
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	2380      	movs	r3, #128	; 0x80
 8005198:	025b      	lsls	r3, r3, #9
 800519a:	429a      	cmp	r2, r3
 800519c:	d011      	beq.n	80051c2 <HAL_TIM_PWM_Start+0x18e>
    {
      __HAL_TIM_ENABLE(htim);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2101      	movs	r1, #1
 80051aa:	430a      	orrs	r2, r1
 80051ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ae:	e008      	b.n	80051c2 <HAL_TIM_PWM_Start+0x18e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2101      	movs	r1, #1
 80051bc:	430a      	orrs	r2, r1
 80051be:	601a      	str	r2, [r3, #0]
 80051c0:	e000      	b.n	80051c4 <HAL_TIM_PWM_Start+0x190>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c2:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	0018      	movs	r0, r3
 80051c8:	46bd      	mov	sp, r7
 80051ca:	b004      	add	sp, #16
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	46c0      	nop			; (mov r8, r8)
 80051d0:	40012c00 	.word	0x40012c00
 80051d4:	40014400 	.word	0x40014400
 80051d8:	40014800 	.word	0x40014800
 80051dc:	40000400 	.word	0x40000400
 80051e0:	00010007 	.word	0x00010007

080051e4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	6839      	ldr	r1, [r7, #0]
 80051f4:	2200      	movs	r2, #0
 80051f6:	0018      	movs	r0, r3
 80051f8:	f000 ff46 	bl	8006088 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a35      	ldr	r2, [pc, #212]	; (80052d8 <HAL_TIM_PWM_Stop+0xf4>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d009      	beq.n	800521a <HAL_TIM_PWM_Stop+0x36>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a34      	ldr	r2, [pc, #208]	; (80052dc <HAL_TIM_PWM_Stop+0xf8>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d004      	beq.n	800521a <HAL_TIM_PWM_Stop+0x36>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a32      	ldr	r2, [pc, #200]	; (80052e0 <HAL_TIM_PWM_Stop+0xfc>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d101      	bne.n	800521e <HAL_TIM_PWM_Stop+0x3a>
 800521a:	2301      	movs	r3, #1
 800521c:	e000      	b.n	8005220 <HAL_TIM_PWM_Stop+0x3c>
 800521e:	2300      	movs	r3, #0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d013      	beq.n	800524c <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	4a2e      	ldr	r2, [pc, #184]	; (80052e4 <HAL_TIM_PWM_Stop+0x100>)
 800522c:	4013      	ands	r3, r2
 800522e:	d10d      	bne.n	800524c <HAL_TIM_PWM_Stop+0x68>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	4a2c      	ldr	r2, [pc, #176]	; (80052e8 <HAL_TIM_PWM_Stop+0x104>)
 8005238:	4013      	ands	r3, r2
 800523a:	d107      	bne.n	800524c <HAL_TIM_PWM_Stop+0x68>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4929      	ldr	r1, [pc, #164]	; (80052ec <HAL_TIM_PWM_Stop+0x108>)
 8005248:	400a      	ands	r2, r1
 800524a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	4a24      	ldr	r2, [pc, #144]	; (80052e4 <HAL_TIM_PWM_Stop+0x100>)
 8005254:	4013      	ands	r3, r2
 8005256:	d10d      	bne.n	8005274 <HAL_TIM_PWM_Stop+0x90>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6a1b      	ldr	r3, [r3, #32]
 800525e:	4a22      	ldr	r2, [pc, #136]	; (80052e8 <HAL_TIM_PWM_Stop+0x104>)
 8005260:	4013      	ands	r3, r2
 8005262:	d107      	bne.n	8005274 <HAL_TIM_PWM_Stop+0x90>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2101      	movs	r1, #1
 8005270:	438a      	bics	r2, r1
 8005272:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d104      	bne.n	8005284 <HAL_TIM_PWM_Stop+0xa0>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	223e      	movs	r2, #62	; 0x3e
 800527e:	2101      	movs	r1, #1
 8005280:	5499      	strb	r1, [r3, r2]
 8005282:	e023      	b.n	80052cc <HAL_TIM_PWM_Stop+0xe8>
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	2b04      	cmp	r3, #4
 8005288:	d104      	bne.n	8005294 <HAL_TIM_PWM_Stop+0xb0>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	223f      	movs	r2, #63	; 0x3f
 800528e:	2101      	movs	r1, #1
 8005290:	5499      	strb	r1, [r3, r2]
 8005292:	e01b      	b.n	80052cc <HAL_TIM_PWM_Stop+0xe8>
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	2b08      	cmp	r3, #8
 8005298:	d104      	bne.n	80052a4 <HAL_TIM_PWM_Stop+0xc0>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2240      	movs	r2, #64	; 0x40
 800529e:	2101      	movs	r1, #1
 80052a0:	5499      	strb	r1, [r3, r2]
 80052a2:	e013      	b.n	80052cc <HAL_TIM_PWM_Stop+0xe8>
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	2b0c      	cmp	r3, #12
 80052a8:	d104      	bne.n	80052b4 <HAL_TIM_PWM_Stop+0xd0>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2241      	movs	r2, #65	; 0x41
 80052ae:	2101      	movs	r1, #1
 80052b0:	5499      	strb	r1, [r3, r2]
 80052b2:	e00b      	b.n	80052cc <HAL_TIM_PWM_Stop+0xe8>
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	2b10      	cmp	r3, #16
 80052b8:	d104      	bne.n	80052c4 <HAL_TIM_PWM_Stop+0xe0>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2242      	movs	r2, #66	; 0x42
 80052be:	2101      	movs	r1, #1
 80052c0:	5499      	strb	r1, [r3, r2]
 80052c2:	e003      	b.n	80052cc <HAL_TIM_PWM_Stop+0xe8>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2243      	movs	r2, #67	; 0x43
 80052c8:	2101      	movs	r1, #1
 80052ca:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	0018      	movs	r0, r3
 80052d0:	46bd      	mov	sp, r7
 80052d2:	b002      	add	sp, #8
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	46c0      	nop			; (mov r8, r8)
 80052d8:	40012c00 	.word	0x40012c00
 80052dc:	40014400 	.word	0x40014400
 80052e0:	40014800 	.word	0x40014800
 80052e4:	00001111 	.word	0x00001111
 80052e8:	00000444 	.word	0x00000444
 80052ec:	ffff7fff 	.word	0xffff7fff

080052f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	2202      	movs	r2, #2
 8005300:	4013      	ands	r3, r2
 8005302:	2b02      	cmp	r3, #2
 8005304:	d124      	bne.n	8005350 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	2202      	movs	r2, #2
 800530e:	4013      	ands	r3, r2
 8005310:	2b02      	cmp	r3, #2
 8005312:	d11d      	bne.n	8005350 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2203      	movs	r2, #3
 800531a:	4252      	negs	r2, r2
 800531c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	2203      	movs	r2, #3
 800532c:	4013      	ands	r3, r2
 800532e:	d004      	beq.n	800533a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	0018      	movs	r0, r3
 8005334:	f000 faec 	bl	8005910 <HAL_TIM_IC_CaptureCallback>
 8005338:	e007      	b.n	800534a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	0018      	movs	r0, r3
 800533e:	f000 fadf 	bl	8005900 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	0018      	movs	r0, r3
 8005346:	f000 faeb 	bl	8005920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	2204      	movs	r2, #4
 8005358:	4013      	ands	r3, r2
 800535a:	2b04      	cmp	r3, #4
 800535c:	d125      	bne.n	80053aa <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	2204      	movs	r2, #4
 8005366:	4013      	ands	r3, r2
 8005368:	2b04      	cmp	r3, #4
 800536a:	d11e      	bne.n	80053aa <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2205      	movs	r2, #5
 8005372:	4252      	negs	r2, r2
 8005374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2202      	movs	r2, #2
 800537a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	699a      	ldr	r2, [r3, #24]
 8005382:	23c0      	movs	r3, #192	; 0xc0
 8005384:	009b      	lsls	r3, r3, #2
 8005386:	4013      	ands	r3, r2
 8005388:	d004      	beq.n	8005394 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	0018      	movs	r0, r3
 800538e:	f000 fabf 	bl	8005910 <HAL_TIM_IC_CaptureCallback>
 8005392:	e007      	b.n	80053a4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	0018      	movs	r0, r3
 8005398:	f000 fab2 	bl	8005900 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	0018      	movs	r0, r3
 80053a0:	f000 fabe 	bl	8005920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	2208      	movs	r2, #8
 80053b2:	4013      	ands	r3, r2
 80053b4:	2b08      	cmp	r3, #8
 80053b6:	d124      	bne.n	8005402 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	2208      	movs	r2, #8
 80053c0:	4013      	ands	r3, r2
 80053c2:	2b08      	cmp	r3, #8
 80053c4:	d11d      	bne.n	8005402 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2209      	movs	r2, #9
 80053cc:	4252      	negs	r2, r2
 80053ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2204      	movs	r2, #4
 80053d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	69db      	ldr	r3, [r3, #28]
 80053dc:	2203      	movs	r2, #3
 80053de:	4013      	ands	r3, r2
 80053e0:	d004      	beq.n	80053ec <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	0018      	movs	r0, r3
 80053e6:	f000 fa93 	bl	8005910 <HAL_TIM_IC_CaptureCallback>
 80053ea:	e007      	b.n	80053fc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	0018      	movs	r0, r3
 80053f0:	f000 fa86 	bl	8005900 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	0018      	movs	r0, r3
 80053f8:	f000 fa92 	bl	8005920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	2210      	movs	r2, #16
 800540a:	4013      	ands	r3, r2
 800540c:	2b10      	cmp	r3, #16
 800540e:	d125      	bne.n	800545c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	2210      	movs	r2, #16
 8005418:	4013      	ands	r3, r2
 800541a:	2b10      	cmp	r3, #16
 800541c:	d11e      	bne.n	800545c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2211      	movs	r2, #17
 8005424:	4252      	negs	r2, r2
 8005426:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2208      	movs	r2, #8
 800542c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	69da      	ldr	r2, [r3, #28]
 8005434:	23c0      	movs	r3, #192	; 0xc0
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4013      	ands	r3, r2
 800543a:	d004      	beq.n	8005446 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	0018      	movs	r0, r3
 8005440:	f000 fa66 	bl	8005910 <HAL_TIM_IC_CaptureCallback>
 8005444:	e007      	b.n	8005456 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	0018      	movs	r0, r3
 800544a:	f000 fa59 	bl	8005900 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	0018      	movs	r0, r3
 8005452:	f000 fa65 	bl	8005920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	2201      	movs	r2, #1
 8005464:	4013      	ands	r3, r2
 8005466:	2b01      	cmp	r3, #1
 8005468:	d10f      	bne.n	800548a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	2201      	movs	r2, #1
 8005472:	4013      	ands	r3, r2
 8005474:	2b01      	cmp	r3, #1
 8005476:	d108      	bne.n	800548a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2202      	movs	r2, #2
 800547e:	4252      	negs	r2, r2
 8005480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	0018      	movs	r0, r3
 8005486:	f7fb ff25 	bl	80012d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	2280      	movs	r2, #128	; 0x80
 8005492:	4013      	ands	r3, r2
 8005494:	2b80      	cmp	r3, #128	; 0x80
 8005496:	d10f      	bne.n	80054b8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	2280      	movs	r2, #128	; 0x80
 80054a0:	4013      	ands	r3, r2
 80054a2:	2b80      	cmp	r3, #128	; 0x80
 80054a4:	d108      	bne.n	80054b8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2281      	movs	r2, #129	; 0x81
 80054ac:	4252      	negs	r2, r2
 80054ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	0018      	movs	r0, r3
 80054b4:	f000 ff1c 	bl	80062f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	691a      	ldr	r2, [r3, #16]
 80054be:	2380      	movs	r3, #128	; 0x80
 80054c0:	005b      	lsls	r3, r3, #1
 80054c2:	401a      	ands	r2, r3
 80054c4:	2380      	movs	r3, #128	; 0x80
 80054c6:	005b      	lsls	r3, r3, #1
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d10e      	bne.n	80054ea <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	2280      	movs	r2, #128	; 0x80
 80054d4:	4013      	ands	r3, r2
 80054d6:	2b80      	cmp	r3, #128	; 0x80
 80054d8:	d107      	bne.n	80054ea <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a1c      	ldr	r2, [pc, #112]	; (8005550 <HAL_TIM_IRQHandler+0x260>)
 80054e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	0018      	movs	r0, r3
 80054e6:	f000 ff0b 	bl	8006300 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	2240      	movs	r2, #64	; 0x40
 80054f2:	4013      	ands	r3, r2
 80054f4:	2b40      	cmp	r3, #64	; 0x40
 80054f6:	d10f      	bne.n	8005518 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	2240      	movs	r2, #64	; 0x40
 8005500:	4013      	ands	r3, r2
 8005502:	2b40      	cmp	r3, #64	; 0x40
 8005504:	d108      	bne.n	8005518 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2241      	movs	r2, #65	; 0x41
 800550c:	4252      	negs	r2, r2
 800550e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	0018      	movs	r0, r3
 8005514:	f000 fa0c 	bl	8005930 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	2220      	movs	r2, #32
 8005520:	4013      	ands	r3, r2
 8005522:	2b20      	cmp	r3, #32
 8005524:	d10f      	bne.n	8005546 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	2220      	movs	r2, #32
 800552e:	4013      	ands	r3, r2
 8005530:	2b20      	cmp	r3, #32
 8005532:	d108      	bne.n	8005546 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2221      	movs	r2, #33	; 0x21
 800553a:	4252      	negs	r2, r2
 800553c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	0018      	movs	r0, r3
 8005542:	f000 fecd 	bl	80062e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005546:	46c0      	nop			; (mov r8, r8)
 8005548:	46bd      	mov	sp, r7
 800554a:	b002      	add	sp, #8
 800554c:	bd80      	pop	{r7, pc}
 800554e:	46c0      	nop			; (mov r8, r8)
 8005550:	fffffeff 	.word	0xfffffeff

08005554 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005560:	2317      	movs	r3, #23
 8005562:	18fb      	adds	r3, r7, r3
 8005564:	2200      	movs	r2, #0
 8005566:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	223c      	movs	r2, #60	; 0x3c
 800556c:	5c9b      	ldrb	r3, [r3, r2]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d101      	bne.n	8005576 <HAL_TIM_PWM_ConfigChannel+0x22>
 8005572:	2302      	movs	r3, #2
 8005574:	e0e5      	b.n	8005742 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	223c      	movs	r2, #60	; 0x3c
 800557a:	2101      	movs	r1, #1
 800557c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b14      	cmp	r3, #20
 8005582:	d900      	bls.n	8005586 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005584:	e0d1      	b.n	800572a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	009a      	lsls	r2, r3, #2
 800558a:	4b70      	ldr	r3, [pc, #448]	; (800574c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800558c:	18d3      	adds	r3, r2, r3
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	0011      	movs	r1, r2
 800559a:	0018      	movs	r0, r3
 800559c:	f000 fa3c 	bl	8005a18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	699a      	ldr	r2, [r3, #24]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2108      	movs	r1, #8
 80055ac:	430a      	orrs	r2, r1
 80055ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699a      	ldr	r2, [r3, #24]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2104      	movs	r1, #4
 80055bc:	438a      	bics	r2, r1
 80055be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6999      	ldr	r1, [r3, #24]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	691a      	ldr	r2, [r3, #16]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	430a      	orrs	r2, r1
 80055d0:	619a      	str	r2, [r3, #24]
      break;
 80055d2:	e0af      	b.n	8005734 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	0011      	movs	r1, r2
 80055dc:	0018      	movs	r0, r3
 80055de:	f000 fa9b 	bl	8005b18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	699a      	ldr	r2, [r3, #24]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2180      	movs	r1, #128	; 0x80
 80055ee:	0109      	lsls	r1, r1, #4
 80055f0:	430a      	orrs	r2, r1
 80055f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	699a      	ldr	r2, [r3, #24]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4954      	ldr	r1, [pc, #336]	; (8005750 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005600:	400a      	ands	r2, r1
 8005602:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6999      	ldr	r1, [r3, #24]
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	021a      	lsls	r2, r3, #8
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	430a      	orrs	r2, r1
 8005616:	619a      	str	r2, [r3, #24]
      break;
 8005618:	e08c      	b.n	8005734 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	0011      	movs	r1, r2
 8005622:	0018      	movs	r0, r3
 8005624:	f000 faf6 	bl	8005c14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	69da      	ldr	r2, [r3, #28]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2108      	movs	r1, #8
 8005634:	430a      	orrs	r2, r1
 8005636:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	69da      	ldr	r2, [r3, #28]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2104      	movs	r1, #4
 8005644:	438a      	bics	r2, r1
 8005646:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	69d9      	ldr	r1, [r3, #28]
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	691a      	ldr	r2, [r3, #16]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	430a      	orrs	r2, r1
 8005658:	61da      	str	r2, [r3, #28]
      break;
 800565a:	e06b      	b.n	8005734 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	0011      	movs	r1, r2
 8005664:	0018      	movs	r0, r3
 8005666:	f000 fb57 	bl	8005d18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	69da      	ldr	r2, [r3, #28]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2180      	movs	r1, #128	; 0x80
 8005676:	0109      	lsls	r1, r1, #4
 8005678:	430a      	orrs	r2, r1
 800567a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	69da      	ldr	r2, [r3, #28]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4932      	ldr	r1, [pc, #200]	; (8005750 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005688:	400a      	ands	r2, r1
 800568a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	69d9      	ldr	r1, [r3, #28]
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	021a      	lsls	r2, r3, #8
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	430a      	orrs	r2, r1
 800569e:	61da      	str	r2, [r3, #28]
      break;
 80056a0:	e048      	b.n	8005734 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	0011      	movs	r1, r2
 80056aa:	0018      	movs	r0, r3
 80056ac:	f000 fb98 	bl	8005de0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2108      	movs	r1, #8
 80056bc:	430a      	orrs	r2, r1
 80056be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2104      	movs	r1, #4
 80056cc:	438a      	bics	r2, r1
 80056ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	691a      	ldr	r2, [r3, #16]
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	430a      	orrs	r2, r1
 80056e0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80056e2:	e027      	b.n	8005734 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	0011      	movs	r1, r2
 80056ec:	0018      	movs	r0, r3
 80056ee:	f000 fbd1 	bl	8005e94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2180      	movs	r1, #128	; 0x80
 80056fe:	0109      	lsls	r1, r1, #4
 8005700:	430a      	orrs	r2, r1
 8005702:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4910      	ldr	r1, [pc, #64]	; (8005750 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005710:	400a      	ands	r2, r1
 8005712:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	021a      	lsls	r2, r3, #8
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	430a      	orrs	r2, r1
 8005726:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005728:	e004      	b.n	8005734 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800572a:	2317      	movs	r3, #23
 800572c:	18fb      	adds	r3, r7, r3
 800572e:	2201      	movs	r2, #1
 8005730:	701a      	strb	r2, [r3, #0]
      break;
 8005732:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	223c      	movs	r2, #60	; 0x3c
 8005738:	2100      	movs	r1, #0
 800573a:	5499      	strb	r1, [r3, r2]

  return status;
 800573c:	2317      	movs	r3, #23
 800573e:	18fb      	adds	r3, r7, r3
 8005740:	781b      	ldrb	r3, [r3, #0]
}
 8005742:	0018      	movs	r0, r3
 8005744:	46bd      	mov	sp, r7
 8005746:	b006      	add	sp, #24
 8005748:	bd80      	pop	{r7, pc}
 800574a:	46c0      	nop			; (mov r8, r8)
 800574c:	08007b8c 	.word	0x08007b8c
 8005750:	fffffbff 	.word	0xfffffbff

08005754 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800575e:	230f      	movs	r3, #15
 8005760:	18fb      	adds	r3, r7, r3
 8005762:	2200      	movs	r2, #0
 8005764:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	223c      	movs	r2, #60	; 0x3c
 800576a:	5c9b      	ldrb	r3, [r3, r2]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d101      	bne.n	8005774 <HAL_TIM_ConfigClockSource+0x20>
 8005770:	2302      	movs	r3, #2
 8005772:	e0bc      	b.n	80058ee <HAL_TIM_ConfigClockSource+0x19a>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	223c      	movs	r2, #60	; 0x3c
 8005778:	2101      	movs	r1, #1
 800577a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	223d      	movs	r2, #61	; 0x3d
 8005780:	2102      	movs	r1, #2
 8005782:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	4a5a      	ldr	r2, [pc, #360]	; (80058f8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8005790:	4013      	ands	r3, r2
 8005792:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	4a59      	ldr	r2, [pc, #356]	; (80058fc <HAL_TIM_ConfigClockSource+0x1a8>)
 8005798:	4013      	ands	r3, r2
 800579a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2280      	movs	r2, #128	; 0x80
 80057aa:	0192      	lsls	r2, r2, #6
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d040      	beq.n	8005832 <HAL_TIM_ConfigClockSource+0xde>
 80057b0:	2280      	movs	r2, #128	; 0x80
 80057b2:	0192      	lsls	r2, r2, #6
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d900      	bls.n	80057ba <HAL_TIM_ConfigClockSource+0x66>
 80057b8:	e088      	b.n	80058cc <HAL_TIM_ConfigClockSource+0x178>
 80057ba:	2280      	movs	r2, #128	; 0x80
 80057bc:	0152      	lsls	r2, r2, #5
 80057be:	4293      	cmp	r3, r2
 80057c0:	d100      	bne.n	80057c4 <HAL_TIM_ConfigClockSource+0x70>
 80057c2:	e088      	b.n	80058d6 <HAL_TIM_ConfigClockSource+0x182>
 80057c4:	2280      	movs	r2, #128	; 0x80
 80057c6:	0152      	lsls	r2, r2, #5
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d900      	bls.n	80057ce <HAL_TIM_ConfigClockSource+0x7a>
 80057cc:	e07e      	b.n	80058cc <HAL_TIM_ConfigClockSource+0x178>
 80057ce:	2b70      	cmp	r3, #112	; 0x70
 80057d0:	d018      	beq.n	8005804 <HAL_TIM_ConfigClockSource+0xb0>
 80057d2:	d900      	bls.n	80057d6 <HAL_TIM_ConfigClockSource+0x82>
 80057d4:	e07a      	b.n	80058cc <HAL_TIM_ConfigClockSource+0x178>
 80057d6:	2b60      	cmp	r3, #96	; 0x60
 80057d8:	d04f      	beq.n	800587a <HAL_TIM_ConfigClockSource+0x126>
 80057da:	d900      	bls.n	80057de <HAL_TIM_ConfigClockSource+0x8a>
 80057dc:	e076      	b.n	80058cc <HAL_TIM_ConfigClockSource+0x178>
 80057de:	2b50      	cmp	r3, #80	; 0x50
 80057e0:	d03b      	beq.n	800585a <HAL_TIM_ConfigClockSource+0x106>
 80057e2:	d900      	bls.n	80057e6 <HAL_TIM_ConfigClockSource+0x92>
 80057e4:	e072      	b.n	80058cc <HAL_TIM_ConfigClockSource+0x178>
 80057e6:	2b40      	cmp	r3, #64	; 0x40
 80057e8:	d057      	beq.n	800589a <HAL_TIM_ConfigClockSource+0x146>
 80057ea:	d900      	bls.n	80057ee <HAL_TIM_ConfigClockSource+0x9a>
 80057ec:	e06e      	b.n	80058cc <HAL_TIM_ConfigClockSource+0x178>
 80057ee:	2b30      	cmp	r3, #48	; 0x30
 80057f0:	d063      	beq.n	80058ba <HAL_TIM_ConfigClockSource+0x166>
 80057f2:	d86b      	bhi.n	80058cc <HAL_TIM_ConfigClockSource+0x178>
 80057f4:	2b20      	cmp	r3, #32
 80057f6:	d060      	beq.n	80058ba <HAL_TIM_ConfigClockSource+0x166>
 80057f8:	d868      	bhi.n	80058cc <HAL_TIM_ConfigClockSource+0x178>
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d05d      	beq.n	80058ba <HAL_TIM_ConfigClockSource+0x166>
 80057fe:	2b10      	cmp	r3, #16
 8005800:	d05b      	beq.n	80058ba <HAL_TIM_ConfigClockSource+0x166>
 8005802:	e063      	b.n	80058cc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6818      	ldr	r0, [r3, #0]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	6899      	ldr	r1, [r3, #8]
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	685a      	ldr	r2, [r3, #4]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	f000 fc18 	bl	8006048 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2277      	movs	r2, #119	; 0x77
 8005824:	4313      	orrs	r3, r2
 8005826:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68ba      	ldr	r2, [r7, #8]
 800582e:	609a      	str	r2, [r3, #8]
      break;
 8005830:	e052      	b.n	80058d8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6818      	ldr	r0, [r3, #0]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	6899      	ldr	r1, [r3, #8]
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	685a      	ldr	r2, [r3, #4]
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	f000 fc01 	bl	8006048 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	689a      	ldr	r2, [r3, #8]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2180      	movs	r1, #128	; 0x80
 8005852:	01c9      	lsls	r1, r1, #7
 8005854:	430a      	orrs	r2, r1
 8005856:	609a      	str	r2, [r3, #8]
      break;
 8005858:	e03e      	b.n	80058d8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6818      	ldr	r0, [r3, #0]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	6859      	ldr	r1, [r3, #4]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	001a      	movs	r2, r3
 8005868:	f000 fb72 	bl	8005f50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2150      	movs	r1, #80	; 0x50
 8005872:	0018      	movs	r0, r3
 8005874:	f000 fbcc 	bl	8006010 <TIM_ITRx_SetConfig>
      break;
 8005878:	e02e      	b.n	80058d8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6818      	ldr	r0, [r3, #0]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	6859      	ldr	r1, [r3, #4]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	001a      	movs	r2, r3
 8005888:	f000 fb90 	bl	8005fac <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2160      	movs	r1, #96	; 0x60
 8005892:	0018      	movs	r0, r3
 8005894:	f000 fbbc 	bl	8006010 <TIM_ITRx_SetConfig>
      break;
 8005898:	e01e      	b.n	80058d8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6818      	ldr	r0, [r3, #0]
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	6859      	ldr	r1, [r3, #4]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	001a      	movs	r2, r3
 80058a8:	f000 fb52 	bl	8005f50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2140      	movs	r1, #64	; 0x40
 80058b2:	0018      	movs	r0, r3
 80058b4:	f000 fbac 	bl	8006010 <TIM_ITRx_SetConfig>
      break;
 80058b8:	e00e      	b.n	80058d8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	0019      	movs	r1, r3
 80058c4:	0010      	movs	r0, r2
 80058c6:	f000 fba3 	bl	8006010 <TIM_ITRx_SetConfig>
      break;
 80058ca:	e005      	b.n	80058d8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80058cc:	230f      	movs	r3, #15
 80058ce:	18fb      	adds	r3, r7, r3
 80058d0:	2201      	movs	r2, #1
 80058d2:	701a      	strb	r2, [r3, #0]
      break;
 80058d4:	e000      	b.n	80058d8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80058d6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	223d      	movs	r2, #61	; 0x3d
 80058dc:	2101      	movs	r1, #1
 80058de:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	223c      	movs	r2, #60	; 0x3c
 80058e4:	2100      	movs	r1, #0
 80058e6:	5499      	strb	r1, [r3, r2]

  return status;
 80058e8:	230f      	movs	r3, #15
 80058ea:	18fb      	adds	r3, r7, r3
 80058ec:	781b      	ldrb	r3, [r3, #0]
}
 80058ee:	0018      	movs	r0, r3
 80058f0:	46bd      	mov	sp, r7
 80058f2:	b004      	add	sp, #16
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	46c0      	nop			; (mov r8, r8)
 80058f8:	ffceff88 	.word	0xffceff88
 80058fc:	ffff00ff 	.word	0xffff00ff

08005900 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005908:	46c0      	nop			; (mov r8, r8)
 800590a:	46bd      	mov	sp, r7
 800590c:	b002      	add	sp, #8
 800590e:	bd80      	pop	{r7, pc}

08005910 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005918:	46c0      	nop			; (mov r8, r8)
 800591a:	46bd      	mov	sp, r7
 800591c:	b002      	add	sp, #8
 800591e:	bd80      	pop	{r7, pc}

08005920 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005928:	46c0      	nop			; (mov r8, r8)
 800592a:	46bd      	mov	sp, r7
 800592c:	b002      	add	sp, #8
 800592e:	bd80      	pop	{r7, pc}

08005930 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005938:	46c0      	nop			; (mov r8, r8)
 800593a:	46bd      	mov	sp, r7
 800593c:	b002      	add	sp, #8
 800593e:	bd80      	pop	{r7, pc}

08005940 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a2b      	ldr	r2, [pc, #172]	; (8005a00 <TIM_Base_SetConfig+0xc0>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d003      	beq.n	8005960 <TIM_Base_SetConfig+0x20>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a2a      	ldr	r2, [pc, #168]	; (8005a04 <TIM_Base_SetConfig+0xc4>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d108      	bne.n	8005972 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2270      	movs	r2, #112	; 0x70
 8005964:	4393      	bics	r3, r2
 8005966:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	4313      	orrs	r3, r2
 8005970:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a22      	ldr	r2, [pc, #136]	; (8005a00 <TIM_Base_SetConfig+0xc0>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d00f      	beq.n	800599a <TIM_Base_SetConfig+0x5a>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a21      	ldr	r2, [pc, #132]	; (8005a04 <TIM_Base_SetConfig+0xc4>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d00b      	beq.n	800599a <TIM_Base_SetConfig+0x5a>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a20      	ldr	r2, [pc, #128]	; (8005a08 <TIM_Base_SetConfig+0xc8>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d007      	beq.n	800599a <TIM_Base_SetConfig+0x5a>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a1f      	ldr	r2, [pc, #124]	; (8005a0c <TIM_Base_SetConfig+0xcc>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d003      	beq.n	800599a <TIM_Base_SetConfig+0x5a>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a1e      	ldr	r2, [pc, #120]	; (8005a10 <TIM_Base_SetConfig+0xd0>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d108      	bne.n	80059ac <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	4a1d      	ldr	r2, [pc, #116]	; (8005a14 <TIM_Base_SetConfig+0xd4>)
 800599e:	4013      	ands	r3, r2
 80059a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2280      	movs	r2, #128	; 0x80
 80059b0:	4393      	bics	r3, r2
 80059b2:	001a      	movs	r2, r3
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	695b      	ldr	r3, [r3, #20]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	689a      	ldr	r2, [r3, #8]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a0a      	ldr	r2, [pc, #40]	; (8005a00 <TIM_Base_SetConfig+0xc0>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d007      	beq.n	80059ea <TIM_Base_SetConfig+0xaa>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a0b      	ldr	r2, [pc, #44]	; (8005a0c <TIM_Base_SetConfig+0xcc>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d003      	beq.n	80059ea <TIM_Base_SetConfig+0xaa>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a0a      	ldr	r2, [pc, #40]	; (8005a10 <TIM_Base_SetConfig+0xd0>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d103      	bne.n	80059f2 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	691a      	ldr	r2, [r3, #16]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2201      	movs	r2, #1
 80059f6:	615a      	str	r2, [r3, #20]
}
 80059f8:	46c0      	nop			; (mov r8, r8)
 80059fa:	46bd      	mov	sp, r7
 80059fc:	b004      	add	sp, #16
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	40012c00 	.word	0x40012c00
 8005a04:	40000400 	.word	0x40000400
 8005a08:	40002000 	.word	0x40002000
 8005a0c:	40014400 	.word	0x40014400
 8005a10:	40014800 	.word	0x40014800
 8005a14:	fffffcff 	.word	0xfffffcff

08005a18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b086      	sub	sp, #24
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	2201      	movs	r2, #1
 8005a28:	4393      	bics	r3, r2
 8005a2a:	001a      	movs	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a1b      	ldr	r3, [r3, #32]
 8005a34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	699b      	ldr	r3, [r3, #24]
 8005a40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	4a2e      	ldr	r2, [pc, #184]	; (8005b00 <TIM_OC1_SetConfig+0xe8>)
 8005a46:	4013      	ands	r3, r2
 8005a48:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2203      	movs	r2, #3
 8005a4e:	4393      	bics	r3, r2
 8005a50:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	2202      	movs	r2, #2
 8005a60:	4393      	bics	r3, r2
 8005a62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a24      	ldr	r2, [pc, #144]	; (8005b04 <TIM_OC1_SetConfig+0xec>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d007      	beq.n	8005a86 <TIM_OC1_SetConfig+0x6e>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a23      	ldr	r2, [pc, #140]	; (8005b08 <TIM_OC1_SetConfig+0xf0>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d003      	beq.n	8005a86 <TIM_OC1_SetConfig+0x6e>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a22      	ldr	r2, [pc, #136]	; (8005b0c <TIM_OC1_SetConfig+0xf4>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d10c      	bne.n	8005aa0 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	2208      	movs	r2, #8
 8005a8a:	4393      	bics	r3, r2
 8005a8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	2204      	movs	r2, #4
 8005a9c:	4393      	bics	r3, r2
 8005a9e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a18      	ldr	r2, [pc, #96]	; (8005b04 <TIM_OC1_SetConfig+0xec>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d007      	beq.n	8005ab8 <TIM_OC1_SetConfig+0xa0>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a17      	ldr	r2, [pc, #92]	; (8005b08 <TIM_OC1_SetConfig+0xf0>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d003      	beq.n	8005ab8 <TIM_OC1_SetConfig+0xa0>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a16      	ldr	r2, [pc, #88]	; (8005b0c <TIM_OC1_SetConfig+0xf4>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d111      	bne.n	8005adc <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	4a15      	ldr	r2, [pc, #84]	; (8005b10 <TIM_OC1_SetConfig+0xf8>)
 8005abc:	4013      	ands	r3, r2
 8005abe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	4a14      	ldr	r2, [pc, #80]	; (8005b14 <TIM_OC1_SetConfig+0xfc>)
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	695b      	ldr	r3, [r3, #20]
 8005acc:	693a      	ldr	r2, [r7, #16]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	693a      	ldr	r2, [r7, #16]
 8005ae0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	685a      	ldr	r2, [r3, #4]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	621a      	str	r2, [r3, #32]
}
 8005af6:	46c0      	nop			; (mov r8, r8)
 8005af8:	46bd      	mov	sp, r7
 8005afa:	b006      	add	sp, #24
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	46c0      	nop			; (mov r8, r8)
 8005b00:	fffeff8f 	.word	0xfffeff8f
 8005b04:	40012c00 	.word	0x40012c00
 8005b08:	40014400 	.word	0x40014400
 8005b0c:	40014800 	.word	0x40014800
 8005b10:	fffffeff 	.word	0xfffffeff
 8005b14:	fffffdff 	.word	0xfffffdff

08005b18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b086      	sub	sp, #24
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	2210      	movs	r2, #16
 8005b28:	4393      	bics	r3, r2
 8005b2a:	001a      	movs	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a1b      	ldr	r3, [r3, #32]
 8005b34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	699b      	ldr	r3, [r3, #24]
 8005b40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	4a2c      	ldr	r2, [pc, #176]	; (8005bf8 <TIM_OC2_SetConfig+0xe0>)
 8005b46:	4013      	ands	r3, r2
 8005b48:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	4a2b      	ldr	r2, [pc, #172]	; (8005bfc <TIM_OC2_SetConfig+0xe4>)
 8005b4e:	4013      	ands	r3, r2
 8005b50:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	021b      	lsls	r3, r3, #8
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	2220      	movs	r2, #32
 8005b62:	4393      	bics	r3, r2
 8005b64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	011b      	lsls	r3, r3, #4
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a22      	ldr	r2, [pc, #136]	; (8005c00 <TIM_OC2_SetConfig+0xe8>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d10d      	bne.n	8005b96 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	2280      	movs	r2, #128	; 0x80
 8005b7e:	4393      	bics	r3, r2
 8005b80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	011b      	lsls	r3, r3, #4
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	2240      	movs	r2, #64	; 0x40
 8005b92:	4393      	bics	r3, r2
 8005b94:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a19      	ldr	r2, [pc, #100]	; (8005c00 <TIM_OC2_SetConfig+0xe8>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d007      	beq.n	8005bae <TIM_OC2_SetConfig+0x96>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a18      	ldr	r2, [pc, #96]	; (8005c04 <TIM_OC2_SetConfig+0xec>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d003      	beq.n	8005bae <TIM_OC2_SetConfig+0x96>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a17      	ldr	r2, [pc, #92]	; (8005c08 <TIM_OC2_SetConfig+0xf0>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d113      	bne.n	8005bd6 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	4a16      	ldr	r2, [pc, #88]	; (8005c0c <TIM_OC2_SetConfig+0xf4>)
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	4a15      	ldr	r2, [pc, #84]	; (8005c10 <TIM_OC2_SetConfig+0xf8>)
 8005bba:	4013      	ands	r3, r2
 8005bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	621a      	str	r2, [r3, #32]
}
 8005bf0:	46c0      	nop			; (mov r8, r8)
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	b006      	add	sp, #24
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	feff8fff 	.word	0xfeff8fff
 8005bfc:	fffffcff 	.word	0xfffffcff
 8005c00:	40012c00 	.word	0x40012c00
 8005c04:	40014400 	.word	0x40014400
 8005c08:	40014800 	.word	0x40014800
 8005c0c:	fffffbff 	.word	0xfffffbff
 8005c10:	fffff7ff 	.word	0xfffff7ff

08005c14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	4a33      	ldr	r2, [pc, #204]	; (8005cf0 <TIM_OC3_SetConfig+0xdc>)
 8005c24:	401a      	ands	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	69db      	ldr	r3, [r3, #28]
 8005c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	4a2d      	ldr	r2, [pc, #180]	; (8005cf4 <TIM_OC3_SetConfig+0xe0>)
 8005c40:	4013      	ands	r3, r2
 8005c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2203      	movs	r2, #3
 8005c48:	4393      	bics	r3, r2
 8005c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	4a27      	ldr	r2, [pc, #156]	; (8005cf8 <TIM_OC3_SetConfig+0xe4>)
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	021b      	lsls	r3, r3, #8
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a23      	ldr	r2, [pc, #140]	; (8005cfc <TIM_OC3_SetConfig+0xe8>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d10d      	bne.n	8005c8e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	4a22      	ldr	r2, [pc, #136]	; (8005d00 <TIM_OC3_SetConfig+0xec>)
 8005c76:	4013      	ands	r3, r2
 8005c78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	68db      	ldr	r3, [r3, #12]
 8005c7e:	021b      	lsls	r3, r3, #8
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	4a1e      	ldr	r2, [pc, #120]	; (8005d04 <TIM_OC3_SetConfig+0xf0>)
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a1a      	ldr	r2, [pc, #104]	; (8005cfc <TIM_OC3_SetConfig+0xe8>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d007      	beq.n	8005ca6 <TIM_OC3_SetConfig+0x92>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a1b      	ldr	r2, [pc, #108]	; (8005d08 <TIM_OC3_SetConfig+0xf4>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d003      	beq.n	8005ca6 <TIM_OC3_SetConfig+0x92>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a1a      	ldr	r2, [pc, #104]	; (8005d0c <TIM_OC3_SetConfig+0xf8>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d113      	bne.n	8005cce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	4a19      	ldr	r2, [pc, #100]	; (8005d10 <TIM_OC3_SetConfig+0xfc>)
 8005caa:	4013      	ands	r3, r2
 8005cac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	4a18      	ldr	r2, [pc, #96]	; (8005d14 <TIM_OC3_SetConfig+0x100>)
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	011b      	lsls	r3, r3, #4
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	011b      	lsls	r3, r3, #4
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	685a      	ldr	r2, [r3, #4]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	621a      	str	r2, [r3, #32]
}
 8005ce8:	46c0      	nop			; (mov r8, r8)
 8005cea:	46bd      	mov	sp, r7
 8005cec:	b006      	add	sp, #24
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	fffffeff 	.word	0xfffffeff
 8005cf4:	fffeff8f 	.word	0xfffeff8f
 8005cf8:	fffffdff 	.word	0xfffffdff
 8005cfc:	40012c00 	.word	0x40012c00
 8005d00:	fffff7ff 	.word	0xfffff7ff
 8005d04:	fffffbff 	.word	0xfffffbff
 8005d08:	40014400 	.word	0x40014400
 8005d0c:	40014800 	.word	0x40014800
 8005d10:	ffffefff 	.word	0xffffefff
 8005d14:	ffffdfff 	.word	0xffffdfff

08005d18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	4a26      	ldr	r2, [pc, #152]	; (8005dc0 <TIM_OC4_SetConfig+0xa8>)
 8005d28:	401a      	ands	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	69db      	ldr	r3, [r3, #28]
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	4a20      	ldr	r2, [pc, #128]	; (8005dc4 <TIM_OC4_SetConfig+0xac>)
 8005d44:	4013      	ands	r3, r2
 8005d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	4a1f      	ldr	r2, [pc, #124]	; (8005dc8 <TIM_OC4_SetConfig+0xb0>)
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	021b      	lsls	r3, r3, #8
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	4a1b      	ldr	r2, [pc, #108]	; (8005dcc <TIM_OC4_SetConfig+0xb4>)
 8005d60:	4013      	ands	r3, r2
 8005d62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	031b      	lsls	r3, r3, #12
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4a17      	ldr	r2, [pc, #92]	; (8005dd0 <TIM_OC4_SetConfig+0xb8>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d007      	beq.n	8005d88 <TIM_OC4_SetConfig+0x70>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a16      	ldr	r2, [pc, #88]	; (8005dd4 <TIM_OC4_SetConfig+0xbc>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d003      	beq.n	8005d88 <TIM_OC4_SetConfig+0x70>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a15      	ldr	r2, [pc, #84]	; (8005dd8 <TIM_OC4_SetConfig+0xc0>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d109      	bne.n	8005d9c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	4a14      	ldr	r2, [pc, #80]	; (8005ddc <TIM_OC4_SetConfig+0xc4>)
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	695b      	ldr	r3, [r3, #20]
 8005d94:	019b      	lsls	r3, r3, #6
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	621a      	str	r2, [r3, #32]
}
 8005db6:	46c0      	nop			; (mov r8, r8)
 8005db8:	46bd      	mov	sp, r7
 8005dba:	b006      	add	sp, #24
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	46c0      	nop			; (mov r8, r8)
 8005dc0:	ffffefff 	.word	0xffffefff
 8005dc4:	feff8fff 	.word	0xfeff8fff
 8005dc8:	fffffcff 	.word	0xfffffcff
 8005dcc:	ffffdfff 	.word	0xffffdfff
 8005dd0:	40012c00 	.word	0x40012c00
 8005dd4:	40014400 	.word	0x40014400
 8005dd8:	40014800 	.word	0x40014800
 8005ddc:	ffffbfff 	.word	0xffffbfff

08005de0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	4a23      	ldr	r2, [pc, #140]	; (8005e7c <TIM_OC5_SetConfig+0x9c>)
 8005df0:	401a      	ands	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	4a1d      	ldr	r2, [pc, #116]	; (8005e80 <TIM_OC5_SetConfig+0xa0>)
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	4a19      	ldr	r2, [pc, #100]	; (8005e84 <TIM_OC5_SetConfig+0xa4>)
 8005e1e:	4013      	ands	r3, r2
 8005e20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	041b      	lsls	r3, r3, #16
 8005e28:	693a      	ldr	r2, [r7, #16]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a15      	ldr	r2, [pc, #84]	; (8005e88 <TIM_OC5_SetConfig+0xa8>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d007      	beq.n	8005e46 <TIM_OC5_SetConfig+0x66>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a14      	ldr	r2, [pc, #80]	; (8005e8c <TIM_OC5_SetConfig+0xac>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d003      	beq.n	8005e46 <TIM_OC5_SetConfig+0x66>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a13      	ldr	r2, [pc, #76]	; (8005e90 <TIM_OC5_SetConfig+0xb0>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d109      	bne.n	8005e5a <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	4a0c      	ldr	r2, [pc, #48]	; (8005e7c <TIM_OC5_SetConfig+0x9c>)
 8005e4a:	4013      	ands	r3, r2
 8005e4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	021b      	lsls	r3, r3, #8
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	685a      	ldr	r2, [r3, #4]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	621a      	str	r2, [r3, #32]
}
 8005e74:	46c0      	nop			; (mov r8, r8)
 8005e76:	46bd      	mov	sp, r7
 8005e78:	b006      	add	sp, #24
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	fffeffff 	.word	0xfffeffff
 8005e80:	fffeff8f 	.word	0xfffeff8f
 8005e84:	fffdffff 	.word	0xfffdffff
 8005e88:	40012c00 	.word	0x40012c00
 8005e8c:	40014400 	.word	0x40014400
 8005e90:	40014800 	.word	0x40014800

08005e94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	4a24      	ldr	r2, [pc, #144]	; (8005f34 <TIM_OC6_SetConfig+0xa0>)
 8005ea4:	401a      	ands	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a1b      	ldr	r3, [r3, #32]
 8005eae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	4a1e      	ldr	r2, [pc, #120]	; (8005f38 <TIM_OC6_SetConfig+0xa4>)
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	021b      	lsls	r3, r3, #8
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	4a1a      	ldr	r2, [pc, #104]	; (8005f3c <TIM_OC6_SetConfig+0xa8>)
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	051b      	lsls	r3, r3, #20
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a16      	ldr	r2, [pc, #88]	; (8005f40 <TIM_OC6_SetConfig+0xac>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d007      	beq.n	8005efc <TIM_OC6_SetConfig+0x68>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a15      	ldr	r2, [pc, #84]	; (8005f44 <TIM_OC6_SetConfig+0xb0>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d003      	beq.n	8005efc <TIM_OC6_SetConfig+0x68>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a14      	ldr	r2, [pc, #80]	; (8005f48 <TIM_OC6_SetConfig+0xb4>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d109      	bne.n	8005f10 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	4a13      	ldr	r2, [pc, #76]	; (8005f4c <TIM_OC6_SetConfig+0xb8>)
 8005f00:	4013      	ands	r3, r2
 8005f02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	695b      	ldr	r3, [r3, #20]
 8005f08:	029b      	lsls	r3, r3, #10
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	685a      	ldr	r2, [r3, #4]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	693a      	ldr	r2, [r7, #16]
 8005f28:	621a      	str	r2, [r3, #32]
}
 8005f2a:	46c0      	nop			; (mov r8, r8)
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	b006      	add	sp, #24
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	46c0      	nop			; (mov r8, r8)
 8005f34:	ffefffff 	.word	0xffefffff
 8005f38:	feff8fff 	.word	0xfeff8fff
 8005f3c:	ffdfffff 	.word	0xffdfffff
 8005f40:	40012c00 	.word	0x40012c00
 8005f44:	40014400 	.word	0x40014400
 8005f48:	40014800 	.word	0x40014800
 8005f4c:	fffbffff 	.word	0xfffbffff

08005f50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	6a1b      	ldr	r3, [r3, #32]
 8005f60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	2201      	movs	r2, #1
 8005f68:	4393      	bics	r3, r2
 8005f6a:	001a      	movs	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	699b      	ldr	r3, [r3, #24]
 8005f74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	22f0      	movs	r2, #240	; 0xf0
 8005f7a:	4393      	bics	r3, r2
 8005f7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	011b      	lsls	r3, r3, #4
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	4313      	orrs	r3, r2
 8005f86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	220a      	movs	r2, #10
 8005f8c:	4393      	bics	r3, r2
 8005f8e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f90:	697a      	ldr	r2, [r7, #20]
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	621a      	str	r2, [r3, #32]
}
 8005fa4:	46c0      	nop			; (mov r8, r8)
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	b006      	add	sp, #24
 8005faa:	bd80      	pop	{r7, pc}

08005fac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b086      	sub	sp, #24
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6a1b      	ldr	r3, [r3, #32]
 8005fbc:	2210      	movs	r2, #16
 8005fbe:	4393      	bics	r3, r2
 8005fc0:	001a      	movs	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6a1b      	ldr	r3, [r3, #32]
 8005fd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	4a0d      	ldr	r2, [pc, #52]	; (800600c <TIM_TI2_ConfigInputStage+0x60>)
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	031b      	lsls	r3, r3, #12
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	22a0      	movs	r2, #160	; 0xa0
 8005fe8:	4393      	bics	r3, r2
 8005fea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	011b      	lsls	r3, r3, #4
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	697a      	ldr	r2, [r7, #20]
 8005ffa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	621a      	str	r2, [r3, #32]
}
 8006002:	46c0      	nop			; (mov r8, r8)
 8006004:	46bd      	mov	sp, r7
 8006006:	b006      	add	sp, #24
 8006008:	bd80      	pop	{r7, pc}
 800600a:	46c0      	nop			; (mov r8, r8)
 800600c:	ffff0fff 	.word	0xffff0fff

08006010 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	4a08      	ldr	r2, [pc, #32]	; (8006044 <TIM_ITRx_SetConfig+0x34>)
 8006024:	4013      	ands	r3, r2
 8006026:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006028:	683a      	ldr	r2, [r7, #0]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	4313      	orrs	r3, r2
 800602e:	2207      	movs	r2, #7
 8006030:	4313      	orrs	r3, r2
 8006032:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	609a      	str	r2, [r3, #8]
}
 800603a:	46c0      	nop			; (mov r8, r8)
 800603c:	46bd      	mov	sp, r7
 800603e:	b004      	add	sp, #16
 8006040:	bd80      	pop	{r7, pc}
 8006042:	46c0      	nop			; (mov r8, r8)
 8006044:	ffcfff8f 	.word	0xffcfff8f

08006048 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b086      	sub	sp, #24
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
 8006054:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	4a09      	ldr	r2, [pc, #36]	; (8006084 <TIM_ETR_SetConfig+0x3c>)
 8006060:	4013      	ands	r3, r2
 8006062:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	021a      	lsls	r2, r3, #8
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	431a      	orrs	r2, r3
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	4313      	orrs	r3, r2
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	4313      	orrs	r3, r2
 8006074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	697a      	ldr	r2, [r7, #20]
 800607a:	609a      	str	r2, [r3, #8]
}
 800607c:	46c0      	nop			; (mov r8, r8)
 800607e:	46bd      	mov	sp, r7
 8006080:	b006      	add	sp, #24
 8006082:	bd80      	pop	{r7, pc}
 8006084:	ffff00ff 	.word	0xffff00ff

08006088 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	221f      	movs	r2, #31
 8006098:	4013      	ands	r3, r2
 800609a:	2201      	movs	r2, #1
 800609c:	409a      	lsls	r2, r3
 800609e:	0013      	movs	r3, r2
 80060a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	43d2      	mvns	r2, r2
 80060aa:	401a      	ands	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6a1a      	ldr	r2, [r3, #32]
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	211f      	movs	r1, #31
 80060b8:	400b      	ands	r3, r1
 80060ba:	6879      	ldr	r1, [r7, #4]
 80060bc:	4099      	lsls	r1, r3
 80060be:	000b      	movs	r3, r1
 80060c0:	431a      	orrs	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	621a      	str	r2, [r3, #32]
}
 80060c6:	46c0      	nop			; (mov r8, r8)
 80060c8:	46bd      	mov	sp, r7
 80060ca:	b006      	add	sp, #24
 80060cc:	bd80      	pop	{r7, pc}
	...

080060d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	223c      	movs	r2, #60	; 0x3c
 80060de:	5c9b      	ldrb	r3, [r3, r2]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d101      	bne.n	80060e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060e4:	2302      	movs	r3, #2
 80060e6:	e04a      	b.n	800617e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	223c      	movs	r2, #60	; 0x3c
 80060ec:	2101      	movs	r1, #1
 80060ee:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	223d      	movs	r2, #61	; 0x3d
 80060f4:	2102      	movs	r1, #2
 80060f6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a1e      	ldr	r2, [pc, #120]	; (8006188 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d108      	bne.n	8006124 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	4a1d      	ldr	r2, [pc, #116]	; (800618c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006116:	4013      	ands	r3, r2
 8006118:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	4313      	orrs	r3, r2
 8006122:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2270      	movs	r2, #112	; 0x70
 8006128:	4393      	bics	r3, r2
 800612a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	4313      	orrs	r3, r2
 8006134:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68fa      	ldr	r2, [r7, #12]
 800613c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a11      	ldr	r2, [pc, #68]	; (8006188 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d004      	beq.n	8006152 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a10      	ldr	r2, [pc, #64]	; (8006190 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d10c      	bne.n	800616c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	2280      	movs	r2, #128	; 0x80
 8006156:	4393      	bics	r3, r2
 8006158:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	4313      	orrs	r3, r2
 8006162:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68ba      	ldr	r2, [r7, #8]
 800616a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	223d      	movs	r2, #61	; 0x3d
 8006170:	2101      	movs	r1, #1
 8006172:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	223c      	movs	r2, #60	; 0x3c
 8006178:	2100      	movs	r1, #0
 800617a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	0018      	movs	r0, r3
 8006180:	46bd      	mov	sp, r7
 8006182:	b004      	add	sp, #16
 8006184:	bd80      	pop	{r7, pc}
 8006186:	46c0      	nop			; (mov r8, r8)
 8006188:	40012c00 	.word	0x40012c00
 800618c:	ff0fffff 	.word	0xff0fffff
 8006190:	40000400 	.word	0x40000400

08006194 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800619e:	2300      	movs	r3, #0
 80061a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	223c      	movs	r2, #60	; 0x3c
 80061a6:	5c9b      	ldrb	r3, [r3, r2]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d101      	bne.n	80061b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80061ac:	2302      	movs	r3, #2
 80061ae:	e079      	b.n	80062a4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	223c      	movs	r2, #60	; 0x3c
 80061b4:	2101      	movs	r1, #1
 80061b6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	22ff      	movs	r2, #255	; 0xff
 80061bc:	4393      	bics	r3, r2
 80061be:	001a      	movs	r2, r3
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	4a38      	ldr	r2, [pc, #224]	; (80062ac <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80061cc:	401a      	ands	r2, r3
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	4a35      	ldr	r2, [pc, #212]	; (80062b0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80061da:	401a      	ands	r2, r3
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	4a33      	ldr	r2, [pc, #204]	; (80062b4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80061e8:	401a      	ands	r2, r3
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	4a30      	ldr	r2, [pc, #192]	; (80062b8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80061f6:	401a      	ands	r2, r3
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	4a2e      	ldr	r2, [pc, #184]	; (80062bc <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8006204:	401a      	ands	r2, r3
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	4313      	orrs	r3, r2
 800620c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	4a2b      	ldr	r2, [pc, #172]	; (80062c0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8006212:	401a      	ands	r2, r3
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006218:	4313      	orrs	r3, r2
 800621a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	4a29      	ldr	r2, [pc, #164]	; (80062c4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8006220:	401a      	ands	r2, r3
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	041b      	lsls	r3, r3, #16
 8006228:	4313      	orrs	r3, r2
 800622a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a25      	ldr	r2, [pc, #148]	; (80062c8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d106      	bne.n	8006244 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	4a24      	ldr	r2, [pc, #144]	; (80062cc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800623a:	401a      	ands	r2, r3
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	69db      	ldr	r3, [r3, #28]
 8006240:	4313      	orrs	r3, r2
 8006242:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a1f      	ldr	r2, [pc, #124]	; (80062c8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d121      	bne.n	8006292 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	4a1f      	ldr	r2, [pc, #124]	; (80062d0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006252:	401a      	ands	r2, r3
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006258:	051b      	lsls	r3, r3, #20
 800625a:	4313      	orrs	r3, r2
 800625c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	4a1c      	ldr	r2, [pc, #112]	; (80062d4 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8006262:	401a      	ands	r2, r3
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	6a1b      	ldr	r3, [r3, #32]
 8006268:	4313      	orrs	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	4a1a      	ldr	r2, [pc, #104]	; (80062d8 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8006270:	401a      	ands	r2, r3
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006276:	4313      	orrs	r3, r2
 8006278:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a12      	ldr	r2, [pc, #72]	; (80062c8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d106      	bne.n	8006292 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	4a15      	ldr	r2, [pc, #84]	; (80062dc <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8006288:	401a      	ands	r2, r3
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628e:	4313      	orrs	r3, r2
 8006290:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	223c      	movs	r2, #60	; 0x3c
 800629e:	2100      	movs	r1, #0
 80062a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	0018      	movs	r0, r3
 80062a6:	46bd      	mov	sp, r7
 80062a8:	b004      	add	sp, #16
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	fffffcff 	.word	0xfffffcff
 80062b0:	fffffbff 	.word	0xfffffbff
 80062b4:	fffff7ff 	.word	0xfffff7ff
 80062b8:	ffffefff 	.word	0xffffefff
 80062bc:	ffffdfff 	.word	0xffffdfff
 80062c0:	ffffbfff 	.word	0xffffbfff
 80062c4:	fff0ffff 	.word	0xfff0ffff
 80062c8:	40012c00 	.word	0x40012c00
 80062cc:	efffffff 	.word	0xefffffff
 80062d0:	ff0fffff 	.word	0xff0fffff
 80062d4:	feffffff 	.word	0xfeffffff
 80062d8:	fdffffff 	.word	0xfdffffff
 80062dc:	dfffffff 	.word	0xdfffffff

080062e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062e8:	46c0      	nop			; (mov r8, r8)
 80062ea:	46bd      	mov	sp, r7
 80062ec:	b002      	add	sp, #8
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062f8:	46c0      	nop			; (mov r8, r8)
 80062fa:	46bd      	mov	sp, r7
 80062fc:	b002      	add	sp, #8
 80062fe:	bd80      	pop	{r7, pc}

08006300 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006308:	46c0      	nop			; (mov r8, r8)
 800630a:	46bd      	mov	sp, r7
 800630c:	b002      	add	sp, #8
 800630e:	bd80      	pop	{r7, pc}

08006310 <__errno>:
 8006310:	4b01      	ldr	r3, [pc, #4]	; (8006318 <__errno+0x8>)
 8006312:	6818      	ldr	r0, [r3, #0]
 8006314:	4770      	bx	lr
 8006316:	46c0      	nop			; (mov r8, r8)
 8006318:	2000002c 	.word	0x2000002c

0800631c <__libc_init_array>:
 800631c:	b570      	push	{r4, r5, r6, lr}
 800631e:	2600      	movs	r6, #0
 8006320:	4d0c      	ldr	r5, [pc, #48]	; (8006354 <__libc_init_array+0x38>)
 8006322:	4c0d      	ldr	r4, [pc, #52]	; (8006358 <__libc_init_array+0x3c>)
 8006324:	1b64      	subs	r4, r4, r5
 8006326:	10a4      	asrs	r4, r4, #2
 8006328:	42a6      	cmp	r6, r4
 800632a:	d109      	bne.n	8006340 <__libc_init_array+0x24>
 800632c:	2600      	movs	r6, #0
 800632e:	f000 fc8b 	bl	8006c48 <_init>
 8006332:	4d0a      	ldr	r5, [pc, #40]	; (800635c <__libc_init_array+0x40>)
 8006334:	4c0a      	ldr	r4, [pc, #40]	; (8006360 <__libc_init_array+0x44>)
 8006336:	1b64      	subs	r4, r4, r5
 8006338:	10a4      	asrs	r4, r4, #2
 800633a:	42a6      	cmp	r6, r4
 800633c:	d105      	bne.n	800634a <__libc_init_array+0x2e>
 800633e:	bd70      	pop	{r4, r5, r6, pc}
 8006340:	00b3      	lsls	r3, r6, #2
 8006342:	58eb      	ldr	r3, [r5, r3]
 8006344:	4798      	blx	r3
 8006346:	3601      	adds	r6, #1
 8006348:	e7ee      	b.n	8006328 <__libc_init_array+0xc>
 800634a:	00b3      	lsls	r3, r6, #2
 800634c:	58eb      	ldr	r3, [r5, r3]
 800634e:	4798      	blx	r3
 8006350:	3601      	adds	r6, #1
 8006352:	e7f2      	b.n	800633a <__libc_init_array+0x1e>
 8006354:	08007c14 	.word	0x08007c14
 8006358:	08007c14 	.word	0x08007c14
 800635c:	08007c14 	.word	0x08007c14
 8006360:	08007c18 	.word	0x08007c18

08006364 <memcpy>:
 8006364:	2300      	movs	r3, #0
 8006366:	b510      	push	{r4, lr}
 8006368:	429a      	cmp	r2, r3
 800636a:	d100      	bne.n	800636e <memcpy+0xa>
 800636c:	bd10      	pop	{r4, pc}
 800636e:	5ccc      	ldrb	r4, [r1, r3]
 8006370:	54c4      	strb	r4, [r0, r3]
 8006372:	3301      	adds	r3, #1
 8006374:	e7f8      	b.n	8006368 <memcpy+0x4>

08006376 <memset>:
 8006376:	0003      	movs	r3, r0
 8006378:	1882      	adds	r2, r0, r2
 800637a:	4293      	cmp	r3, r2
 800637c:	d100      	bne.n	8006380 <memset+0xa>
 800637e:	4770      	bx	lr
 8006380:	7019      	strb	r1, [r3, #0]
 8006382:	3301      	adds	r3, #1
 8006384:	e7f9      	b.n	800637a <memset+0x4>
	...

08006388 <siprintf>:
 8006388:	b40e      	push	{r1, r2, r3}
 800638a:	b500      	push	{lr}
 800638c:	490b      	ldr	r1, [pc, #44]	; (80063bc <siprintf+0x34>)
 800638e:	b09c      	sub	sp, #112	; 0x70
 8006390:	ab1d      	add	r3, sp, #116	; 0x74
 8006392:	9002      	str	r0, [sp, #8]
 8006394:	9006      	str	r0, [sp, #24]
 8006396:	9107      	str	r1, [sp, #28]
 8006398:	9104      	str	r1, [sp, #16]
 800639a:	4809      	ldr	r0, [pc, #36]	; (80063c0 <siprintf+0x38>)
 800639c:	4909      	ldr	r1, [pc, #36]	; (80063c4 <siprintf+0x3c>)
 800639e:	cb04      	ldmia	r3!, {r2}
 80063a0:	9105      	str	r1, [sp, #20]
 80063a2:	6800      	ldr	r0, [r0, #0]
 80063a4:	a902      	add	r1, sp, #8
 80063a6:	9301      	str	r3, [sp, #4]
 80063a8:	f000 f870 	bl	800648c <_svfiprintf_r>
 80063ac:	2300      	movs	r3, #0
 80063ae:	9a02      	ldr	r2, [sp, #8]
 80063b0:	7013      	strb	r3, [r2, #0]
 80063b2:	b01c      	add	sp, #112	; 0x70
 80063b4:	bc08      	pop	{r3}
 80063b6:	b003      	add	sp, #12
 80063b8:	4718      	bx	r3
 80063ba:	46c0      	nop			; (mov r8, r8)
 80063bc:	7fffffff 	.word	0x7fffffff
 80063c0:	2000002c 	.word	0x2000002c
 80063c4:	ffff0208 	.word	0xffff0208

080063c8 <__ssputs_r>:
 80063c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063ca:	688e      	ldr	r6, [r1, #8]
 80063cc:	b085      	sub	sp, #20
 80063ce:	0007      	movs	r7, r0
 80063d0:	000c      	movs	r4, r1
 80063d2:	9203      	str	r2, [sp, #12]
 80063d4:	9301      	str	r3, [sp, #4]
 80063d6:	429e      	cmp	r6, r3
 80063d8:	d83c      	bhi.n	8006454 <__ssputs_r+0x8c>
 80063da:	2390      	movs	r3, #144	; 0x90
 80063dc:	898a      	ldrh	r2, [r1, #12]
 80063de:	00db      	lsls	r3, r3, #3
 80063e0:	421a      	tst	r2, r3
 80063e2:	d034      	beq.n	800644e <__ssputs_r+0x86>
 80063e4:	6909      	ldr	r1, [r1, #16]
 80063e6:	6823      	ldr	r3, [r4, #0]
 80063e8:	6960      	ldr	r0, [r4, #20]
 80063ea:	1a5b      	subs	r3, r3, r1
 80063ec:	9302      	str	r3, [sp, #8]
 80063ee:	2303      	movs	r3, #3
 80063f0:	4343      	muls	r3, r0
 80063f2:	0fdd      	lsrs	r5, r3, #31
 80063f4:	18ed      	adds	r5, r5, r3
 80063f6:	9b01      	ldr	r3, [sp, #4]
 80063f8:	9802      	ldr	r0, [sp, #8]
 80063fa:	3301      	adds	r3, #1
 80063fc:	181b      	adds	r3, r3, r0
 80063fe:	106d      	asrs	r5, r5, #1
 8006400:	42ab      	cmp	r3, r5
 8006402:	d900      	bls.n	8006406 <__ssputs_r+0x3e>
 8006404:	001d      	movs	r5, r3
 8006406:	0553      	lsls	r3, r2, #21
 8006408:	d532      	bpl.n	8006470 <__ssputs_r+0xa8>
 800640a:	0029      	movs	r1, r5
 800640c:	0038      	movs	r0, r7
 800640e:	f000 fb49 	bl	8006aa4 <_malloc_r>
 8006412:	1e06      	subs	r6, r0, #0
 8006414:	d109      	bne.n	800642a <__ssputs_r+0x62>
 8006416:	230c      	movs	r3, #12
 8006418:	603b      	str	r3, [r7, #0]
 800641a:	2340      	movs	r3, #64	; 0x40
 800641c:	2001      	movs	r0, #1
 800641e:	89a2      	ldrh	r2, [r4, #12]
 8006420:	4240      	negs	r0, r0
 8006422:	4313      	orrs	r3, r2
 8006424:	81a3      	strh	r3, [r4, #12]
 8006426:	b005      	add	sp, #20
 8006428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800642a:	9a02      	ldr	r2, [sp, #8]
 800642c:	6921      	ldr	r1, [r4, #16]
 800642e:	f7ff ff99 	bl	8006364 <memcpy>
 8006432:	89a3      	ldrh	r3, [r4, #12]
 8006434:	4a14      	ldr	r2, [pc, #80]	; (8006488 <__ssputs_r+0xc0>)
 8006436:	401a      	ands	r2, r3
 8006438:	2380      	movs	r3, #128	; 0x80
 800643a:	4313      	orrs	r3, r2
 800643c:	81a3      	strh	r3, [r4, #12]
 800643e:	9b02      	ldr	r3, [sp, #8]
 8006440:	6126      	str	r6, [r4, #16]
 8006442:	18f6      	adds	r6, r6, r3
 8006444:	6026      	str	r6, [r4, #0]
 8006446:	6165      	str	r5, [r4, #20]
 8006448:	9e01      	ldr	r6, [sp, #4]
 800644a:	1aed      	subs	r5, r5, r3
 800644c:	60a5      	str	r5, [r4, #8]
 800644e:	9b01      	ldr	r3, [sp, #4]
 8006450:	429e      	cmp	r6, r3
 8006452:	d900      	bls.n	8006456 <__ssputs_r+0x8e>
 8006454:	9e01      	ldr	r6, [sp, #4]
 8006456:	0032      	movs	r2, r6
 8006458:	9903      	ldr	r1, [sp, #12]
 800645a:	6820      	ldr	r0, [r4, #0]
 800645c:	f000 faa3 	bl	80069a6 <memmove>
 8006460:	68a3      	ldr	r3, [r4, #8]
 8006462:	2000      	movs	r0, #0
 8006464:	1b9b      	subs	r3, r3, r6
 8006466:	60a3      	str	r3, [r4, #8]
 8006468:	6823      	ldr	r3, [r4, #0]
 800646a:	199e      	adds	r6, r3, r6
 800646c:	6026      	str	r6, [r4, #0]
 800646e:	e7da      	b.n	8006426 <__ssputs_r+0x5e>
 8006470:	002a      	movs	r2, r5
 8006472:	0038      	movs	r0, r7
 8006474:	f000 fb8c 	bl	8006b90 <_realloc_r>
 8006478:	1e06      	subs	r6, r0, #0
 800647a:	d1e0      	bne.n	800643e <__ssputs_r+0x76>
 800647c:	0038      	movs	r0, r7
 800647e:	6921      	ldr	r1, [r4, #16]
 8006480:	f000 faa4 	bl	80069cc <_free_r>
 8006484:	e7c7      	b.n	8006416 <__ssputs_r+0x4e>
 8006486:	46c0      	nop			; (mov r8, r8)
 8006488:	fffffb7f 	.word	0xfffffb7f

0800648c <_svfiprintf_r>:
 800648c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800648e:	b0a1      	sub	sp, #132	; 0x84
 8006490:	9003      	str	r0, [sp, #12]
 8006492:	001d      	movs	r5, r3
 8006494:	898b      	ldrh	r3, [r1, #12]
 8006496:	000f      	movs	r7, r1
 8006498:	0016      	movs	r6, r2
 800649a:	061b      	lsls	r3, r3, #24
 800649c:	d511      	bpl.n	80064c2 <_svfiprintf_r+0x36>
 800649e:	690b      	ldr	r3, [r1, #16]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d10e      	bne.n	80064c2 <_svfiprintf_r+0x36>
 80064a4:	2140      	movs	r1, #64	; 0x40
 80064a6:	f000 fafd 	bl	8006aa4 <_malloc_r>
 80064aa:	6038      	str	r0, [r7, #0]
 80064ac:	6138      	str	r0, [r7, #16]
 80064ae:	2800      	cmp	r0, #0
 80064b0:	d105      	bne.n	80064be <_svfiprintf_r+0x32>
 80064b2:	230c      	movs	r3, #12
 80064b4:	9a03      	ldr	r2, [sp, #12]
 80064b6:	3801      	subs	r0, #1
 80064b8:	6013      	str	r3, [r2, #0]
 80064ba:	b021      	add	sp, #132	; 0x84
 80064bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064be:	2340      	movs	r3, #64	; 0x40
 80064c0:	617b      	str	r3, [r7, #20]
 80064c2:	2300      	movs	r3, #0
 80064c4:	ac08      	add	r4, sp, #32
 80064c6:	6163      	str	r3, [r4, #20]
 80064c8:	3320      	adds	r3, #32
 80064ca:	7663      	strb	r3, [r4, #25]
 80064cc:	3310      	adds	r3, #16
 80064ce:	76a3      	strb	r3, [r4, #26]
 80064d0:	9507      	str	r5, [sp, #28]
 80064d2:	0035      	movs	r5, r6
 80064d4:	782b      	ldrb	r3, [r5, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d001      	beq.n	80064de <_svfiprintf_r+0x52>
 80064da:	2b25      	cmp	r3, #37	; 0x25
 80064dc:	d147      	bne.n	800656e <_svfiprintf_r+0xe2>
 80064de:	1bab      	subs	r3, r5, r6
 80064e0:	9305      	str	r3, [sp, #20]
 80064e2:	42b5      	cmp	r5, r6
 80064e4:	d00c      	beq.n	8006500 <_svfiprintf_r+0x74>
 80064e6:	0032      	movs	r2, r6
 80064e8:	0039      	movs	r1, r7
 80064ea:	9803      	ldr	r0, [sp, #12]
 80064ec:	f7ff ff6c 	bl	80063c8 <__ssputs_r>
 80064f0:	1c43      	adds	r3, r0, #1
 80064f2:	d100      	bne.n	80064f6 <_svfiprintf_r+0x6a>
 80064f4:	e0ae      	b.n	8006654 <_svfiprintf_r+0x1c8>
 80064f6:	6962      	ldr	r2, [r4, #20]
 80064f8:	9b05      	ldr	r3, [sp, #20]
 80064fa:	4694      	mov	ip, r2
 80064fc:	4463      	add	r3, ip
 80064fe:	6163      	str	r3, [r4, #20]
 8006500:	782b      	ldrb	r3, [r5, #0]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d100      	bne.n	8006508 <_svfiprintf_r+0x7c>
 8006506:	e0a5      	b.n	8006654 <_svfiprintf_r+0x1c8>
 8006508:	2201      	movs	r2, #1
 800650a:	2300      	movs	r3, #0
 800650c:	4252      	negs	r2, r2
 800650e:	6062      	str	r2, [r4, #4]
 8006510:	a904      	add	r1, sp, #16
 8006512:	3254      	adds	r2, #84	; 0x54
 8006514:	1852      	adds	r2, r2, r1
 8006516:	1c6e      	adds	r6, r5, #1
 8006518:	6023      	str	r3, [r4, #0]
 800651a:	60e3      	str	r3, [r4, #12]
 800651c:	60a3      	str	r3, [r4, #8]
 800651e:	7013      	strb	r3, [r2, #0]
 8006520:	65a3      	str	r3, [r4, #88]	; 0x58
 8006522:	2205      	movs	r2, #5
 8006524:	7831      	ldrb	r1, [r6, #0]
 8006526:	4854      	ldr	r0, [pc, #336]	; (8006678 <_svfiprintf_r+0x1ec>)
 8006528:	f000 fa32 	bl	8006990 <memchr>
 800652c:	1c75      	adds	r5, r6, #1
 800652e:	2800      	cmp	r0, #0
 8006530:	d11f      	bne.n	8006572 <_svfiprintf_r+0xe6>
 8006532:	6822      	ldr	r2, [r4, #0]
 8006534:	06d3      	lsls	r3, r2, #27
 8006536:	d504      	bpl.n	8006542 <_svfiprintf_r+0xb6>
 8006538:	2353      	movs	r3, #83	; 0x53
 800653a:	a904      	add	r1, sp, #16
 800653c:	185b      	adds	r3, r3, r1
 800653e:	2120      	movs	r1, #32
 8006540:	7019      	strb	r1, [r3, #0]
 8006542:	0713      	lsls	r3, r2, #28
 8006544:	d504      	bpl.n	8006550 <_svfiprintf_r+0xc4>
 8006546:	2353      	movs	r3, #83	; 0x53
 8006548:	a904      	add	r1, sp, #16
 800654a:	185b      	adds	r3, r3, r1
 800654c:	212b      	movs	r1, #43	; 0x2b
 800654e:	7019      	strb	r1, [r3, #0]
 8006550:	7833      	ldrb	r3, [r6, #0]
 8006552:	2b2a      	cmp	r3, #42	; 0x2a
 8006554:	d016      	beq.n	8006584 <_svfiprintf_r+0xf8>
 8006556:	0035      	movs	r5, r6
 8006558:	2100      	movs	r1, #0
 800655a:	200a      	movs	r0, #10
 800655c:	68e3      	ldr	r3, [r4, #12]
 800655e:	782a      	ldrb	r2, [r5, #0]
 8006560:	1c6e      	adds	r6, r5, #1
 8006562:	3a30      	subs	r2, #48	; 0x30
 8006564:	2a09      	cmp	r2, #9
 8006566:	d94e      	bls.n	8006606 <_svfiprintf_r+0x17a>
 8006568:	2900      	cmp	r1, #0
 800656a:	d111      	bne.n	8006590 <_svfiprintf_r+0x104>
 800656c:	e017      	b.n	800659e <_svfiprintf_r+0x112>
 800656e:	3501      	adds	r5, #1
 8006570:	e7b0      	b.n	80064d4 <_svfiprintf_r+0x48>
 8006572:	4b41      	ldr	r3, [pc, #260]	; (8006678 <_svfiprintf_r+0x1ec>)
 8006574:	6822      	ldr	r2, [r4, #0]
 8006576:	1ac0      	subs	r0, r0, r3
 8006578:	2301      	movs	r3, #1
 800657a:	4083      	lsls	r3, r0
 800657c:	4313      	orrs	r3, r2
 800657e:	002e      	movs	r6, r5
 8006580:	6023      	str	r3, [r4, #0]
 8006582:	e7ce      	b.n	8006522 <_svfiprintf_r+0x96>
 8006584:	9b07      	ldr	r3, [sp, #28]
 8006586:	1d19      	adds	r1, r3, #4
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	9107      	str	r1, [sp, #28]
 800658c:	2b00      	cmp	r3, #0
 800658e:	db01      	blt.n	8006594 <_svfiprintf_r+0x108>
 8006590:	930b      	str	r3, [sp, #44]	; 0x2c
 8006592:	e004      	b.n	800659e <_svfiprintf_r+0x112>
 8006594:	425b      	negs	r3, r3
 8006596:	60e3      	str	r3, [r4, #12]
 8006598:	2302      	movs	r3, #2
 800659a:	4313      	orrs	r3, r2
 800659c:	6023      	str	r3, [r4, #0]
 800659e:	782b      	ldrb	r3, [r5, #0]
 80065a0:	2b2e      	cmp	r3, #46	; 0x2e
 80065a2:	d10a      	bne.n	80065ba <_svfiprintf_r+0x12e>
 80065a4:	786b      	ldrb	r3, [r5, #1]
 80065a6:	2b2a      	cmp	r3, #42	; 0x2a
 80065a8:	d135      	bne.n	8006616 <_svfiprintf_r+0x18a>
 80065aa:	9b07      	ldr	r3, [sp, #28]
 80065ac:	3502      	adds	r5, #2
 80065ae:	1d1a      	adds	r2, r3, #4
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	9207      	str	r2, [sp, #28]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	db2b      	blt.n	8006610 <_svfiprintf_r+0x184>
 80065b8:	9309      	str	r3, [sp, #36]	; 0x24
 80065ba:	4e30      	ldr	r6, [pc, #192]	; (800667c <_svfiprintf_r+0x1f0>)
 80065bc:	2203      	movs	r2, #3
 80065be:	0030      	movs	r0, r6
 80065c0:	7829      	ldrb	r1, [r5, #0]
 80065c2:	f000 f9e5 	bl	8006990 <memchr>
 80065c6:	2800      	cmp	r0, #0
 80065c8:	d006      	beq.n	80065d8 <_svfiprintf_r+0x14c>
 80065ca:	2340      	movs	r3, #64	; 0x40
 80065cc:	1b80      	subs	r0, r0, r6
 80065ce:	4083      	lsls	r3, r0
 80065d0:	6822      	ldr	r2, [r4, #0]
 80065d2:	3501      	adds	r5, #1
 80065d4:	4313      	orrs	r3, r2
 80065d6:	6023      	str	r3, [r4, #0]
 80065d8:	7829      	ldrb	r1, [r5, #0]
 80065da:	2206      	movs	r2, #6
 80065dc:	4828      	ldr	r0, [pc, #160]	; (8006680 <_svfiprintf_r+0x1f4>)
 80065de:	1c6e      	adds	r6, r5, #1
 80065e0:	7621      	strb	r1, [r4, #24]
 80065e2:	f000 f9d5 	bl	8006990 <memchr>
 80065e6:	2800      	cmp	r0, #0
 80065e8:	d03c      	beq.n	8006664 <_svfiprintf_r+0x1d8>
 80065ea:	4b26      	ldr	r3, [pc, #152]	; (8006684 <_svfiprintf_r+0x1f8>)
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d125      	bne.n	800663c <_svfiprintf_r+0x1b0>
 80065f0:	2207      	movs	r2, #7
 80065f2:	9b07      	ldr	r3, [sp, #28]
 80065f4:	3307      	adds	r3, #7
 80065f6:	4393      	bics	r3, r2
 80065f8:	3308      	adds	r3, #8
 80065fa:	9307      	str	r3, [sp, #28]
 80065fc:	6963      	ldr	r3, [r4, #20]
 80065fe:	9a04      	ldr	r2, [sp, #16]
 8006600:	189b      	adds	r3, r3, r2
 8006602:	6163      	str	r3, [r4, #20]
 8006604:	e765      	b.n	80064d2 <_svfiprintf_r+0x46>
 8006606:	4343      	muls	r3, r0
 8006608:	0035      	movs	r5, r6
 800660a:	2101      	movs	r1, #1
 800660c:	189b      	adds	r3, r3, r2
 800660e:	e7a6      	b.n	800655e <_svfiprintf_r+0xd2>
 8006610:	2301      	movs	r3, #1
 8006612:	425b      	negs	r3, r3
 8006614:	e7d0      	b.n	80065b8 <_svfiprintf_r+0x12c>
 8006616:	2300      	movs	r3, #0
 8006618:	200a      	movs	r0, #10
 800661a:	001a      	movs	r2, r3
 800661c:	3501      	adds	r5, #1
 800661e:	6063      	str	r3, [r4, #4]
 8006620:	7829      	ldrb	r1, [r5, #0]
 8006622:	1c6e      	adds	r6, r5, #1
 8006624:	3930      	subs	r1, #48	; 0x30
 8006626:	2909      	cmp	r1, #9
 8006628:	d903      	bls.n	8006632 <_svfiprintf_r+0x1a6>
 800662a:	2b00      	cmp	r3, #0
 800662c:	d0c5      	beq.n	80065ba <_svfiprintf_r+0x12e>
 800662e:	9209      	str	r2, [sp, #36]	; 0x24
 8006630:	e7c3      	b.n	80065ba <_svfiprintf_r+0x12e>
 8006632:	4342      	muls	r2, r0
 8006634:	0035      	movs	r5, r6
 8006636:	2301      	movs	r3, #1
 8006638:	1852      	adds	r2, r2, r1
 800663a:	e7f1      	b.n	8006620 <_svfiprintf_r+0x194>
 800663c:	ab07      	add	r3, sp, #28
 800663e:	9300      	str	r3, [sp, #0]
 8006640:	003a      	movs	r2, r7
 8006642:	0021      	movs	r1, r4
 8006644:	4b10      	ldr	r3, [pc, #64]	; (8006688 <_svfiprintf_r+0x1fc>)
 8006646:	9803      	ldr	r0, [sp, #12]
 8006648:	e000      	b.n	800664c <_svfiprintf_r+0x1c0>
 800664a:	bf00      	nop
 800664c:	9004      	str	r0, [sp, #16]
 800664e:	9b04      	ldr	r3, [sp, #16]
 8006650:	3301      	adds	r3, #1
 8006652:	d1d3      	bne.n	80065fc <_svfiprintf_r+0x170>
 8006654:	89bb      	ldrh	r3, [r7, #12]
 8006656:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006658:	065b      	lsls	r3, r3, #25
 800665a:	d400      	bmi.n	800665e <_svfiprintf_r+0x1d2>
 800665c:	e72d      	b.n	80064ba <_svfiprintf_r+0x2e>
 800665e:	2001      	movs	r0, #1
 8006660:	4240      	negs	r0, r0
 8006662:	e72a      	b.n	80064ba <_svfiprintf_r+0x2e>
 8006664:	ab07      	add	r3, sp, #28
 8006666:	9300      	str	r3, [sp, #0]
 8006668:	003a      	movs	r2, r7
 800666a:	0021      	movs	r1, r4
 800666c:	4b06      	ldr	r3, [pc, #24]	; (8006688 <_svfiprintf_r+0x1fc>)
 800666e:	9803      	ldr	r0, [sp, #12]
 8006670:	f000 f87c 	bl	800676c <_printf_i>
 8006674:	e7ea      	b.n	800664c <_svfiprintf_r+0x1c0>
 8006676:	46c0      	nop			; (mov r8, r8)
 8006678:	08007be0 	.word	0x08007be0
 800667c:	08007be6 	.word	0x08007be6
 8006680:	08007bea 	.word	0x08007bea
 8006684:	00000000 	.word	0x00000000
 8006688:	080063c9 	.word	0x080063c9

0800668c <_printf_common>:
 800668c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800668e:	0015      	movs	r5, r2
 8006690:	9301      	str	r3, [sp, #4]
 8006692:	688a      	ldr	r2, [r1, #8]
 8006694:	690b      	ldr	r3, [r1, #16]
 8006696:	000c      	movs	r4, r1
 8006698:	9000      	str	r0, [sp, #0]
 800669a:	4293      	cmp	r3, r2
 800669c:	da00      	bge.n	80066a0 <_printf_common+0x14>
 800669e:	0013      	movs	r3, r2
 80066a0:	0022      	movs	r2, r4
 80066a2:	602b      	str	r3, [r5, #0]
 80066a4:	3243      	adds	r2, #67	; 0x43
 80066a6:	7812      	ldrb	r2, [r2, #0]
 80066a8:	2a00      	cmp	r2, #0
 80066aa:	d001      	beq.n	80066b0 <_printf_common+0x24>
 80066ac:	3301      	adds	r3, #1
 80066ae:	602b      	str	r3, [r5, #0]
 80066b0:	6823      	ldr	r3, [r4, #0]
 80066b2:	069b      	lsls	r3, r3, #26
 80066b4:	d502      	bpl.n	80066bc <_printf_common+0x30>
 80066b6:	682b      	ldr	r3, [r5, #0]
 80066b8:	3302      	adds	r3, #2
 80066ba:	602b      	str	r3, [r5, #0]
 80066bc:	6822      	ldr	r2, [r4, #0]
 80066be:	2306      	movs	r3, #6
 80066c0:	0017      	movs	r7, r2
 80066c2:	401f      	ands	r7, r3
 80066c4:	421a      	tst	r2, r3
 80066c6:	d027      	beq.n	8006718 <_printf_common+0x8c>
 80066c8:	0023      	movs	r3, r4
 80066ca:	3343      	adds	r3, #67	; 0x43
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	1e5a      	subs	r2, r3, #1
 80066d0:	4193      	sbcs	r3, r2
 80066d2:	6822      	ldr	r2, [r4, #0]
 80066d4:	0692      	lsls	r2, r2, #26
 80066d6:	d430      	bmi.n	800673a <_printf_common+0xae>
 80066d8:	0022      	movs	r2, r4
 80066da:	9901      	ldr	r1, [sp, #4]
 80066dc:	9800      	ldr	r0, [sp, #0]
 80066de:	9e08      	ldr	r6, [sp, #32]
 80066e0:	3243      	adds	r2, #67	; 0x43
 80066e2:	47b0      	blx	r6
 80066e4:	1c43      	adds	r3, r0, #1
 80066e6:	d025      	beq.n	8006734 <_printf_common+0xa8>
 80066e8:	2306      	movs	r3, #6
 80066ea:	6820      	ldr	r0, [r4, #0]
 80066ec:	682a      	ldr	r2, [r5, #0]
 80066ee:	68e1      	ldr	r1, [r4, #12]
 80066f0:	2500      	movs	r5, #0
 80066f2:	4003      	ands	r3, r0
 80066f4:	2b04      	cmp	r3, #4
 80066f6:	d103      	bne.n	8006700 <_printf_common+0x74>
 80066f8:	1a8d      	subs	r5, r1, r2
 80066fa:	43eb      	mvns	r3, r5
 80066fc:	17db      	asrs	r3, r3, #31
 80066fe:	401d      	ands	r5, r3
 8006700:	68a3      	ldr	r3, [r4, #8]
 8006702:	6922      	ldr	r2, [r4, #16]
 8006704:	4293      	cmp	r3, r2
 8006706:	dd01      	ble.n	800670c <_printf_common+0x80>
 8006708:	1a9b      	subs	r3, r3, r2
 800670a:	18ed      	adds	r5, r5, r3
 800670c:	2700      	movs	r7, #0
 800670e:	42bd      	cmp	r5, r7
 8006710:	d120      	bne.n	8006754 <_printf_common+0xc8>
 8006712:	2000      	movs	r0, #0
 8006714:	e010      	b.n	8006738 <_printf_common+0xac>
 8006716:	3701      	adds	r7, #1
 8006718:	68e3      	ldr	r3, [r4, #12]
 800671a:	682a      	ldr	r2, [r5, #0]
 800671c:	1a9b      	subs	r3, r3, r2
 800671e:	42bb      	cmp	r3, r7
 8006720:	ddd2      	ble.n	80066c8 <_printf_common+0x3c>
 8006722:	0022      	movs	r2, r4
 8006724:	2301      	movs	r3, #1
 8006726:	9901      	ldr	r1, [sp, #4]
 8006728:	9800      	ldr	r0, [sp, #0]
 800672a:	9e08      	ldr	r6, [sp, #32]
 800672c:	3219      	adds	r2, #25
 800672e:	47b0      	blx	r6
 8006730:	1c43      	adds	r3, r0, #1
 8006732:	d1f0      	bne.n	8006716 <_printf_common+0x8a>
 8006734:	2001      	movs	r0, #1
 8006736:	4240      	negs	r0, r0
 8006738:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800673a:	2030      	movs	r0, #48	; 0x30
 800673c:	18e1      	adds	r1, r4, r3
 800673e:	3143      	adds	r1, #67	; 0x43
 8006740:	7008      	strb	r0, [r1, #0]
 8006742:	0021      	movs	r1, r4
 8006744:	1c5a      	adds	r2, r3, #1
 8006746:	3145      	adds	r1, #69	; 0x45
 8006748:	7809      	ldrb	r1, [r1, #0]
 800674a:	18a2      	adds	r2, r4, r2
 800674c:	3243      	adds	r2, #67	; 0x43
 800674e:	3302      	adds	r3, #2
 8006750:	7011      	strb	r1, [r2, #0]
 8006752:	e7c1      	b.n	80066d8 <_printf_common+0x4c>
 8006754:	0022      	movs	r2, r4
 8006756:	2301      	movs	r3, #1
 8006758:	9901      	ldr	r1, [sp, #4]
 800675a:	9800      	ldr	r0, [sp, #0]
 800675c:	9e08      	ldr	r6, [sp, #32]
 800675e:	321a      	adds	r2, #26
 8006760:	47b0      	blx	r6
 8006762:	1c43      	adds	r3, r0, #1
 8006764:	d0e6      	beq.n	8006734 <_printf_common+0xa8>
 8006766:	3701      	adds	r7, #1
 8006768:	e7d1      	b.n	800670e <_printf_common+0x82>
	...

0800676c <_printf_i>:
 800676c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800676e:	b08b      	sub	sp, #44	; 0x2c
 8006770:	9206      	str	r2, [sp, #24]
 8006772:	000a      	movs	r2, r1
 8006774:	3243      	adds	r2, #67	; 0x43
 8006776:	9307      	str	r3, [sp, #28]
 8006778:	9005      	str	r0, [sp, #20]
 800677a:	9204      	str	r2, [sp, #16]
 800677c:	7e0a      	ldrb	r2, [r1, #24]
 800677e:	000c      	movs	r4, r1
 8006780:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006782:	2a78      	cmp	r2, #120	; 0x78
 8006784:	d807      	bhi.n	8006796 <_printf_i+0x2a>
 8006786:	2a62      	cmp	r2, #98	; 0x62
 8006788:	d809      	bhi.n	800679e <_printf_i+0x32>
 800678a:	2a00      	cmp	r2, #0
 800678c:	d100      	bne.n	8006790 <_printf_i+0x24>
 800678e:	e0c1      	b.n	8006914 <_printf_i+0x1a8>
 8006790:	2a58      	cmp	r2, #88	; 0x58
 8006792:	d100      	bne.n	8006796 <_printf_i+0x2a>
 8006794:	e08c      	b.n	80068b0 <_printf_i+0x144>
 8006796:	0026      	movs	r6, r4
 8006798:	3642      	adds	r6, #66	; 0x42
 800679a:	7032      	strb	r2, [r6, #0]
 800679c:	e022      	b.n	80067e4 <_printf_i+0x78>
 800679e:	0010      	movs	r0, r2
 80067a0:	3863      	subs	r0, #99	; 0x63
 80067a2:	2815      	cmp	r0, #21
 80067a4:	d8f7      	bhi.n	8006796 <_printf_i+0x2a>
 80067a6:	f7f9 fcab 	bl	8000100 <__gnu_thumb1_case_shi>
 80067aa:	0016      	.short	0x0016
 80067ac:	fff6001f 	.word	0xfff6001f
 80067b0:	fff6fff6 	.word	0xfff6fff6
 80067b4:	001ffff6 	.word	0x001ffff6
 80067b8:	fff6fff6 	.word	0xfff6fff6
 80067bc:	fff6fff6 	.word	0xfff6fff6
 80067c0:	003600a8 	.word	0x003600a8
 80067c4:	fff6009a 	.word	0xfff6009a
 80067c8:	00b9fff6 	.word	0x00b9fff6
 80067cc:	0036fff6 	.word	0x0036fff6
 80067d0:	fff6fff6 	.word	0xfff6fff6
 80067d4:	009e      	.short	0x009e
 80067d6:	0026      	movs	r6, r4
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	3642      	adds	r6, #66	; 0x42
 80067dc:	1d11      	adds	r1, r2, #4
 80067de:	6019      	str	r1, [r3, #0]
 80067e0:	6813      	ldr	r3, [r2, #0]
 80067e2:	7033      	strb	r3, [r6, #0]
 80067e4:	2301      	movs	r3, #1
 80067e6:	e0a7      	b.n	8006938 <_printf_i+0x1cc>
 80067e8:	6808      	ldr	r0, [r1, #0]
 80067ea:	6819      	ldr	r1, [r3, #0]
 80067ec:	1d0a      	adds	r2, r1, #4
 80067ee:	0605      	lsls	r5, r0, #24
 80067f0:	d50b      	bpl.n	800680a <_printf_i+0x9e>
 80067f2:	680d      	ldr	r5, [r1, #0]
 80067f4:	601a      	str	r2, [r3, #0]
 80067f6:	2d00      	cmp	r5, #0
 80067f8:	da03      	bge.n	8006802 <_printf_i+0x96>
 80067fa:	232d      	movs	r3, #45	; 0x2d
 80067fc:	9a04      	ldr	r2, [sp, #16]
 80067fe:	426d      	negs	r5, r5
 8006800:	7013      	strb	r3, [r2, #0]
 8006802:	4b61      	ldr	r3, [pc, #388]	; (8006988 <_printf_i+0x21c>)
 8006804:	270a      	movs	r7, #10
 8006806:	9303      	str	r3, [sp, #12]
 8006808:	e01b      	b.n	8006842 <_printf_i+0xd6>
 800680a:	680d      	ldr	r5, [r1, #0]
 800680c:	601a      	str	r2, [r3, #0]
 800680e:	0641      	lsls	r1, r0, #25
 8006810:	d5f1      	bpl.n	80067f6 <_printf_i+0x8a>
 8006812:	b22d      	sxth	r5, r5
 8006814:	e7ef      	b.n	80067f6 <_printf_i+0x8a>
 8006816:	680d      	ldr	r5, [r1, #0]
 8006818:	6819      	ldr	r1, [r3, #0]
 800681a:	1d08      	adds	r0, r1, #4
 800681c:	6018      	str	r0, [r3, #0]
 800681e:	062e      	lsls	r6, r5, #24
 8006820:	d501      	bpl.n	8006826 <_printf_i+0xba>
 8006822:	680d      	ldr	r5, [r1, #0]
 8006824:	e003      	b.n	800682e <_printf_i+0xc2>
 8006826:	066d      	lsls	r5, r5, #25
 8006828:	d5fb      	bpl.n	8006822 <_printf_i+0xb6>
 800682a:	680d      	ldr	r5, [r1, #0]
 800682c:	b2ad      	uxth	r5, r5
 800682e:	4b56      	ldr	r3, [pc, #344]	; (8006988 <_printf_i+0x21c>)
 8006830:	2708      	movs	r7, #8
 8006832:	9303      	str	r3, [sp, #12]
 8006834:	2a6f      	cmp	r2, #111	; 0x6f
 8006836:	d000      	beq.n	800683a <_printf_i+0xce>
 8006838:	3702      	adds	r7, #2
 800683a:	0023      	movs	r3, r4
 800683c:	2200      	movs	r2, #0
 800683e:	3343      	adds	r3, #67	; 0x43
 8006840:	701a      	strb	r2, [r3, #0]
 8006842:	6863      	ldr	r3, [r4, #4]
 8006844:	60a3      	str	r3, [r4, #8]
 8006846:	2b00      	cmp	r3, #0
 8006848:	db03      	blt.n	8006852 <_printf_i+0xe6>
 800684a:	2204      	movs	r2, #4
 800684c:	6821      	ldr	r1, [r4, #0]
 800684e:	4391      	bics	r1, r2
 8006850:	6021      	str	r1, [r4, #0]
 8006852:	2d00      	cmp	r5, #0
 8006854:	d102      	bne.n	800685c <_printf_i+0xf0>
 8006856:	9e04      	ldr	r6, [sp, #16]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00c      	beq.n	8006876 <_printf_i+0x10a>
 800685c:	9e04      	ldr	r6, [sp, #16]
 800685e:	0028      	movs	r0, r5
 8006860:	0039      	movs	r1, r7
 8006862:	f7f9 fcdd 	bl	8000220 <__aeabi_uidivmod>
 8006866:	9b03      	ldr	r3, [sp, #12]
 8006868:	3e01      	subs	r6, #1
 800686a:	5c5b      	ldrb	r3, [r3, r1]
 800686c:	7033      	strb	r3, [r6, #0]
 800686e:	002b      	movs	r3, r5
 8006870:	0005      	movs	r5, r0
 8006872:	429f      	cmp	r7, r3
 8006874:	d9f3      	bls.n	800685e <_printf_i+0xf2>
 8006876:	2f08      	cmp	r7, #8
 8006878:	d109      	bne.n	800688e <_printf_i+0x122>
 800687a:	6823      	ldr	r3, [r4, #0]
 800687c:	07db      	lsls	r3, r3, #31
 800687e:	d506      	bpl.n	800688e <_printf_i+0x122>
 8006880:	6863      	ldr	r3, [r4, #4]
 8006882:	6922      	ldr	r2, [r4, #16]
 8006884:	4293      	cmp	r3, r2
 8006886:	dc02      	bgt.n	800688e <_printf_i+0x122>
 8006888:	2330      	movs	r3, #48	; 0x30
 800688a:	3e01      	subs	r6, #1
 800688c:	7033      	strb	r3, [r6, #0]
 800688e:	9b04      	ldr	r3, [sp, #16]
 8006890:	1b9b      	subs	r3, r3, r6
 8006892:	6123      	str	r3, [r4, #16]
 8006894:	9b07      	ldr	r3, [sp, #28]
 8006896:	0021      	movs	r1, r4
 8006898:	9300      	str	r3, [sp, #0]
 800689a:	9805      	ldr	r0, [sp, #20]
 800689c:	9b06      	ldr	r3, [sp, #24]
 800689e:	aa09      	add	r2, sp, #36	; 0x24
 80068a0:	f7ff fef4 	bl	800668c <_printf_common>
 80068a4:	1c43      	adds	r3, r0, #1
 80068a6:	d14c      	bne.n	8006942 <_printf_i+0x1d6>
 80068a8:	2001      	movs	r0, #1
 80068aa:	4240      	negs	r0, r0
 80068ac:	b00b      	add	sp, #44	; 0x2c
 80068ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068b0:	3145      	adds	r1, #69	; 0x45
 80068b2:	700a      	strb	r2, [r1, #0]
 80068b4:	4a34      	ldr	r2, [pc, #208]	; (8006988 <_printf_i+0x21c>)
 80068b6:	9203      	str	r2, [sp, #12]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	6821      	ldr	r1, [r4, #0]
 80068bc:	ca20      	ldmia	r2!, {r5}
 80068be:	601a      	str	r2, [r3, #0]
 80068c0:	0608      	lsls	r0, r1, #24
 80068c2:	d516      	bpl.n	80068f2 <_printf_i+0x186>
 80068c4:	07cb      	lsls	r3, r1, #31
 80068c6:	d502      	bpl.n	80068ce <_printf_i+0x162>
 80068c8:	2320      	movs	r3, #32
 80068ca:	4319      	orrs	r1, r3
 80068cc:	6021      	str	r1, [r4, #0]
 80068ce:	2710      	movs	r7, #16
 80068d0:	2d00      	cmp	r5, #0
 80068d2:	d1b2      	bne.n	800683a <_printf_i+0xce>
 80068d4:	2320      	movs	r3, #32
 80068d6:	6822      	ldr	r2, [r4, #0]
 80068d8:	439a      	bics	r2, r3
 80068da:	6022      	str	r2, [r4, #0]
 80068dc:	e7ad      	b.n	800683a <_printf_i+0xce>
 80068de:	2220      	movs	r2, #32
 80068e0:	6809      	ldr	r1, [r1, #0]
 80068e2:	430a      	orrs	r2, r1
 80068e4:	6022      	str	r2, [r4, #0]
 80068e6:	0022      	movs	r2, r4
 80068e8:	2178      	movs	r1, #120	; 0x78
 80068ea:	3245      	adds	r2, #69	; 0x45
 80068ec:	7011      	strb	r1, [r2, #0]
 80068ee:	4a27      	ldr	r2, [pc, #156]	; (800698c <_printf_i+0x220>)
 80068f0:	e7e1      	b.n	80068b6 <_printf_i+0x14a>
 80068f2:	0648      	lsls	r0, r1, #25
 80068f4:	d5e6      	bpl.n	80068c4 <_printf_i+0x158>
 80068f6:	b2ad      	uxth	r5, r5
 80068f8:	e7e4      	b.n	80068c4 <_printf_i+0x158>
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	680d      	ldr	r5, [r1, #0]
 80068fe:	1d10      	adds	r0, r2, #4
 8006900:	6949      	ldr	r1, [r1, #20]
 8006902:	6018      	str	r0, [r3, #0]
 8006904:	6813      	ldr	r3, [r2, #0]
 8006906:	062e      	lsls	r6, r5, #24
 8006908:	d501      	bpl.n	800690e <_printf_i+0x1a2>
 800690a:	6019      	str	r1, [r3, #0]
 800690c:	e002      	b.n	8006914 <_printf_i+0x1a8>
 800690e:	066d      	lsls	r5, r5, #25
 8006910:	d5fb      	bpl.n	800690a <_printf_i+0x19e>
 8006912:	8019      	strh	r1, [r3, #0]
 8006914:	2300      	movs	r3, #0
 8006916:	9e04      	ldr	r6, [sp, #16]
 8006918:	6123      	str	r3, [r4, #16]
 800691a:	e7bb      	b.n	8006894 <_printf_i+0x128>
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	1d11      	adds	r1, r2, #4
 8006920:	6019      	str	r1, [r3, #0]
 8006922:	6816      	ldr	r6, [r2, #0]
 8006924:	2100      	movs	r1, #0
 8006926:	0030      	movs	r0, r6
 8006928:	6862      	ldr	r2, [r4, #4]
 800692a:	f000 f831 	bl	8006990 <memchr>
 800692e:	2800      	cmp	r0, #0
 8006930:	d001      	beq.n	8006936 <_printf_i+0x1ca>
 8006932:	1b80      	subs	r0, r0, r6
 8006934:	6060      	str	r0, [r4, #4]
 8006936:	6863      	ldr	r3, [r4, #4]
 8006938:	6123      	str	r3, [r4, #16]
 800693a:	2300      	movs	r3, #0
 800693c:	9a04      	ldr	r2, [sp, #16]
 800693e:	7013      	strb	r3, [r2, #0]
 8006940:	e7a8      	b.n	8006894 <_printf_i+0x128>
 8006942:	6923      	ldr	r3, [r4, #16]
 8006944:	0032      	movs	r2, r6
 8006946:	9906      	ldr	r1, [sp, #24]
 8006948:	9805      	ldr	r0, [sp, #20]
 800694a:	9d07      	ldr	r5, [sp, #28]
 800694c:	47a8      	blx	r5
 800694e:	1c43      	adds	r3, r0, #1
 8006950:	d0aa      	beq.n	80068a8 <_printf_i+0x13c>
 8006952:	6823      	ldr	r3, [r4, #0]
 8006954:	079b      	lsls	r3, r3, #30
 8006956:	d415      	bmi.n	8006984 <_printf_i+0x218>
 8006958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800695a:	68e0      	ldr	r0, [r4, #12]
 800695c:	4298      	cmp	r0, r3
 800695e:	daa5      	bge.n	80068ac <_printf_i+0x140>
 8006960:	0018      	movs	r0, r3
 8006962:	e7a3      	b.n	80068ac <_printf_i+0x140>
 8006964:	0022      	movs	r2, r4
 8006966:	2301      	movs	r3, #1
 8006968:	9906      	ldr	r1, [sp, #24]
 800696a:	9805      	ldr	r0, [sp, #20]
 800696c:	9e07      	ldr	r6, [sp, #28]
 800696e:	3219      	adds	r2, #25
 8006970:	47b0      	blx	r6
 8006972:	1c43      	adds	r3, r0, #1
 8006974:	d098      	beq.n	80068a8 <_printf_i+0x13c>
 8006976:	3501      	adds	r5, #1
 8006978:	68e3      	ldr	r3, [r4, #12]
 800697a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800697c:	1a9b      	subs	r3, r3, r2
 800697e:	42ab      	cmp	r3, r5
 8006980:	dcf0      	bgt.n	8006964 <_printf_i+0x1f8>
 8006982:	e7e9      	b.n	8006958 <_printf_i+0x1ec>
 8006984:	2500      	movs	r5, #0
 8006986:	e7f7      	b.n	8006978 <_printf_i+0x20c>
 8006988:	08007bf1 	.word	0x08007bf1
 800698c:	08007c02 	.word	0x08007c02

08006990 <memchr>:
 8006990:	b2c9      	uxtb	r1, r1
 8006992:	1882      	adds	r2, r0, r2
 8006994:	4290      	cmp	r0, r2
 8006996:	d101      	bne.n	800699c <memchr+0xc>
 8006998:	2000      	movs	r0, #0
 800699a:	4770      	bx	lr
 800699c:	7803      	ldrb	r3, [r0, #0]
 800699e:	428b      	cmp	r3, r1
 80069a0:	d0fb      	beq.n	800699a <memchr+0xa>
 80069a2:	3001      	adds	r0, #1
 80069a4:	e7f6      	b.n	8006994 <memchr+0x4>

080069a6 <memmove>:
 80069a6:	b510      	push	{r4, lr}
 80069a8:	4288      	cmp	r0, r1
 80069aa:	d902      	bls.n	80069b2 <memmove+0xc>
 80069ac:	188b      	adds	r3, r1, r2
 80069ae:	4298      	cmp	r0, r3
 80069b0:	d303      	bcc.n	80069ba <memmove+0x14>
 80069b2:	2300      	movs	r3, #0
 80069b4:	e007      	b.n	80069c6 <memmove+0x20>
 80069b6:	5c8b      	ldrb	r3, [r1, r2]
 80069b8:	5483      	strb	r3, [r0, r2]
 80069ba:	3a01      	subs	r2, #1
 80069bc:	d2fb      	bcs.n	80069b6 <memmove+0x10>
 80069be:	bd10      	pop	{r4, pc}
 80069c0:	5ccc      	ldrb	r4, [r1, r3]
 80069c2:	54c4      	strb	r4, [r0, r3]
 80069c4:	3301      	adds	r3, #1
 80069c6:	429a      	cmp	r2, r3
 80069c8:	d1fa      	bne.n	80069c0 <memmove+0x1a>
 80069ca:	e7f8      	b.n	80069be <memmove+0x18>

080069cc <_free_r>:
 80069cc:	b570      	push	{r4, r5, r6, lr}
 80069ce:	0005      	movs	r5, r0
 80069d0:	2900      	cmp	r1, #0
 80069d2:	d010      	beq.n	80069f6 <_free_r+0x2a>
 80069d4:	1f0c      	subs	r4, r1, #4
 80069d6:	6823      	ldr	r3, [r4, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	da00      	bge.n	80069de <_free_r+0x12>
 80069dc:	18e4      	adds	r4, r4, r3
 80069de:	0028      	movs	r0, r5
 80069e0:	f000 f918 	bl	8006c14 <__malloc_lock>
 80069e4:	4a1d      	ldr	r2, [pc, #116]	; (8006a5c <_free_r+0x90>)
 80069e6:	6813      	ldr	r3, [r2, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d105      	bne.n	80069f8 <_free_r+0x2c>
 80069ec:	6063      	str	r3, [r4, #4]
 80069ee:	6014      	str	r4, [r2, #0]
 80069f0:	0028      	movs	r0, r5
 80069f2:	f000 f917 	bl	8006c24 <__malloc_unlock>
 80069f6:	bd70      	pop	{r4, r5, r6, pc}
 80069f8:	42a3      	cmp	r3, r4
 80069fa:	d908      	bls.n	8006a0e <_free_r+0x42>
 80069fc:	6821      	ldr	r1, [r4, #0]
 80069fe:	1860      	adds	r0, r4, r1
 8006a00:	4283      	cmp	r3, r0
 8006a02:	d1f3      	bne.n	80069ec <_free_r+0x20>
 8006a04:	6818      	ldr	r0, [r3, #0]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	1841      	adds	r1, r0, r1
 8006a0a:	6021      	str	r1, [r4, #0]
 8006a0c:	e7ee      	b.n	80069ec <_free_r+0x20>
 8006a0e:	001a      	movs	r2, r3
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d001      	beq.n	8006a1a <_free_r+0x4e>
 8006a16:	42a3      	cmp	r3, r4
 8006a18:	d9f9      	bls.n	8006a0e <_free_r+0x42>
 8006a1a:	6811      	ldr	r1, [r2, #0]
 8006a1c:	1850      	adds	r0, r2, r1
 8006a1e:	42a0      	cmp	r0, r4
 8006a20:	d10b      	bne.n	8006a3a <_free_r+0x6e>
 8006a22:	6820      	ldr	r0, [r4, #0]
 8006a24:	1809      	adds	r1, r1, r0
 8006a26:	1850      	adds	r0, r2, r1
 8006a28:	6011      	str	r1, [r2, #0]
 8006a2a:	4283      	cmp	r3, r0
 8006a2c:	d1e0      	bne.n	80069f0 <_free_r+0x24>
 8006a2e:	6818      	ldr	r0, [r3, #0]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	1841      	adds	r1, r0, r1
 8006a34:	6011      	str	r1, [r2, #0]
 8006a36:	6053      	str	r3, [r2, #4]
 8006a38:	e7da      	b.n	80069f0 <_free_r+0x24>
 8006a3a:	42a0      	cmp	r0, r4
 8006a3c:	d902      	bls.n	8006a44 <_free_r+0x78>
 8006a3e:	230c      	movs	r3, #12
 8006a40:	602b      	str	r3, [r5, #0]
 8006a42:	e7d5      	b.n	80069f0 <_free_r+0x24>
 8006a44:	6821      	ldr	r1, [r4, #0]
 8006a46:	1860      	adds	r0, r4, r1
 8006a48:	4283      	cmp	r3, r0
 8006a4a:	d103      	bne.n	8006a54 <_free_r+0x88>
 8006a4c:	6818      	ldr	r0, [r3, #0]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	1841      	adds	r1, r0, r1
 8006a52:	6021      	str	r1, [r4, #0]
 8006a54:	6063      	str	r3, [r4, #4]
 8006a56:	6054      	str	r4, [r2, #4]
 8006a58:	e7ca      	b.n	80069f0 <_free_r+0x24>
 8006a5a:	46c0      	nop			; (mov r8, r8)
 8006a5c:	200006fc 	.word	0x200006fc

08006a60 <sbrk_aligned>:
 8006a60:	b570      	push	{r4, r5, r6, lr}
 8006a62:	4e0f      	ldr	r6, [pc, #60]	; (8006aa0 <sbrk_aligned+0x40>)
 8006a64:	000d      	movs	r5, r1
 8006a66:	6831      	ldr	r1, [r6, #0]
 8006a68:	0004      	movs	r4, r0
 8006a6a:	2900      	cmp	r1, #0
 8006a6c:	d102      	bne.n	8006a74 <sbrk_aligned+0x14>
 8006a6e:	f000 f8bf 	bl	8006bf0 <_sbrk_r>
 8006a72:	6030      	str	r0, [r6, #0]
 8006a74:	0029      	movs	r1, r5
 8006a76:	0020      	movs	r0, r4
 8006a78:	f000 f8ba 	bl	8006bf0 <_sbrk_r>
 8006a7c:	1c43      	adds	r3, r0, #1
 8006a7e:	d00a      	beq.n	8006a96 <sbrk_aligned+0x36>
 8006a80:	2303      	movs	r3, #3
 8006a82:	1cc5      	adds	r5, r0, #3
 8006a84:	439d      	bics	r5, r3
 8006a86:	42a8      	cmp	r0, r5
 8006a88:	d007      	beq.n	8006a9a <sbrk_aligned+0x3a>
 8006a8a:	1a29      	subs	r1, r5, r0
 8006a8c:	0020      	movs	r0, r4
 8006a8e:	f000 f8af 	bl	8006bf0 <_sbrk_r>
 8006a92:	1c43      	adds	r3, r0, #1
 8006a94:	d101      	bne.n	8006a9a <sbrk_aligned+0x3a>
 8006a96:	2501      	movs	r5, #1
 8006a98:	426d      	negs	r5, r5
 8006a9a:	0028      	movs	r0, r5
 8006a9c:	bd70      	pop	{r4, r5, r6, pc}
 8006a9e:	46c0      	nop			; (mov r8, r8)
 8006aa0:	20000700 	.word	0x20000700

08006aa4 <_malloc_r>:
 8006aa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006aa6:	2203      	movs	r2, #3
 8006aa8:	1ccb      	adds	r3, r1, #3
 8006aaa:	4393      	bics	r3, r2
 8006aac:	3308      	adds	r3, #8
 8006aae:	0006      	movs	r6, r0
 8006ab0:	001f      	movs	r7, r3
 8006ab2:	2b0c      	cmp	r3, #12
 8006ab4:	d232      	bcs.n	8006b1c <_malloc_r+0x78>
 8006ab6:	270c      	movs	r7, #12
 8006ab8:	42b9      	cmp	r1, r7
 8006aba:	d831      	bhi.n	8006b20 <_malloc_r+0x7c>
 8006abc:	0030      	movs	r0, r6
 8006abe:	f000 f8a9 	bl	8006c14 <__malloc_lock>
 8006ac2:	4d32      	ldr	r5, [pc, #200]	; (8006b8c <_malloc_r+0xe8>)
 8006ac4:	682b      	ldr	r3, [r5, #0]
 8006ac6:	001c      	movs	r4, r3
 8006ac8:	2c00      	cmp	r4, #0
 8006aca:	d12e      	bne.n	8006b2a <_malloc_r+0x86>
 8006acc:	0039      	movs	r1, r7
 8006ace:	0030      	movs	r0, r6
 8006ad0:	f7ff ffc6 	bl	8006a60 <sbrk_aligned>
 8006ad4:	0004      	movs	r4, r0
 8006ad6:	1c43      	adds	r3, r0, #1
 8006ad8:	d11e      	bne.n	8006b18 <_malloc_r+0x74>
 8006ada:	682c      	ldr	r4, [r5, #0]
 8006adc:	0025      	movs	r5, r4
 8006ade:	2d00      	cmp	r5, #0
 8006ae0:	d14a      	bne.n	8006b78 <_malloc_r+0xd4>
 8006ae2:	6823      	ldr	r3, [r4, #0]
 8006ae4:	0029      	movs	r1, r5
 8006ae6:	18e3      	adds	r3, r4, r3
 8006ae8:	0030      	movs	r0, r6
 8006aea:	9301      	str	r3, [sp, #4]
 8006aec:	f000 f880 	bl	8006bf0 <_sbrk_r>
 8006af0:	9b01      	ldr	r3, [sp, #4]
 8006af2:	4283      	cmp	r3, r0
 8006af4:	d143      	bne.n	8006b7e <_malloc_r+0xda>
 8006af6:	6823      	ldr	r3, [r4, #0]
 8006af8:	3703      	adds	r7, #3
 8006afa:	1aff      	subs	r7, r7, r3
 8006afc:	2303      	movs	r3, #3
 8006afe:	439f      	bics	r7, r3
 8006b00:	3708      	adds	r7, #8
 8006b02:	2f0c      	cmp	r7, #12
 8006b04:	d200      	bcs.n	8006b08 <_malloc_r+0x64>
 8006b06:	270c      	movs	r7, #12
 8006b08:	0039      	movs	r1, r7
 8006b0a:	0030      	movs	r0, r6
 8006b0c:	f7ff ffa8 	bl	8006a60 <sbrk_aligned>
 8006b10:	1c43      	adds	r3, r0, #1
 8006b12:	d034      	beq.n	8006b7e <_malloc_r+0xda>
 8006b14:	6823      	ldr	r3, [r4, #0]
 8006b16:	19df      	adds	r7, r3, r7
 8006b18:	6027      	str	r7, [r4, #0]
 8006b1a:	e013      	b.n	8006b44 <_malloc_r+0xa0>
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	dacb      	bge.n	8006ab8 <_malloc_r+0x14>
 8006b20:	230c      	movs	r3, #12
 8006b22:	2500      	movs	r5, #0
 8006b24:	6033      	str	r3, [r6, #0]
 8006b26:	0028      	movs	r0, r5
 8006b28:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b2a:	6822      	ldr	r2, [r4, #0]
 8006b2c:	1bd1      	subs	r1, r2, r7
 8006b2e:	d420      	bmi.n	8006b72 <_malloc_r+0xce>
 8006b30:	290b      	cmp	r1, #11
 8006b32:	d917      	bls.n	8006b64 <_malloc_r+0xc0>
 8006b34:	19e2      	adds	r2, r4, r7
 8006b36:	6027      	str	r7, [r4, #0]
 8006b38:	42a3      	cmp	r3, r4
 8006b3a:	d111      	bne.n	8006b60 <_malloc_r+0xbc>
 8006b3c:	602a      	str	r2, [r5, #0]
 8006b3e:	6863      	ldr	r3, [r4, #4]
 8006b40:	6011      	str	r1, [r2, #0]
 8006b42:	6053      	str	r3, [r2, #4]
 8006b44:	0030      	movs	r0, r6
 8006b46:	0025      	movs	r5, r4
 8006b48:	f000 f86c 	bl	8006c24 <__malloc_unlock>
 8006b4c:	2207      	movs	r2, #7
 8006b4e:	350b      	adds	r5, #11
 8006b50:	1d23      	adds	r3, r4, #4
 8006b52:	4395      	bics	r5, r2
 8006b54:	1aea      	subs	r2, r5, r3
 8006b56:	429d      	cmp	r5, r3
 8006b58:	d0e5      	beq.n	8006b26 <_malloc_r+0x82>
 8006b5a:	1b5b      	subs	r3, r3, r5
 8006b5c:	50a3      	str	r3, [r4, r2]
 8006b5e:	e7e2      	b.n	8006b26 <_malloc_r+0x82>
 8006b60:	605a      	str	r2, [r3, #4]
 8006b62:	e7ec      	b.n	8006b3e <_malloc_r+0x9a>
 8006b64:	6862      	ldr	r2, [r4, #4]
 8006b66:	42a3      	cmp	r3, r4
 8006b68:	d101      	bne.n	8006b6e <_malloc_r+0xca>
 8006b6a:	602a      	str	r2, [r5, #0]
 8006b6c:	e7ea      	b.n	8006b44 <_malloc_r+0xa0>
 8006b6e:	605a      	str	r2, [r3, #4]
 8006b70:	e7e8      	b.n	8006b44 <_malloc_r+0xa0>
 8006b72:	0023      	movs	r3, r4
 8006b74:	6864      	ldr	r4, [r4, #4]
 8006b76:	e7a7      	b.n	8006ac8 <_malloc_r+0x24>
 8006b78:	002c      	movs	r4, r5
 8006b7a:	686d      	ldr	r5, [r5, #4]
 8006b7c:	e7af      	b.n	8006ade <_malloc_r+0x3a>
 8006b7e:	230c      	movs	r3, #12
 8006b80:	0030      	movs	r0, r6
 8006b82:	6033      	str	r3, [r6, #0]
 8006b84:	f000 f84e 	bl	8006c24 <__malloc_unlock>
 8006b88:	e7cd      	b.n	8006b26 <_malloc_r+0x82>
 8006b8a:	46c0      	nop			; (mov r8, r8)
 8006b8c:	200006fc 	.word	0x200006fc

08006b90 <_realloc_r>:
 8006b90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b92:	0007      	movs	r7, r0
 8006b94:	000e      	movs	r6, r1
 8006b96:	0014      	movs	r4, r2
 8006b98:	2900      	cmp	r1, #0
 8006b9a:	d105      	bne.n	8006ba8 <_realloc_r+0x18>
 8006b9c:	0011      	movs	r1, r2
 8006b9e:	f7ff ff81 	bl	8006aa4 <_malloc_r>
 8006ba2:	0005      	movs	r5, r0
 8006ba4:	0028      	movs	r0, r5
 8006ba6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006ba8:	2a00      	cmp	r2, #0
 8006baa:	d103      	bne.n	8006bb4 <_realloc_r+0x24>
 8006bac:	f7ff ff0e 	bl	80069cc <_free_r>
 8006bb0:	0025      	movs	r5, r4
 8006bb2:	e7f7      	b.n	8006ba4 <_realloc_r+0x14>
 8006bb4:	f000 f83e 	bl	8006c34 <_malloc_usable_size_r>
 8006bb8:	9001      	str	r0, [sp, #4]
 8006bba:	4284      	cmp	r4, r0
 8006bbc:	d803      	bhi.n	8006bc6 <_realloc_r+0x36>
 8006bbe:	0035      	movs	r5, r6
 8006bc0:	0843      	lsrs	r3, r0, #1
 8006bc2:	42a3      	cmp	r3, r4
 8006bc4:	d3ee      	bcc.n	8006ba4 <_realloc_r+0x14>
 8006bc6:	0021      	movs	r1, r4
 8006bc8:	0038      	movs	r0, r7
 8006bca:	f7ff ff6b 	bl	8006aa4 <_malloc_r>
 8006bce:	1e05      	subs	r5, r0, #0
 8006bd0:	d0e8      	beq.n	8006ba4 <_realloc_r+0x14>
 8006bd2:	9b01      	ldr	r3, [sp, #4]
 8006bd4:	0022      	movs	r2, r4
 8006bd6:	429c      	cmp	r4, r3
 8006bd8:	d900      	bls.n	8006bdc <_realloc_r+0x4c>
 8006bda:	001a      	movs	r2, r3
 8006bdc:	0031      	movs	r1, r6
 8006bde:	0028      	movs	r0, r5
 8006be0:	f7ff fbc0 	bl	8006364 <memcpy>
 8006be4:	0031      	movs	r1, r6
 8006be6:	0038      	movs	r0, r7
 8006be8:	f7ff fef0 	bl	80069cc <_free_r>
 8006bec:	e7da      	b.n	8006ba4 <_realloc_r+0x14>
	...

08006bf0 <_sbrk_r>:
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	b570      	push	{r4, r5, r6, lr}
 8006bf4:	4d06      	ldr	r5, [pc, #24]	; (8006c10 <_sbrk_r+0x20>)
 8006bf6:	0004      	movs	r4, r0
 8006bf8:	0008      	movs	r0, r1
 8006bfa:	602b      	str	r3, [r5, #0]
 8006bfc:	f7fa fdd2 	bl	80017a4 <_sbrk>
 8006c00:	1c43      	adds	r3, r0, #1
 8006c02:	d103      	bne.n	8006c0c <_sbrk_r+0x1c>
 8006c04:	682b      	ldr	r3, [r5, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d000      	beq.n	8006c0c <_sbrk_r+0x1c>
 8006c0a:	6023      	str	r3, [r4, #0]
 8006c0c:	bd70      	pop	{r4, r5, r6, pc}
 8006c0e:	46c0      	nop			; (mov r8, r8)
 8006c10:	20000704 	.word	0x20000704

08006c14 <__malloc_lock>:
 8006c14:	b510      	push	{r4, lr}
 8006c16:	4802      	ldr	r0, [pc, #8]	; (8006c20 <__malloc_lock+0xc>)
 8006c18:	f000 f814 	bl	8006c44 <__retarget_lock_acquire_recursive>
 8006c1c:	bd10      	pop	{r4, pc}
 8006c1e:	46c0      	nop			; (mov r8, r8)
 8006c20:	20000708 	.word	0x20000708

08006c24 <__malloc_unlock>:
 8006c24:	b510      	push	{r4, lr}
 8006c26:	4802      	ldr	r0, [pc, #8]	; (8006c30 <__malloc_unlock+0xc>)
 8006c28:	f000 f80d 	bl	8006c46 <__retarget_lock_release_recursive>
 8006c2c:	bd10      	pop	{r4, pc}
 8006c2e:	46c0      	nop			; (mov r8, r8)
 8006c30:	20000708 	.word	0x20000708

08006c34 <_malloc_usable_size_r>:
 8006c34:	1f0b      	subs	r3, r1, #4
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	1f18      	subs	r0, r3, #4
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	da01      	bge.n	8006c42 <_malloc_usable_size_r+0xe>
 8006c3e:	580b      	ldr	r3, [r1, r0]
 8006c40:	18c0      	adds	r0, r0, r3
 8006c42:	4770      	bx	lr

08006c44 <__retarget_lock_acquire_recursive>:
 8006c44:	4770      	bx	lr

08006c46 <__retarget_lock_release_recursive>:
 8006c46:	4770      	bx	lr

08006c48 <_init>:
 8006c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4a:	46c0      	nop			; (mov r8, r8)
 8006c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c4e:	bc08      	pop	{r3}
 8006c50:	469e      	mov	lr, r3
 8006c52:	4770      	bx	lr

08006c54 <_fini>:
 8006c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c56:	46c0      	nop			; (mov r8, r8)
 8006c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c5a:	bc08      	pop	{r3}
 8006c5c:	469e      	mov	lr, r3
 8006c5e:	4770      	bx	lr
