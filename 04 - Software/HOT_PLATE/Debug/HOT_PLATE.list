
HOT_PLATE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005858  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fb0  08005910  08005910  00015910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068c0  080068c0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  080068c0  080068c0  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080068c0  080068c0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068c0  080068c0  000168c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068c4  080068c4  000168c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080068c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e4  2000007c  08006944  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000660  08006944  00020660  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a35  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028af  00000000  00000000  00031ad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  00034388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f98  00000000  00000000  00035460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172c4  00000000  00000000  000363f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013c4d  00000000  00000000  0004d6bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092581  00000000  00000000  00061309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f388a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000413c  00000000  00000000  000f38dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000007c 	.word	0x2000007c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080058f8 	.word	0x080058f8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000080 	.word	0x20000080
 80000fc:	080058f8 	.word	0x080058f8

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f806 	bl	8000228 <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__aeabi_idiv0>:
 8000228:	4770      	bx	lr
 800022a:	46c0      	nop			; (mov r8, r8)

0800022c <__aeabi_fmul>:
 800022c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800022e:	464f      	mov	r7, r9
 8000230:	4646      	mov	r6, r8
 8000232:	46d6      	mov	lr, sl
 8000234:	0244      	lsls	r4, r0, #9
 8000236:	0045      	lsls	r5, r0, #1
 8000238:	b5c0      	push	{r6, r7, lr}
 800023a:	0a64      	lsrs	r4, r4, #9
 800023c:	1c0f      	adds	r7, r1, #0
 800023e:	0e2d      	lsrs	r5, r5, #24
 8000240:	0fc6      	lsrs	r6, r0, #31
 8000242:	2d00      	cmp	r5, #0
 8000244:	d100      	bne.n	8000248 <__aeabi_fmul+0x1c>
 8000246:	e08d      	b.n	8000364 <__aeabi_fmul+0x138>
 8000248:	2dff      	cmp	r5, #255	; 0xff
 800024a:	d100      	bne.n	800024e <__aeabi_fmul+0x22>
 800024c:	e092      	b.n	8000374 <__aeabi_fmul+0x148>
 800024e:	2300      	movs	r3, #0
 8000250:	2080      	movs	r0, #128	; 0x80
 8000252:	4699      	mov	r9, r3
 8000254:	469a      	mov	sl, r3
 8000256:	00e4      	lsls	r4, r4, #3
 8000258:	04c0      	lsls	r0, r0, #19
 800025a:	4304      	orrs	r4, r0
 800025c:	3d7f      	subs	r5, #127	; 0x7f
 800025e:	0278      	lsls	r0, r7, #9
 8000260:	0a43      	lsrs	r3, r0, #9
 8000262:	4698      	mov	r8, r3
 8000264:	007b      	lsls	r3, r7, #1
 8000266:	0e1b      	lsrs	r3, r3, #24
 8000268:	0fff      	lsrs	r7, r7, #31
 800026a:	2b00      	cmp	r3, #0
 800026c:	d100      	bne.n	8000270 <__aeabi_fmul+0x44>
 800026e:	e070      	b.n	8000352 <__aeabi_fmul+0x126>
 8000270:	2bff      	cmp	r3, #255	; 0xff
 8000272:	d100      	bne.n	8000276 <__aeabi_fmul+0x4a>
 8000274:	e086      	b.n	8000384 <__aeabi_fmul+0x158>
 8000276:	4642      	mov	r2, r8
 8000278:	00d0      	lsls	r0, r2, #3
 800027a:	2280      	movs	r2, #128	; 0x80
 800027c:	3b7f      	subs	r3, #127	; 0x7f
 800027e:	18ed      	adds	r5, r5, r3
 8000280:	2300      	movs	r3, #0
 8000282:	04d2      	lsls	r2, r2, #19
 8000284:	4302      	orrs	r2, r0
 8000286:	4690      	mov	r8, r2
 8000288:	469c      	mov	ip, r3
 800028a:	0031      	movs	r1, r6
 800028c:	464b      	mov	r3, r9
 800028e:	4079      	eors	r1, r7
 8000290:	1c68      	adds	r0, r5, #1
 8000292:	2b0f      	cmp	r3, #15
 8000294:	d81c      	bhi.n	80002d0 <__aeabi_fmul+0xa4>
 8000296:	4a76      	ldr	r2, [pc, #472]	; (8000470 <__aeabi_fmul+0x244>)
 8000298:	009b      	lsls	r3, r3, #2
 800029a:	58d3      	ldr	r3, [r2, r3]
 800029c:	469f      	mov	pc, r3
 800029e:	0039      	movs	r1, r7
 80002a0:	4644      	mov	r4, r8
 80002a2:	46e2      	mov	sl, ip
 80002a4:	4653      	mov	r3, sl
 80002a6:	2b02      	cmp	r3, #2
 80002a8:	d00f      	beq.n	80002ca <__aeabi_fmul+0x9e>
 80002aa:	2b03      	cmp	r3, #3
 80002ac:	d100      	bne.n	80002b0 <__aeabi_fmul+0x84>
 80002ae:	e0d7      	b.n	8000460 <__aeabi_fmul+0x234>
 80002b0:	2b01      	cmp	r3, #1
 80002b2:	d137      	bne.n	8000324 <__aeabi_fmul+0xf8>
 80002b4:	2000      	movs	r0, #0
 80002b6:	2400      	movs	r4, #0
 80002b8:	05c0      	lsls	r0, r0, #23
 80002ba:	4320      	orrs	r0, r4
 80002bc:	07c9      	lsls	r1, r1, #31
 80002be:	4308      	orrs	r0, r1
 80002c0:	bce0      	pop	{r5, r6, r7}
 80002c2:	46ba      	mov	sl, r7
 80002c4:	46b1      	mov	r9, r6
 80002c6:	46a8      	mov	r8, r5
 80002c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ca:	20ff      	movs	r0, #255	; 0xff
 80002cc:	2400      	movs	r4, #0
 80002ce:	e7f3      	b.n	80002b8 <__aeabi_fmul+0x8c>
 80002d0:	0c26      	lsrs	r6, r4, #16
 80002d2:	0424      	lsls	r4, r4, #16
 80002d4:	0c22      	lsrs	r2, r4, #16
 80002d6:	4644      	mov	r4, r8
 80002d8:	0424      	lsls	r4, r4, #16
 80002da:	0c24      	lsrs	r4, r4, #16
 80002dc:	4643      	mov	r3, r8
 80002de:	0027      	movs	r7, r4
 80002e0:	0c1b      	lsrs	r3, r3, #16
 80002e2:	4357      	muls	r7, r2
 80002e4:	4374      	muls	r4, r6
 80002e6:	435a      	muls	r2, r3
 80002e8:	435e      	muls	r6, r3
 80002ea:	1912      	adds	r2, r2, r4
 80002ec:	0c3b      	lsrs	r3, r7, #16
 80002ee:	189b      	adds	r3, r3, r2
 80002f0:	429c      	cmp	r4, r3
 80002f2:	d903      	bls.n	80002fc <__aeabi_fmul+0xd0>
 80002f4:	2280      	movs	r2, #128	; 0x80
 80002f6:	0252      	lsls	r2, r2, #9
 80002f8:	4694      	mov	ip, r2
 80002fa:	4466      	add	r6, ip
 80002fc:	043f      	lsls	r7, r7, #16
 80002fe:	041a      	lsls	r2, r3, #16
 8000300:	0c3f      	lsrs	r7, r7, #16
 8000302:	19d2      	adds	r2, r2, r7
 8000304:	0194      	lsls	r4, r2, #6
 8000306:	1e67      	subs	r7, r4, #1
 8000308:	41bc      	sbcs	r4, r7
 800030a:	0c1b      	lsrs	r3, r3, #16
 800030c:	0e92      	lsrs	r2, r2, #26
 800030e:	199b      	adds	r3, r3, r6
 8000310:	4314      	orrs	r4, r2
 8000312:	019b      	lsls	r3, r3, #6
 8000314:	431c      	orrs	r4, r3
 8000316:	011b      	lsls	r3, r3, #4
 8000318:	d400      	bmi.n	800031c <__aeabi_fmul+0xf0>
 800031a:	e09b      	b.n	8000454 <__aeabi_fmul+0x228>
 800031c:	2301      	movs	r3, #1
 800031e:	0862      	lsrs	r2, r4, #1
 8000320:	401c      	ands	r4, r3
 8000322:	4314      	orrs	r4, r2
 8000324:	0002      	movs	r2, r0
 8000326:	327f      	adds	r2, #127	; 0x7f
 8000328:	2a00      	cmp	r2, #0
 800032a:	dd64      	ble.n	80003f6 <__aeabi_fmul+0x1ca>
 800032c:	0763      	lsls	r3, r4, #29
 800032e:	d004      	beq.n	800033a <__aeabi_fmul+0x10e>
 8000330:	230f      	movs	r3, #15
 8000332:	4023      	ands	r3, r4
 8000334:	2b04      	cmp	r3, #4
 8000336:	d000      	beq.n	800033a <__aeabi_fmul+0x10e>
 8000338:	3404      	adds	r4, #4
 800033a:	0123      	lsls	r3, r4, #4
 800033c:	d503      	bpl.n	8000346 <__aeabi_fmul+0x11a>
 800033e:	0002      	movs	r2, r0
 8000340:	4b4c      	ldr	r3, [pc, #304]	; (8000474 <__aeabi_fmul+0x248>)
 8000342:	3280      	adds	r2, #128	; 0x80
 8000344:	401c      	ands	r4, r3
 8000346:	2afe      	cmp	r2, #254	; 0xfe
 8000348:	dcbf      	bgt.n	80002ca <__aeabi_fmul+0x9e>
 800034a:	01a4      	lsls	r4, r4, #6
 800034c:	0a64      	lsrs	r4, r4, #9
 800034e:	b2d0      	uxtb	r0, r2
 8000350:	e7b2      	b.n	80002b8 <__aeabi_fmul+0x8c>
 8000352:	4643      	mov	r3, r8
 8000354:	2b00      	cmp	r3, #0
 8000356:	d13d      	bne.n	80003d4 <__aeabi_fmul+0x1a8>
 8000358:	464a      	mov	r2, r9
 800035a:	3301      	adds	r3, #1
 800035c:	431a      	orrs	r2, r3
 800035e:	4691      	mov	r9, r2
 8000360:	469c      	mov	ip, r3
 8000362:	e792      	b.n	800028a <__aeabi_fmul+0x5e>
 8000364:	2c00      	cmp	r4, #0
 8000366:	d129      	bne.n	80003bc <__aeabi_fmul+0x190>
 8000368:	2304      	movs	r3, #4
 800036a:	4699      	mov	r9, r3
 800036c:	3b03      	subs	r3, #3
 800036e:	2500      	movs	r5, #0
 8000370:	469a      	mov	sl, r3
 8000372:	e774      	b.n	800025e <__aeabi_fmul+0x32>
 8000374:	2c00      	cmp	r4, #0
 8000376:	d11b      	bne.n	80003b0 <__aeabi_fmul+0x184>
 8000378:	2308      	movs	r3, #8
 800037a:	4699      	mov	r9, r3
 800037c:	3b06      	subs	r3, #6
 800037e:	25ff      	movs	r5, #255	; 0xff
 8000380:	469a      	mov	sl, r3
 8000382:	e76c      	b.n	800025e <__aeabi_fmul+0x32>
 8000384:	4643      	mov	r3, r8
 8000386:	35ff      	adds	r5, #255	; 0xff
 8000388:	2b00      	cmp	r3, #0
 800038a:	d10b      	bne.n	80003a4 <__aeabi_fmul+0x178>
 800038c:	2302      	movs	r3, #2
 800038e:	464a      	mov	r2, r9
 8000390:	431a      	orrs	r2, r3
 8000392:	4691      	mov	r9, r2
 8000394:	469c      	mov	ip, r3
 8000396:	e778      	b.n	800028a <__aeabi_fmul+0x5e>
 8000398:	4653      	mov	r3, sl
 800039a:	0031      	movs	r1, r6
 800039c:	2b02      	cmp	r3, #2
 800039e:	d000      	beq.n	80003a2 <__aeabi_fmul+0x176>
 80003a0:	e783      	b.n	80002aa <__aeabi_fmul+0x7e>
 80003a2:	e792      	b.n	80002ca <__aeabi_fmul+0x9e>
 80003a4:	2303      	movs	r3, #3
 80003a6:	464a      	mov	r2, r9
 80003a8:	431a      	orrs	r2, r3
 80003aa:	4691      	mov	r9, r2
 80003ac:	469c      	mov	ip, r3
 80003ae:	e76c      	b.n	800028a <__aeabi_fmul+0x5e>
 80003b0:	230c      	movs	r3, #12
 80003b2:	4699      	mov	r9, r3
 80003b4:	3b09      	subs	r3, #9
 80003b6:	25ff      	movs	r5, #255	; 0xff
 80003b8:	469a      	mov	sl, r3
 80003ba:	e750      	b.n	800025e <__aeabi_fmul+0x32>
 80003bc:	0020      	movs	r0, r4
 80003be:	f000 f8c9 	bl	8000554 <__clzsi2>
 80003c2:	2576      	movs	r5, #118	; 0x76
 80003c4:	1f43      	subs	r3, r0, #5
 80003c6:	409c      	lsls	r4, r3
 80003c8:	2300      	movs	r3, #0
 80003ca:	426d      	negs	r5, r5
 80003cc:	4699      	mov	r9, r3
 80003ce:	469a      	mov	sl, r3
 80003d0:	1a2d      	subs	r5, r5, r0
 80003d2:	e744      	b.n	800025e <__aeabi_fmul+0x32>
 80003d4:	4640      	mov	r0, r8
 80003d6:	f000 f8bd 	bl	8000554 <__clzsi2>
 80003da:	4642      	mov	r2, r8
 80003dc:	1f43      	subs	r3, r0, #5
 80003de:	409a      	lsls	r2, r3
 80003e0:	2300      	movs	r3, #0
 80003e2:	1a2d      	subs	r5, r5, r0
 80003e4:	4690      	mov	r8, r2
 80003e6:	469c      	mov	ip, r3
 80003e8:	3d76      	subs	r5, #118	; 0x76
 80003ea:	e74e      	b.n	800028a <__aeabi_fmul+0x5e>
 80003ec:	2480      	movs	r4, #128	; 0x80
 80003ee:	2100      	movs	r1, #0
 80003f0:	20ff      	movs	r0, #255	; 0xff
 80003f2:	03e4      	lsls	r4, r4, #15
 80003f4:	e760      	b.n	80002b8 <__aeabi_fmul+0x8c>
 80003f6:	2301      	movs	r3, #1
 80003f8:	1a9b      	subs	r3, r3, r2
 80003fa:	2b1b      	cmp	r3, #27
 80003fc:	dd00      	ble.n	8000400 <__aeabi_fmul+0x1d4>
 80003fe:	e759      	b.n	80002b4 <__aeabi_fmul+0x88>
 8000400:	0022      	movs	r2, r4
 8000402:	309e      	adds	r0, #158	; 0x9e
 8000404:	40da      	lsrs	r2, r3
 8000406:	4084      	lsls	r4, r0
 8000408:	0013      	movs	r3, r2
 800040a:	1e62      	subs	r2, r4, #1
 800040c:	4194      	sbcs	r4, r2
 800040e:	431c      	orrs	r4, r3
 8000410:	0763      	lsls	r3, r4, #29
 8000412:	d004      	beq.n	800041e <__aeabi_fmul+0x1f2>
 8000414:	230f      	movs	r3, #15
 8000416:	4023      	ands	r3, r4
 8000418:	2b04      	cmp	r3, #4
 800041a:	d000      	beq.n	800041e <__aeabi_fmul+0x1f2>
 800041c:	3404      	adds	r4, #4
 800041e:	0163      	lsls	r3, r4, #5
 8000420:	d51a      	bpl.n	8000458 <__aeabi_fmul+0x22c>
 8000422:	2001      	movs	r0, #1
 8000424:	2400      	movs	r4, #0
 8000426:	e747      	b.n	80002b8 <__aeabi_fmul+0x8c>
 8000428:	2080      	movs	r0, #128	; 0x80
 800042a:	03c0      	lsls	r0, r0, #15
 800042c:	4204      	tst	r4, r0
 800042e:	d009      	beq.n	8000444 <__aeabi_fmul+0x218>
 8000430:	4643      	mov	r3, r8
 8000432:	4203      	tst	r3, r0
 8000434:	d106      	bne.n	8000444 <__aeabi_fmul+0x218>
 8000436:	4644      	mov	r4, r8
 8000438:	4304      	orrs	r4, r0
 800043a:	0264      	lsls	r4, r4, #9
 800043c:	0039      	movs	r1, r7
 800043e:	20ff      	movs	r0, #255	; 0xff
 8000440:	0a64      	lsrs	r4, r4, #9
 8000442:	e739      	b.n	80002b8 <__aeabi_fmul+0x8c>
 8000444:	2080      	movs	r0, #128	; 0x80
 8000446:	03c0      	lsls	r0, r0, #15
 8000448:	4304      	orrs	r4, r0
 800044a:	0264      	lsls	r4, r4, #9
 800044c:	0031      	movs	r1, r6
 800044e:	20ff      	movs	r0, #255	; 0xff
 8000450:	0a64      	lsrs	r4, r4, #9
 8000452:	e731      	b.n	80002b8 <__aeabi_fmul+0x8c>
 8000454:	0028      	movs	r0, r5
 8000456:	e765      	b.n	8000324 <__aeabi_fmul+0xf8>
 8000458:	01a4      	lsls	r4, r4, #6
 800045a:	2000      	movs	r0, #0
 800045c:	0a64      	lsrs	r4, r4, #9
 800045e:	e72b      	b.n	80002b8 <__aeabi_fmul+0x8c>
 8000460:	2080      	movs	r0, #128	; 0x80
 8000462:	03c0      	lsls	r0, r0, #15
 8000464:	4304      	orrs	r4, r0
 8000466:	0264      	lsls	r4, r4, #9
 8000468:	20ff      	movs	r0, #255	; 0xff
 800046a:	0a64      	lsrs	r4, r4, #9
 800046c:	e724      	b.n	80002b8 <__aeabi_fmul+0x8c>
 800046e:	46c0      	nop			; (mov r8, r8)
 8000470:	0800593c 	.word	0x0800593c
 8000474:	f7ffffff 	.word	0xf7ffffff

08000478 <__aeabi_f2iz>:
 8000478:	0241      	lsls	r1, r0, #9
 800047a:	0042      	lsls	r2, r0, #1
 800047c:	0fc3      	lsrs	r3, r0, #31
 800047e:	0a49      	lsrs	r1, r1, #9
 8000480:	2000      	movs	r0, #0
 8000482:	0e12      	lsrs	r2, r2, #24
 8000484:	2a7e      	cmp	r2, #126	; 0x7e
 8000486:	dd03      	ble.n	8000490 <__aeabi_f2iz+0x18>
 8000488:	2a9d      	cmp	r2, #157	; 0x9d
 800048a:	dd02      	ble.n	8000492 <__aeabi_f2iz+0x1a>
 800048c:	4a09      	ldr	r2, [pc, #36]	; (80004b4 <__aeabi_f2iz+0x3c>)
 800048e:	1898      	adds	r0, r3, r2
 8000490:	4770      	bx	lr
 8000492:	2080      	movs	r0, #128	; 0x80
 8000494:	0400      	lsls	r0, r0, #16
 8000496:	4301      	orrs	r1, r0
 8000498:	2a95      	cmp	r2, #149	; 0x95
 800049a:	dc07      	bgt.n	80004ac <__aeabi_f2iz+0x34>
 800049c:	2096      	movs	r0, #150	; 0x96
 800049e:	1a82      	subs	r2, r0, r2
 80004a0:	40d1      	lsrs	r1, r2
 80004a2:	4248      	negs	r0, r1
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d1f3      	bne.n	8000490 <__aeabi_f2iz+0x18>
 80004a8:	0008      	movs	r0, r1
 80004aa:	e7f1      	b.n	8000490 <__aeabi_f2iz+0x18>
 80004ac:	3a96      	subs	r2, #150	; 0x96
 80004ae:	4091      	lsls	r1, r2
 80004b0:	e7f7      	b.n	80004a2 <__aeabi_f2iz+0x2a>
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	7fffffff 	.word	0x7fffffff

080004b8 <__aeabi_i2f>:
 80004b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ba:	2800      	cmp	r0, #0
 80004bc:	d013      	beq.n	80004e6 <__aeabi_i2f+0x2e>
 80004be:	17c3      	asrs	r3, r0, #31
 80004c0:	18c6      	adds	r6, r0, r3
 80004c2:	405e      	eors	r6, r3
 80004c4:	0fc4      	lsrs	r4, r0, #31
 80004c6:	0030      	movs	r0, r6
 80004c8:	f000 f844 	bl	8000554 <__clzsi2>
 80004cc:	239e      	movs	r3, #158	; 0x9e
 80004ce:	0005      	movs	r5, r0
 80004d0:	1a1b      	subs	r3, r3, r0
 80004d2:	2b96      	cmp	r3, #150	; 0x96
 80004d4:	dc0f      	bgt.n	80004f6 <__aeabi_i2f+0x3e>
 80004d6:	2808      	cmp	r0, #8
 80004d8:	dd01      	ble.n	80004de <__aeabi_i2f+0x26>
 80004da:	3d08      	subs	r5, #8
 80004dc:	40ae      	lsls	r6, r5
 80004de:	0276      	lsls	r6, r6, #9
 80004e0:	0a76      	lsrs	r6, r6, #9
 80004e2:	b2d8      	uxtb	r0, r3
 80004e4:	e002      	b.n	80004ec <__aeabi_i2f+0x34>
 80004e6:	2400      	movs	r4, #0
 80004e8:	2000      	movs	r0, #0
 80004ea:	2600      	movs	r6, #0
 80004ec:	05c0      	lsls	r0, r0, #23
 80004ee:	4330      	orrs	r0, r6
 80004f0:	07e4      	lsls	r4, r4, #31
 80004f2:	4320      	orrs	r0, r4
 80004f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80004f6:	2b99      	cmp	r3, #153	; 0x99
 80004f8:	dd0c      	ble.n	8000514 <__aeabi_i2f+0x5c>
 80004fa:	2205      	movs	r2, #5
 80004fc:	0031      	movs	r1, r6
 80004fe:	1a12      	subs	r2, r2, r0
 8000500:	40d1      	lsrs	r1, r2
 8000502:	000a      	movs	r2, r1
 8000504:	0001      	movs	r1, r0
 8000506:	0030      	movs	r0, r6
 8000508:	311b      	adds	r1, #27
 800050a:	4088      	lsls	r0, r1
 800050c:	1e41      	subs	r1, r0, #1
 800050e:	4188      	sbcs	r0, r1
 8000510:	4302      	orrs	r2, r0
 8000512:	0016      	movs	r6, r2
 8000514:	2d05      	cmp	r5, #5
 8000516:	dc12      	bgt.n	800053e <__aeabi_i2f+0x86>
 8000518:	0031      	movs	r1, r6
 800051a:	4f0d      	ldr	r7, [pc, #52]	; (8000550 <__aeabi_i2f+0x98>)
 800051c:	4039      	ands	r1, r7
 800051e:	0772      	lsls	r2, r6, #29
 8000520:	d009      	beq.n	8000536 <__aeabi_i2f+0x7e>
 8000522:	200f      	movs	r0, #15
 8000524:	4030      	ands	r0, r6
 8000526:	2804      	cmp	r0, #4
 8000528:	d005      	beq.n	8000536 <__aeabi_i2f+0x7e>
 800052a:	3104      	adds	r1, #4
 800052c:	014a      	lsls	r2, r1, #5
 800052e:	d502      	bpl.n	8000536 <__aeabi_i2f+0x7e>
 8000530:	239f      	movs	r3, #159	; 0x9f
 8000532:	4039      	ands	r1, r7
 8000534:	1b5b      	subs	r3, r3, r5
 8000536:	0189      	lsls	r1, r1, #6
 8000538:	0a4e      	lsrs	r6, r1, #9
 800053a:	b2d8      	uxtb	r0, r3
 800053c:	e7d6      	b.n	80004ec <__aeabi_i2f+0x34>
 800053e:	1f6a      	subs	r2, r5, #5
 8000540:	4096      	lsls	r6, r2
 8000542:	0031      	movs	r1, r6
 8000544:	4f02      	ldr	r7, [pc, #8]	; (8000550 <__aeabi_i2f+0x98>)
 8000546:	4039      	ands	r1, r7
 8000548:	0772      	lsls	r2, r6, #29
 800054a:	d0f4      	beq.n	8000536 <__aeabi_i2f+0x7e>
 800054c:	e7e9      	b.n	8000522 <__aeabi_i2f+0x6a>
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	fbffffff 	.word	0xfbffffff

08000554 <__clzsi2>:
 8000554:	211c      	movs	r1, #28
 8000556:	2301      	movs	r3, #1
 8000558:	041b      	lsls	r3, r3, #16
 800055a:	4298      	cmp	r0, r3
 800055c:	d301      	bcc.n	8000562 <__clzsi2+0xe>
 800055e:	0c00      	lsrs	r0, r0, #16
 8000560:	3910      	subs	r1, #16
 8000562:	0a1b      	lsrs	r3, r3, #8
 8000564:	4298      	cmp	r0, r3
 8000566:	d301      	bcc.n	800056c <__clzsi2+0x18>
 8000568:	0a00      	lsrs	r0, r0, #8
 800056a:	3908      	subs	r1, #8
 800056c:	091b      	lsrs	r3, r3, #4
 800056e:	4298      	cmp	r0, r3
 8000570:	d301      	bcc.n	8000576 <__clzsi2+0x22>
 8000572:	0900      	lsrs	r0, r0, #4
 8000574:	3904      	subs	r1, #4
 8000576:	a202      	add	r2, pc, #8	; (adr r2, 8000580 <__clzsi2+0x2c>)
 8000578:	5c10      	ldrb	r0, [r2, r0]
 800057a:	1840      	adds	r0, r0, r1
 800057c:	4770      	bx	lr
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	02020304 	.word	0x02020304
 8000584:	01010101 	.word	0x01010101
	...

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b088      	sub	sp, #32
 8000594:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000596:	f001 f8a9 	bl	80016ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059a:	f000 f937 	bl	800080c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059e:	f000 fafd 	bl	8000b9c <MX_GPIO_Init>
  MX_I2C1_Init();
 80005a2:	f000 f9fb 	bl	800099c <MX_I2C1_Init>
  MX_I2C2_Init();
 80005a6:	f000 fa39 	bl	8000a1c <MX_I2C2_Init>
  MX_ADC1_Init();
 80005aa:	f000 f977 	bl	800089c <MX_ADC1_Init>
  MX_TIM3_Init();
 80005ae:	f000 fa75 	bl	8000a9c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 80005b2:	f000 fe5f 	bl	8001274 <ssd1306_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //GUI
	  switch(state){
 80005b6:	4b87      	ldr	r3, [pc, #540]	; (80007d4 <main+0x244>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	5e9b      	ldrsh	r3, [r3, r2]
 80005bc:	2b1f      	cmp	r3, #31
 80005be:	d858      	bhi.n	8000672 <main+0xe2>
 80005c0:	009a      	lsls	r2, r3, #2
 80005c2:	4b85      	ldr	r3, [pc, #532]	; (80007d8 <main+0x248>)
 80005c4:	18d3      	adds	r3, r2, r3
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	469f      	mov	pc, r3
	  case 0:
		  ssd1306_WriteScreen("LOGO", Font_11x18);
 80005ca:	4b84      	ldr	r3, [pc, #528]	; (80007dc <main+0x24c>)
 80005cc:	4884      	ldr	r0, [pc, #528]	; (80007e0 <main+0x250>)
 80005ce:	6819      	ldr	r1, [r3, #0]
 80005d0:	685a      	ldr	r2, [r3, #4]
 80005d2:	f000 fb5d 	bl	8000c90 <ssd1306_WriteScreen>
		  break;
 80005d6:	e04d      	b.n	8000674 <main+0xe4>
	  case 1:
		  ssd1306_WriteScreen("START", Font_11x18);
 80005d8:	4b80      	ldr	r3, [pc, #512]	; (80007dc <main+0x24c>)
 80005da:	4882      	ldr	r0, [pc, #520]	; (80007e4 <main+0x254>)
 80005dc:	6819      	ldr	r1, [r3, #0]
 80005de:	685a      	ldr	r2, [r3, #4]
 80005e0:	f000 fb56 	bl	8000c90 <ssd1306_WriteScreen>
		  break;
 80005e4:	e046      	b.n	8000674 <main+0xe4>
	  case 11:
		  ssd1306_WriteScreen("120ºC", Font_11x18);
 80005e6:	4b7d      	ldr	r3, [pc, #500]	; (80007dc <main+0x24c>)
 80005e8:	487f      	ldr	r0, [pc, #508]	; (80007e8 <main+0x258>)
 80005ea:	6819      	ldr	r1, [r3, #0]
 80005ec:	685a      	ldr	r2, [r3, #4]
 80005ee:	f000 fb4f 	bl	8000c90 <ssd1306_WriteScreen>
		  break;
 80005f2:	e03f      	b.n	8000674 <main+0xe4>
	  case 2:
		  ssd1306_WriteScreen("CONFIG", Font_11x18);
 80005f4:	4b79      	ldr	r3, [pc, #484]	; (80007dc <main+0x24c>)
 80005f6:	487d      	ldr	r0, [pc, #500]	; (80007ec <main+0x25c>)
 80005f8:	6819      	ldr	r1, [r3, #0]
 80005fa:	685a      	ldr	r2, [r3, #4]
 80005fc:	f000 fb48 	bl	8000c90 <ssd1306_WriteScreen>
		  break;
 8000600:	e038      	b.n	8000674 <main+0xe4>
	  case 3:
		  ssd1306_WriteScreen("VIEW", Font_11x18);
 8000602:	4b76      	ldr	r3, [pc, #472]	; (80007dc <main+0x24c>)
 8000604:	487a      	ldr	r0, [pc, #488]	; (80007f0 <main+0x260>)
 8000606:	6819      	ldr	r1, [r3, #0]
 8000608:	685a      	ldr	r2, [r3, #4]
 800060a:	f000 fb41 	bl	8000c90 <ssd1306_WriteScreen>
		  break;
 800060e:	e031      	b.n	8000674 <main+0xe4>
	  case 31:
		  HAL_I2C_Mem_Read(&hi2c1, I2C_PD_ADDRESS, I2C_PD_REG_VBUS, 2, &voltage, 2, HAL_MAX_DELAY);
 8000610:	2110      	movs	r1, #16
 8000612:	23d1      	movs	r3, #209	; 0xd1
 8000614:	011a      	lsls	r2, r3, #4
 8000616:	4877      	ldr	r0, [pc, #476]	; (80007f4 <main+0x264>)
 8000618:	2301      	movs	r3, #1
 800061a:	425b      	negs	r3, r3
 800061c:	9302      	str	r3, [sp, #8]
 800061e:	2302      	movs	r3, #2
 8000620:	9301      	str	r3, [sp, #4]
 8000622:	4b75      	ldr	r3, [pc, #468]	; (80007f8 <main+0x268>)
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	2302      	movs	r3, #2
 8000628:	f002 f980 	bl	800292c <HAL_I2C_Mem_Read>
		  voltage = voltage * (float)0.1;
 800062c:	4b72      	ldr	r3, [pc, #456]	; (80007f8 <main+0x268>)
 800062e:	2200      	movs	r2, #0
 8000630:	5e9b      	ldrsh	r3, [r3, r2]
 8000632:	0018      	movs	r0, r3
 8000634:	f7ff ff40 	bl	80004b8 <__aeabi_i2f>
 8000638:	1c03      	adds	r3, r0, #0
 800063a:	4970      	ldr	r1, [pc, #448]	; (80007fc <main+0x26c>)
 800063c:	1c18      	adds	r0, r3, #0
 800063e:	f7ff fdf5 	bl	800022c <__aeabi_fmul>
 8000642:	1c03      	adds	r3, r0, #0
 8000644:	1c18      	adds	r0, r3, #0
 8000646:	f7ff ff17 	bl	8000478 <__aeabi_f2iz>
 800064a:	0003      	movs	r3, r0
 800064c:	b21a      	sxth	r2, r3
 800064e:	4b6a      	ldr	r3, [pc, #424]	; (80007f8 <main+0x268>)
 8000650:	801a      	strh	r2, [r3, #0]
		  char voltageString[9];
		  //memset(vbusSsd1306, 0, sizeof(vbusSsd1306));
		  sprintf(voltageString, "%dV", voltage);
 8000652:	4b69      	ldr	r3, [pc, #420]	; (80007f8 <main+0x268>)
 8000654:	2200      	movs	r2, #0
 8000656:	5e9b      	ldrsh	r3, [r3, r2]
 8000658:	001a      	movs	r2, r3
 800065a:	4969      	ldr	r1, [pc, #420]	; (8000800 <main+0x270>)
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	0018      	movs	r0, r3
 8000660:	f004 fcea 	bl	8005038 <siprintf>
		  ssd1306_WriteScreen(voltageString, Font_11x18);
 8000664:	4b5d      	ldr	r3, [pc, #372]	; (80007dc <main+0x24c>)
 8000666:	1d38      	adds	r0, r7, #4
 8000668:	6819      	ldr	r1, [r3, #0]
 800066a:	685a      	ldr	r2, [r3, #4]
 800066c:	f000 fb10 	bl	8000c90 <ssd1306_WriteScreen>
		  break;
 8000670:	e000      	b.n	8000674 <main+0xe4>
	  default:
		  break;
 8000672:	46c0      	nop			; (mov r8, r8)
	  }

	  //NEXT STATE
	  if(btn != BTN_NONE){
 8000674:	4b63      	ldr	r3, [pc, #396]	; (8000804 <main+0x274>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b03      	cmp	r3, #3
 800067a:	d09c      	beq.n	80005b6 <main+0x26>
		  switch (state){
 800067c:	4b55      	ldr	r3, [pc, #340]	; (80007d4 <main+0x244>)
 800067e:	2200      	movs	r2, #0
 8000680:	5e9b      	ldrsh	r3, [r3, r2]
 8000682:	2b1f      	cmp	r3, #31
 8000684:	d900      	bls.n	8000688 <main+0xf8>
 8000686:	e094      	b.n	80007b2 <main+0x222>
 8000688:	009a      	lsls	r2, r3, #2
 800068a:	4b5f      	ldr	r3, [pc, #380]	; (8000808 <main+0x278>)
 800068c:	18d3      	adds	r3, r2, r3
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	469f      	mov	pc, r3
		  case 0:
			  state = 1;
 8000692:	4b50      	ldr	r3, [pc, #320]	; (80007d4 <main+0x244>)
 8000694:	2201      	movs	r2, #1
 8000696:	801a      	strh	r2, [r3, #0]
			  break;
 8000698:	e08f      	b.n	80007ba <main+0x22a>
		  case 1:
			  if(btn == BTN_OK){
 800069a:	4b5a      	ldr	r3, [pc, #360]	; (8000804 <main+0x274>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d103      	bne.n	80006aa <main+0x11a>
				  state = 11;
 80006a2:	4b4c      	ldr	r3, [pc, #304]	; (80007d4 <main+0x244>)
 80006a4:	220b      	movs	r2, #11
 80006a6:	801a      	strh	r2, [r3, #0]
			  } else if (btn == BTN_DOWN){
				  state = 3;
			  } else {
				  state = 0;
			  }
			  break;
 80006a8:	e087      	b.n	80007ba <main+0x22a>
			  } else if (btn == BTN_UP){
 80006aa:	4b56      	ldr	r3, [pc, #344]	; (8000804 <main+0x274>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d103      	bne.n	80006ba <main+0x12a>
				  state = 2;
 80006b2:	4b48      	ldr	r3, [pc, #288]	; (80007d4 <main+0x244>)
 80006b4:	2202      	movs	r2, #2
 80006b6:	801a      	strh	r2, [r3, #0]
			  break;
 80006b8:	e07f      	b.n	80007ba <main+0x22a>
			  } else if (btn == BTN_DOWN){
 80006ba:	4b52      	ldr	r3, [pc, #328]	; (8000804 <main+0x274>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b02      	cmp	r3, #2
 80006c0:	d103      	bne.n	80006ca <main+0x13a>
				  state = 3;
 80006c2:	4b44      	ldr	r3, [pc, #272]	; (80007d4 <main+0x244>)
 80006c4:	2203      	movs	r2, #3
 80006c6:	801a      	strh	r2, [r3, #0]
			  break;
 80006c8:	e077      	b.n	80007ba <main+0x22a>
				  state = 0;
 80006ca:	4b42      	ldr	r3, [pc, #264]	; (80007d4 <main+0x244>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	801a      	strh	r2, [r3, #0]
			  break;
 80006d0:	e073      	b.n	80007ba <main+0x22a>
		  case 11:
			  if(btn == BTN_OK){
 80006d2:	4b4c      	ldr	r3, [pc, #304]	; (8000804 <main+0x274>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d103      	bne.n	80006e2 <main+0x152>
				  state = 1;
 80006da:	4b3e      	ldr	r3, [pc, #248]	; (80007d4 <main+0x244>)
 80006dc:	2201      	movs	r2, #1
 80006de:	801a      	strh	r2, [r3, #0]
			  } else if (btn == BTN_DOWN){
				  state = 1;
			  } else {
				  state = 0;
			  }
			  break;
 80006e0:	e06b      	b.n	80007ba <main+0x22a>
			  } else if (btn == BTN_UP){
 80006e2:	4b48      	ldr	r3, [pc, #288]	; (8000804 <main+0x274>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d103      	bne.n	80006f2 <main+0x162>
				  state = 1;
 80006ea:	4b3a      	ldr	r3, [pc, #232]	; (80007d4 <main+0x244>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	801a      	strh	r2, [r3, #0]
			  break;
 80006f0:	e063      	b.n	80007ba <main+0x22a>
			  } else if (btn == BTN_DOWN){
 80006f2:	4b44      	ldr	r3, [pc, #272]	; (8000804 <main+0x274>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b02      	cmp	r3, #2
 80006f8:	d103      	bne.n	8000702 <main+0x172>
				  state = 1;
 80006fa:	4b36      	ldr	r3, [pc, #216]	; (80007d4 <main+0x244>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	801a      	strh	r2, [r3, #0]
			  break;
 8000700:	e05b      	b.n	80007ba <main+0x22a>
				  state = 0;
 8000702:	4b34      	ldr	r3, [pc, #208]	; (80007d4 <main+0x244>)
 8000704:	2200      	movs	r2, #0
 8000706:	801a      	strh	r2, [r3, #0]
			  break;
 8000708:	e057      	b.n	80007ba <main+0x22a>
		  case 2:
			  if(btn == BTN_OK){
 800070a:	4b3e      	ldr	r3, [pc, #248]	; (8000804 <main+0x274>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d103      	bne.n	800071a <main+0x18a>
				  state = 21;
 8000712:	4b30      	ldr	r3, [pc, #192]	; (80007d4 <main+0x244>)
 8000714:	2215      	movs	r2, #21
 8000716:	801a      	strh	r2, [r3, #0]
			  } else if (btn == BTN_DOWN){
				  state = 1;
			  } else {
				  state = 0;
			  }
			  break;
 8000718:	e04f      	b.n	80007ba <main+0x22a>
			  } else if (btn == BTN_UP){
 800071a:	4b3a      	ldr	r3, [pc, #232]	; (8000804 <main+0x274>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d103      	bne.n	800072a <main+0x19a>
				  state = 3;
 8000722:	4b2c      	ldr	r3, [pc, #176]	; (80007d4 <main+0x244>)
 8000724:	2203      	movs	r2, #3
 8000726:	801a      	strh	r2, [r3, #0]
			  break;
 8000728:	e047      	b.n	80007ba <main+0x22a>
			  } else if (btn == BTN_DOWN){
 800072a:	4b36      	ldr	r3, [pc, #216]	; (8000804 <main+0x274>)
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b02      	cmp	r3, #2
 8000730:	d103      	bne.n	800073a <main+0x1aa>
				  state = 1;
 8000732:	4b28      	ldr	r3, [pc, #160]	; (80007d4 <main+0x244>)
 8000734:	2201      	movs	r2, #1
 8000736:	801a      	strh	r2, [r3, #0]
			  break;
 8000738:	e03f      	b.n	80007ba <main+0x22a>
				  state = 0;
 800073a:	4b26      	ldr	r3, [pc, #152]	; (80007d4 <main+0x244>)
 800073c:	2200      	movs	r2, #0
 800073e:	801a      	strh	r2, [r3, #0]
			  break;
 8000740:	e03b      	b.n	80007ba <main+0x22a>
		  case 3:
			  if(btn == BTN_OK){
 8000742:	4b30      	ldr	r3, [pc, #192]	; (8000804 <main+0x274>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d103      	bne.n	8000752 <main+0x1c2>
				  state = 31;
 800074a:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <main+0x244>)
 800074c:	221f      	movs	r2, #31
 800074e:	801a      	strh	r2, [r3, #0]
			  } else if (btn == BTN_DOWN){
				  state = 2;
			  } else {
				  state = 0;
			  }
			  break;
 8000750:	e033      	b.n	80007ba <main+0x22a>
			  } else if (btn == BTN_UP){
 8000752:	4b2c      	ldr	r3, [pc, #176]	; (8000804 <main+0x274>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d103      	bne.n	8000762 <main+0x1d2>
				  state = 1;
 800075a:	4b1e      	ldr	r3, [pc, #120]	; (80007d4 <main+0x244>)
 800075c:	2201      	movs	r2, #1
 800075e:	801a      	strh	r2, [r3, #0]
			  break;
 8000760:	e02b      	b.n	80007ba <main+0x22a>
			  } else if (btn == BTN_DOWN){
 8000762:	4b28      	ldr	r3, [pc, #160]	; (8000804 <main+0x274>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b02      	cmp	r3, #2
 8000768:	d103      	bne.n	8000772 <main+0x1e2>
				  state = 2;
 800076a:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <main+0x244>)
 800076c:	2202      	movs	r2, #2
 800076e:	801a      	strh	r2, [r3, #0]
			  break;
 8000770:	e023      	b.n	80007ba <main+0x22a>
				  state = 0;
 8000772:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <main+0x244>)
 8000774:	2200      	movs	r2, #0
 8000776:	801a      	strh	r2, [r3, #0]
			  break;
 8000778:	e01f      	b.n	80007ba <main+0x22a>
		  case 31:
			  if(btn == BTN_OK){
 800077a:	4b22      	ldr	r3, [pc, #136]	; (8000804 <main+0x274>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d103      	bne.n	800078a <main+0x1fa>
				  state = 3;
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <main+0x244>)
 8000784:	2203      	movs	r2, #3
 8000786:	801a      	strh	r2, [r3, #0]
			  } else if (btn == BTN_DOWN){
				  state = 3;
			  } else {
				  state = 0;
			  }
			  break;
 8000788:	e017      	b.n	80007ba <main+0x22a>
			  } else if (btn == BTN_UP){
 800078a:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <main+0x274>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2b01      	cmp	r3, #1
 8000790:	d103      	bne.n	800079a <main+0x20a>
				  state = 3;
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <main+0x244>)
 8000794:	2203      	movs	r2, #3
 8000796:	801a      	strh	r2, [r3, #0]
			  break;
 8000798:	e00f      	b.n	80007ba <main+0x22a>
			  } else if (btn == BTN_DOWN){
 800079a:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <main+0x274>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b02      	cmp	r3, #2
 80007a0:	d103      	bne.n	80007aa <main+0x21a>
				  state = 3;
 80007a2:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <main+0x244>)
 80007a4:	2203      	movs	r2, #3
 80007a6:	801a      	strh	r2, [r3, #0]
			  break;
 80007a8:	e007      	b.n	80007ba <main+0x22a>
				  state = 0;
 80007aa:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <main+0x244>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	801a      	strh	r2, [r3, #0]
			  break;
 80007b0:	e003      	b.n	80007ba <main+0x22a>
		  default:
			  state = 0;
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <main+0x244>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	801a      	strh	r2, [r3, #0]
			  break;
 80007b8:	46c0      	nop			; (mov r8, r8)
		  }

		  btn = BTN_NONE;
 80007ba:	4b12      	ldr	r3, [pc, #72]	; (8000804 <main+0x274>)
 80007bc:	2203      	movs	r2, #3
 80007be:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin);
 80007c0:	2380      	movs	r3, #128	; 0x80
 80007c2:	021a      	lsls	r2, r3, #8
 80007c4:	23a0      	movs	r3, #160	; 0xa0
 80007c6:	05db      	lsls	r3, r3, #23
 80007c8:	0011      	movs	r1, r2
 80007ca:	0018      	movs	r0, r3
 80007cc:	f001 fe9b 	bl	8002506 <HAL_GPIO_TogglePin>
	  switch(state){
 80007d0:	e6f1      	b.n	80005b6 <main+0x26>
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	200001f0 	.word	0x200001f0
 80007d8:	0800597c 	.word	0x0800597c
 80007dc:	20000008 	.word	0x20000008
 80007e0:	08005910 	.word	0x08005910
 80007e4:	08005918 	.word	0x08005918
 80007e8:	08005920 	.word	0x08005920
 80007ec:	08005928 	.word	0x08005928
 80007f0:	08005930 	.word	0x08005930
 80007f4:	200000fc 	.word	0x200000fc
 80007f8:	200001f2 	.word	0x200001f2
 80007fc:	3dcccccd 	.word	0x3dcccccd
 8000800:	08005938 	.word	0x08005938
 8000804:	20000000 	.word	0x20000000
 8000808:	080059fc 	.word	0x080059fc

0800080c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800080c:	b590      	push	{r4, r7, lr}
 800080e:	b093      	sub	sp, #76	; 0x4c
 8000810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000812:	2414      	movs	r4, #20
 8000814:	193b      	adds	r3, r7, r4
 8000816:	0018      	movs	r0, r3
 8000818:	2334      	movs	r3, #52	; 0x34
 800081a:	001a      	movs	r2, r3
 800081c:	2100      	movs	r1, #0
 800081e:	f004 fc02 	bl	8005026 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	0018      	movs	r0, r3
 8000826:	2310      	movs	r3, #16
 8000828:	001a      	movs	r2, r3
 800082a:	2100      	movs	r1, #0
 800082c:	f004 fbfb 	bl	8005026 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000830:	2380      	movs	r3, #128	; 0x80
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	0018      	movs	r0, r3
 8000836:	f002 fd21 	bl	800327c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800083a:	193b      	adds	r3, r7, r4
 800083c:	2202      	movs	r2, #2
 800083e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000840:	193b      	adds	r3, r7, r4
 8000842:	2280      	movs	r2, #128	; 0x80
 8000844:	0052      	lsls	r2, r2, #1
 8000846:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000848:	193b      	adds	r3, r7, r4
 800084a:	2200      	movs	r2, #0
 800084c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800084e:	193b      	adds	r3, r7, r4
 8000850:	2240      	movs	r2, #64	; 0x40
 8000852:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000854:	193b      	adds	r3, r7, r4
 8000856:	2200      	movs	r2, #0
 8000858:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085a:	193b      	adds	r3, r7, r4
 800085c:	0018      	movs	r0, r3
 800085e:	f002 fd59 	bl	8003314 <HAL_RCC_OscConfig>
 8000862:	1e03      	subs	r3, r0, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000866:	f000 fa69 	bl	8000d3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2207      	movs	r2, #7
 800086e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	2200      	movs	r2, #0
 8000874:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	2100      	movs	r1, #0
 8000886:	0018      	movs	r0, r3
 8000888:	f003 f854 	bl	8003934 <HAL_RCC_ClockConfig>
 800088c:	1e03      	subs	r3, r0, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000890:	f000 fa54 	bl	8000d3c <Error_Handler>
  }
}
 8000894:	46c0      	nop			; (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	b013      	add	sp, #76	; 0x4c
 800089a:	bd90      	pop	{r4, r7, pc}

0800089c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	0018      	movs	r0, r3
 80008a6:	230c      	movs	r3, #12
 80008a8:	001a      	movs	r2, r3
 80008aa:	2100      	movs	r1, #0
 80008ac:	f004 fbbb 	bl	8005026 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008b0:	4b36      	ldr	r3, [pc, #216]	; (800098c <MX_ADC1_Init+0xf0>)
 80008b2:	4a37      	ldr	r2, [pc, #220]	; (8000990 <MX_ADC1_Init+0xf4>)
 80008b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008b6:	4b35      	ldr	r3, [pc, #212]	; (800098c <MX_ADC1_Init+0xf0>)
 80008b8:	2280      	movs	r2, #128	; 0x80
 80008ba:	05d2      	lsls	r2, r2, #23
 80008bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008be:	4b33      	ldr	r3, [pc, #204]	; (800098c <MX_ADC1_Init+0xf0>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008c4:	4b31      	ldr	r3, [pc, #196]	; (800098c <MX_ADC1_Init+0xf0>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008ca:	4b30      	ldr	r3, [pc, #192]	; (800098c <MX_ADC1_Init+0xf0>)
 80008cc:	2280      	movs	r2, #128	; 0x80
 80008ce:	0392      	lsls	r2, r2, #14
 80008d0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008d2:	4b2e      	ldr	r3, [pc, #184]	; (800098c <MX_ADC1_Init+0xf0>)
 80008d4:	2204      	movs	r2, #4
 80008d6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008d8:	4b2c      	ldr	r3, [pc, #176]	; (800098c <MX_ADC1_Init+0xf0>)
 80008da:	2200      	movs	r2, #0
 80008dc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80008de:	4b2b      	ldr	r3, [pc, #172]	; (800098c <MX_ADC1_Init+0xf0>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008e4:	4b29      	ldr	r3, [pc, #164]	; (800098c <MX_ADC1_Init+0xf0>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 2;
 80008ea:	4b28      	ldr	r3, [pc, #160]	; (800098c <MX_ADC1_Init+0xf0>)
 80008ec:	2202      	movs	r2, #2
 80008ee:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008f0:	4b26      	ldr	r3, [pc, #152]	; (800098c <MX_ADC1_Init+0xf0>)
 80008f2:	2220      	movs	r2, #32
 80008f4:	2100      	movs	r1, #0
 80008f6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008f8:	4b24      	ldr	r3, [pc, #144]	; (800098c <MX_ADC1_Init+0xf0>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008fe:	4b23      	ldr	r3, [pc, #140]	; (800098c <MX_ADC1_Init+0xf0>)
 8000900:	2200      	movs	r2, #0
 8000902:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000904:	4b21      	ldr	r3, [pc, #132]	; (800098c <MX_ADC1_Init+0xf0>)
 8000906:	222c      	movs	r2, #44	; 0x2c
 8000908:	2100      	movs	r1, #0
 800090a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800090c:	4b1f      	ldr	r3, [pc, #124]	; (800098c <MX_ADC1_Init+0xf0>)
 800090e:	2200      	movs	r2, #0
 8000910:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000912:	4b1e      	ldr	r3, [pc, #120]	; (800098c <MX_ADC1_Init+0xf0>)
 8000914:	2207      	movs	r2, #7
 8000916:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000918:	4b1c      	ldr	r3, [pc, #112]	; (800098c <MX_ADC1_Init+0xf0>)
 800091a:	2200      	movs	r2, #0
 800091c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800091e:	4b1b      	ldr	r3, [pc, #108]	; (800098c <MX_ADC1_Init+0xf0>)
 8000920:	223c      	movs	r2, #60	; 0x3c
 8000922:	2100      	movs	r1, #0
 8000924:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000926:	4b19      	ldr	r3, [pc, #100]	; (800098c <MX_ADC1_Init+0xf0>)
 8000928:	2200      	movs	r2, #0
 800092a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800092c:	4b17      	ldr	r3, [pc, #92]	; (800098c <MX_ADC1_Init+0xf0>)
 800092e:	0018      	movs	r0, r3
 8000930:	f001 f83a 	bl	80019a8 <HAL_ADC_Init>
 8000934:	1e03      	subs	r3, r0, #0
 8000936:	d001      	beq.n	800093c <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8000938:	f000 fa00 	bl	8000d3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	4a15      	ldr	r2, [pc, #84]	; (8000994 <MX_ADC1_Init+0xf8>)
 8000940:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2200      	movs	r2, #0
 8000946:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800094e:	1d3a      	adds	r2, r7, #4
 8000950:	4b0e      	ldr	r3, [pc, #56]	; (800098c <MX_ADC1_Init+0xf0>)
 8000952:	0011      	movs	r1, r2
 8000954:	0018      	movs	r0, r3
 8000956:	f001 f9cf 	bl	8001cf8 <HAL_ADC_ConfigChannel>
 800095a:	1e03      	subs	r3, r0, #0
 800095c:	d001      	beq.n	8000962 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800095e:	f000 f9ed 	bl	8000d3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	4a0c      	ldr	r2, [pc, #48]	; (8000998 <MX_ADC1_Init+0xfc>)
 8000966:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	2204      	movs	r2, #4
 800096c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800096e:	1d3a      	adds	r2, r7, #4
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <MX_ADC1_Init+0xf0>)
 8000972:	0011      	movs	r1, r2
 8000974:	0018      	movs	r0, r3
 8000976:	f001 f9bf 	bl	8001cf8 <HAL_ADC_ConfigChannel>
 800097a:	1e03      	subs	r3, r0, #0
 800097c:	d001      	beq.n	8000982 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800097e:	f000 f9dd 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	46bd      	mov	sp, r7
 8000986:	b004      	add	sp, #16
 8000988:	bd80      	pop	{r7, pc}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	20000098 	.word	0x20000098
 8000990:	40012400 	.word	0x40012400
 8000994:	b4002000 	.word	0xb4002000
 8000998:	b0001000 	.word	0xb0001000

0800099c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009a0:	4b1b      	ldr	r3, [pc, #108]	; (8000a10 <MX_I2C1_Init+0x74>)
 80009a2:	4a1c      	ldr	r2, [pc, #112]	; (8000a14 <MX_I2C1_Init+0x78>)
 80009a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80009a6:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <MX_I2C1_Init+0x74>)
 80009a8:	4a1b      	ldr	r2, [pc, #108]	; (8000a18 <MX_I2C1_Init+0x7c>)
 80009aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 16;
 80009ac:	4b18      	ldr	r3, [pc, #96]	; (8000a10 <MX_I2C1_Init+0x74>)
 80009ae:	2210      	movs	r2, #16
 80009b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009b2:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <MX_I2C1_Init+0x74>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b8:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <MX_I2C1_Init+0x74>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009be:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <MX_I2C1_Init+0x74>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009c4:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <MX_I2C1_Init+0x74>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009ca:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <MX_I2C1_Init+0x74>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009d0:	4b0f      	ldr	r3, [pc, #60]	; (8000a10 <MX_I2C1_Init+0x74>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <MX_I2C1_Init+0x74>)
 80009d8:	0018      	movs	r0, r3
 80009da:	f001 fde3 	bl	80025a4 <HAL_I2C_Init>
 80009de:	1e03      	subs	r3, r0, #0
 80009e0:	d001      	beq.n	80009e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009e2:	f000 f9ab 	bl	8000d3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009e6:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <MX_I2C1_Init+0x74>)
 80009e8:	2100      	movs	r1, #0
 80009ea:	0018      	movs	r0, r3
 80009ec:	f002 fbae 	bl	800314c <HAL_I2CEx_ConfigAnalogFilter>
 80009f0:	1e03      	subs	r3, r0, #0
 80009f2:	d001      	beq.n	80009f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009f4:	f000 f9a2 	bl	8000d3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009f8:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <MX_I2C1_Init+0x74>)
 80009fa:	2100      	movs	r1, #0
 80009fc:	0018      	movs	r0, r3
 80009fe:	f002 fbf1 	bl	80031e4 <HAL_I2CEx_ConfigDigitalFilter>
 8000a02:	1e03      	subs	r3, r0, #0
 8000a04:	d001      	beq.n	8000a0a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a06:	f000 f999 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	200000fc 	.word	0x200000fc
 8000a14:	40005400 	.word	0x40005400
 8000a18:	00303d5b 	.word	0x00303d5b

08000a1c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a20:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <MX_I2C2_Init+0x74>)
 8000a22:	4a1c      	ldr	r2, [pc, #112]	; (8000a94 <MX_I2C2_Init+0x78>)
 8000a24:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0010061A;
 8000a26:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <MX_I2C2_Init+0x74>)
 8000a28:	4a1b      	ldr	r2, [pc, #108]	; (8000a98 <MX_I2C2_Init+0x7c>)
 8000a2a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a2c:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <MX_I2C2_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a32:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <MX_I2C2_Init+0x74>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a38:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <MX_I2C2_Init+0x74>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a3e:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <MX_I2C2_Init+0x74>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <MX_I2C2_Init+0x74>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <MX_I2C2_Init+0x74>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a50:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <MX_I2C2_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <MX_I2C2_Init+0x74>)
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f001 fda3 	bl	80025a4 <HAL_I2C_Init>
 8000a5e:	1e03      	subs	r3, r0, #0
 8000a60:	d001      	beq.n	8000a66 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000a62:	f000 f96b 	bl	8000d3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a66:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <MX_I2C2_Init+0x74>)
 8000a68:	2100      	movs	r1, #0
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f002 fb6e 	bl	800314c <HAL_I2CEx_ConfigAnalogFilter>
 8000a70:	1e03      	subs	r3, r0, #0
 8000a72:	d001      	beq.n	8000a78 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000a74:	f000 f962 	bl	8000d3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <MX_I2C2_Init+0x74>)
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f002 fbb1 	bl	80031e4 <HAL_I2CEx_ConfigDigitalFilter>
 8000a82:	1e03      	subs	r3, r0, #0
 8000a84:	d001      	beq.n	8000a8a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000a86:	f000 f959 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000150 	.word	0x20000150
 8000a94:	40005800 	.word	0x40005800
 8000a98:	0010061a 	.word	0x0010061a

08000a9c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08e      	sub	sp, #56	; 0x38
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aa2:	2328      	movs	r3, #40	; 0x28
 8000aa4:	18fb      	adds	r3, r7, r3
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	2310      	movs	r3, #16
 8000aaa:	001a      	movs	r2, r3
 8000aac:	2100      	movs	r1, #0
 8000aae:	f004 faba 	bl	8005026 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab2:	231c      	movs	r3, #28
 8000ab4:	18fb      	adds	r3, r7, r3
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	230c      	movs	r3, #12
 8000aba:	001a      	movs	r2, r3
 8000abc:	2100      	movs	r1, #0
 8000abe:	f004 fab2 	bl	8005026 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ac2:	003b      	movs	r3, r7
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	231c      	movs	r3, #28
 8000ac8:	001a      	movs	r2, r3
 8000aca:	2100      	movs	r1, #0
 8000acc:	f004 faab 	bl	8005026 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ad0:	4b2f      	ldr	r3, [pc, #188]	; (8000b90 <MX_TIM3_Init+0xf4>)
 8000ad2:	4a30      	ldr	r2, [pc, #192]	; (8000b94 <MX_TIM3_Init+0xf8>)
 8000ad4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ad6:	4b2e      	ldr	r3, [pc, #184]	; (8000b90 <MX_TIM3_Init+0xf4>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000adc:	4b2c      	ldr	r3, [pc, #176]	; (8000b90 <MX_TIM3_Init+0xf4>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ae2:	4b2b      	ldr	r3, [pc, #172]	; (8000b90 <MX_TIM3_Init+0xf4>)
 8000ae4:	4a2c      	ldr	r2, [pc, #176]	; (8000b98 <MX_TIM3_Init+0xfc>)
 8000ae6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae8:	4b29      	ldr	r3, [pc, #164]	; (8000b90 <MX_TIM3_Init+0xf4>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aee:	4b28      	ldr	r3, [pc, #160]	; (8000b90 <MX_TIM3_Init+0xf4>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000af4:	4b26      	ldr	r3, [pc, #152]	; (8000b90 <MX_TIM3_Init+0xf4>)
 8000af6:	0018      	movs	r0, r3
 8000af8:	f003 fa16 	bl	8003f28 <HAL_TIM_Base_Init>
 8000afc:	1e03      	subs	r3, r0, #0
 8000afe:	d001      	beq.n	8000b04 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000b00:	f000 f91c 	bl	8000d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b04:	2128      	movs	r1, #40	; 0x28
 8000b06:	187b      	adds	r3, r7, r1
 8000b08:	2280      	movs	r2, #128	; 0x80
 8000b0a:	0152      	lsls	r2, r2, #5
 8000b0c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b0e:	187a      	adds	r2, r7, r1
 8000b10:	4b1f      	ldr	r3, [pc, #124]	; (8000b90 <MX_TIM3_Init+0xf4>)
 8000b12:	0011      	movs	r1, r2
 8000b14:	0018      	movs	r0, r3
 8000b16:	f003 fd3f 	bl	8004598 <HAL_TIM_ConfigClockSource>
 8000b1a:	1e03      	subs	r3, r0, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000b1e:	f000 f90d 	bl	8000d3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b22:	4b1b      	ldr	r3, [pc, #108]	; (8000b90 <MX_TIM3_Init+0xf4>)
 8000b24:	0018      	movs	r0, r3
 8000b26:	f003 faa5 	bl	8004074 <HAL_TIM_PWM_Init>
 8000b2a:	1e03      	subs	r3, r0, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000b2e:	f000 f905 	bl	8000d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b32:	211c      	movs	r1, #28
 8000b34:	187b      	adds	r3, r7, r1
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b3a:	187b      	adds	r3, r7, r1
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b40:	187a      	adds	r2, r7, r1
 8000b42:	4b13      	ldr	r3, [pc, #76]	; (8000b90 <MX_TIM3_Init+0xf4>)
 8000b44:	0011      	movs	r1, r2
 8000b46:	0018      	movs	r0, r3
 8000b48:	f004 f9c0 	bl	8004ecc <HAL_TIMEx_MasterConfigSynchronization>
 8000b4c:	1e03      	subs	r3, r0, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000b50:	f000 f8f4 	bl	8000d3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b54:	003b      	movs	r3, r7
 8000b56:	2260      	movs	r2, #96	; 0x60
 8000b58:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000b5a:	003b      	movs	r3, r7
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b60:	003b      	movs	r3, r7
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b66:	003b      	movs	r3, r7
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b6c:	0039      	movs	r1, r7
 8000b6e:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <MX_TIM3_Init+0xf4>)
 8000b70:	2204      	movs	r2, #4
 8000b72:	0018      	movs	r0, r3
 8000b74:	f003 fc10 	bl	8004398 <HAL_TIM_PWM_ConfigChannel>
 8000b78:	1e03      	subs	r3, r0, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000b7c:	f000 f8de 	bl	8000d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <MX_TIM3_Init+0xf4>)
 8000b82:	0018      	movs	r0, r3
 8000b84:	f000 f9de 	bl	8000f44 <HAL_TIM_MspPostInit>

}
 8000b88:	46c0      	nop			; (mov r8, r8)
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	b00e      	add	sp, #56	; 0x38
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	200001a4 	.word	0x200001a4
 8000b94:	40000400 	.word	0x40000400
 8000b98:	0000ffff 	.word	0x0000ffff

08000b9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b089      	sub	sp, #36	; 0x24
 8000ba0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba2:	240c      	movs	r4, #12
 8000ba4:	193b      	adds	r3, r7, r4
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	2314      	movs	r3, #20
 8000baa:	001a      	movs	r2, r3
 8000bac:	2100      	movs	r1, #0
 8000bae:	f004 fa3a 	bl	8005026 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb2:	4b35      	ldr	r3, [pc, #212]	; (8000c88 <MX_GPIO_Init+0xec>)
 8000bb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bb6:	4b34      	ldr	r3, [pc, #208]	; (8000c88 <MX_GPIO_Init+0xec>)
 8000bb8:	2102      	movs	r1, #2
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	635a      	str	r2, [r3, #52]	; 0x34
 8000bbe:	4b32      	ldr	r3, [pc, #200]	; (8000c88 <MX_GPIO_Init+0xec>)
 8000bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bca:	4b2f      	ldr	r3, [pc, #188]	; (8000c88 <MX_GPIO_Init+0xec>)
 8000bcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bce:	4b2e      	ldr	r3, [pc, #184]	; (8000c88 <MX_GPIO_Init+0xec>)
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	635a      	str	r2, [r3, #52]	; 0x34
 8000bd6:	4b2c      	ldr	r3, [pc, #176]	; (8000c88 <MX_GPIO_Init+0xec>)
 8000bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bda:	2201      	movs	r2, #1
 8000bdc:	4013      	ands	r3, r2
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_RESET);
 8000be2:	2380      	movs	r3, #128	; 0x80
 8000be4:	0219      	lsls	r1, r3, #8
 8000be6:	23a0      	movs	r3, #160	; 0xa0
 8000be8:	05db      	lsls	r3, r3, #23
 8000bea:	2200      	movs	r2, #0
 8000bec:	0018      	movs	r0, r3
 8000bee:	f001 fc6d 	bl	80024cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_BTN_OK_Pin */
  GPIO_InitStruct.Pin = GPIO_BTN_OK_Pin;
 8000bf2:	193b      	adds	r3, r7, r4
 8000bf4:	2204      	movs	r2, #4
 8000bf6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bf8:	193b      	adds	r3, r7, r4
 8000bfa:	2284      	movs	r2, #132	; 0x84
 8000bfc:	0392      	lsls	r2, r2, #14
 8000bfe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	193b      	adds	r3, r7, r4
 8000c02:	2200      	movs	r2, #0
 8000c04:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIO_BTN_OK_GPIO_Port, &GPIO_InitStruct);
 8000c06:	193b      	adds	r3, r7, r4
 8000c08:	4a20      	ldr	r2, [pc, #128]	; (8000c8c <MX_GPIO_Init+0xf0>)
 8000c0a:	0019      	movs	r1, r3
 8000c0c:	0010      	movs	r0, r2
 8000c0e:	f001 faf9 	bl	8002204 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_BTN_UP_Pin GPIO_BTN_DOWN_Pin */
  GPIO_InitStruct.Pin = GPIO_BTN_UP_Pin|GPIO_BTN_DOWN_Pin;
 8000c12:	193b      	adds	r3, r7, r4
 8000c14:	22c0      	movs	r2, #192	; 0xc0
 8000c16:	0092      	lsls	r2, r2, #2
 8000c18:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c1a:	193b      	adds	r3, r7, r4
 8000c1c:	2284      	movs	r2, #132	; 0x84
 8000c1e:	0392      	lsls	r2, r2, #14
 8000c20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	193b      	adds	r3, r7, r4
 8000c24:	2200      	movs	r2, #0
 8000c26:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c28:	193a      	adds	r2, r7, r4
 8000c2a:	23a0      	movs	r3, #160	; 0xa0
 8000c2c:	05db      	lsls	r3, r3, #23
 8000c2e:	0011      	movs	r1, r2
 8000c30:	0018      	movs	r0, r3
 8000c32:	f001 fae7 	bl	8002204 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_LED_Pin;
 8000c36:	0021      	movs	r1, r4
 8000c38:	187b      	adds	r3, r7, r1
 8000c3a:	2280      	movs	r2, #128	; 0x80
 8000c3c:	0212      	lsls	r2, r2, #8
 8000c3e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c40:	187b      	adds	r3, r7, r1
 8000c42:	2201      	movs	r2, #1
 8000c44:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	187b      	adds	r3, r7, r1
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 8000c52:	187a      	adds	r2, r7, r1
 8000c54:	23a0      	movs	r3, #160	; 0xa0
 8000c56:	05db      	lsls	r3, r3, #23
 8000c58:	0011      	movs	r1, r2
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f001 fad2 	bl	8002204 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2100      	movs	r1, #0
 8000c64:	2006      	movs	r0, #6
 8000c66:	f001 faa7 	bl	80021b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000c6a:	2006      	movs	r0, #6
 8000c6c:	f001 fab9 	bl	80021e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2100      	movs	r1, #0
 8000c74:	2007      	movs	r0, #7
 8000c76:	f001 fa9f 	bl	80021b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000c7a:	2007      	movs	r0, #7
 8000c7c:	f001 fab1 	bl	80021e2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c80:	46c0      	nop			; (mov r8, r8)
 8000c82:	46bd      	mov	sp, r7
 8000c84:	b009      	add	sp, #36	; 0x24
 8000c86:	bd90      	pop	{r4, r7, pc}
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	50000400 	.word	0x50000400

08000c90 <ssd1306_WriteScreen>:

/* USER CODE BEGIN 4 */
static void ssd1306_WriteScreen(char* str, FontDef Font){
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	60f8      	str	r0, [r7, #12]
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	6019      	str	r1, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
	  ssd1306_Fill(Black);
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f000 fb54 	bl	800134c <ssd1306_Fill>
	  ssd1306_SetCursor(32, 0);
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	2020      	movs	r0, #32
 8000ca8:	f000 fcc8 	bl	800163c <ssd1306_SetCursor>
	  ssd1306_WriteString(str, Font, White);
 8000cac:	1d3a      	adds	r2, r7, #4
 8000cae:	68f8      	ldr	r0, [r7, #12]
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	6811      	ldr	r1, [r2, #0]
 8000cb4:	6852      	ldr	r2, [r2, #4]
 8000cb6:	f000 fc97 	bl	80015e8 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 8000cba:	f000 fb6b 	bl	8001394 <ssd1306_UpdateScreen>
}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	b004      	add	sp, #16
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	0002      	movs	r2, r0
 8000cd0:	1dbb      	adds	r3, r7, #6
 8000cd2:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == GPIO_BTN_OK_Pin) {
 8000cd4:	1dbb      	adds	r3, r7, #6
 8000cd6:	881b      	ldrh	r3, [r3, #0]
 8000cd8:	2b04      	cmp	r3, #4
 8000cda:	d103      	bne.n	8000ce4 <HAL_GPIO_EXTI_Falling_Callback+0x1c>
		btn = BTN_OK;
 8000cdc:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
	} else if (GPIO_Pin == GPIO_BTN_UP_Pin){
		btn = BTN_UP;
	} else if (GPIO_Pin == GPIO_BTN_DOWN_Pin) {
		btn = BTN_DOWN;
	}
}
 8000ce2:	e012      	b.n	8000d0a <HAL_GPIO_EXTI_Falling_Callback+0x42>
	} else if (GPIO_Pin == GPIO_BTN_UP_Pin){
 8000ce4:	1dbb      	adds	r3, r7, #6
 8000ce6:	881a      	ldrh	r2, [r3, #0]
 8000ce8:	2380      	movs	r3, #128	; 0x80
 8000cea:	005b      	lsls	r3, r3, #1
 8000cec:	429a      	cmp	r2, r3
 8000cee:	d103      	bne.n	8000cf8 <HAL_GPIO_EXTI_Falling_Callback+0x30>
		btn = BTN_UP;
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	701a      	strb	r2, [r3, #0]
}
 8000cf6:	e008      	b.n	8000d0a <HAL_GPIO_EXTI_Falling_Callback+0x42>
	} else if (GPIO_Pin == GPIO_BTN_DOWN_Pin) {
 8000cf8:	1dbb      	adds	r3, r7, #6
 8000cfa:	881a      	ldrh	r2, [r3, #0]
 8000cfc:	2380      	movs	r3, #128	; 0x80
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d102      	bne.n	8000d0a <HAL_GPIO_EXTI_Falling_Callback+0x42>
		btn = BTN_DOWN;
 8000d04:	4b03      	ldr	r3, [pc, #12]	; (8000d14 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 8000d06:	2202      	movs	r2, #2
 8000d08:	701a      	strb	r2, [r3, #0]
}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	b002      	add	sp, #8
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	20000000 	.word	0x20000000

08000d18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d101      	bne.n	8000d2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d2a:	f000 fcff 	bl	800172c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	46bd      	mov	sp, r7
 8000d32:	b002      	add	sp, #8
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	40014800 	.word	0x40014800

08000d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d40:	b672      	cpsid	i
}
 8000d42:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <Error_Handler+0x8>
	...

08000d48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <HAL_MspInit+0x44>)
 8000d50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <HAL_MspInit+0x44>)
 8000d54:	2101      	movs	r1, #1
 8000d56:	430a      	orrs	r2, r1
 8000d58:	641a      	str	r2, [r3, #64]	; 0x40
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <HAL_MspInit+0x44>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	2201      	movs	r2, #1
 8000d60:	4013      	ands	r3, r2
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <HAL_MspInit+0x44>)
 8000d68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d6a:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <HAL_MspInit+0x44>)
 8000d6c:	2180      	movs	r1, #128	; 0x80
 8000d6e:	0549      	lsls	r1, r1, #21
 8000d70:	430a      	orrs	r2, r1
 8000d72:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <HAL_MspInit+0x44>)
 8000d76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d78:	2380      	movs	r3, #128	; 0x80
 8000d7a:	055b      	lsls	r3, r3, #21
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	46bd      	mov	sp, r7
 8000d86:	b002      	add	sp, #8
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	40021000 	.word	0x40021000

08000d90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <HAL_ADC_MspInit+0x38>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d10d      	bne.n	8000dbe <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000da2:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <HAL_ADC_MspInit+0x3c>)
 8000da4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000da6:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <HAL_ADC_MspInit+0x3c>)
 8000da8:	2180      	movs	r1, #128	; 0x80
 8000daa:	0349      	lsls	r1, r1, #13
 8000dac:	430a      	orrs	r2, r1
 8000dae:	641a      	str	r2, [r3, #64]	; 0x40
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_ADC_MspInit+0x3c>)
 8000db2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000db4:	2380      	movs	r3, #128	; 0x80
 8000db6:	035b      	lsls	r3, r3, #13
 8000db8:	4013      	ands	r3, r2
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b004      	add	sp, #16
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	40012400 	.word	0x40012400
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b093      	sub	sp, #76	; 0x4c
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	2334      	movs	r3, #52	; 0x34
 8000dda:	18fb      	adds	r3, r7, r3
 8000ddc:	0018      	movs	r0, r3
 8000dde:	2314      	movs	r3, #20
 8000de0:	001a      	movs	r2, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	f004 f91f 	bl	8005026 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000de8:	241c      	movs	r4, #28
 8000dea:	193b      	adds	r3, r7, r4
 8000dec:	0018      	movs	r0, r3
 8000dee:	2318      	movs	r3, #24
 8000df0:	001a      	movs	r2, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	f004 f917 	bl	8005026 <memset>
  if(hi2c->Instance==I2C1)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a3e      	ldr	r2, [pc, #248]	; (8000ef8 <HAL_I2C_MspInit+0x128>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d13f      	bne.n	8000e82 <HAL_I2C_MspInit+0xb2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e02:	193b      	adds	r3, r7, r4
 8000e04:	2220      	movs	r2, #32
 8000e06:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e08:	193b      	adds	r3, r7, r4
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e0e:	193b      	adds	r3, r7, r4
 8000e10:	0018      	movs	r0, r3
 8000e12:	f002 ff63 	bl	8003cdc <HAL_RCCEx_PeriphCLKConfig>
 8000e16:	1e03      	subs	r3, r0, #0
 8000e18:	d001      	beq.n	8000e1e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000e1a:	f7ff ff8f 	bl	8000d3c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1e:	4b37      	ldr	r3, [pc, #220]	; (8000efc <HAL_I2C_MspInit+0x12c>)
 8000e20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e22:	4b36      	ldr	r3, [pc, #216]	; (8000efc <HAL_I2C_MspInit+0x12c>)
 8000e24:	2102      	movs	r1, #2
 8000e26:	430a      	orrs	r2, r1
 8000e28:	635a      	str	r2, [r3, #52]	; 0x34
 8000e2a:	4b34      	ldr	r3, [pc, #208]	; (8000efc <HAL_I2C_MspInit+0x12c>)
 8000e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e2e:	2202      	movs	r2, #2
 8000e30:	4013      	ands	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
 8000e34:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C_PD_SDA_Pin|I2C_PD_SCL_Pin;
 8000e36:	2134      	movs	r1, #52	; 0x34
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	22c0      	movs	r2, #192	; 0xc0
 8000e3c:	0092      	lsls	r2, r2, #2
 8000e3e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e40:	187b      	adds	r3, r7, r1
 8000e42:	2212      	movs	r2, #18
 8000e44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	187b      	adds	r3, r7, r1
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	187b      	adds	r3, r7, r1
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000e52:	187b      	adds	r3, r7, r1
 8000e54:	2206      	movs	r2, #6
 8000e56:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e58:	187b      	adds	r3, r7, r1
 8000e5a:	4a29      	ldr	r2, [pc, #164]	; (8000f00 <HAL_I2C_MspInit+0x130>)
 8000e5c:	0019      	movs	r1, r3
 8000e5e:	0010      	movs	r0, r2
 8000e60:	f001 f9d0 	bl	8002204 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e64:	4b25      	ldr	r3, [pc, #148]	; (8000efc <HAL_I2C_MspInit+0x12c>)
 8000e66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e68:	4b24      	ldr	r3, [pc, #144]	; (8000efc <HAL_I2C_MspInit+0x12c>)
 8000e6a:	2180      	movs	r1, #128	; 0x80
 8000e6c:	0389      	lsls	r1, r1, #14
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e72:	4b22      	ldr	r3, [pc, #136]	; (8000efc <HAL_I2C_MspInit+0x12c>)
 8000e74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e76:	2380      	movs	r3, #128	; 0x80
 8000e78:	039b      	lsls	r3, r3, #14
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	617b      	str	r3, [r7, #20]
 8000e7e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e80:	e036      	b.n	8000ef0 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C2)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a1f      	ldr	r2, [pc, #124]	; (8000f04 <HAL_I2C_MspInit+0x134>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d131      	bne.n	8000ef0 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8c:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <HAL_I2C_MspInit+0x12c>)
 8000e8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e90:	4b1a      	ldr	r3, [pc, #104]	; (8000efc <HAL_I2C_MspInit+0x12c>)
 8000e92:	2101      	movs	r1, #1
 8000e94:	430a      	orrs	r2, r1
 8000e96:	635a      	str	r2, [r3, #52]	; 0x34
 8000e98:	4b18      	ldr	r3, [pc, #96]	; (8000efc <HAL_I2C_MspInit+0x12c>)
 8000e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C_OLED_SCL_Pin|I2C_OLED_SDA_Pin;
 8000ea4:	2134      	movs	r1, #52	; 0x34
 8000ea6:	187b      	adds	r3, r7, r1
 8000ea8:	22c0      	movs	r2, #192	; 0xc0
 8000eaa:	0152      	lsls	r2, r2, #5
 8000eac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000eae:	187b      	adds	r3, r7, r1
 8000eb0:	2212      	movs	r2, #18
 8000eb2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	187b      	adds	r3, r7, r1
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	187b      	adds	r3, r7, r1
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000ec0:	187b      	adds	r3, r7, r1
 8000ec2:	2206      	movs	r2, #6
 8000ec4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec6:	187a      	adds	r2, r7, r1
 8000ec8:	23a0      	movs	r3, #160	; 0xa0
 8000eca:	05db      	lsls	r3, r3, #23
 8000ecc:	0011      	movs	r1, r2
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f001 f998 	bl	8002204 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ed4:	4b09      	ldr	r3, [pc, #36]	; (8000efc <HAL_I2C_MspInit+0x12c>)
 8000ed6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <HAL_I2C_MspInit+0x12c>)
 8000eda:	2180      	movs	r1, #128	; 0x80
 8000edc:	03c9      	lsls	r1, r1, #15
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ee2:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_I2C_MspInit+0x12c>)
 8000ee4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ee6:	2380      	movs	r3, #128	; 0x80
 8000ee8:	03db      	lsls	r3, r3, #15
 8000eea:	4013      	ands	r3, r2
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	68fb      	ldr	r3, [r7, #12]
}
 8000ef0:	46c0      	nop			; (mov r8, r8)
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	b013      	add	sp, #76	; 0x4c
 8000ef6:	bd90      	pop	{r4, r7, pc}
 8000ef8:	40005400 	.word	0x40005400
 8000efc:	40021000 	.word	0x40021000
 8000f00:	50000400 	.word	0x50000400
 8000f04:	40005800 	.word	0x40005800

08000f08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a09      	ldr	r2, [pc, #36]	; (8000f3c <HAL_TIM_Base_MspInit+0x34>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d10b      	bne.n	8000f32 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f1a:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <HAL_TIM_Base_MspInit+0x38>)
 8000f1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f1e:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <HAL_TIM_Base_MspInit+0x38>)
 8000f20:	2102      	movs	r1, #2
 8000f22:	430a      	orrs	r2, r1
 8000f24:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_TIM_Base_MspInit+0x38>)
 8000f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f32:	46c0      	nop			; (mov r8, r8)
 8000f34:	46bd      	mov	sp, r7
 8000f36:	b004      	add	sp, #16
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	46c0      	nop			; (mov r8, r8)
 8000f3c:	40000400 	.word	0x40000400
 8000f40:	40021000 	.word	0x40021000

08000f44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f44:	b590      	push	{r4, r7, lr}
 8000f46:	b089      	sub	sp, #36	; 0x24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	240c      	movs	r4, #12
 8000f4e:	193b      	adds	r3, r7, r4
 8000f50:	0018      	movs	r0, r3
 8000f52:	2314      	movs	r3, #20
 8000f54:	001a      	movs	r2, r3
 8000f56:	2100      	movs	r1, #0
 8000f58:	f004 f865 	bl	8005026 <memset>
  if(htim->Instance==TIM3)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a14      	ldr	r2, [pc, #80]	; (8000fb4 <HAL_TIM_MspPostInit+0x70>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d122      	bne.n	8000fac <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_TIM_MspPostInit+0x74>)
 8000f68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f6a:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <HAL_TIM_MspPostInit+0x74>)
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	635a      	str	r2, [r3, #52]	; 0x34
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_TIM_MspPostInit+0x74>)
 8000f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f76:	2201      	movs	r2, #1
 8000f78:	4013      	ands	r3, r2
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GATE_PWM_Pin;
 8000f7e:	0021      	movs	r1, r4
 8000f80:	187b      	adds	r3, r7, r1
 8000f82:	2280      	movs	r2, #128	; 0x80
 8000f84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	187b      	adds	r3, r7, r1
 8000f88:	2202      	movs	r2, #2
 8000f8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	187b      	adds	r3, r7, r1
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	187b      	adds	r3, r7, r1
 8000f94:	2200      	movs	r2, #0
 8000f96:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000f98:	187b      	adds	r3, r7, r1
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GATE_PWM_GPIO_Port, &GPIO_InitStruct);
 8000f9e:	187a      	adds	r2, r7, r1
 8000fa0:	23a0      	movs	r3, #160	; 0xa0
 8000fa2:	05db      	lsls	r3, r3, #23
 8000fa4:	0011      	movs	r1, r2
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f001 f92c 	bl	8002204 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000fac:	46c0      	nop			; (mov r8, r8)
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	b009      	add	sp, #36	; 0x24
 8000fb2:	bd90      	pop	{r4, r7, pc}
 8000fb4:	40000400 	.word	0x40000400
 8000fb8:	40021000 	.word	0x40021000

08000fbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fbc:	b5b0      	push	{r4, r5, r7, lr}
 8000fbe:	b08c      	sub	sp, #48	; 0x30
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000fc4:	232b      	movs	r3, #43	; 0x2b
 8000fc6:	18fb      	adds	r3, r7, r3
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8000fcc:	4b38      	ldr	r3, [pc, #224]	; (80010b0 <HAL_InitTick+0xf4>)
 8000fce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fd0:	4b37      	ldr	r3, [pc, #220]	; (80010b0 <HAL_InitTick+0xf4>)
 8000fd2:	2180      	movs	r1, #128	; 0x80
 8000fd4:	02c9      	lsls	r1, r1, #11
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	641a      	str	r2, [r3, #64]	; 0x40
 8000fda:	4b35      	ldr	r3, [pc, #212]	; (80010b0 <HAL_InitTick+0xf4>)
 8000fdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fde:	2380      	movs	r3, #128	; 0x80
 8000fe0:	02db      	lsls	r3, r3, #11
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fe8:	230c      	movs	r3, #12
 8000fea:	18fa      	adds	r2, r7, r3
 8000fec:	2410      	movs	r4, #16
 8000fee:	193b      	adds	r3, r7, r4
 8000ff0:	0011      	movs	r1, r2
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f002 fe48 	bl	8003c88 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ff8:	193b      	adds	r3, r7, r4
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM17 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001000:	2b00      	cmp	r3, #0
 8001002:	d104      	bne.n	800100e <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001004:	f002 fe2a 	bl	8003c5c <HAL_RCC_GetPCLK1Freq>
 8001008:	0003      	movs	r3, r0
 800100a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800100c:	e004      	b.n	8001018 <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800100e:	f002 fe25 	bl	8003c5c <HAL_RCC_GetPCLK1Freq>
 8001012:	0003      	movs	r3, r0
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800101a:	4926      	ldr	r1, [pc, #152]	; (80010b4 <HAL_InitTick+0xf8>)
 800101c:	0018      	movs	r0, r3
 800101e:	f7ff f879 	bl	8000114 <__udivsi3>
 8001022:	0003      	movs	r3, r0
 8001024:	3b01      	subs	r3, #1
 8001026:	623b      	str	r3, [r7, #32]

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8001028:	4b23      	ldr	r3, [pc, #140]	; (80010b8 <HAL_InitTick+0xfc>)
 800102a:	4a24      	ldr	r2, [pc, #144]	; (80010bc <HAL_InitTick+0x100>)
 800102c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 800102e:	4b22      	ldr	r3, [pc, #136]	; (80010b8 <HAL_InitTick+0xfc>)
 8001030:	4a23      	ldr	r2, [pc, #140]	; (80010c0 <HAL_InitTick+0x104>)
 8001032:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8001034:	4b20      	ldr	r3, [pc, #128]	; (80010b8 <HAL_InitTick+0xfc>)
 8001036:	6a3a      	ldr	r2, [r7, #32]
 8001038:	605a      	str	r2, [r3, #4]
  htim17.Init.ClockDivision = 0;
 800103a:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <HAL_InitTick+0xfc>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001040:	4b1d      	ldr	r3, [pc, #116]	; (80010b8 <HAL_InitTick+0xfc>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001046:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <HAL_InitTick+0xfc>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 800104c:	252b      	movs	r5, #43	; 0x2b
 800104e:	197c      	adds	r4, r7, r5
 8001050:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <HAL_InitTick+0xfc>)
 8001052:	0018      	movs	r0, r3
 8001054:	f002 ff68 	bl	8003f28 <HAL_TIM_Base_Init>
 8001058:	0003      	movs	r3, r0
 800105a:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 800105c:	197b      	adds	r3, r7, r5
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d11e      	bne.n	80010a2 <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8001064:	197c      	adds	r4, r7, r5
 8001066:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <HAL_InitTick+0xfc>)
 8001068:	0018      	movs	r0, r3
 800106a:	f002 ffb5 	bl	8003fd8 <HAL_TIM_Base_Start_IT>
 800106e:	0003      	movs	r3, r0
 8001070:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8001072:	197b      	adds	r3, r7, r5
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d113      	bne.n	80010a2 <HAL_InitTick+0xe6>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM17_IRQn);
 800107a:	2016      	movs	r0, #22
 800107c:	f001 f8b1 	bl	80021e2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b03      	cmp	r3, #3
 8001084:	d809      	bhi.n	800109a <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	0019      	movs	r1, r3
 800108c:	2016      	movs	r0, #22
 800108e:	f001 f893 	bl	80021b8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001092:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <HAL_InitTick+0x108>)
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	e003      	b.n	80010a2 <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 800109a:	232b      	movs	r3, #43	; 0x2b
 800109c:	18fb      	adds	r3, r7, r3
 800109e:	2201      	movs	r2, #1
 80010a0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 80010a2:	232b      	movs	r3, #43	; 0x2b
 80010a4:	18fb      	adds	r3, r7, r3
 80010a6:	781b      	ldrb	r3, [r3, #0]
}
 80010a8:	0018      	movs	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	b00c      	add	sp, #48	; 0x30
 80010ae:	bdb0      	pop	{r4, r5, r7, pc}
 80010b0:	40021000 	.word	0x40021000
 80010b4:	000f4240 	.word	0x000f4240
 80010b8:	200001f4 	.word	0x200001f4
 80010bc:	40014800 	.word	0x40014800
 80010c0:	000003e7 	.word	0x000003e7
 80010c4:	20000010 	.word	0x20000010

080010c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <NMI_Handler+0x4>

080010ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d2:	e7fe      	b.n	80010d2 <HardFault_Handler+0x4>

080010d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010d8:	46c0      	nop			; (mov r8, r8)
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ec:	46c0      	nop			; (mov r8, r8)
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_BTN_OK_Pin);
 80010f6:	2004      	movs	r0, #4
 80010f8:	f001 fa20 	bl	800253c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80010fc:	46c0      	nop			; (mov r8, r8)
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_BTN_UP_Pin);
 8001106:	2380      	movs	r3, #128	; 0x80
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	0018      	movs	r0, r3
 800110c:	f001 fa16 	bl	800253c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_BTN_DOWN_Pin);
 8001110:	2380      	movs	r3, #128	; 0x80
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	0018      	movs	r0, r3
 8001116:	f001 fa11 	bl	800253c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800111a:	46c0      	nop			; (mov r8, r8)
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001124:	4b03      	ldr	r3, [pc, #12]	; (8001134 <TIM17_IRQHandler+0x14>)
 8001126:	0018      	movs	r0, r3
 8001128:	f003 f804 	bl	8004134 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 800112c:	46c0      	nop			; (mov r8, r8)
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	46c0      	nop			; (mov r8, r8)
 8001134:	200001f4 	.word	0x200001f4

08001138 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001140:	4a14      	ldr	r2, [pc, #80]	; (8001194 <_sbrk+0x5c>)
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <_sbrk+0x60>)
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800114c:	4b13      	ldr	r3, [pc, #76]	; (800119c <_sbrk+0x64>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d102      	bne.n	800115a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <_sbrk+0x64>)
 8001156:	4a12      	ldr	r2, [pc, #72]	; (80011a0 <_sbrk+0x68>)
 8001158:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <_sbrk+0x64>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	18d3      	adds	r3, r2, r3
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	429a      	cmp	r2, r3
 8001166:	d207      	bcs.n	8001178 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001168:	f003 ff2a 	bl	8004fc0 <__errno>
 800116c:	0003      	movs	r3, r0
 800116e:	220c      	movs	r2, #12
 8001170:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001172:	2301      	movs	r3, #1
 8001174:	425b      	negs	r3, r3
 8001176:	e009      	b.n	800118c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <_sbrk+0x64>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800117e:	4b07      	ldr	r3, [pc, #28]	; (800119c <_sbrk+0x64>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	18d2      	adds	r2, r2, r3
 8001186:	4b05      	ldr	r3, [pc, #20]	; (800119c <_sbrk+0x64>)
 8001188:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800118a:	68fb      	ldr	r3, [r7, #12]
}
 800118c:	0018      	movs	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	b006      	add	sp, #24
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20002000 	.word	0x20002000
 8001198:	00000400 	.word	0x00000400
 800119c:	20000240 	.word	0x20000240
 80011a0:	20000660 	.word	0x20000660

080011a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a8:	46c0      	nop			; (mov r8, r8)
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011b0:	480d      	ldr	r0, [pc, #52]	; (80011e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011b2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011b4:	f7ff fff6 	bl	80011a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011b8:	480c      	ldr	r0, [pc, #48]	; (80011ec <LoopForever+0x6>)
  ldr r1, =_edata
 80011ba:	490d      	ldr	r1, [pc, #52]	; (80011f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011bc:	4a0d      	ldr	r2, [pc, #52]	; (80011f4 <LoopForever+0xe>)
  movs r3, #0
 80011be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c0:	e002      	b.n	80011c8 <LoopCopyDataInit>

080011c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011c6:	3304      	adds	r3, #4

080011c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011cc:	d3f9      	bcc.n	80011c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ce:	4a0a      	ldr	r2, [pc, #40]	; (80011f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011d0:	4c0a      	ldr	r4, [pc, #40]	; (80011fc <LoopForever+0x16>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d4:	e001      	b.n	80011da <LoopFillZerobss>

080011d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d8:	3204      	adds	r2, #4

080011da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011dc:	d3fb      	bcc.n	80011d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011de:	f003 fef5 	bl	8004fcc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80011e2:	f7ff f9d5 	bl	8000590 <main>

080011e6 <LoopForever>:

LoopForever:
  b LoopForever
 80011e6:	e7fe      	b.n	80011e6 <LoopForever>
  ldr   r0, =_estack
 80011e8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80011ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80011f4:	080068c8 	.word	0x080068c8
  ldr r2, =_sbss
 80011f8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80011fc:	20000660 	.word	0x20000660

08001200 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001200:	e7fe      	b.n	8001200 <ADC1_IRQHandler>

08001202 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001202:	b580      	push	{r7, lr}
 8001204:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af04      	add	r7, sp, #16
 8001212:	0002      	movs	r2, r0
 8001214:	1dfb      	adds	r3, r7, #7
 8001216:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001218:	4808      	ldr	r0, [pc, #32]	; (800123c <ssd1306_WriteCommand+0x30>)
 800121a:	2301      	movs	r3, #1
 800121c:	425b      	negs	r3, r3
 800121e:	9302      	str	r3, [sp, #8]
 8001220:	2301      	movs	r3, #1
 8001222:	9301      	str	r3, [sp, #4]
 8001224:	1dfb      	adds	r3, r7, #7
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2301      	movs	r3, #1
 800122a:	2200      	movs	r2, #0
 800122c:	2178      	movs	r1, #120	; 0x78
 800122e:	f001 fa4f 	bl	80026d0 <HAL_I2C_Mem_Write>
}
 8001232:	46c0      	nop			; (mov r8, r8)
 8001234:	46bd      	mov	sp, r7
 8001236:	b002      	add	sp, #8
 8001238:	bd80      	pop	{r7, pc}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	20000150 	.word	0x20000150

08001240 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af04      	add	r7, sp, #16
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	b29b      	uxth	r3, r3
 800124e:	4808      	ldr	r0, [pc, #32]	; (8001270 <ssd1306_WriteData+0x30>)
 8001250:	2201      	movs	r2, #1
 8001252:	4252      	negs	r2, r2
 8001254:	9202      	str	r2, [sp, #8]
 8001256:	9301      	str	r3, [sp, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	2301      	movs	r3, #1
 800125e:	2240      	movs	r2, #64	; 0x40
 8001260:	2178      	movs	r1, #120	; 0x78
 8001262:	f001 fa35 	bl	80026d0 <HAL_I2C_Mem_Write>
}
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	46bd      	mov	sp, r7
 800126a:	b002      	add	sp, #8
 800126c:	bd80      	pop	{r7, pc}
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	20000150 	.word	0x20000150

08001274 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001278:	f7ff ffc3 	bl	8001202 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800127c:	2064      	movs	r0, #100	; 0x64
 800127e:	f000 fa71 	bl	8001764 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001282:	2000      	movs	r0, #0
 8001284:	f000 fa0c 	bl	80016a0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001288:	2020      	movs	r0, #32
 800128a:	f7ff ffbf 	bl	800120c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800128e:	2000      	movs	r0, #0
 8001290:	f7ff ffbc 	bl	800120c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001294:	20b0      	movs	r0, #176	; 0xb0
 8001296:	f7ff ffb9 	bl	800120c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 800129a:	20c0      	movs	r0, #192	; 0xc0
 800129c:	f7ff ffb6 	bl	800120c <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80012a0:	2000      	movs	r0, #0
 80012a2:	f7ff ffb3 	bl	800120c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80012a6:	2010      	movs	r0, #16
 80012a8:	f7ff ffb0 	bl	800120c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80012ac:	2040      	movs	r0, #64	; 0x40
 80012ae:	f7ff ffad 	bl	800120c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80012b2:	20ff      	movs	r0, #255	; 0xff
 80012b4:	f000 f9dc 	bl	8001670 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
 80012b8:	20a0      	movs	r0, #160	; 0xa0
 80012ba:	f7ff ffa7 	bl	800120c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80012be:	20a6      	movs	r0, #166	; 0xa6
 80012c0:	f7ff ffa4 	bl	800120c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80012c4:	20a8      	movs	r0, #168	; 0xa8
 80012c6:	f7ff ffa1 	bl	800120c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80012ca:	203f      	movs	r0, #63	; 0x3f
 80012cc:	f7ff ff9e 	bl	800120c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80012d0:	20a4      	movs	r0, #164	; 0xa4
 80012d2:	f7ff ff9b 	bl	800120c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80012d6:	20d3      	movs	r0, #211	; 0xd3
 80012d8:	f7ff ff98 	bl	800120c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80012dc:	2000      	movs	r0, #0
 80012de:	f7ff ff95 	bl	800120c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80012e2:	20d5      	movs	r0, #213	; 0xd5
 80012e4:	f7ff ff92 	bl	800120c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80012e8:	20f0      	movs	r0, #240	; 0xf0
 80012ea:	f7ff ff8f 	bl	800120c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80012ee:	20d9      	movs	r0, #217	; 0xd9
 80012f0:	f7ff ff8c 	bl	800120c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80012f4:	2022      	movs	r0, #34	; 0x22
 80012f6:	f7ff ff89 	bl	800120c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80012fa:	20da      	movs	r0, #218	; 0xda
 80012fc:	f7ff ff86 	bl	800120c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x02);
 8001300:	2002      	movs	r0, #2
 8001302:	f7ff ff83 	bl	800120c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001306:	20db      	movs	r0, #219	; 0xdb
 8001308:	f7ff ff80 	bl	800120c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 800130c:	2020      	movs	r0, #32
 800130e:	f7ff ff7d 	bl	800120c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001312:	208d      	movs	r0, #141	; 0x8d
 8001314:	f7ff ff7a 	bl	800120c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001318:	2014      	movs	r0, #20
 800131a:	f7ff ff77 	bl	800120c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800131e:	2001      	movs	r0, #1
 8001320:	f000 f9be 	bl	80016a0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001324:	2000      	movs	r0, #0
 8001326:	f000 f811 	bl	800134c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800132a:	f000 f833 	bl	8001394 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <ssd1306_Init+0xd4>)
 8001330:	2200      	movs	r2, #0
 8001332:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001334:	4b04      	ldr	r3, [pc, #16]	; (8001348 <ssd1306_Init+0xd4>)
 8001336:	2200      	movs	r2, #0
 8001338:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800133a:	4b03      	ldr	r3, [pc, #12]	; (8001348 <ssd1306_Init+0xd4>)
 800133c:	2201      	movs	r2, #1
 800133e:	711a      	strb	r2, [r3, #4]
}
 8001340:	46c0      	nop			; (mov r8, r8)
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	20000644 	.word	0x20000644

0800134c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	0002      	movs	r2, r0
 8001354:	1dfb      	adds	r3, r7, #7
 8001356:	701a      	strb	r2, [r3, #0]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001358:	2300      	movs	r3, #0
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	e00e      	b.n	800137c <ssd1306_Fill+0x30>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800135e:	1dfb      	adds	r3, r7, #7
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <ssd1306_Fill+0x1e>
 8001366:	2100      	movs	r1, #0
 8001368:	e000      	b.n	800136c <ssd1306_Fill+0x20>
 800136a:	21ff      	movs	r1, #255	; 0xff
 800136c:	4a08      	ldr	r2, [pc, #32]	; (8001390 <ssd1306_Fill+0x44>)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	18d3      	adds	r3, r2, r3
 8001372:	1c0a      	adds	r2, r1, #0
 8001374:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	3301      	adds	r3, #1
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	2380      	movs	r3, #128	; 0x80
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	429a      	cmp	r2, r3
 8001384:	d3eb      	bcc.n	800135e <ssd1306_Fill+0x12>
    }
}
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	46c0      	nop			; (mov r8, r8)
 800138a:	46bd      	mov	sp, r7
 800138c:	b004      	add	sp, #16
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000244 	.word	0x20000244

08001394 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800139a:	1dfb      	adds	r3, r7, #7
 800139c:	2200      	movs	r2, #0
 800139e:	701a      	strb	r2, [r3, #0]
 80013a0:	e01a      	b.n	80013d8 <ssd1306_UpdateScreen+0x44>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80013a2:	1dfb      	adds	r3, r7, #7
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	3b50      	subs	r3, #80	; 0x50
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	0018      	movs	r0, r3
 80013ac:	f7ff ff2e 	bl	800120c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80013b0:	2000      	movs	r0, #0
 80013b2:	f7ff ff2b 	bl	800120c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80013b6:	2010      	movs	r0, #16
 80013b8:	f7ff ff28 	bl	800120c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80013bc:	1dfb      	adds	r3, r7, #7
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	01da      	lsls	r2, r3, #7
 80013c2:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <ssd1306_UpdateScreen+0x58>)
 80013c4:	18d3      	adds	r3, r2, r3
 80013c6:	2180      	movs	r1, #128	; 0x80
 80013c8:	0018      	movs	r0, r3
 80013ca:	f7ff ff39 	bl	8001240 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80013ce:	1dfb      	adds	r3, r7, #7
 80013d0:	781a      	ldrb	r2, [r3, #0]
 80013d2:	1dfb      	adds	r3, r7, #7
 80013d4:	3201      	adds	r2, #1
 80013d6:	701a      	strb	r2, [r3, #0]
 80013d8:	1dfb      	adds	r3, r7, #7
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b07      	cmp	r3, #7
 80013de:	d9e0      	bls.n	80013a2 <ssd1306_UpdateScreen+0xe>
    }
}
 80013e0:	46c0      	nop			; (mov r8, r8)
 80013e2:	46c0      	nop			; (mov r8, r8)
 80013e4:	46bd      	mov	sp, r7
 80013e6:	b002      	add	sp, #8
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	20000244 	.word	0x20000244

080013f0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80013f0:	b590      	push	{r4, r7, lr}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	0004      	movs	r4, r0
 80013f8:	0008      	movs	r0, r1
 80013fa:	0011      	movs	r1, r2
 80013fc:	1dfb      	adds	r3, r7, #7
 80013fe:	1c22      	adds	r2, r4, #0
 8001400:	701a      	strb	r2, [r3, #0]
 8001402:	1dbb      	adds	r3, r7, #6
 8001404:	1c02      	adds	r2, r0, #0
 8001406:	701a      	strb	r2, [r3, #0]
 8001408:	1d7b      	adds	r3, r7, #5
 800140a:	1c0a      	adds	r2, r1, #0
 800140c:	701a      	strb	r2, [r3, #0]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800140e:	1dfb      	adds	r3, r7, #7
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	b25b      	sxtb	r3, r3
 8001414:	2b00      	cmp	r3, #0
 8001416:	db47      	blt.n	80014a8 <ssd1306_DrawPixel+0xb8>
 8001418:	1dbb      	adds	r3, r7, #6
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b3f      	cmp	r3, #63	; 0x3f
 800141e:	d843      	bhi.n	80014a8 <ssd1306_DrawPixel+0xb8>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001420:	1d7b      	adds	r3, r7, #5
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d11e      	bne.n	8001466 <ssd1306_DrawPixel+0x76>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001428:	1dfb      	adds	r3, r7, #7
 800142a:	781a      	ldrb	r2, [r3, #0]
 800142c:	1dbb      	adds	r3, r7, #6
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	08db      	lsrs	r3, r3, #3
 8001432:	b2d8      	uxtb	r0, r3
 8001434:	0003      	movs	r3, r0
 8001436:	01db      	lsls	r3, r3, #7
 8001438:	18d3      	adds	r3, r2, r3
 800143a:	4a1d      	ldr	r2, [pc, #116]	; (80014b0 <ssd1306_DrawPixel+0xc0>)
 800143c:	5cd3      	ldrb	r3, [r2, r3]
 800143e:	b25a      	sxtb	r2, r3
 8001440:	1dbb      	adds	r3, r7, #6
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2107      	movs	r1, #7
 8001446:	400b      	ands	r3, r1
 8001448:	2101      	movs	r1, #1
 800144a:	4099      	lsls	r1, r3
 800144c:	000b      	movs	r3, r1
 800144e:	b25b      	sxtb	r3, r3
 8001450:	4313      	orrs	r3, r2
 8001452:	b259      	sxtb	r1, r3
 8001454:	1dfb      	adds	r3, r7, #7
 8001456:	781a      	ldrb	r2, [r3, #0]
 8001458:	0003      	movs	r3, r0
 800145a:	01db      	lsls	r3, r3, #7
 800145c:	18d3      	adds	r3, r2, r3
 800145e:	b2c9      	uxtb	r1, r1
 8001460:	4a13      	ldr	r2, [pc, #76]	; (80014b0 <ssd1306_DrawPixel+0xc0>)
 8001462:	54d1      	strb	r1, [r2, r3]
 8001464:	e021      	b.n	80014aa <ssd1306_DrawPixel+0xba>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001466:	1dfb      	adds	r3, r7, #7
 8001468:	781a      	ldrb	r2, [r3, #0]
 800146a:	1dbb      	adds	r3, r7, #6
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	08db      	lsrs	r3, r3, #3
 8001470:	b2d8      	uxtb	r0, r3
 8001472:	0003      	movs	r3, r0
 8001474:	01db      	lsls	r3, r3, #7
 8001476:	18d3      	adds	r3, r2, r3
 8001478:	4a0d      	ldr	r2, [pc, #52]	; (80014b0 <ssd1306_DrawPixel+0xc0>)
 800147a:	5cd3      	ldrb	r3, [r2, r3]
 800147c:	b25b      	sxtb	r3, r3
 800147e:	1dba      	adds	r2, r7, #6
 8001480:	7812      	ldrb	r2, [r2, #0]
 8001482:	2107      	movs	r1, #7
 8001484:	400a      	ands	r2, r1
 8001486:	2101      	movs	r1, #1
 8001488:	4091      	lsls	r1, r2
 800148a:	000a      	movs	r2, r1
 800148c:	b252      	sxtb	r2, r2
 800148e:	43d2      	mvns	r2, r2
 8001490:	b252      	sxtb	r2, r2
 8001492:	4013      	ands	r3, r2
 8001494:	b259      	sxtb	r1, r3
 8001496:	1dfb      	adds	r3, r7, #7
 8001498:	781a      	ldrb	r2, [r3, #0]
 800149a:	0003      	movs	r3, r0
 800149c:	01db      	lsls	r3, r3, #7
 800149e:	18d3      	adds	r3, r2, r3
 80014a0:	b2c9      	uxtb	r1, r1
 80014a2:	4a03      	ldr	r2, [pc, #12]	; (80014b0 <ssd1306_DrawPixel+0xc0>)
 80014a4:	54d1      	strb	r1, [r2, r3]
 80014a6:	e000      	b.n	80014aa <ssd1306_DrawPixel+0xba>
        return;
 80014a8:	46c0      	nop			; (mov r8, r8)
    }
}
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b003      	add	sp, #12
 80014ae:	bd90      	pop	{r4, r7, pc}
 80014b0:	20000244 	.word	0x20000244

080014b4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80014b4:	b590      	push	{r4, r7, lr}
 80014b6:	b089      	sub	sp, #36	; 0x24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	0004      	movs	r4, r0
 80014bc:	1d38      	adds	r0, r7, #4
 80014be:	6001      	str	r1, [r0, #0]
 80014c0:	6042      	str	r2, [r0, #4]
 80014c2:	0019      	movs	r1, r3
 80014c4:	200f      	movs	r0, #15
 80014c6:	183b      	adds	r3, r7, r0
 80014c8:	1c22      	adds	r2, r4, #0
 80014ca:	701a      	strb	r2, [r3, #0]
 80014cc:	230e      	movs	r3, #14
 80014ce:	18fb      	adds	r3, r7, r3
 80014d0:	1c0a      	adds	r2, r1, #0
 80014d2:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80014d4:	183b      	adds	r3, r7, r0
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b1f      	cmp	r3, #31
 80014da:	d903      	bls.n	80014e4 <ssd1306_WriteChar+0x30>
 80014dc:	183b      	adds	r3, r7, r0
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b7e      	cmp	r3, #126	; 0x7e
 80014e2:	d901      	bls.n	80014e8 <ssd1306_WriteChar+0x34>
        return 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	e078      	b.n	80015da <ssd1306_WriteChar+0x126>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80014e8:	4b3e      	ldr	r3, [pc, #248]	; (80015e4 <ssd1306_WriteChar+0x130>)
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	001a      	movs	r2, r3
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	18d3      	adds	r3, r2, r3
 80014f4:	2b80      	cmp	r3, #128	; 0x80
 80014f6:	dc07      	bgt.n	8001508 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80014f8:	4b3a      	ldr	r3, [pc, #232]	; (80015e4 <ssd1306_WriteChar+0x130>)
 80014fa:	885b      	ldrh	r3, [r3, #2]
 80014fc:	001a      	movs	r2, r3
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	785b      	ldrb	r3, [r3, #1]
 8001502:	18d3      	adds	r3, r2, r3
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001504:	2b40      	cmp	r3, #64	; 0x40
 8001506:	dd01      	ble.n	800150c <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8001508:	2300      	movs	r3, #0
 800150a:	e066      	b.n	80015da <ssd1306_WriteChar+0x126>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 800150c:	2300      	movs	r3, #0
 800150e:	61fb      	str	r3, [r7, #28]
 8001510:	e051      	b.n	80015b6 <ssd1306_WriteChar+0x102>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	685a      	ldr	r2, [r3, #4]
 8001516:	230f      	movs	r3, #15
 8001518:	18fb      	adds	r3, r7, r3
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	3b20      	subs	r3, #32
 800151e:	1d39      	adds	r1, r7, #4
 8001520:	7849      	ldrb	r1, [r1, #1]
 8001522:	434b      	muls	r3, r1
 8001524:	0019      	movs	r1, r3
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	18cb      	adds	r3, r1, r3
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	18d3      	adds	r3, r2, r3
 800152e:	881b      	ldrh	r3, [r3, #0]
 8001530:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001532:	2300      	movs	r3, #0
 8001534:	61bb      	str	r3, [r7, #24]
 8001536:	e035      	b.n	80015a4 <ssd1306_WriteChar+0xf0>
            if((b << j) & 0x8000)  {
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	409a      	lsls	r2, r3
 800153e:	2380      	movs	r3, #128	; 0x80
 8001540:	021b      	lsls	r3, r3, #8
 8001542:	4013      	ands	r3, r2
 8001544:	d014      	beq.n	8001570 <ssd1306_WriteChar+0xbc>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001546:	4b27      	ldr	r3, [pc, #156]	; (80015e4 <ssd1306_WriteChar+0x130>)
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	b2da      	uxtb	r2, r3
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	18d3      	adds	r3, r2, r3
 8001552:	b2d8      	uxtb	r0, r3
 8001554:	4b23      	ldr	r3, [pc, #140]	; (80015e4 <ssd1306_WriteChar+0x130>)
 8001556:	885b      	ldrh	r3, [r3, #2]
 8001558:	b2da      	uxtb	r2, r3
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	18d3      	adds	r3, r2, r3
 8001560:	b2d9      	uxtb	r1, r3
 8001562:	230e      	movs	r3, #14
 8001564:	18fb      	adds	r3, r7, r3
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	001a      	movs	r2, r3
 800156a:	f7ff ff41 	bl	80013f0 <ssd1306_DrawPixel>
 800156e:	e016      	b.n	800159e <ssd1306_WriteChar+0xea>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001570:	4b1c      	ldr	r3, [pc, #112]	; (80015e4 <ssd1306_WriteChar+0x130>)
 8001572:	881b      	ldrh	r3, [r3, #0]
 8001574:	b2da      	uxtb	r2, r3
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	b2db      	uxtb	r3, r3
 800157a:	18d3      	adds	r3, r2, r3
 800157c:	b2d8      	uxtb	r0, r3
 800157e:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <ssd1306_WriteChar+0x130>)
 8001580:	885b      	ldrh	r3, [r3, #2]
 8001582:	b2da      	uxtb	r2, r3
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	b2db      	uxtb	r3, r3
 8001588:	18d3      	adds	r3, r2, r3
 800158a:	b2d9      	uxtb	r1, r3
 800158c:	230e      	movs	r3, #14
 800158e:	18fb      	adds	r3, r7, r3
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	425a      	negs	r2, r3
 8001594:	4153      	adcs	r3, r2
 8001596:	b2db      	uxtb	r3, r3
 8001598:	001a      	movs	r2, r3
 800159a:	f7ff ff29 	bl	80013f0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800159e:	69bb      	ldr	r3, [r7, #24]
 80015a0:	3301      	adds	r3, #1
 80015a2:	61bb      	str	r3, [r7, #24]
 80015a4:	1d3b      	adds	r3, r7, #4
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	001a      	movs	r2, r3
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d3c3      	bcc.n	8001538 <ssd1306_WriteChar+0x84>
    for(i = 0; i < Font.FontHeight; i++) {
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	3301      	adds	r3, #1
 80015b4:	61fb      	str	r3, [r7, #28]
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	785b      	ldrb	r3, [r3, #1]
 80015ba:	001a      	movs	r2, r3
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	4293      	cmp	r3, r2
 80015c0:	d3a7      	bcc.n	8001512 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80015c2:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <ssd1306_WriteChar+0x130>)
 80015c4:	881a      	ldrh	r2, [r3, #0]
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	18d3      	adds	r3, r2, r3
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <ssd1306_WriteChar+0x130>)
 80015d2:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80015d4:	230f      	movs	r3, #15
 80015d6:	18fb      	adds	r3, r7, r3
 80015d8:	781b      	ldrb	r3, [r3, #0]
}
 80015da:	0018      	movs	r0, r3
 80015dc:	46bd      	mov	sp, r7
 80015de:	b009      	add	sp, #36	; 0x24
 80015e0:	bd90      	pop	{r4, r7, pc}
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	20000644 	.word	0x20000644

080015e8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	1d38      	adds	r0, r7, #4
 80015f2:	6001      	str	r1, [r0, #0]
 80015f4:	6042      	str	r2, [r0, #4]
 80015f6:	001a      	movs	r2, r3
 80015f8:	1cfb      	adds	r3, r7, #3
 80015fa:	701a      	strb	r2, [r3, #0]
    while (*str) {
 80015fc:	e014      	b.n	8001628 <ssd1306_WriteString+0x40>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	7818      	ldrb	r0, [r3, #0]
 8001602:	1cfb      	adds	r3, r7, #3
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	1d3a      	adds	r2, r7, #4
 8001608:	6811      	ldr	r1, [r2, #0]
 800160a:	6852      	ldr	r2, [r2, #4]
 800160c:	f7ff ff52 	bl	80014b4 <ssd1306_WriteChar>
 8001610:	0003      	movs	r3, r0
 8001612:	001a      	movs	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	429a      	cmp	r2, r3
 800161a:	d002      	beq.n	8001622 <ssd1306_WriteString+0x3a>
            // Char could not be written
            return *str;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	e008      	b.n	8001634 <ssd1306_WriteString+0x4c>
        }
        str++;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	3301      	adds	r3, #1
 8001626:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1e6      	bne.n	80015fe <ssd1306_WriteString+0x16>
    }
    
    // Everything ok
    return *str;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	781b      	ldrb	r3, [r3, #0]
}
 8001634:	0018      	movs	r0, r3
 8001636:	46bd      	mov	sp, r7
 8001638:	b004      	add	sp, #16
 800163a:	bd80      	pop	{r7, pc}

0800163c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	0002      	movs	r2, r0
 8001644:	1dfb      	adds	r3, r7, #7
 8001646:	701a      	strb	r2, [r3, #0]
 8001648:	1dbb      	adds	r3, r7, #6
 800164a:	1c0a      	adds	r2, r1, #0
 800164c:	701a      	strb	r2, [r3, #0]
    SSD1306.CurrentX = x;
 800164e:	1dfb      	adds	r3, r7, #7
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	b29a      	uxth	r2, r3
 8001654:	4b05      	ldr	r3, [pc, #20]	; (800166c <ssd1306_SetCursor+0x30>)
 8001656:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001658:	1dbb      	adds	r3, r7, #6
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	b29a      	uxth	r2, r3
 800165e:	4b03      	ldr	r3, [pc, #12]	; (800166c <ssd1306_SetCursor+0x30>)
 8001660:	805a      	strh	r2, [r3, #2]
}
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	46bd      	mov	sp, r7
 8001666:	b002      	add	sp, #8
 8001668:	bd80      	pop	{r7, pc}
 800166a:	46c0      	nop			; (mov r8, r8)
 800166c:	20000644 	.word	0x20000644

08001670 <ssd1306_SetContrast>:

void ssd1306_StopScroll(void){
	ssd1306_WriteCommand(0x2E);
}

void ssd1306_SetContrast(const uint8_t value) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	0002      	movs	r2, r0
 8001678:	1dfb      	adds	r3, r7, #7
 800167a:	701a      	strb	r2, [r3, #0]
    const uint8_t kSetContrastControlRegister = 0x81;
 800167c:	210f      	movs	r1, #15
 800167e:	187b      	adds	r3, r7, r1
 8001680:	2281      	movs	r2, #129	; 0x81
 8001682:	701a      	strb	r2, [r3, #0]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001684:	187b      	adds	r3, r7, r1
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	0018      	movs	r0, r3
 800168a:	f7ff fdbf 	bl	800120c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800168e:	1dfb      	adds	r3, r7, #7
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	0018      	movs	r0, r3
 8001694:	f7ff fdba 	bl	800120c <ssd1306_WriteCommand>
}
 8001698:	46c0      	nop			; (mov r8, r8)
 800169a:	46bd      	mov	sp, r7
 800169c:	b004      	add	sp, #16
 800169e:	bd80      	pop	{r7, pc}

080016a0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	0002      	movs	r2, r0
 80016a8:	1dfb      	adds	r3, r7, #7
 80016aa:	701a      	strb	r2, [r3, #0]
    uint8_t value;
    if (on) {
 80016ac:	1dfb      	adds	r3, r7, #7
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d007      	beq.n	80016c4 <ssd1306_SetDisplayOn+0x24>
        value = 0xAF;   // Display on
 80016b4:	230f      	movs	r3, #15
 80016b6:	18fb      	adds	r3, r7, r3
 80016b8:	22af      	movs	r2, #175	; 0xaf
 80016ba:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 1;
 80016bc:	4b0a      	ldr	r3, [pc, #40]	; (80016e8 <ssd1306_SetDisplayOn+0x48>)
 80016be:	2201      	movs	r2, #1
 80016c0:	715a      	strb	r2, [r3, #5]
 80016c2:	e006      	b.n	80016d2 <ssd1306_SetDisplayOn+0x32>
    } else {
        value = 0xAE;   // Display off
 80016c4:	230f      	movs	r3, #15
 80016c6:	18fb      	adds	r3, r7, r3
 80016c8:	22ae      	movs	r2, #174	; 0xae
 80016ca:	701a      	strb	r2, [r3, #0]
        SSD1306.DisplayOn = 0;
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <ssd1306_SetDisplayOn+0x48>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80016d2:	230f      	movs	r3, #15
 80016d4:	18fb      	adds	r3, r7, r3
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	0018      	movs	r0, r3
 80016da:	f7ff fd97 	bl	800120c <ssd1306_WriteCommand>
}
 80016de:	46c0      	nop			; (mov r8, r8)
 80016e0:	46bd      	mov	sp, r7
 80016e2:	b004      	add	sp, #16
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	46c0      	nop			; (mov r8, r8)
 80016e8:	20000644 	.word	0x20000644

080016ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016f2:	1dfb      	adds	r3, r7, #7
 80016f4:	2200      	movs	r2, #0
 80016f6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016f8:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <HAL_Init+0x3c>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <HAL_Init+0x3c>)
 80016fe:	2180      	movs	r1, #128	; 0x80
 8001700:	0049      	lsls	r1, r1, #1
 8001702:	430a      	orrs	r2, r1
 8001704:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001706:	2003      	movs	r0, #3
 8001708:	f7ff fc58 	bl	8000fbc <HAL_InitTick>
 800170c:	1e03      	subs	r3, r0, #0
 800170e:	d003      	beq.n	8001718 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001710:	1dfb      	adds	r3, r7, #7
 8001712:	2201      	movs	r2, #1
 8001714:	701a      	strb	r2, [r3, #0]
 8001716:	e001      	b.n	800171c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001718:	f7ff fb16 	bl	8000d48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800171c:	1dfb      	adds	r3, r7, #7
 800171e:	781b      	ldrb	r3, [r3, #0]
}
 8001720:	0018      	movs	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	b002      	add	sp, #8
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40022000 	.word	0x40022000

0800172c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001730:	4b05      	ldr	r3, [pc, #20]	; (8001748 <HAL_IncTick+0x1c>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	001a      	movs	r2, r3
 8001736:	4b05      	ldr	r3, [pc, #20]	; (800174c <HAL_IncTick+0x20>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	18d2      	adds	r2, r2, r3
 800173c:	4b03      	ldr	r3, [pc, #12]	; (800174c <HAL_IncTick+0x20>)
 800173e:	601a      	str	r2, [r3, #0]
}
 8001740:	46c0      	nop			; (mov r8, r8)
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	46c0      	nop			; (mov r8, r8)
 8001748:	20000014 	.word	0x20000014
 800174c:	2000064c 	.word	0x2000064c

08001750 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  return uwTick;
 8001754:	4b02      	ldr	r3, [pc, #8]	; (8001760 <HAL_GetTick+0x10>)
 8001756:	681b      	ldr	r3, [r3, #0]
}
 8001758:	0018      	movs	r0, r3
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	46c0      	nop			; (mov r8, r8)
 8001760:	2000064c 	.word	0x2000064c

08001764 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800176c:	f7ff fff0 	bl	8001750 <HAL_GetTick>
 8001770:	0003      	movs	r3, r0
 8001772:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	3301      	adds	r3, #1
 800177c:	d005      	beq.n	800178a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800177e:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <HAL_Delay+0x44>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	001a      	movs	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	189b      	adds	r3, r3, r2
 8001788:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800178a:	46c0      	nop			; (mov r8, r8)
 800178c:	f7ff ffe0 	bl	8001750 <HAL_GetTick>
 8001790:	0002      	movs	r2, r0
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	429a      	cmp	r2, r3
 800179a:	d8f7      	bhi.n	800178c <HAL_Delay+0x28>
  {
  }
}
 800179c:	46c0      	nop			; (mov r8, r8)
 800179e:	46c0      	nop			; (mov r8, r8)
 80017a0:	46bd      	mov	sp, r7
 80017a2:	b004      	add	sp, #16
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	46c0      	nop			; (mov r8, r8)
 80017a8:	20000014 	.word	0x20000014

080017ac <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a05      	ldr	r2, [pc, #20]	; (80017d0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80017bc:	401a      	ands	r2, r3
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	431a      	orrs	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	601a      	str	r2, [r3, #0]
}
 80017c6:	46c0      	nop			; (mov r8, r8)
 80017c8:	46bd      	mov	sp, r7
 80017ca:	b002      	add	sp, #8
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	fe3fffff 	.word	0xfe3fffff

080017d4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	23e0      	movs	r3, #224	; 0xe0
 80017e2:	045b      	lsls	r3, r3, #17
 80017e4:	4013      	ands	r3, r2
}
 80017e6:	0018      	movs	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	b002      	add	sp, #8
 80017ec:	bd80      	pop	{r7, pc}

080017ee <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b084      	sub	sp, #16
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	60f8      	str	r0, [r7, #12]
 80017f6:	60b9      	str	r1, [r7, #8]
 80017f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	2104      	movs	r1, #4
 8001802:	400a      	ands	r2, r1
 8001804:	2107      	movs	r1, #7
 8001806:	4091      	lsls	r1, r2
 8001808:	000a      	movs	r2, r1
 800180a:	43d2      	mvns	r2, r2
 800180c:	401a      	ands	r2, r3
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	2104      	movs	r1, #4
 8001812:	400b      	ands	r3, r1
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	4099      	lsls	r1, r3
 8001818:	000b      	movs	r3, r1
 800181a:	431a      	orrs	r2, r3
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001820:	46c0      	nop			; (mov r8, r8)
 8001822:	46bd      	mov	sp, r7
 8001824:	b004      	add	sp, #16
 8001826:	bd80      	pop	{r7, pc}

08001828 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	2104      	movs	r1, #4
 800183a:	400a      	ands	r2, r1
 800183c:	2107      	movs	r1, #7
 800183e:	4091      	lsls	r1, r2
 8001840:	000a      	movs	r2, r1
 8001842:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	2104      	movs	r1, #4
 8001848:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800184a:	40da      	lsrs	r2, r3
 800184c:	0013      	movs	r3, r2
}
 800184e:	0018      	movs	r0, r3
 8001850:	46bd      	mov	sp, r7
 8001852:	b002      	add	sp, #8
 8001854:	bd80      	pop	{r7, pc}

08001856 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b084      	sub	sp, #16
 800185a:	af00      	add	r7, sp, #0
 800185c:	60f8      	str	r0, [r7, #12]
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	211f      	movs	r1, #31
 800186a:	400a      	ands	r2, r1
 800186c:	210f      	movs	r1, #15
 800186e:	4091      	lsls	r1, r2
 8001870:	000a      	movs	r2, r1
 8001872:	43d2      	mvns	r2, r2
 8001874:	401a      	ands	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	0e9b      	lsrs	r3, r3, #26
 800187a:	210f      	movs	r1, #15
 800187c:	4019      	ands	r1, r3
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	201f      	movs	r0, #31
 8001882:	4003      	ands	r3, r0
 8001884:	4099      	lsls	r1, r3
 8001886:	000b      	movs	r3, r1
 8001888:	431a      	orrs	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	46bd      	mov	sp, r7
 8001892:	b004      	add	sp, #16
 8001894:	bd80      	pop	{r7, pc}

08001896 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
 800189e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	035b      	lsls	r3, r3, #13
 80018a8:	0b5b      	lsrs	r3, r3, #13
 80018aa:	431a      	orrs	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018b0:	46c0      	nop			; (mov r8, r8)
 80018b2:	46bd      	mov	sp, r7
 80018b4:	b002      	add	sp, #8
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c6:	683a      	ldr	r2, [r7, #0]
 80018c8:	0352      	lsls	r2, r2, #13
 80018ca:	0b52      	lsrs	r2, r2, #13
 80018cc:	43d2      	mvns	r2, r2
 80018ce:	401a      	ands	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018d4:	46c0      	nop			; (mov r8, r8)
 80018d6:	46bd      	mov	sp, r7
 80018d8:	b002      	add	sp, #8
 80018da:	bd80      	pop	{r7, pc}

080018dc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	695b      	ldr	r3, [r3, #20]
 80018ec:	68ba      	ldr	r2, [r7, #8]
 80018ee:	0212      	lsls	r2, r2, #8
 80018f0:	43d2      	mvns	r2, r2
 80018f2:	401a      	ands	r2, r3
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	021b      	lsls	r3, r3, #8
 80018f8:	6879      	ldr	r1, [r7, #4]
 80018fa:	400b      	ands	r3, r1
 80018fc:	4904      	ldr	r1, [pc, #16]	; (8001910 <LL_ADC_SetChannelSamplingTime+0x34>)
 80018fe:	400b      	ands	r3, r1
 8001900:	431a      	orrs	r2, r3
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001906:	46c0      	nop			; (mov r8, r8)
 8001908:	46bd      	mov	sp, r7
 800190a:	b004      	add	sp, #16
 800190c:	bd80      	pop	{r7, pc}
 800190e:	46c0      	nop			; (mov r8, r8)
 8001910:	07ffff00 	.word	0x07ffff00

08001914 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	4a05      	ldr	r2, [pc, #20]	; (8001938 <LL_ADC_EnableInternalRegulator+0x24>)
 8001922:	4013      	ands	r3, r2
 8001924:	2280      	movs	r2, #128	; 0x80
 8001926:	0552      	lsls	r2, r2, #21
 8001928:	431a      	orrs	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800192e:	46c0      	nop			; (mov r8, r8)
 8001930:	46bd      	mov	sp, r7
 8001932:	b002      	add	sp, #8
 8001934:	bd80      	pop	{r7, pc}
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	6fffffe8 	.word	0x6fffffe8

0800193c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	2380      	movs	r3, #128	; 0x80
 800194a:	055b      	lsls	r3, r3, #21
 800194c:	401a      	ands	r2, r3
 800194e:	2380      	movs	r3, #128	; 0x80
 8001950:	055b      	lsls	r3, r3, #21
 8001952:	429a      	cmp	r2, r3
 8001954:	d101      	bne.n	800195a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001956:	2301      	movs	r3, #1
 8001958:	e000      	b.n	800195c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800195a:	2300      	movs	r3, #0
}
 800195c:	0018      	movs	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	b002      	add	sp, #8
 8001962:	bd80      	pop	{r7, pc}

08001964 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	2201      	movs	r2, #1
 8001972:	4013      	ands	r3, r2
 8001974:	2b01      	cmp	r3, #1
 8001976:	d101      	bne.n	800197c <LL_ADC_IsEnabled+0x18>
 8001978:	2301      	movs	r3, #1
 800197a:	e000      	b.n	800197e <LL_ADC_IsEnabled+0x1a>
 800197c:	2300      	movs	r3, #0
}
 800197e:	0018      	movs	r0, r3
 8001980:	46bd      	mov	sp, r7
 8001982:	b002      	add	sp, #8
 8001984:	bd80      	pop	{r7, pc}

08001986 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b082      	sub	sp, #8
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	2204      	movs	r2, #4
 8001994:	4013      	ands	r3, r2
 8001996:	2b04      	cmp	r3, #4
 8001998:	d101      	bne.n	800199e <LL_ADC_REG_IsConversionOngoing+0x18>
 800199a:	2301      	movs	r3, #1
 800199c:	e000      	b.n	80019a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800199e:	2300      	movs	r3, #0
}
 80019a0:	0018      	movs	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	b002      	add	sp, #8
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b088      	sub	sp, #32
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019b0:	231f      	movs	r3, #31
 80019b2:	18fb      	adds	r3, r7, r3
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d101      	bne.n	80019ce <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e17f      	b.n	8001cce <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10a      	bne.n	80019ec <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	0018      	movs	r0, r3
 80019da:	f7ff f9d9 	bl	8000d90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2254      	movs	r2, #84	; 0x54
 80019e8:	2100      	movs	r1, #0
 80019ea:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	0018      	movs	r0, r3
 80019f2:	f7ff ffa3 	bl	800193c <LL_ADC_IsInternalRegulatorEnabled>
 80019f6:	1e03      	subs	r3, r0, #0
 80019f8:	d115      	bne.n	8001a26 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	0018      	movs	r0, r3
 8001a00:	f7ff ff88 	bl	8001914 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a04:	4bb4      	ldr	r3, [pc, #720]	; (8001cd8 <HAL_ADC_Init+0x330>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	49b4      	ldr	r1, [pc, #720]	; (8001cdc <HAL_ADC_Init+0x334>)
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	f7fe fb82 	bl	8000114 <__udivsi3>
 8001a10:	0003      	movs	r3, r0
 8001a12:	3301      	adds	r3, #1
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a18:	e002      	b.n	8001a20 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1f9      	bne.n	8001a1a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	f7ff ff86 	bl	800193c <LL_ADC_IsInternalRegulatorEnabled>
 8001a30:	1e03      	subs	r3, r0, #0
 8001a32:	d10f      	bne.n	8001a54 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a38:	2210      	movs	r2, #16
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a44:	2201      	movs	r2, #1
 8001a46:	431a      	orrs	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001a4c:	231f      	movs	r3, #31
 8001a4e:	18fb      	adds	r3, r7, r3
 8001a50:	2201      	movs	r2, #1
 8001a52:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	0018      	movs	r0, r3
 8001a5a:	f7ff ff94 	bl	8001986 <LL_ADC_REG_IsConversionOngoing>
 8001a5e:	0003      	movs	r3, r0
 8001a60:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a66:	2210      	movs	r2, #16
 8001a68:	4013      	ands	r3, r2
 8001a6a:	d000      	beq.n	8001a6e <HAL_ADC_Init+0xc6>
 8001a6c:	e122      	b.n	8001cb4 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d000      	beq.n	8001a76 <HAL_ADC_Init+0xce>
 8001a74:	e11e      	b.n	8001cb4 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7a:	4a99      	ldr	r2, [pc, #612]	; (8001ce0 <HAL_ADC_Init+0x338>)
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	2202      	movs	r2, #2
 8001a80:	431a      	orrs	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	f7ff ff6a 	bl	8001964 <LL_ADC_IsEnabled>
 8001a90:	1e03      	subs	r3, r0, #0
 8001a92:	d000      	beq.n	8001a96 <HAL_ADC_Init+0xee>
 8001a94:	e0ad      	b.n	8001bf2 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	7e1b      	ldrb	r3, [r3, #24]
 8001a9e:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001aa0:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	7e5b      	ldrb	r3, [r3, #25]
 8001aa6:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001aa8:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	7e9b      	ldrb	r3, [r3, #26]
 8001aae:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001ab0:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d002      	beq.n	8001ac0 <HAL_ADC_Init+0x118>
 8001aba:	2380      	movs	r3, #128	; 0x80
 8001abc:	015b      	lsls	r3, r3, #5
 8001abe:	e000      	b.n	8001ac2 <HAL_ADC_Init+0x11a>
 8001ac0:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001ac2:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001ac8:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	da04      	bge.n	8001adc <HAL_ADC_Init+0x134>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	691b      	ldr	r3, [r3, #16]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	085b      	lsrs	r3, r3, #1
 8001ada:	e001      	b.n	8001ae0 <HAL_ADC_Init+0x138>
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001ae0:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	212c      	movs	r1, #44	; 0x2c
 8001ae6:	5c5b      	ldrb	r3, [r3, r1]
 8001ae8:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001aea:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2220      	movs	r2, #32
 8001af6:	5c9b      	ldrb	r3, [r3, r2]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d115      	bne.n	8001b28 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	7e9b      	ldrb	r3, [r3, #26]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d105      	bne.n	8001b10 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	2280      	movs	r2, #128	; 0x80
 8001b08:	0252      	lsls	r2, r2, #9
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
 8001b0e:	e00b      	b.n	8001b28 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b14:	2220      	movs	r2, #32
 8001b16:	431a      	orrs	r2, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b20:	2201      	movs	r2, #1
 8001b22:	431a      	orrs	r2, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d00a      	beq.n	8001b46 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b34:	23e0      	movs	r3, #224	; 0xe0
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	4a65      	ldr	r2, [pc, #404]	; (8001ce4 <HAL_ADC_Init+0x33c>)
 8001b4e:	4013      	ands	r3, r2
 8001b50:	0019      	movs	r1, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	0f9b      	lsrs	r3, r3, #30
 8001b62:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	223c      	movs	r2, #60	; 0x3c
 8001b74:	5c9b      	ldrb	r3, [r3, r2]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d111      	bne.n	8001b9e <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	0f9b      	lsrs	r3, r3, #30
 8001b80:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001b86:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001b8c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001b92:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	2201      	movs	r2, #1
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	4a50      	ldr	r2, [pc, #320]	; (8001ce8 <HAL_ADC_Init+0x340>)
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	0019      	movs	r1, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	23c0      	movs	r3, #192	; 0xc0
 8001bba:	061b      	lsls	r3, r3, #24
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d018      	beq.n	8001bf2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001bc4:	2380      	movs	r3, #128	; 0x80
 8001bc6:	05db      	lsls	r3, r3, #23
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d012      	beq.n	8001bf2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	061b      	lsls	r3, r3, #24
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d00c      	beq.n	8001bf2 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001bd8:	4b44      	ldr	r3, [pc, #272]	; (8001cec <HAL_ADC_Init+0x344>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a44      	ldr	r2, [pc, #272]	; (8001cf0 <HAL_ADC_Init+0x348>)
 8001bde:	4013      	ands	r3, r2
 8001be0:	0019      	movs	r1, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	23f0      	movs	r3, #240	; 0xf0
 8001be8:	039b      	lsls	r3, r3, #14
 8001bea:	401a      	ands	r2, r3
 8001bec:	4b3f      	ldr	r3, [pc, #252]	; (8001cec <HAL_ADC_Init+0x344>)
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6818      	ldr	r0, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bfa:	001a      	movs	r2, r3
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	f7ff fdf6 	bl	80017ee <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6818      	ldr	r0, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c0a:	493a      	ldr	r1, [pc, #232]	; (8001cf4 <HAL_ADC_Init+0x34c>)
 8001c0c:	001a      	movs	r2, r3
 8001c0e:	f7ff fdee 	bl	80017ee <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d109      	bne.n	8001c2e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2110      	movs	r1, #16
 8001c26:	4249      	negs	r1, r1
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	629a      	str	r2, [r3, #40]	; 0x28
 8001c2c:	e018      	b.n	8001c60 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	691a      	ldr	r2, [r3, #16]
 8001c32:	2380      	movs	r3, #128	; 0x80
 8001c34:	039b      	lsls	r3, r3, #14
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d112      	bne.n	8001c60 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	69db      	ldr	r3, [r3, #28]
 8001c44:	3b01      	subs	r3, #1
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	221c      	movs	r2, #28
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	2210      	movs	r2, #16
 8001c4e:	4252      	negs	r2, r2
 8001c50:	409a      	lsls	r2, r3
 8001c52:	0011      	movs	r1, r2
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2100      	movs	r1, #0
 8001c66:	0018      	movs	r0, r3
 8001c68:	f7ff fdde 	bl	8001828 <LL_ADC_GetSamplingTimeCommonChannels>
 8001c6c:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d10b      	bne.n	8001c8e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c80:	2203      	movs	r2, #3
 8001c82:	4393      	bics	r3, r2
 8001c84:	2201      	movs	r2, #1
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001c8c:	e01c      	b.n	8001cc8 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c92:	2212      	movs	r2, #18
 8001c94:	4393      	bics	r3, r2
 8001c96:	2210      	movs	r2, #16
 8001c98:	431a      	orrs	r2, r3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	431a      	orrs	r2, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001caa:	231f      	movs	r3, #31
 8001cac:	18fb      	adds	r3, r7, r3
 8001cae:	2201      	movs	r2, #1
 8001cb0:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001cb2:	e009      	b.n	8001cc8 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb8:	2210      	movs	r2, #16
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001cc0:	231f      	movs	r3, #31
 8001cc2:	18fb      	adds	r3, r7, r3
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001cc8:	231f      	movs	r3, #31
 8001cca:	18fb      	adds	r3, r7, r3
 8001ccc:	781b      	ldrb	r3, [r3, #0]
}
 8001cce:	0018      	movs	r0, r3
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	b008      	add	sp, #32
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	46c0      	nop			; (mov r8, r8)
 8001cd8:	20000004 	.word	0x20000004
 8001cdc:	00030d40 	.word	0x00030d40
 8001ce0:	fffffefd 	.word	0xfffffefd
 8001ce4:	fffe0201 	.word	0xfffe0201
 8001ce8:	1ffffc02 	.word	0x1ffffc02
 8001cec:	40012708 	.word	0x40012708
 8001cf0:	ffc3ffff 	.word	0xffc3ffff
 8001cf4:	07ffff04 	.word	0x07ffff04

08001cf8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d02:	2317      	movs	r3, #23
 8001d04:	18fb      	adds	r3, r7, r3
 8001d06:	2200      	movs	r2, #0
 8001d08:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2254      	movs	r2, #84	; 0x54
 8001d12:	5c9b      	ldrb	r3, [r3, r2]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d101      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x24>
 8001d18:	2302      	movs	r3, #2
 8001d1a:	e1c0      	b.n	800209e <HAL_ADC_ConfigChannel+0x3a6>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2254      	movs	r2, #84	; 0x54
 8001d20:	2101      	movs	r1, #1
 8001d22:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	0018      	movs	r0, r3
 8001d2a:	f7ff fe2c 	bl	8001986 <LL_ADC_REG_IsConversionOngoing>
 8001d2e:	1e03      	subs	r3, r0, #0
 8001d30:	d000      	beq.n	8001d34 <HAL_ADC_ConfigChannel+0x3c>
 8001d32:	e1a3      	b.n	800207c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d100      	bne.n	8001d3e <HAL_ADC_ConfigChannel+0x46>
 8001d3c:	e143      	b.n	8001fc6 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	691a      	ldr	r2, [r3, #16]
 8001d42:	2380      	movs	r3, #128	; 0x80
 8001d44:	061b      	lsls	r3, r3, #24
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d004      	beq.n	8001d54 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d4e:	4ac1      	ldr	r2, [pc, #772]	; (8002054 <HAL_ADC_ConfigChannel+0x35c>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d108      	bne.n	8001d66 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	0019      	movs	r1, r3
 8001d5e:	0010      	movs	r0, r2
 8001d60:	f7ff fd99 	bl	8001896 <LL_ADC_REG_SetSequencerChAdd>
 8001d64:	e0c9      	b.n	8001efa <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	211f      	movs	r1, #31
 8001d70:	400b      	ands	r3, r1
 8001d72:	210f      	movs	r1, #15
 8001d74:	4099      	lsls	r1, r3
 8001d76:	000b      	movs	r3, r1
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	0019      	movs	r1, r3
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	035b      	lsls	r3, r3, #13
 8001d84:	0b5b      	lsrs	r3, r3, #13
 8001d86:	d105      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x9c>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	0e9b      	lsrs	r3, r3, #26
 8001d8e:	221f      	movs	r2, #31
 8001d90:	4013      	ands	r3, r2
 8001d92:	e098      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x1ce>
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	d000      	beq.n	8001da0 <HAL_ADC_ConfigChannel+0xa8>
 8001d9e:	e091      	b.n	8001ec4 <HAL_ADC_ConfigChannel+0x1cc>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2202      	movs	r2, #2
 8001da6:	4013      	ands	r3, r2
 8001da8:	d000      	beq.n	8001dac <HAL_ADC_ConfigChannel+0xb4>
 8001daa:	e089      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0x1c8>
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2204      	movs	r2, #4
 8001db2:	4013      	ands	r3, r2
 8001db4:	d000      	beq.n	8001db8 <HAL_ADC_ConfigChannel+0xc0>
 8001db6:	e081      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x1c4>
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2208      	movs	r2, #8
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	d000      	beq.n	8001dc4 <HAL_ADC_ConfigChannel+0xcc>
 8001dc2:	e079      	b.n	8001eb8 <HAL_ADC_ConfigChannel+0x1c0>
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2210      	movs	r2, #16
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d000      	beq.n	8001dd0 <HAL_ADC_ConfigChannel+0xd8>
 8001dce:	e071      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x1bc>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	d000      	beq.n	8001ddc <HAL_ADC_ConfigChannel+0xe4>
 8001dda:	e069      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0x1b8>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2240      	movs	r2, #64	; 0x40
 8001de2:	4013      	ands	r3, r2
 8001de4:	d000      	beq.n	8001de8 <HAL_ADC_ConfigChannel+0xf0>
 8001de6:	e061      	b.n	8001eac <HAL_ADC_ConfigChannel+0x1b4>
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2280      	movs	r2, #128	; 0x80
 8001dee:	4013      	ands	r3, r2
 8001df0:	d000      	beq.n	8001df4 <HAL_ADC_ConfigChannel+0xfc>
 8001df2:	e059      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x1b0>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	2380      	movs	r3, #128	; 0x80
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d151      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x1ac>
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	2380      	movs	r3, #128	; 0x80
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d149      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x1a8>
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	2380      	movs	r3, #128	; 0x80
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4013      	ands	r3, r2
 8001e16:	d141      	bne.n	8001e9c <HAL_ADC_ConfigChannel+0x1a4>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	2380      	movs	r3, #128	; 0x80
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	4013      	ands	r3, r2
 8001e22:	d139      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x1a0>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	015b      	lsls	r3, r3, #5
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d131      	bne.n	8001e94 <HAL_ADC_ConfigChannel+0x19c>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	2380      	movs	r3, #128	; 0x80
 8001e36:	019b      	lsls	r3, r3, #6
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d129      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x198>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	2380      	movs	r3, #128	; 0x80
 8001e42:	01db      	lsls	r3, r3, #7
 8001e44:	4013      	ands	r3, r2
 8001e46:	d121      	bne.n	8001e8c <HAL_ADC_ConfigChannel+0x194>
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	2380      	movs	r3, #128	; 0x80
 8001e4e:	021b      	lsls	r3, r3, #8
 8001e50:	4013      	ands	r3, r2
 8001e52:	d119      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x190>
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	2380      	movs	r3, #128	; 0x80
 8001e5a:	025b      	lsls	r3, r3, #9
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d111      	bne.n	8001e84 <HAL_ADC_ConfigChannel+0x18c>
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	2380      	movs	r3, #128	; 0x80
 8001e66:	029b      	lsls	r3, r3, #10
 8001e68:	4013      	ands	r3, r2
 8001e6a:	d109      	bne.n	8001e80 <HAL_ADC_ConfigChannel+0x188>
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	2380      	movs	r3, #128	; 0x80
 8001e72:	02db      	lsls	r3, r3, #11
 8001e74:	4013      	ands	r3, r2
 8001e76:	d001      	beq.n	8001e7c <HAL_ADC_ConfigChannel+0x184>
 8001e78:	2312      	movs	r3, #18
 8001e7a:	e024      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x1ce>
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	e022      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x1ce>
 8001e80:	2311      	movs	r3, #17
 8001e82:	e020      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x1ce>
 8001e84:	2310      	movs	r3, #16
 8001e86:	e01e      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x1ce>
 8001e88:	230f      	movs	r3, #15
 8001e8a:	e01c      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x1ce>
 8001e8c:	230e      	movs	r3, #14
 8001e8e:	e01a      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x1ce>
 8001e90:	230d      	movs	r3, #13
 8001e92:	e018      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x1ce>
 8001e94:	230c      	movs	r3, #12
 8001e96:	e016      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x1ce>
 8001e98:	230b      	movs	r3, #11
 8001e9a:	e014      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x1ce>
 8001e9c:	230a      	movs	r3, #10
 8001e9e:	e012      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x1ce>
 8001ea0:	2309      	movs	r3, #9
 8001ea2:	e010      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x1ce>
 8001ea4:	2308      	movs	r3, #8
 8001ea6:	e00e      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x1ce>
 8001ea8:	2307      	movs	r3, #7
 8001eaa:	e00c      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x1ce>
 8001eac:	2306      	movs	r3, #6
 8001eae:	e00a      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x1ce>
 8001eb0:	2305      	movs	r3, #5
 8001eb2:	e008      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x1ce>
 8001eb4:	2304      	movs	r3, #4
 8001eb6:	e006      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x1ce>
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e004      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x1ce>
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	e002      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x1ce>
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e000      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x1ce>
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	6852      	ldr	r2, [r2, #4]
 8001eca:	201f      	movs	r0, #31
 8001ecc:	4002      	ands	r2, r0
 8001ece:	4093      	lsls	r3, r2
 8001ed0:	000a      	movs	r2, r1
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	089b      	lsrs	r3, r3, #2
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	69db      	ldr	r3, [r3, #28]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d808      	bhi.n	8001efa <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6818      	ldr	r0, [r3, #0]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	6859      	ldr	r1, [r3, #4]
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	001a      	movs	r2, r3
 8001ef6:	f7ff fcae 	bl	8001856 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6818      	ldr	r0, [r3, #0]
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	6819      	ldr	r1, [r3, #0]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	001a      	movs	r2, r3
 8001f08:	f7ff fce8 	bl	80018dc <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	db00      	blt.n	8001f16 <HAL_ADC_ConfigChannel+0x21e>
 8001f14:	e0bc      	b.n	8002090 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f16:	4b50      	ldr	r3, [pc, #320]	; (8002058 <HAL_ADC_ConfigChannel+0x360>)
 8001f18:	0018      	movs	r0, r3
 8001f1a:	f7ff fc5b 	bl	80017d4 <LL_ADC_GetCommonPathInternalCh>
 8001f1e:	0003      	movs	r3, r0
 8001f20:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a4d      	ldr	r2, [pc, #308]	; (800205c <HAL_ADC_ConfigChannel+0x364>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d122      	bne.n	8001f72 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	2380      	movs	r3, #128	; 0x80
 8001f30:	041b      	lsls	r3, r3, #16
 8001f32:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f34:	d11d      	bne.n	8001f72 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	2280      	movs	r2, #128	; 0x80
 8001f3a:	0412      	lsls	r2, r2, #16
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	4a46      	ldr	r2, [pc, #280]	; (8002058 <HAL_ADC_ConfigChannel+0x360>)
 8001f40:	0019      	movs	r1, r3
 8001f42:	0010      	movs	r0, r2
 8001f44:	f7ff fc32 	bl	80017ac <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f48:	4b45      	ldr	r3, [pc, #276]	; (8002060 <HAL_ADC_ConfigChannel+0x368>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4945      	ldr	r1, [pc, #276]	; (8002064 <HAL_ADC_ConfigChannel+0x36c>)
 8001f4e:	0018      	movs	r0, r3
 8001f50:	f7fe f8e0 	bl	8000114 <__udivsi3>
 8001f54:	0003      	movs	r3, r0
 8001f56:	1c5a      	adds	r2, r3, #1
 8001f58:	0013      	movs	r3, r2
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	189b      	adds	r3, r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f62:	e002      	b.n	8001f6a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1f9      	bne.n	8001f64 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f70:	e08e      	b.n	8002090 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a3c      	ldr	r2, [pc, #240]	; (8002068 <HAL_ADC_ConfigChannel+0x370>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d10e      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	2380      	movs	r3, #128	; 0x80
 8001f80:	045b      	lsls	r3, r3, #17
 8001f82:	4013      	ands	r3, r2
 8001f84:	d109      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	2280      	movs	r2, #128	; 0x80
 8001f8a:	0452      	lsls	r2, r2, #17
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	4a32      	ldr	r2, [pc, #200]	; (8002058 <HAL_ADC_ConfigChannel+0x360>)
 8001f90:	0019      	movs	r1, r3
 8001f92:	0010      	movs	r0, r2
 8001f94:	f7ff fc0a 	bl	80017ac <LL_ADC_SetCommonPathInternalCh>
 8001f98:	e07a      	b.n	8002090 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a33      	ldr	r2, [pc, #204]	; (800206c <HAL_ADC_ConfigChannel+0x374>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d000      	beq.n	8001fa6 <HAL_ADC_ConfigChannel+0x2ae>
 8001fa4:	e074      	b.n	8002090 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	2380      	movs	r3, #128	; 0x80
 8001faa:	03db      	lsls	r3, r3, #15
 8001fac:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001fae:	d000      	beq.n	8001fb2 <HAL_ADC_ConfigChannel+0x2ba>
 8001fb0:	e06e      	b.n	8002090 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	2280      	movs	r2, #128	; 0x80
 8001fb6:	03d2      	lsls	r2, r2, #15
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	4a27      	ldr	r2, [pc, #156]	; (8002058 <HAL_ADC_ConfigChannel+0x360>)
 8001fbc:	0019      	movs	r1, r3
 8001fbe:	0010      	movs	r0, r2
 8001fc0:	f7ff fbf4 	bl	80017ac <LL_ADC_SetCommonPathInternalCh>
 8001fc4:	e064      	b.n	8002090 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691a      	ldr	r2, [r3, #16]
 8001fca:	2380      	movs	r3, #128	; 0x80
 8001fcc:	061b      	lsls	r3, r3, #24
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d004      	beq.n	8001fdc <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001fd6:	4a1f      	ldr	r2, [pc, #124]	; (8002054 <HAL_ADC_ConfigChannel+0x35c>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d107      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	0019      	movs	r1, r3
 8001fe6:	0010      	movs	r0, r2
 8001fe8:	f7ff fc66 	bl	80018b8 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	da4d      	bge.n	8002090 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ff4:	4b18      	ldr	r3, [pc, #96]	; (8002058 <HAL_ADC_ConfigChannel+0x360>)
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	f7ff fbec 	bl	80017d4 <LL_ADC_GetCommonPathInternalCh>
 8001ffc:	0003      	movs	r3, r0
 8001ffe:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a15      	ldr	r2, [pc, #84]	; (800205c <HAL_ADC_ConfigChannel+0x364>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d108      	bne.n	800201c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4a18      	ldr	r2, [pc, #96]	; (8002070 <HAL_ADC_ConfigChannel+0x378>)
 800200e:	4013      	ands	r3, r2
 8002010:	4a11      	ldr	r2, [pc, #68]	; (8002058 <HAL_ADC_ConfigChannel+0x360>)
 8002012:	0019      	movs	r1, r3
 8002014:	0010      	movs	r0, r2
 8002016:	f7ff fbc9 	bl	80017ac <LL_ADC_SetCommonPathInternalCh>
 800201a:	e039      	b.n	8002090 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a11      	ldr	r2, [pc, #68]	; (8002068 <HAL_ADC_ConfigChannel+0x370>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d108      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4a12      	ldr	r2, [pc, #72]	; (8002074 <HAL_ADC_ConfigChannel+0x37c>)
 800202a:	4013      	ands	r3, r2
 800202c:	4a0a      	ldr	r2, [pc, #40]	; (8002058 <HAL_ADC_ConfigChannel+0x360>)
 800202e:	0019      	movs	r1, r3
 8002030:	0010      	movs	r0, r2
 8002032:	f7ff fbbb 	bl	80017ac <LL_ADC_SetCommonPathInternalCh>
 8002036:	e02b      	b.n	8002090 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a0b      	ldr	r2, [pc, #44]	; (800206c <HAL_ADC_ConfigChannel+0x374>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d126      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	4a0c      	ldr	r2, [pc, #48]	; (8002078 <HAL_ADC_ConfigChannel+0x380>)
 8002046:	4013      	ands	r3, r2
 8002048:	4a03      	ldr	r2, [pc, #12]	; (8002058 <HAL_ADC_ConfigChannel+0x360>)
 800204a:	0019      	movs	r1, r3
 800204c:	0010      	movs	r0, r2
 800204e:	f7ff fbad 	bl	80017ac <LL_ADC_SetCommonPathInternalCh>
 8002052:	e01d      	b.n	8002090 <HAL_ADC_ConfigChannel+0x398>
 8002054:	80000004 	.word	0x80000004
 8002058:	40012708 	.word	0x40012708
 800205c:	b0001000 	.word	0xb0001000
 8002060:	20000004 	.word	0x20000004
 8002064:	00030d40 	.word	0x00030d40
 8002068:	b8004000 	.word	0xb8004000
 800206c:	b4002000 	.word	0xb4002000
 8002070:	ff7fffff 	.word	0xff7fffff
 8002074:	feffffff 	.word	0xfeffffff
 8002078:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002080:	2220      	movs	r2, #32
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002088:	2317      	movs	r3, #23
 800208a:	18fb      	adds	r3, r7, r3
 800208c:	2201      	movs	r2, #1
 800208e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2254      	movs	r2, #84	; 0x54
 8002094:	2100      	movs	r1, #0
 8002096:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002098:	2317      	movs	r3, #23
 800209a:	18fb      	adds	r3, r7, r3
 800209c:	781b      	ldrb	r3, [r3, #0]
}
 800209e:	0018      	movs	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	b006      	add	sp, #24
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	46c0      	nop			; (mov r8, r8)

080020a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	0002      	movs	r2, r0
 80020b0:	1dfb      	adds	r3, r7, #7
 80020b2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020b4:	1dfb      	adds	r3, r7, #7
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b7f      	cmp	r3, #127	; 0x7f
 80020ba:	d809      	bhi.n	80020d0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020bc:	1dfb      	adds	r3, r7, #7
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	001a      	movs	r2, r3
 80020c2:	231f      	movs	r3, #31
 80020c4:	401a      	ands	r2, r3
 80020c6:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <__NVIC_EnableIRQ+0x30>)
 80020c8:	2101      	movs	r1, #1
 80020ca:	4091      	lsls	r1, r2
 80020cc:	000a      	movs	r2, r1
 80020ce:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80020d0:	46c0      	nop			; (mov r8, r8)
 80020d2:	46bd      	mov	sp, r7
 80020d4:	b002      	add	sp, #8
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	e000e100 	.word	0xe000e100

080020dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020dc:	b590      	push	{r4, r7, lr}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	0002      	movs	r2, r0
 80020e4:	6039      	str	r1, [r7, #0]
 80020e6:	1dfb      	adds	r3, r7, #7
 80020e8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020ea:	1dfb      	adds	r3, r7, #7
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2b7f      	cmp	r3, #127	; 0x7f
 80020f0:	d828      	bhi.n	8002144 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020f2:	4a2f      	ldr	r2, [pc, #188]	; (80021b0 <__NVIC_SetPriority+0xd4>)
 80020f4:	1dfb      	adds	r3, r7, #7
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	b25b      	sxtb	r3, r3
 80020fa:	089b      	lsrs	r3, r3, #2
 80020fc:	33c0      	adds	r3, #192	; 0xc0
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	589b      	ldr	r3, [r3, r2]
 8002102:	1dfa      	adds	r2, r7, #7
 8002104:	7812      	ldrb	r2, [r2, #0]
 8002106:	0011      	movs	r1, r2
 8002108:	2203      	movs	r2, #3
 800210a:	400a      	ands	r2, r1
 800210c:	00d2      	lsls	r2, r2, #3
 800210e:	21ff      	movs	r1, #255	; 0xff
 8002110:	4091      	lsls	r1, r2
 8002112:	000a      	movs	r2, r1
 8002114:	43d2      	mvns	r2, r2
 8002116:	401a      	ands	r2, r3
 8002118:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	019b      	lsls	r3, r3, #6
 800211e:	22ff      	movs	r2, #255	; 0xff
 8002120:	401a      	ands	r2, r3
 8002122:	1dfb      	adds	r3, r7, #7
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	0018      	movs	r0, r3
 8002128:	2303      	movs	r3, #3
 800212a:	4003      	ands	r3, r0
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002130:	481f      	ldr	r0, [pc, #124]	; (80021b0 <__NVIC_SetPriority+0xd4>)
 8002132:	1dfb      	adds	r3, r7, #7
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	b25b      	sxtb	r3, r3
 8002138:	089b      	lsrs	r3, r3, #2
 800213a:	430a      	orrs	r2, r1
 800213c:	33c0      	adds	r3, #192	; 0xc0
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002142:	e031      	b.n	80021a8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002144:	4a1b      	ldr	r2, [pc, #108]	; (80021b4 <__NVIC_SetPriority+0xd8>)
 8002146:	1dfb      	adds	r3, r7, #7
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	0019      	movs	r1, r3
 800214c:	230f      	movs	r3, #15
 800214e:	400b      	ands	r3, r1
 8002150:	3b08      	subs	r3, #8
 8002152:	089b      	lsrs	r3, r3, #2
 8002154:	3306      	adds	r3, #6
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	18d3      	adds	r3, r2, r3
 800215a:	3304      	adds	r3, #4
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	1dfa      	adds	r2, r7, #7
 8002160:	7812      	ldrb	r2, [r2, #0]
 8002162:	0011      	movs	r1, r2
 8002164:	2203      	movs	r2, #3
 8002166:	400a      	ands	r2, r1
 8002168:	00d2      	lsls	r2, r2, #3
 800216a:	21ff      	movs	r1, #255	; 0xff
 800216c:	4091      	lsls	r1, r2
 800216e:	000a      	movs	r2, r1
 8002170:	43d2      	mvns	r2, r2
 8002172:	401a      	ands	r2, r3
 8002174:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	019b      	lsls	r3, r3, #6
 800217a:	22ff      	movs	r2, #255	; 0xff
 800217c:	401a      	ands	r2, r3
 800217e:	1dfb      	adds	r3, r7, #7
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	0018      	movs	r0, r3
 8002184:	2303      	movs	r3, #3
 8002186:	4003      	ands	r3, r0
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800218c:	4809      	ldr	r0, [pc, #36]	; (80021b4 <__NVIC_SetPriority+0xd8>)
 800218e:	1dfb      	adds	r3, r7, #7
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	001c      	movs	r4, r3
 8002194:	230f      	movs	r3, #15
 8002196:	4023      	ands	r3, r4
 8002198:	3b08      	subs	r3, #8
 800219a:	089b      	lsrs	r3, r3, #2
 800219c:	430a      	orrs	r2, r1
 800219e:	3306      	adds	r3, #6
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	18c3      	adds	r3, r0, r3
 80021a4:	3304      	adds	r3, #4
 80021a6:	601a      	str	r2, [r3, #0]
}
 80021a8:	46c0      	nop			; (mov r8, r8)
 80021aa:	46bd      	mov	sp, r7
 80021ac:	b003      	add	sp, #12
 80021ae:	bd90      	pop	{r4, r7, pc}
 80021b0:	e000e100 	.word	0xe000e100
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	607a      	str	r2, [r7, #4]
 80021c2:	210f      	movs	r1, #15
 80021c4:	187b      	adds	r3, r7, r1
 80021c6:	1c02      	adds	r2, r0, #0
 80021c8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	187b      	adds	r3, r7, r1
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	b25b      	sxtb	r3, r3
 80021d2:	0011      	movs	r1, r2
 80021d4:	0018      	movs	r0, r3
 80021d6:	f7ff ff81 	bl	80020dc <__NVIC_SetPriority>
}
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	46bd      	mov	sp, r7
 80021de:	b004      	add	sp, #16
 80021e0:	bd80      	pop	{r7, pc}

080021e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b082      	sub	sp, #8
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	0002      	movs	r2, r0
 80021ea:	1dfb      	adds	r3, r7, #7
 80021ec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021ee:	1dfb      	adds	r3, r7, #7
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	b25b      	sxtb	r3, r3
 80021f4:	0018      	movs	r0, r3
 80021f6:	f7ff ff57 	bl	80020a8 <__NVIC_EnableIRQ>
}
 80021fa:	46c0      	nop			; (mov r8, r8)
 80021fc:	46bd      	mov	sp, r7
 80021fe:	b002      	add	sp, #8
 8002200:	bd80      	pop	{r7, pc}
	...

08002204 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800220e:	2300      	movs	r3, #0
 8002210:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002212:	e147      	b.n	80024a4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2101      	movs	r1, #1
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	4091      	lsls	r1, r2
 800221e:	000a      	movs	r2, r1
 8002220:	4013      	ands	r3, r2
 8002222:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d100      	bne.n	800222c <HAL_GPIO_Init+0x28>
 800222a:	e138      	b.n	800249e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	2203      	movs	r2, #3
 8002232:	4013      	ands	r3, r2
 8002234:	2b01      	cmp	r3, #1
 8002236:	d005      	beq.n	8002244 <HAL_GPIO_Init+0x40>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2203      	movs	r2, #3
 800223e:	4013      	ands	r3, r2
 8002240:	2b02      	cmp	r3, #2
 8002242:	d130      	bne.n	80022a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	2203      	movs	r2, #3
 8002250:	409a      	lsls	r2, r3
 8002252:	0013      	movs	r3, r2
 8002254:	43da      	mvns	r2, r3
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	4013      	ands	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	68da      	ldr	r2, [r3, #12]
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	409a      	lsls	r2, r3
 8002266:	0013      	movs	r3, r2
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	4313      	orrs	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800227a:	2201      	movs	r2, #1
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	409a      	lsls	r2, r3
 8002280:	0013      	movs	r3, r2
 8002282:	43da      	mvns	r2, r3
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	4013      	ands	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	091b      	lsrs	r3, r3, #4
 8002290:	2201      	movs	r2, #1
 8002292:	401a      	ands	r2, r3
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	409a      	lsls	r2, r3
 8002298:	0013      	movs	r3, r2
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	4313      	orrs	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2203      	movs	r2, #3
 80022ac:	4013      	ands	r3, r2
 80022ae:	2b03      	cmp	r3, #3
 80022b0:	d017      	beq.n	80022e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	2203      	movs	r2, #3
 80022be:	409a      	lsls	r2, r3
 80022c0:	0013      	movs	r3, r2
 80022c2:	43da      	mvns	r2, r3
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	4013      	ands	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	409a      	lsls	r2, r3
 80022d4:	0013      	movs	r3, r2
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4313      	orrs	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2203      	movs	r2, #3
 80022e8:	4013      	ands	r3, r2
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d123      	bne.n	8002336 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	08da      	lsrs	r2, r3, #3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	3208      	adds	r2, #8
 80022f6:	0092      	lsls	r2, r2, #2
 80022f8:	58d3      	ldr	r3, [r2, r3]
 80022fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	2207      	movs	r2, #7
 8002300:	4013      	ands	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	220f      	movs	r2, #15
 8002306:	409a      	lsls	r2, r3
 8002308:	0013      	movs	r3, r2
 800230a:	43da      	mvns	r2, r3
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4013      	ands	r3, r2
 8002310:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	691a      	ldr	r2, [r3, #16]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	2107      	movs	r1, #7
 800231a:	400b      	ands	r3, r1
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	409a      	lsls	r2, r3
 8002320:	0013      	movs	r3, r2
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	4313      	orrs	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	08da      	lsrs	r2, r3, #3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3208      	adds	r2, #8
 8002330:	0092      	lsls	r2, r2, #2
 8002332:	6939      	ldr	r1, [r7, #16]
 8002334:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	2203      	movs	r2, #3
 8002342:	409a      	lsls	r2, r3
 8002344:	0013      	movs	r3, r2
 8002346:	43da      	mvns	r2, r3
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	4013      	ands	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2203      	movs	r2, #3
 8002354:	401a      	ands	r2, r3
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	409a      	lsls	r2, r3
 800235c:	0013      	movs	r3, r2
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	23c0      	movs	r3, #192	; 0xc0
 8002370:	029b      	lsls	r3, r3, #10
 8002372:	4013      	ands	r3, r2
 8002374:	d100      	bne.n	8002378 <HAL_GPIO_Init+0x174>
 8002376:	e092      	b.n	800249e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002378:	4a50      	ldr	r2, [pc, #320]	; (80024bc <HAL_GPIO_Init+0x2b8>)
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	089b      	lsrs	r3, r3, #2
 800237e:	3318      	adds	r3, #24
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	589b      	ldr	r3, [r3, r2]
 8002384:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	2203      	movs	r2, #3
 800238a:	4013      	ands	r3, r2
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	220f      	movs	r2, #15
 8002390:	409a      	lsls	r2, r3
 8002392:	0013      	movs	r3, r2
 8002394:	43da      	mvns	r2, r3
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4013      	ands	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	23a0      	movs	r3, #160	; 0xa0
 80023a0:	05db      	lsls	r3, r3, #23
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d013      	beq.n	80023ce <HAL_GPIO_Init+0x1ca>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a45      	ldr	r2, [pc, #276]	; (80024c0 <HAL_GPIO_Init+0x2bc>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d00d      	beq.n	80023ca <HAL_GPIO_Init+0x1c6>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a44      	ldr	r2, [pc, #272]	; (80024c4 <HAL_GPIO_Init+0x2c0>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d007      	beq.n	80023c6 <HAL_GPIO_Init+0x1c2>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a43      	ldr	r2, [pc, #268]	; (80024c8 <HAL_GPIO_Init+0x2c4>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d101      	bne.n	80023c2 <HAL_GPIO_Init+0x1be>
 80023be:	2303      	movs	r3, #3
 80023c0:	e006      	b.n	80023d0 <HAL_GPIO_Init+0x1cc>
 80023c2:	2305      	movs	r3, #5
 80023c4:	e004      	b.n	80023d0 <HAL_GPIO_Init+0x1cc>
 80023c6:	2302      	movs	r3, #2
 80023c8:	e002      	b.n	80023d0 <HAL_GPIO_Init+0x1cc>
 80023ca:	2301      	movs	r3, #1
 80023cc:	e000      	b.n	80023d0 <HAL_GPIO_Init+0x1cc>
 80023ce:	2300      	movs	r3, #0
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	2103      	movs	r1, #3
 80023d4:	400a      	ands	r2, r1
 80023d6:	00d2      	lsls	r2, r2, #3
 80023d8:	4093      	lsls	r3, r2
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	4313      	orrs	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80023e0:	4936      	ldr	r1, [pc, #216]	; (80024bc <HAL_GPIO_Init+0x2b8>)
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	089b      	lsrs	r3, r3, #2
 80023e6:	3318      	adds	r3, #24
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023ee:	4b33      	ldr	r3, [pc, #204]	; (80024bc <HAL_GPIO_Init+0x2b8>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	43da      	mvns	r2, r3
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	4013      	ands	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685a      	ldr	r2, [r3, #4]
 8002402:	2380      	movs	r3, #128	; 0x80
 8002404:	035b      	lsls	r3, r3, #13
 8002406:	4013      	ands	r3, r2
 8002408:	d003      	beq.n	8002412 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	4313      	orrs	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002412:	4b2a      	ldr	r3, [pc, #168]	; (80024bc <HAL_GPIO_Init+0x2b8>)
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002418:	4b28      	ldr	r3, [pc, #160]	; (80024bc <HAL_GPIO_Init+0x2b8>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	43da      	mvns	r2, r3
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	4013      	ands	r3, r2
 8002426:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	2380      	movs	r3, #128	; 0x80
 800242e:	039b      	lsls	r3, r3, #14
 8002430:	4013      	ands	r3, r2
 8002432:	d003      	beq.n	800243c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	4313      	orrs	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800243c:	4b1f      	ldr	r3, [pc, #124]	; (80024bc <HAL_GPIO_Init+0x2b8>)
 800243e:	693a      	ldr	r2, [r7, #16]
 8002440:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002442:	4a1e      	ldr	r2, [pc, #120]	; (80024bc <HAL_GPIO_Init+0x2b8>)
 8002444:	2384      	movs	r3, #132	; 0x84
 8002446:	58d3      	ldr	r3, [r2, r3]
 8002448:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	43da      	mvns	r2, r3
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	4013      	ands	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	2380      	movs	r3, #128	; 0x80
 800245a:	029b      	lsls	r3, r3, #10
 800245c:	4013      	ands	r3, r2
 800245e:	d003      	beq.n	8002468 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	4313      	orrs	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002468:	4914      	ldr	r1, [pc, #80]	; (80024bc <HAL_GPIO_Init+0x2b8>)
 800246a:	2284      	movs	r2, #132	; 0x84
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002470:	4a12      	ldr	r2, [pc, #72]	; (80024bc <HAL_GPIO_Init+0x2b8>)
 8002472:	2380      	movs	r3, #128	; 0x80
 8002474:	58d3      	ldr	r3, [r2, r3]
 8002476:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	43da      	mvns	r2, r3
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	4013      	ands	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	2380      	movs	r3, #128	; 0x80
 8002488:	025b      	lsls	r3, r3, #9
 800248a:	4013      	ands	r3, r2
 800248c:	d003      	beq.n	8002496 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4313      	orrs	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002496:	4909      	ldr	r1, [pc, #36]	; (80024bc <HAL_GPIO_Init+0x2b8>)
 8002498:	2280      	movs	r2, #128	; 0x80
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	3301      	adds	r3, #1
 80024a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	40da      	lsrs	r2, r3
 80024ac:	1e13      	subs	r3, r2, #0
 80024ae:	d000      	beq.n	80024b2 <HAL_GPIO_Init+0x2ae>
 80024b0:	e6b0      	b.n	8002214 <HAL_GPIO_Init+0x10>
  }
}
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	46c0      	nop			; (mov r8, r8)
 80024b6:	46bd      	mov	sp, r7
 80024b8:	b006      	add	sp, #24
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40021800 	.word	0x40021800
 80024c0:	50000400 	.word	0x50000400
 80024c4:	50000800 	.word	0x50000800
 80024c8:	50000c00 	.word	0x50000c00

080024cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	0008      	movs	r0, r1
 80024d6:	0011      	movs	r1, r2
 80024d8:	1cbb      	adds	r3, r7, #2
 80024da:	1c02      	adds	r2, r0, #0
 80024dc:	801a      	strh	r2, [r3, #0]
 80024de:	1c7b      	adds	r3, r7, #1
 80024e0:	1c0a      	adds	r2, r1, #0
 80024e2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024e4:	1c7b      	adds	r3, r7, #1
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d004      	beq.n	80024f6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024ec:	1cbb      	adds	r3, r7, #2
 80024ee:	881a      	ldrh	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024f4:	e003      	b.n	80024fe <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024f6:	1cbb      	adds	r3, r7, #2
 80024f8:	881a      	ldrh	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024fe:	46c0      	nop			; (mov r8, r8)
 8002500:	46bd      	mov	sp, r7
 8002502:	b002      	add	sp, #8
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b084      	sub	sp, #16
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
 800250e:	000a      	movs	r2, r1
 8002510:	1cbb      	adds	r3, r7, #2
 8002512:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800251a:	1cbb      	adds	r3, r7, #2
 800251c:	881b      	ldrh	r3, [r3, #0]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4013      	ands	r3, r2
 8002522:	041a      	lsls	r2, r3, #16
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	43db      	mvns	r3, r3
 8002528:	1cb9      	adds	r1, r7, #2
 800252a:	8809      	ldrh	r1, [r1, #0]
 800252c:	400b      	ands	r3, r1
 800252e:	431a      	orrs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	619a      	str	r2, [r3, #24]
}
 8002534:	46c0      	nop			; (mov r8, r8)
 8002536:	46bd      	mov	sp, r7
 8002538:	b004      	add	sp, #16
 800253a:	bd80      	pop	{r7, pc}

0800253c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	0002      	movs	r2, r0
 8002544:	1dbb      	adds	r3, r7, #6
 8002546:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002548:	4b10      	ldr	r3, [pc, #64]	; (800258c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	1dba      	adds	r2, r7, #6
 800254e:	8812      	ldrh	r2, [r2, #0]
 8002550:	4013      	ands	r3, r2
 8002552:	d008      	beq.n	8002566 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002554:	4b0d      	ldr	r3, [pc, #52]	; (800258c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002556:	1dba      	adds	r2, r7, #6
 8002558:	8812      	ldrh	r2, [r2, #0]
 800255a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800255c:	1dbb      	adds	r3, r7, #6
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	0018      	movs	r0, r3
 8002562:	f000 f815 	bl	8002590 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002566:	4b09      	ldr	r3, [pc, #36]	; (800258c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	1dba      	adds	r2, r7, #6
 800256c:	8812      	ldrh	r2, [r2, #0]
 800256e:	4013      	ands	r3, r2
 8002570:	d008      	beq.n	8002584 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002572:	4b06      	ldr	r3, [pc, #24]	; (800258c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002574:	1dba      	adds	r2, r7, #6
 8002576:	8812      	ldrh	r2, [r2, #0]
 8002578:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800257a:	1dbb      	adds	r3, r7, #6
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	0018      	movs	r0, r3
 8002580:	f7fe fba2 	bl	8000cc8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002584:	46c0      	nop			; (mov r8, r8)
 8002586:	46bd      	mov	sp, r7
 8002588:	b002      	add	sp, #8
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40021800 	.word	0x40021800

08002590 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	0002      	movs	r2, r0
 8002598:	1dbb      	adds	r3, r7, #6
 800259a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800259c:	46c0      	nop			; (mov r8, r8)
 800259e:	46bd      	mov	sp, r7
 80025a0:	b002      	add	sp, #8
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e082      	b.n	80026bc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2241      	movs	r2, #65	; 0x41
 80025ba:	5c9b      	ldrb	r3, [r3, r2]
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d107      	bne.n	80025d2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2240      	movs	r2, #64	; 0x40
 80025c6:	2100      	movs	r1, #0
 80025c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	0018      	movs	r0, r3
 80025ce:	f7fe fbff 	bl	8000dd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2241      	movs	r2, #65	; 0x41
 80025d6:	2124      	movs	r1, #36	; 0x24
 80025d8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2101      	movs	r1, #1
 80025e6:	438a      	bics	r2, r1
 80025e8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4934      	ldr	r1, [pc, #208]	; (80026c4 <HAL_I2C_Init+0x120>)
 80025f4:	400a      	ands	r2, r1
 80025f6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4931      	ldr	r1, [pc, #196]	; (80026c8 <HAL_I2C_Init+0x124>)
 8002604:	400a      	ands	r2, r1
 8002606:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d108      	bne.n	8002622 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2180      	movs	r1, #128	; 0x80
 800261a:	0209      	lsls	r1, r1, #8
 800261c:	430a      	orrs	r2, r1
 800261e:	609a      	str	r2, [r3, #8]
 8002620:	e007      	b.n	8002632 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689a      	ldr	r2, [r3, #8]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2184      	movs	r1, #132	; 0x84
 800262c:	0209      	lsls	r1, r1, #8
 800262e:	430a      	orrs	r2, r1
 8002630:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	2b02      	cmp	r3, #2
 8002638:	d104      	bne.n	8002644 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2280      	movs	r2, #128	; 0x80
 8002640:	0112      	lsls	r2, r2, #4
 8002642:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	491f      	ldr	r1, [pc, #124]	; (80026cc <HAL_I2C_Init+0x128>)
 8002650:	430a      	orrs	r2, r1
 8002652:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68da      	ldr	r2, [r3, #12]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	491a      	ldr	r1, [pc, #104]	; (80026c8 <HAL_I2C_Init+0x124>)
 8002660:	400a      	ands	r2, r1
 8002662:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	691a      	ldr	r2, [r3, #16]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	695b      	ldr	r3, [r3, #20]
 800266c:	431a      	orrs	r2, r3
 800266e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69d9      	ldr	r1, [r3, #28]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a1a      	ldr	r2, [r3, #32]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	430a      	orrs	r2, r1
 800268c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2101      	movs	r1, #1
 800269a:	430a      	orrs	r2, r1
 800269c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2241      	movs	r2, #65	; 0x41
 80026a8:	2120      	movs	r1, #32
 80026aa:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2242      	movs	r2, #66	; 0x42
 80026b6:	2100      	movs	r1, #0
 80026b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	0018      	movs	r0, r3
 80026be:	46bd      	mov	sp, r7
 80026c0:	b002      	add	sp, #8
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	f0ffffff 	.word	0xf0ffffff
 80026c8:	ffff7fff 	.word	0xffff7fff
 80026cc:	02008000 	.word	0x02008000

080026d0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026d0:	b590      	push	{r4, r7, lr}
 80026d2:	b089      	sub	sp, #36	; 0x24
 80026d4:	af02      	add	r7, sp, #8
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	000c      	movs	r4, r1
 80026da:	0010      	movs	r0, r2
 80026dc:	0019      	movs	r1, r3
 80026de:	230a      	movs	r3, #10
 80026e0:	18fb      	adds	r3, r7, r3
 80026e2:	1c22      	adds	r2, r4, #0
 80026e4:	801a      	strh	r2, [r3, #0]
 80026e6:	2308      	movs	r3, #8
 80026e8:	18fb      	adds	r3, r7, r3
 80026ea:	1c02      	adds	r2, r0, #0
 80026ec:	801a      	strh	r2, [r3, #0]
 80026ee:	1dbb      	adds	r3, r7, #6
 80026f0:	1c0a      	adds	r2, r1, #0
 80026f2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2241      	movs	r2, #65	; 0x41
 80026f8:	5c9b      	ldrb	r3, [r3, r2]
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b20      	cmp	r3, #32
 80026fe:	d000      	beq.n	8002702 <HAL_I2C_Mem_Write+0x32>
 8002700:	e10c      	b.n	800291c <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002704:	2b00      	cmp	r3, #0
 8002706:	d004      	beq.n	8002712 <HAL_I2C_Mem_Write+0x42>
 8002708:	232c      	movs	r3, #44	; 0x2c
 800270a:	18fb      	adds	r3, r7, r3
 800270c:	881b      	ldrh	r3, [r3, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d105      	bne.n	800271e <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2280      	movs	r2, #128	; 0x80
 8002716:	0092      	lsls	r2, r2, #2
 8002718:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e0ff      	b.n	800291e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2240      	movs	r2, #64	; 0x40
 8002722:	5c9b      	ldrb	r3, [r3, r2]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d101      	bne.n	800272c <HAL_I2C_Mem_Write+0x5c>
 8002728:	2302      	movs	r3, #2
 800272a:	e0f8      	b.n	800291e <HAL_I2C_Mem_Write+0x24e>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2240      	movs	r2, #64	; 0x40
 8002730:	2101      	movs	r1, #1
 8002732:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002734:	f7ff f80c 	bl	8001750 <HAL_GetTick>
 8002738:	0003      	movs	r3, r0
 800273a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800273c:	2380      	movs	r3, #128	; 0x80
 800273e:	0219      	lsls	r1, r3, #8
 8002740:	68f8      	ldr	r0, [r7, #12]
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	2319      	movs	r3, #25
 8002748:	2201      	movs	r2, #1
 800274a:	f000 fb0b 	bl	8002d64 <I2C_WaitOnFlagUntilTimeout>
 800274e:	1e03      	subs	r3, r0, #0
 8002750:	d001      	beq.n	8002756 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e0e3      	b.n	800291e <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2241      	movs	r2, #65	; 0x41
 800275a:	2121      	movs	r1, #33	; 0x21
 800275c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2242      	movs	r2, #66	; 0x42
 8002762:	2140      	movs	r1, #64	; 0x40
 8002764:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002770:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	222c      	movs	r2, #44	; 0x2c
 8002776:	18ba      	adds	r2, r7, r2
 8002778:	8812      	ldrh	r2, [r2, #0]
 800277a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002782:	1dbb      	adds	r3, r7, #6
 8002784:	881c      	ldrh	r4, [r3, #0]
 8002786:	2308      	movs	r3, #8
 8002788:	18fb      	adds	r3, r7, r3
 800278a:	881a      	ldrh	r2, [r3, #0]
 800278c:	230a      	movs	r3, #10
 800278e:	18fb      	adds	r3, r7, r3
 8002790:	8819      	ldrh	r1, [r3, #0]
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	9301      	str	r3, [sp, #4]
 8002798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	0023      	movs	r3, r4
 800279e:	f000 f9f9 	bl	8002b94 <I2C_RequestMemoryWrite>
 80027a2:	1e03      	subs	r3, r0, #0
 80027a4:	d005      	beq.n	80027b2 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2240      	movs	r2, #64	; 0x40
 80027aa:	2100      	movs	r1, #0
 80027ac:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e0b5      	b.n	800291e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	2bff      	cmp	r3, #255	; 0xff
 80027ba:	d911      	bls.n	80027e0 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	22ff      	movs	r2, #255	; 0xff
 80027c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	2380      	movs	r3, #128	; 0x80
 80027ca:	045c      	lsls	r4, r3, #17
 80027cc:	230a      	movs	r3, #10
 80027ce:	18fb      	adds	r3, r7, r3
 80027d0:	8819      	ldrh	r1, [r3, #0]
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	2300      	movs	r3, #0
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	0023      	movs	r3, r4
 80027da:	f000 fc7d 	bl	80030d8 <I2C_TransferConfig>
 80027de:	e012      	b.n	8002806 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ee:	b2da      	uxtb	r2, r3
 80027f0:	2380      	movs	r3, #128	; 0x80
 80027f2:	049c      	lsls	r4, r3, #18
 80027f4:	230a      	movs	r3, #10
 80027f6:	18fb      	adds	r3, r7, r3
 80027f8:	8819      	ldrh	r1, [r3, #0]
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	2300      	movs	r3, #0
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	0023      	movs	r3, r4
 8002802:	f000 fc69 	bl	80030d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	0018      	movs	r0, r3
 800280e:	f000 fae8 	bl	8002de2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002812:	1e03      	subs	r3, r0, #0
 8002814:	d001      	beq.n	800281a <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e081      	b.n	800291e <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	781a      	ldrb	r2, [r3, #0]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282a:	1c5a      	adds	r2, r3, #1
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002834:	b29b      	uxth	r3, r3
 8002836:	3b01      	subs	r3, #1
 8002838:	b29a      	uxth	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002842:	3b01      	subs	r3, #1
 8002844:	b29a      	uxth	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800284e:	b29b      	uxth	r3, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	d03a      	beq.n	80028ca <HAL_I2C_Mem_Write+0x1fa>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002858:	2b00      	cmp	r3, #0
 800285a:	d136      	bne.n	80028ca <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800285c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	0013      	movs	r3, r2
 8002866:	2200      	movs	r2, #0
 8002868:	2180      	movs	r1, #128	; 0x80
 800286a:	f000 fa7b 	bl	8002d64 <I2C_WaitOnFlagUntilTimeout>
 800286e:	1e03      	subs	r3, r0, #0
 8002870:	d001      	beq.n	8002876 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e053      	b.n	800291e <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287a:	b29b      	uxth	r3, r3
 800287c:	2bff      	cmp	r3, #255	; 0xff
 800287e:	d911      	bls.n	80028a4 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	22ff      	movs	r2, #255	; 0xff
 8002884:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288a:	b2da      	uxtb	r2, r3
 800288c:	2380      	movs	r3, #128	; 0x80
 800288e:	045c      	lsls	r4, r3, #17
 8002890:	230a      	movs	r3, #10
 8002892:	18fb      	adds	r3, r7, r3
 8002894:	8819      	ldrh	r1, [r3, #0]
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	2300      	movs	r3, #0
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	0023      	movs	r3, r4
 800289e:	f000 fc1b 	bl	80030d8 <I2C_TransferConfig>
 80028a2:	e012      	b.n	80028ca <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a8:	b29a      	uxth	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	2380      	movs	r3, #128	; 0x80
 80028b6:	049c      	lsls	r4, r3, #18
 80028b8:	230a      	movs	r3, #10
 80028ba:	18fb      	adds	r3, r7, r3
 80028bc:	8819      	ldrh	r1, [r3, #0]
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	2300      	movs	r3, #0
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	0023      	movs	r3, r4
 80028c6:	f000 fc07 	bl	80030d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d198      	bne.n	8002806 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	0018      	movs	r0, r3
 80028dc:	f000 fac0 	bl	8002e60 <I2C_WaitOnSTOPFlagUntilTimeout>
 80028e0:	1e03      	subs	r3, r0, #0
 80028e2:	d001      	beq.n	80028e8 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e01a      	b.n	800291e <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2220      	movs	r2, #32
 80028ee:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	490b      	ldr	r1, [pc, #44]	; (8002928 <HAL_I2C_Mem_Write+0x258>)
 80028fc:	400a      	ands	r2, r1
 80028fe:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2241      	movs	r2, #65	; 0x41
 8002904:	2120      	movs	r1, #32
 8002906:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2242      	movs	r2, #66	; 0x42
 800290c:	2100      	movs	r1, #0
 800290e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2240      	movs	r2, #64	; 0x40
 8002914:	2100      	movs	r1, #0
 8002916:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002918:	2300      	movs	r3, #0
 800291a:	e000      	b.n	800291e <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800291c:	2302      	movs	r3, #2
  }
}
 800291e:	0018      	movs	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	b007      	add	sp, #28
 8002924:	bd90      	pop	{r4, r7, pc}
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	fe00e800 	.word	0xfe00e800

0800292c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800292c:	b590      	push	{r4, r7, lr}
 800292e:	b089      	sub	sp, #36	; 0x24
 8002930:	af02      	add	r7, sp, #8
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	000c      	movs	r4, r1
 8002936:	0010      	movs	r0, r2
 8002938:	0019      	movs	r1, r3
 800293a:	230a      	movs	r3, #10
 800293c:	18fb      	adds	r3, r7, r3
 800293e:	1c22      	adds	r2, r4, #0
 8002940:	801a      	strh	r2, [r3, #0]
 8002942:	2308      	movs	r3, #8
 8002944:	18fb      	adds	r3, r7, r3
 8002946:	1c02      	adds	r2, r0, #0
 8002948:	801a      	strh	r2, [r3, #0]
 800294a:	1dbb      	adds	r3, r7, #6
 800294c:	1c0a      	adds	r2, r1, #0
 800294e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2241      	movs	r2, #65	; 0x41
 8002954:	5c9b      	ldrb	r3, [r3, r2]
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b20      	cmp	r3, #32
 800295a:	d000      	beq.n	800295e <HAL_I2C_Mem_Read+0x32>
 800295c:	e110      	b.n	8002b80 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800295e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002960:	2b00      	cmp	r3, #0
 8002962:	d004      	beq.n	800296e <HAL_I2C_Mem_Read+0x42>
 8002964:	232c      	movs	r3, #44	; 0x2c
 8002966:	18fb      	adds	r3, r7, r3
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d105      	bne.n	800297a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2280      	movs	r2, #128	; 0x80
 8002972:	0092      	lsls	r2, r2, #2
 8002974:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e103      	b.n	8002b82 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2240      	movs	r2, #64	; 0x40
 800297e:	5c9b      	ldrb	r3, [r3, r2]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d101      	bne.n	8002988 <HAL_I2C_Mem_Read+0x5c>
 8002984:	2302      	movs	r3, #2
 8002986:	e0fc      	b.n	8002b82 <HAL_I2C_Mem_Read+0x256>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2240      	movs	r2, #64	; 0x40
 800298c:	2101      	movs	r1, #1
 800298e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002990:	f7fe fede 	bl	8001750 <HAL_GetTick>
 8002994:	0003      	movs	r3, r0
 8002996:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002998:	2380      	movs	r3, #128	; 0x80
 800299a:	0219      	lsls	r1, r3, #8
 800299c:	68f8      	ldr	r0, [r7, #12]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	2319      	movs	r3, #25
 80029a4:	2201      	movs	r2, #1
 80029a6:	f000 f9dd 	bl	8002d64 <I2C_WaitOnFlagUntilTimeout>
 80029aa:	1e03      	subs	r3, r0, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e0e7      	b.n	8002b82 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2241      	movs	r2, #65	; 0x41
 80029b6:	2122      	movs	r1, #34	; 0x22
 80029b8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2242      	movs	r2, #66	; 0x42
 80029be:	2140      	movs	r1, #64	; 0x40
 80029c0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	222c      	movs	r2, #44	; 0x2c
 80029d2:	18ba      	adds	r2, r7, r2
 80029d4:	8812      	ldrh	r2, [r2, #0]
 80029d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029de:	1dbb      	adds	r3, r7, #6
 80029e0:	881c      	ldrh	r4, [r3, #0]
 80029e2:	2308      	movs	r3, #8
 80029e4:	18fb      	adds	r3, r7, r3
 80029e6:	881a      	ldrh	r2, [r3, #0]
 80029e8:	230a      	movs	r3, #10
 80029ea:	18fb      	adds	r3, r7, r3
 80029ec:	8819      	ldrh	r1, [r3, #0]
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	9301      	str	r3, [sp, #4]
 80029f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	0023      	movs	r3, r4
 80029fa:	f000 f92f 	bl	8002c5c <I2C_RequestMemoryRead>
 80029fe:	1e03      	subs	r3, r0, #0
 8002a00:	d005      	beq.n	8002a0e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2240      	movs	r2, #64	; 0x40
 8002a06:	2100      	movs	r1, #0
 8002a08:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e0b9      	b.n	8002b82 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	2bff      	cmp	r3, #255	; 0xff
 8002a16:	d911      	bls.n	8002a3c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	22ff      	movs	r2, #255	; 0xff
 8002a1c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	2380      	movs	r3, #128	; 0x80
 8002a26:	045c      	lsls	r4, r3, #17
 8002a28:	230a      	movs	r3, #10
 8002a2a:	18fb      	adds	r3, r7, r3
 8002a2c:	8819      	ldrh	r1, [r3, #0]
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	4b56      	ldr	r3, [pc, #344]	; (8002b8c <HAL_I2C_Mem_Read+0x260>)
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	0023      	movs	r3, r4
 8002a36:	f000 fb4f 	bl	80030d8 <I2C_TransferConfig>
 8002a3a:	e012      	b.n	8002a62 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	2380      	movs	r3, #128	; 0x80
 8002a4e:	049c      	lsls	r4, r3, #18
 8002a50:	230a      	movs	r3, #10
 8002a52:	18fb      	adds	r3, r7, r3
 8002a54:	8819      	ldrh	r1, [r3, #0]
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	4b4c      	ldr	r3, [pc, #304]	; (8002b8c <HAL_I2C_Mem_Read+0x260>)
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	0023      	movs	r3, r4
 8002a5e:	f000 fb3b 	bl	80030d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002a62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	9300      	str	r3, [sp, #0]
 8002a6a:	0013      	movs	r3, r2
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	2104      	movs	r1, #4
 8002a70:	f000 f978 	bl	8002d64 <I2C_WaitOnFlagUntilTimeout>
 8002a74:	1e03      	subs	r3, r0, #0
 8002a76:	d001      	beq.n	8002a7c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e082      	b.n	8002b82 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8e:	1c5a      	adds	r2, r3, #1
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d03a      	beq.n	8002b2e <HAL_I2C_Mem_Read+0x202>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d136      	bne.n	8002b2e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ac0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	0013      	movs	r3, r2
 8002aca:	2200      	movs	r2, #0
 8002acc:	2180      	movs	r1, #128	; 0x80
 8002ace:	f000 f949 	bl	8002d64 <I2C_WaitOnFlagUntilTimeout>
 8002ad2:	1e03      	subs	r3, r0, #0
 8002ad4:	d001      	beq.n	8002ada <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e053      	b.n	8002b82 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	2bff      	cmp	r3, #255	; 0xff
 8002ae2:	d911      	bls.n	8002b08 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	22ff      	movs	r2, #255	; 0xff
 8002ae8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	2380      	movs	r3, #128	; 0x80
 8002af2:	045c      	lsls	r4, r3, #17
 8002af4:	230a      	movs	r3, #10
 8002af6:	18fb      	adds	r3, r7, r3
 8002af8:	8819      	ldrh	r1, [r3, #0]
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	2300      	movs	r3, #0
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	0023      	movs	r3, r4
 8002b02:	f000 fae9 	bl	80030d8 <I2C_TransferConfig>
 8002b06:	e012      	b.n	8002b2e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	2380      	movs	r3, #128	; 0x80
 8002b1a:	049c      	lsls	r4, r3, #18
 8002b1c:	230a      	movs	r3, #10
 8002b1e:	18fb      	adds	r3, r7, r3
 8002b20:	8819      	ldrh	r1, [r3, #0]
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	2300      	movs	r3, #0
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	0023      	movs	r3, r4
 8002b2a:	f000 fad5 	bl	80030d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d194      	bne.n	8002a62 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	0018      	movs	r0, r3
 8002b40:	f000 f98e 	bl	8002e60 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b44:	1e03      	subs	r3, r0, #0
 8002b46:	d001      	beq.n	8002b4c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e01a      	b.n	8002b82 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2220      	movs	r2, #32
 8002b52:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685a      	ldr	r2, [r3, #4]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	490c      	ldr	r1, [pc, #48]	; (8002b90 <HAL_I2C_Mem_Read+0x264>)
 8002b60:	400a      	ands	r2, r1
 8002b62:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2241      	movs	r2, #65	; 0x41
 8002b68:	2120      	movs	r1, #32
 8002b6a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2242      	movs	r2, #66	; 0x42
 8002b70:	2100      	movs	r1, #0
 8002b72:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2240      	movs	r2, #64	; 0x40
 8002b78:	2100      	movs	r1, #0
 8002b7a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	e000      	b.n	8002b82 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8002b80:	2302      	movs	r3, #2
  }
}
 8002b82:	0018      	movs	r0, r3
 8002b84:	46bd      	mov	sp, r7
 8002b86:	b007      	add	sp, #28
 8002b88:	bd90      	pop	{r4, r7, pc}
 8002b8a:	46c0      	nop			; (mov r8, r8)
 8002b8c:	80002400 	.word	0x80002400
 8002b90:	fe00e800 	.word	0xfe00e800

08002b94 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002b94:	b5b0      	push	{r4, r5, r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af02      	add	r7, sp, #8
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	000c      	movs	r4, r1
 8002b9e:	0010      	movs	r0, r2
 8002ba0:	0019      	movs	r1, r3
 8002ba2:	250a      	movs	r5, #10
 8002ba4:	197b      	adds	r3, r7, r5
 8002ba6:	1c22      	adds	r2, r4, #0
 8002ba8:	801a      	strh	r2, [r3, #0]
 8002baa:	2308      	movs	r3, #8
 8002bac:	18fb      	adds	r3, r7, r3
 8002bae:	1c02      	adds	r2, r0, #0
 8002bb0:	801a      	strh	r2, [r3, #0]
 8002bb2:	1dbb      	adds	r3, r7, #6
 8002bb4:	1c0a      	adds	r2, r1, #0
 8002bb6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002bb8:	1dbb      	adds	r3, r7, #6
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	2380      	movs	r3, #128	; 0x80
 8002bc0:	045c      	lsls	r4, r3, #17
 8002bc2:	197b      	adds	r3, r7, r5
 8002bc4:	8819      	ldrh	r1, [r3, #0]
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	4b23      	ldr	r3, [pc, #140]	; (8002c58 <I2C_RequestMemoryWrite+0xc4>)
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	0023      	movs	r3, r4
 8002bce:	f000 fa83 	bl	80030d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bd4:	6a39      	ldr	r1, [r7, #32]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	0018      	movs	r0, r3
 8002bda:	f000 f902 	bl	8002de2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002bde:	1e03      	subs	r3, r0, #0
 8002be0:	d001      	beq.n	8002be6 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e033      	b.n	8002c4e <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002be6:	1dbb      	adds	r3, r7, #6
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d107      	bne.n	8002bfe <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002bee:	2308      	movs	r3, #8
 8002bf0:	18fb      	adds	r3, r7, r3
 8002bf2:	881b      	ldrh	r3, [r3, #0]
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	629a      	str	r2, [r3, #40]	; 0x28
 8002bfc:	e019      	b.n	8002c32 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002bfe:	2308      	movs	r3, #8
 8002c00:	18fb      	adds	r3, r7, r3
 8002c02:	881b      	ldrh	r3, [r3, #0]
 8002c04:	0a1b      	lsrs	r3, r3, #8
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c12:	6a39      	ldr	r1, [r7, #32]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	0018      	movs	r0, r3
 8002c18:	f000 f8e3 	bl	8002de2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c1c:	1e03      	subs	r3, r0, #0
 8002c1e:	d001      	beq.n	8002c24 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e014      	b.n	8002c4e <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c24:	2308      	movs	r3, #8
 8002c26:	18fb      	adds	r3, r7, r3
 8002c28:	881b      	ldrh	r3, [r3, #0]
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002c32:	6a3a      	ldr	r2, [r7, #32]
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	0013      	movs	r3, r2
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	2180      	movs	r1, #128	; 0x80
 8002c40:	f000 f890 	bl	8002d64 <I2C_WaitOnFlagUntilTimeout>
 8002c44:	1e03      	subs	r3, r0, #0
 8002c46:	d001      	beq.n	8002c4c <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e000      	b.n	8002c4e <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	0018      	movs	r0, r3
 8002c50:	46bd      	mov	sp, r7
 8002c52:	b004      	add	sp, #16
 8002c54:	bdb0      	pop	{r4, r5, r7, pc}
 8002c56:	46c0      	nop			; (mov r8, r8)
 8002c58:	80002000 	.word	0x80002000

08002c5c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002c5c:	b5b0      	push	{r4, r5, r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af02      	add	r7, sp, #8
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	000c      	movs	r4, r1
 8002c66:	0010      	movs	r0, r2
 8002c68:	0019      	movs	r1, r3
 8002c6a:	250a      	movs	r5, #10
 8002c6c:	197b      	adds	r3, r7, r5
 8002c6e:	1c22      	adds	r2, r4, #0
 8002c70:	801a      	strh	r2, [r3, #0]
 8002c72:	2308      	movs	r3, #8
 8002c74:	18fb      	adds	r3, r7, r3
 8002c76:	1c02      	adds	r2, r0, #0
 8002c78:	801a      	strh	r2, [r3, #0]
 8002c7a:	1dbb      	adds	r3, r7, #6
 8002c7c:	1c0a      	adds	r2, r1, #0
 8002c7e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002c80:	1dbb      	adds	r3, r7, #6
 8002c82:	881b      	ldrh	r3, [r3, #0]
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	197b      	adds	r3, r7, r5
 8002c88:	8819      	ldrh	r1, [r3, #0]
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	4b23      	ldr	r3, [pc, #140]	; (8002d1c <I2C_RequestMemoryRead+0xc0>)
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	2300      	movs	r3, #0
 8002c92:	f000 fa21 	bl	80030d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c98:	6a39      	ldr	r1, [r7, #32]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	f000 f8a0 	bl	8002de2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ca2:	1e03      	subs	r3, r0, #0
 8002ca4:	d001      	beq.n	8002caa <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e033      	b.n	8002d12 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002caa:	1dbb      	adds	r3, r7, #6
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d107      	bne.n	8002cc2 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cb2:	2308      	movs	r3, #8
 8002cb4:	18fb      	adds	r3, r7, r3
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	629a      	str	r2, [r3, #40]	; 0x28
 8002cc0:	e019      	b.n	8002cf6 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002cc2:	2308      	movs	r3, #8
 8002cc4:	18fb      	adds	r3, r7, r3
 8002cc6:	881b      	ldrh	r3, [r3, #0]
 8002cc8:	0a1b      	lsrs	r3, r3, #8
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd6:	6a39      	ldr	r1, [r7, #32]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f000 f881 	bl	8002de2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ce0:	1e03      	subs	r3, r0, #0
 8002ce2:	d001      	beq.n	8002ce8 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e014      	b.n	8002d12 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ce8:	2308      	movs	r3, #8
 8002cea:	18fb      	adds	r3, r7, r3
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002cf6:	6a3a      	ldr	r2, [r7, #32]
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	0013      	movs	r3, r2
 8002d00:	2200      	movs	r2, #0
 8002d02:	2140      	movs	r1, #64	; 0x40
 8002d04:	f000 f82e 	bl	8002d64 <I2C_WaitOnFlagUntilTimeout>
 8002d08:	1e03      	subs	r3, r0, #0
 8002d0a:	d001      	beq.n	8002d10 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e000      	b.n	8002d12 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	0018      	movs	r0, r3
 8002d14:	46bd      	mov	sp, r7
 8002d16:	b004      	add	sp, #16
 8002d18:	bdb0      	pop	{r4, r5, r7, pc}
 8002d1a:	46c0      	nop			; (mov r8, r8)
 8002d1c:	80002000 	.word	0x80002000

08002d20 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	2202      	movs	r2, #2
 8002d30:	4013      	ands	r3, r2
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d103      	bne.n	8002d3e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	2201      	movs	r2, #1
 8002d46:	4013      	ands	r3, r2
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d007      	beq.n	8002d5c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	699a      	ldr	r2, [r3, #24]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2101      	movs	r1, #1
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	619a      	str	r2, [r3, #24]
  }
}
 8002d5c:	46c0      	nop			; (mov r8, r8)
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	b002      	add	sp, #8
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	603b      	str	r3, [r7, #0]
 8002d70:	1dfb      	adds	r3, r7, #7
 8002d72:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d74:	e021      	b.n	8002dba <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	d01e      	beq.n	8002dba <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d7c:	f7fe fce8 	bl	8001750 <HAL_GetTick>
 8002d80:	0002      	movs	r2, r0
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d302      	bcc.n	8002d92 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d113      	bne.n	8002dba <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d96:	2220      	movs	r2, #32
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2241      	movs	r2, #65	; 0x41
 8002da2:	2120      	movs	r1, #32
 8002da4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2242      	movs	r2, #66	; 0x42
 8002daa:	2100      	movs	r1, #0
 8002dac:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2240      	movs	r2, #64	; 0x40
 8002db2:	2100      	movs	r1, #0
 8002db4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e00f      	b.n	8002dda <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	68ba      	ldr	r2, [r7, #8]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	425a      	negs	r2, r3
 8002dca:	4153      	adcs	r3, r2
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	001a      	movs	r2, r3
 8002dd0:	1dfb      	adds	r3, r7, #7
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d0ce      	beq.n	8002d76 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	0018      	movs	r0, r3
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	b004      	add	sp, #16
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b084      	sub	sp, #16
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	60f8      	str	r0, [r7, #12]
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002dee:	e02b      	b.n	8002e48 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	68b9      	ldr	r1, [r7, #8]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	0018      	movs	r0, r3
 8002df8:	f000 f86e 	bl	8002ed8 <I2C_IsErrorOccurred>
 8002dfc:	1e03      	subs	r3, r0, #0
 8002dfe:	d001      	beq.n	8002e04 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e029      	b.n	8002e58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	3301      	adds	r3, #1
 8002e08:	d01e      	beq.n	8002e48 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e0a:	f7fe fca1 	bl	8001750 <HAL_GetTick>
 8002e0e:	0002      	movs	r2, r0
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	68ba      	ldr	r2, [r7, #8]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d302      	bcc.n	8002e20 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d113      	bne.n	8002e48 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e24:	2220      	movs	r2, #32
 8002e26:	431a      	orrs	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2241      	movs	r2, #65	; 0x41
 8002e30:	2120      	movs	r1, #32
 8002e32:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2242      	movs	r2, #66	; 0x42
 8002e38:	2100      	movs	r1, #0
 8002e3a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2240      	movs	r2, #64	; 0x40
 8002e40:	2100      	movs	r1, #0
 8002e42:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e007      	b.n	8002e58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	4013      	ands	r3, r2
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d1cc      	bne.n	8002df0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	0018      	movs	r0, r3
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	b004      	add	sp, #16
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e6c:	e028      	b.n	8002ec0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	68b9      	ldr	r1, [r7, #8]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	0018      	movs	r0, r3
 8002e76:	f000 f82f 	bl	8002ed8 <I2C_IsErrorOccurred>
 8002e7a:	1e03      	subs	r3, r0, #0
 8002e7c:	d001      	beq.n	8002e82 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e026      	b.n	8002ed0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e82:	f7fe fc65 	bl	8001750 <HAL_GetTick>
 8002e86:	0002      	movs	r2, r0
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	68ba      	ldr	r2, [r7, #8]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d302      	bcc.n	8002e98 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d113      	bne.n	8002ec0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2241      	movs	r2, #65	; 0x41
 8002ea8:	2120      	movs	r1, #32
 8002eaa:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2242      	movs	r2, #66	; 0x42
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2240      	movs	r2, #64	; 0x40
 8002eb8:	2100      	movs	r1, #0
 8002eba:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e007      	b.n	8002ed0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	4013      	ands	r3, r2
 8002eca:	2b20      	cmp	r3, #32
 8002ecc:	d1cf      	bne.n	8002e6e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	b004      	add	sp, #16
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed8:	b590      	push	{r4, r7, lr}
 8002eda:	b08b      	sub	sp, #44	; 0x2c
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee4:	2327      	movs	r3, #39	; 0x27
 8002ee6:	18fb      	adds	r3, r7, r3
 8002ee8:	2200      	movs	r2, #0
 8002eea:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	2210      	movs	r2, #16
 8002f00:	4013      	ands	r3, r2
 8002f02:	d100      	bne.n	8002f06 <I2C_IsErrorOccurred+0x2e>
 8002f04:	e082      	b.n	800300c <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2210      	movs	r2, #16
 8002f0c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f0e:	e060      	b.n	8002fd2 <I2C_IsErrorOccurred+0xfa>
 8002f10:	2427      	movs	r4, #39	; 0x27
 8002f12:	193b      	adds	r3, r7, r4
 8002f14:	193a      	adds	r2, r7, r4
 8002f16:	7812      	ldrb	r2, [r2, #0]
 8002f18:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	d058      	beq.n	8002fd2 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f20:	f7fe fc16 	bl	8001750 <HAL_GetTick>
 8002f24:	0002      	movs	r2, r0
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d306      	bcc.n	8002f3e <I2C_IsErrorOccurred+0x66>
 8002f30:	193b      	adds	r3, r7, r4
 8002f32:	193a      	adds	r2, r7, r4
 8002f34:	7812      	ldrb	r2, [r2, #0]
 8002f36:	701a      	strb	r2, [r3, #0]
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d149      	bne.n	8002fd2 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	2380      	movs	r3, #128	; 0x80
 8002f46:	01db      	lsls	r3, r3, #7
 8002f48:	4013      	ands	r3, r2
 8002f4a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002f4c:	2013      	movs	r0, #19
 8002f4e:	183b      	adds	r3, r7, r0
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	2142      	movs	r1, #66	; 0x42
 8002f54:	5c52      	ldrb	r2, [r2, r1]
 8002f56:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	699a      	ldr	r2, [r3, #24]
 8002f5e:	2380      	movs	r3, #128	; 0x80
 8002f60:	021b      	lsls	r3, r3, #8
 8002f62:	401a      	ands	r2, r3
 8002f64:	2380      	movs	r3, #128	; 0x80
 8002f66:	021b      	lsls	r3, r3, #8
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d126      	bne.n	8002fba <I2C_IsErrorOccurred+0xe2>
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	2380      	movs	r3, #128	; 0x80
 8002f70:	01db      	lsls	r3, r3, #7
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d021      	beq.n	8002fba <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8002f76:	183b      	adds	r3, r7, r0
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	2b20      	cmp	r3, #32
 8002f7c:	d01d      	beq.n	8002fba <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2180      	movs	r1, #128	; 0x80
 8002f8a:	01c9      	lsls	r1, r1, #7
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002f90:	f7fe fbde 	bl	8001750 <HAL_GetTick>
 8002f94:	0003      	movs	r3, r0
 8002f96:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f98:	e00f      	b.n	8002fba <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002f9a:	f7fe fbd9 	bl	8001750 <HAL_GetTick>
 8002f9e:	0002      	movs	r2, r0
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b19      	cmp	r3, #25
 8002fa6:	d908      	bls.n	8002fba <I2C_IsErrorOccurred+0xe2>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002fa8:	6a3b      	ldr	r3, [r7, #32]
 8002faa:	2220      	movs	r2, #32
 8002fac:	4313      	orrs	r3, r2
 8002fae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002fb0:	2327      	movs	r3, #39	; 0x27
 8002fb2:	18fb      	adds	r3, r7, r3
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	701a      	strb	r2, [r3, #0]

              break;
 8002fb8:	e00b      	b.n	8002fd2 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	2220      	movs	r2, #32
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	2127      	movs	r1, #39	; 0x27
 8002fc6:	187a      	adds	r2, r7, r1
 8002fc8:	1879      	adds	r1, r7, r1
 8002fca:	7809      	ldrb	r1, [r1, #0]
 8002fcc:	7011      	strb	r1, [r2, #0]
 8002fce:	2b20      	cmp	r3, #32
 8002fd0:	d1e3      	bne.n	8002f9a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	4013      	ands	r3, r2
 8002fdc:	2b20      	cmp	r3, #32
 8002fde:	d004      	beq.n	8002fea <I2C_IsErrorOccurred+0x112>
 8002fe0:	2327      	movs	r3, #39	; 0x27
 8002fe2:	18fb      	adds	r3, r7, r3
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d092      	beq.n	8002f10 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002fea:	2327      	movs	r3, #39	; 0x27
 8002fec:	18fb      	adds	r3, r7, r3
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d103      	bne.n	8002ffc <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002ffc:	6a3b      	ldr	r3, [r7, #32]
 8002ffe:	2204      	movs	r2, #4
 8003000:	4313      	orrs	r3, r2
 8003002:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003004:	2327      	movs	r3, #39	; 0x27
 8003006:	18fb      	adds	r3, r7, r3
 8003008:	2201      	movs	r2, #1
 800300a:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	2380      	movs	r3, #128	; 0x80
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	4013      	ands	r3, r2
 800301c:	d00c      	beq.n	8003038 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800301e:	6a3b      	ldr	r3, [r7, #32]
 8003020:	2201      	movs	r2, #1
 8003022:	4313      	orrs	r3, r2
 8003024:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2280      	movs	r2, #128	; 0x80
 800302c:	0052      	lsls	r2, r2, #1
 800302e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003030:	2327      	movs	r3, #39	; 0x27
 8003032:	18fb      	adds	r3, r7, r3
 8003034:	2201      	movs	r2, #1
 8003036:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	2380      	movs	r3, #128	; 0x80
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	4013      	ands	r3, r2
 8003040:	d00c      	beq.n	800305c <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003042:	6a3b      	ldr	r3, [r7, #32]
 8003044:	2208      	movs	r2, #8
 8003046:	4313      	orrs	r3, r2
 8003048:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2280      	movs	r2, #128	; 0x80
 8003050:	00d2      	lsls	r2, r2, #3
 8003052:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003054:	2327      	movs	r3, #39	; 0x27
 8003056:	18fb      	adds	r3, r7, r3
 8003058:	2201      	movs	r2, #1
 800305a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	2380      	movs	r3, #128	; 0x80
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4013      	ands	r3, r2
 8003064:	d00c      	beq.n	8003080 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003066:	6a3b      	ldr	r3, [r7, #32]
 8003068:	2202      	movs	r2, #2
 800306a:	4313      	orrs	r3, r2
 800306c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2280      	movs	r2, #128	; 0x80
 8003074:	0092      	lsls	r2, r2, #2
 8003076:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003078:	2327      	movs	r3, #39	; 0x27
 800307a:	18fb      	adds	r3, r7, r3
 800307c:	2201      	movs	r2, #1
 800307e:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003080:	2327      	movs	r3, #39	; 0x27
 8003082:	18fb      	adds	r3, r7, r3
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d01d      	beq.n	80030c6 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	0018      	movs	r0, r3
 800308e:	f7ff fe47 	bl	8002d20 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	490d      	ldr	r1, [pc, #52]	; (80030d4 <I2C_IsErrorOccurred+0x1fc>)
 800309e:	400a      	ands	r2, r1
 80030a0:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	431a      	orrs	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2241      	movs	r2, #65	; 0x41
 80030b2:	2120      	movs	r1, #32
 80030b4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2242      	movs	r2, #66	; 0x42
 80030ba:	2100      	movs	r1, #0
 80030bc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2240      	movs	r2, #64	; 0x40
 80030c2:	2100      	movs	r1, #0
 80030c4:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80030c6:	2327      	movs	r3, #39	; 0x27
 80030c8:	18fb      	adds	r3, r7, r3
 80030ca:	781b      	ldrb	r3, [r3, #0]
}
 80030cc:	0018      	movs	r0, r3
 80030ce:	46bd      	mov	sp, r7
 80030d0:	b00b      	add	sp, #44	; 0x2c
 80030d2:	bd90      	pop	{r4, r7, pc}
 80030d4:	fe00e800 	.word	0xfe00e800

080030d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80030d8:	b590      	push	{r4, r7, lr}
 80030da:	b087      	sub	sp, #28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	0008      	movs	r0, r1
 80030e2:	0011      	movs	r1, r2
 80030e4:	607b      	str	r3, [r7, #4]
 80030e6:	240a      	movs	r4, #10
 80030e8:	193b      	adds	r3, r7, r4
 80030ea:	1c02      	adds	r2, r0, #0
 80030ec:	801a      	strh	r2, [r3, #0]
 80030ee:	2009      	movs	r0, #9
 80030f0:	183b      	adds	r3, r7, r0
 80030f2:	1c0a      	adds	r2, r1, #0
 80030f4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80030f6:	193b      	adds	r3, r7, r4
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	059b      	lsls	r3, r3, #22
 80030fc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80030fe:	183b      	adds	r3, r7, r0
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	0419      	lsls	r1, r3, #16
 8003104:	23ff      	movs	r3, #255	; 0xff
 8003106:	041b      	lsls	r3, r3, #16
 8003108:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800310a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003112:	4313      	orrs	r3, r2
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	085b      	lsrs	r3, r3, #1
 8003118:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003122:	0d51      	lsrs	r1, r2, #21
 8003124:	2280      	movs	r2, #128	; 0x80
 8003126:	00d2      	lsls	r2, r2, #3
 8003128:	400a      	ands	r2, r1
 800312a:	4907      	ldr	r1, [pc, #28]	; (8003148 <I2C_TransferConfig+0x70>)
 800312c:	430a      	orrs	r2, r1
 800312e:	43d2      	mvns	r2, r2
 8003130:	401a      	ands	r2, r3
 8003132:	0011      	movs	r1, r2
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	430a      	orrs	r2, r1
 800313c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	46bd      	mov	sp, r7
 8003142:	b007      	add	sp, #28
 8003144:	bd90      	pop	{r4, r7, pc}
 8003146:	46c0      	nop			; (mov r8, r8)
 8003148:	03ff63ff 	.word	0x03ff63ff

0800314c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2241      	movs	r2, #65	; 0x41
 800315a:	5c9b      	ldrb	r3, [r3, r2]
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b20      	cmp	r3, #32
 8003160:	d138      	bne.n	80031d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2240      	movs	r2, #64	; 0x40
 8003166:	5c9b      	ldrb	r3, [r3, r2]
 8003168:	2b01      	cmp	r3, #1
 800316a:	d101      	bne.n	8003170 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800316c:	2302      	movs	r3, #2
 800316e:	e032      	b.n	80031d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2240      	movs	r2, #64	; 0x40
 8003174:	2101      	movs	r1, #1
 8003176:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2241      	movs	r2, #65	; 0x41
 800317c:	2124      	movs	r1, #36	; 0x24
 800317e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2101      	movs	r1, #1
 800318c:	438a      	bics	r2, r1
 800318e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4911      	ldr	r1, [pc, #68]	; (80031e0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800319c:	400a      	ands	r2, r1
 800319e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6819      	ldr	r1, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	430a      	orrs	r2, r1
 80031ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2101      	movs	r1, #1
 80031bc:	430a      	orrs	r2, r1
 80031be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2241      	movs	r2, #65	; 0x41
 80031c4:	2120      	movs	r1, #32
 80031c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2240      	movs	r2, #64	; 0x40
 80031cc:	2100      	movs	r1, #0
 80031ce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80031d0:	2300      	movs	r3, #0
 80031d2:	e000      	b.n	80031d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80031d4:	2302      	movs	r3, #2
  }
}
 80031d6:	0018      	movs	r0, r3
 80031d8:	46bd      	mov	sp, r7
 80031da:	b002      	add	sp, #8
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	46c0      	nop			; (mov r8, r8)
 80031e0:	ffffefff 	.word	0xffffefff

080031e4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2241      	movs	r2, #65	; 0x41
 80031f2:	5c9b      	ldrb	r3, [r3, r2]
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b20      	cmp	r3, #32
 80031f8:	d139      	bne.n	800326e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2240      	movs	r2, #64	; 0x40
 80031fe:	5c9b      	ldrb	r3, [r3, r2]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d101      	bne.n	8003208 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003204:	2302      	movs	r3, #2
 8003206:	e033      	b.n	8003270 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2240      	movs	r2, #64	; 0x40
 800320c:	2101      	movs	r1, #1
 800320e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2241      	movs	r2, #65	; 0x41
 8003214:	2124      	movs	r1, #36	; 0x24
 8003216:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2101      	movs	r1, #1
 8003224:	438a      	bics	r2, r1
 8003226:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4a11      	ldr	r2, [pc, #68]	; (8003278 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003234:	4013      	ands	r3, r2
 8003236:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	021b      	lsls	r3, r3, #8
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	4313      	orrs	r3, r2
 8003240:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2101      	movs	r1, #1
 8003256:	430a      	orrs	r2, r1
 8003258:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2241      	movs	r2, #65	; 0x41
 800325e:	2120      	movs	r1, #32
 8003260:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2240      	movs	r2, #64	; 0x40
 8003266:	2100      	movs	r1, #0
 8003268:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800326a:	2300      	movs	r3, #0
 800326c:	e000      	b.n	8003270 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800326e:	2302      	movs	r3, #2
  }
}
 8003270:	0018      	movs	r0, r3
 8003272:	46bd      	mov	sp, r7
 8003274:	b004      	add	sp, #16
 8003276:	bd80      	pop	{r7, pc}
 8003278:	fffff0ff 	.word	0xfffff0ff

0800327c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003284:	4b19      	ldr	r3, [pc, #100]	; (80032ec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a19      	ldr	r2, [pc, #100]	; (80032f0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800328a:	4013      	ands	r3, r2
 800328c:	0019      	movs	r1, r3
 800328e:	4b17      	ldr	r3, [pc, #92]	; (80032ec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	430a      	orrs	r2, r1
 8003294:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	2380      	movs	r3, #128	; 0x80
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	429a      	cmp	r2, r3
 800329e:	d11f      	bne.n	80032e0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80032a0:	4b14      	ldr	r3, [pc, #80]	; (80032f4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	0013      	movs	r3, r2
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	189b      	adds	r3, r3, r2
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	4912      	ldr	r1, [pc, #72]	; (80032f8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80032ae:	0018      	movs	r0, r3
 80032b0:	f7fc ff30 	bl	8000114 <__udivsi3>
 80032b4:	0003      	movs	r3, r0
 80032b6:	3301      	adds	r3, #1
 80032b8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032ba:	e008      	b.n	80032ce <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	3b01      	subs	r3, #1
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	e001      	b.n	80032ce <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e009      	b.n	80032e2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032ce:	4b07      	ldr	r3, [pc, #28]	; (80032ec <HAL_PWREx_ControlVoltageScaling+0x70>)
 80032d0:	695a      	ldr	r2, [r3, #20]
 80032d2:	2380      	movs	r3, #128	; 0x80
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	401a      	ands	r2, r3
 80032d8:	2380      	movs	r3, #128	; 0x80
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	429a      	cmp	r2, r3
 80032de:	d0ed      	beq.n	80032bc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	0018      	movs	r0, r3
 80032e4:	46bd      	mov	sp, r7
 80032e6:	b004      	add	sp, #16
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	46c0      	nop			; (mov r8, r8)
 80032ec:	40007000 	.word	0x40007000
 80032f0:	fffff9ff 	.word	0xfffff9ff
 80032f4:	20000004 	.word	0x20000004
 80032f8:	000f4240 	.word	0x000f4240

080032fc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003300:	4b03      	ldr	r3, [pc, #12]	; (8003310 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	23e0      	movs	r3, #224	; 0xe0
 8003306:	01db      	lsls	r3, r3, #7
 8003308:	4013      	ands	r3, r2
}
 800330a:	0018      	movs	r0, r3
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40021000 	.word	0x40021000

08003314 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b088      	sub	sp, #32
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e2f3      	b.n	800390e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2201      	movs	r2, #1
 800332c:	4013      	ands	r3, r2
 800332e:	d100      	bne.n	8003332 <HAL_RCC_OscConfig+0x1e>
 8003330:	e07c      	b.n	800342c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003332:	4bc3      	ldr	r3, [pc, #780]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	2238      	movs	r2, #56	; 0x38
 8003338:	4013      	ands	r3, r2
 800333a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800333c:	4bc0      	ldr	r3, [pc, #768]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	2203      	movs	r2, #3
 8003342:	4013      	ands	r3, r2
 8003344:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	2b10      	cmp	r3, #16
 800334a:	d102      	bne.n	8003352 <HAL_RCC_OscConfig+0x3e>
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	2b03      	cmp	r3, #3
 8003350:	d002      	beq.n	8003358 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	2b08      	cmp	r3, #8
 8003356:	d10b      	bne.n	8003370 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003358:	4bb9      	ldr	r3, [pc, #740]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	2380      	movs	r3, #128	; 0x80
 800335e:	029b      	lsls	r3, r3, #10
 8003360:	4013      	ands	r3, r2
 8003362:	d062      	beq.n	800342a <HAL_RCC_OscConfig+0x116>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d15e      	bne.n	800342a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e2ce      	b.n	800390e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	2380      	movs	r3, #128	; 0x80
 8003376:	025b      	lsls	r3, r3, #9
 8003378:	429a      	cmp	r2, r3
 800337a:	d107      	bne.n	800338c <HAL_RCC_OscConfig+0x78>
 800337c:	4bb0      	ldr	r3, [pc, #704]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	4baf      	ldr	r3, [pc, #700]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 8003382:	2180      	movs	r1, #128	; 0x80
 8003384:	0249      	lsls	r1, r1, #9
 8003386:	430a      	orrs	r2, r1
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	e020      	b.n	80033ce <HAL_RCC_OscConfig+0xba>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	23a0      	movs	r3, #160	; 0xa0
 8003392:	02db      	lsls	r3, r3, #11
 8003394:	429a      	cmp	r2, r3
 8003396:	d10e      	bne.n	80033b6 <HAL_RCC_OscConfig+0xa2>
 8003398:	4ba9      	ldr	r3, [pc, #676]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	4ba8      	ldr	r3, [pc, #672]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 800339e:	2180      	movs	r1, #128	; 0x80
 80033a0:	02c9      	lsls	r1, r1, #11
 80033a2:	430a      	orrs	r2, r1
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	4ba6      	ldr	r3, [pc, #664]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	4ba5      	ldr	r3, [pc, #660]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 80033ac:	2180      	movs	r1, #128	; 0x80
 80033ae:	0249      	lsls	r1, r1, #9
 80033b0:	430a      	orrs	r2, r1
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	e00b      	b.n	80033ce <HAL_RCC_OscConfig+0xba>
 80033b6:	4ba2      	ldr	r3, [pc, #648]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	4ba1      	ldr	r3, [pc, #644]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 80033bc:	49a1      	ldr	r1, [pc, #644]	; (8003644 <HAL_RCC_OscConfig+0x330>)
 80033be:	400a      	ands	r2, r1
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	4b9f      	ldr	r3, [pc, #636]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	4b9e      	ldr	r3, [pc, #632]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 80033c8:	499f      	ldr	r1, [pc, #636]	; (8003648 <HAL_RCC_OscConfig+0x334>)
 80033ca:	400a      	ands	r2, r1
 80033cc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d014      	beq.n	8003400 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d6:	f7fe f9bb 	bl	8001750 <HAL_GetTick>
 80033da:	0003      	movs	r3, r0
 80033dc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e0:	f7fe f9b6 	bl	8001750 <HAL_GetTick>
 80033e4:	0002      	movs	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b64      	cmp	r3, #100	; 0x64
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e28d      	b.n	800390e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033f2:	4b93      	ldr	r3, [pc, #588]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	2380      	movs	r3, #128	; 0x80
 80033f8:	029b      	lsls	r3, r3, #10
 80033fa:	4013      	ands	r3, r2
 80033fc:	d0f0      	beq.n	80033e0 <HAL_RCC_OscConfig+0xcc>
 80033fe:	e015      	b.n	800342c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003400:	f7fe f9a6 	bl	8001750 <HAL_GetTick>
 8003404:	0003      	movs	r3, r0
 8003406:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800340a:	f7fe f9a1 	bl	8001750 <HAL_GetTick>
 800340e:	0002      	movs	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b64      	cmp	r3, #100	; 0x64
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e278      	b.n	800390e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800341c:	4b88      	ldr	r3, [pc, #544]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	2380      	movs	r3, #128	; 0x80
 8003422:	029b      	lsls	r3, r3, #10
 8003424:	4013      	ands	r3, r2
 8003426:	d1f0      	bne.n	800340a <HAL_RCC_OscConfig+0xf6>
 8003428:	e000      	b.n	800342c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800342a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2202      	movs	r2, #2
 8003432:	4013      	ands	r3, r2
 8003434:	d100      	bne.n	8003438 <HAL_RCC_OscConfig+0x124>
 8003436:	e099      	b.n	800356c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003438:	4b81      	ldr	r3, [pc, #516]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	2238      	movs	r2, #56	; 0x38
 800343e:	4013      	ands	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003442:	4b7f      	ldr	r3, [pc, #508]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	2203      	movs	r2, #3
 8003448:	4013      	ands	r3, r2
 800344a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	2b10      	cmp	r3, #16
 8003450:	d102      	bne.n	8003458 <HAL_RCC_OscConfig+0x144>
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	2b02      	cmp	r3, #2
 8003456:	d002      	beq.n	800345e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d135      	bne.n	80034ca <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800345e:	4b78      	ldr	r3, [pc, #480]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	2380      	movs	r3, #128	; 0x80
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	4013      	ands	r3, r2
 8003468:	d005      	beq.n	8003476 <HAL_RCC_OscConfig+0x162>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e24b      	b.n	800390e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003476:	4b72      	ldr	r3, [pc, #456]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	4a74      	ldr	r2, [pc, #464]	; (800364c <HAL_RCC_OscConfig+0x338>)
 800347c:	4013      	ands	r3, r2
 800347e:	0019      	movs	r1, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	021a      	lsls	r2, r3, #8
 8003486:	4b6e      	ldr	r3, [pc, #440]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 8003488:	430a      	orrs	r2, r1
 800348a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d112      	bne.n	80034b8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003492:	4b6b      	ldr	r3, [pc, #428]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a6e      	ldr	r2, [pc, #440]	; (8003650 <HAL_RCC_OscConfig+0x33c>)
 8003498:	4013      	ands	r3, r2
 800349a:	0019      	movs	r1, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691a      	ldr	r2, [r3, #16]
 80034a0:	4b67      	ldr	r3, [pc, #412]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 80034a2:	430a      	orrs	r2, r1
 80034a4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80034a6:	4b66      	ldr	r3, [pc, #408]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	0adb      	lsrs	r3, r3, #11
 80034ac:	2207      	movs	r2, #7
 80034ae:	4013      	ands	r3, r2
 80034b0:	4a68      	ldr	r2, [pc, #416]	; (8003654 <HAL_RCC_OscConfig+0x340>)
 80034b2:	40da      	lsrs	r2, r3
 80034b4:	4b68      	ldr	r3, [pc, #416]	; (8003658 <HAL_RCC_OscConfig+0x344>)
 80034b6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80034b8:	4b68      	ldr	r3, [pc, #416]	; (800365c <HAL_RCC_OscConfig+0x348>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	0018      	movs	r0, r3
 80034be:	f7fd fd7d 	bl	8000fbc <HAL_InitTick>
 80034c2:	1e03      	subs	r3, r0, #0
 80034c4:	d051      	beq.n	800356a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e221      	b.n	800390e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d030      	beq.n	8003534 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80034d2:	4b5b      	ldr	r3, [pc, #364]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a5e      	ldr	r2, [pc, #376]	; (8003650 <HAL_RCC_OscConfig+0x33c>)
 80034d8:	4013      	ands	r3, r2
 80034da:	0019      	movs	r1, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691a      	ldr	r2, [r3, #16]
 80034e0:	4b57      	ldr	r3, [pc, #348]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 80034e2:	430a      	orrs	r2, r1
 80034e4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80034e6:	4b56      	ldr	r3, [pc, #344]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	4b55      	ldr	r3, [pc, #340]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 80034ec:	2180      	movs	r1, #128	; 0x80
 80034ee:	0049      	lsls	r1, r1, #1
 80034f0:	430a      	orrs	r2, r1
 80034f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f4:	f7fe f92c 	bl	8001750 <HAL_GetTick>
 80034f8:	0003      	movs	r3, r0
 80034fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034fc:	e008      	b.n	8003510 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034fe:	f7fe f927 	bl	8001750 <HAL_GetTick>
 8003502:	0002      	movs	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e1fe      	b.n	800390e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003510:	4b4b      	ldr	r3, [pc, #300]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	2380      	movs	r3, #128	; 0x80
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	4013      	ands	r3, r2
 800351a:	d0f0      	beq.n	80034fe <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800351c:	4b48      	ldr	r3, [pc, #288]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	4a4a      	ldr	r2, [pc, #296]	; (800364c <HAL_RCC_OscConfig+0x338>)
 8003522:	4013      	ands	r3, r2
 8003524:	0019      	movs	r1, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	021a      	lsls	r2, r3, #8
 800352c:	4b44      	ldr	r3, [pc, #272]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 800352e:	430a      	orrs	r2, r1
 8003530:	605a      	str	r2, [r3, #4]
 8003532:	e01b      	b.n	800356c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003534:	4b42      	ldr	r3, [pc, #264]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	4b41      	ldr	r3, [pc, #260]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 800353a:	4949      	ldr	r1, [pc, #292]	; (8003660 <HAL_RCC_OscConfig+0x34c>)
 800353c:	400a      	ands	r2, r1
 800353e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003540:	f7fe f906 	bl	8001750 <HAL_GetTick>
 8003544:	0003      	movs	r3, r0
 8003546:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003548:	e008      	b.n	800355c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800354a:	f7fe f901 	bl	8001750 <HAL_GetTick>
 800354e:	0002      	movs	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e1d8      	b.n	800390e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800355c:	4b38      	ldr	r3, [pc, #224]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	2380      	movs	r3, #128	; 0x80
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	4013      	ands	r3, r2
 8003566:	d1f0      	bne.n	800354a <HAL_RCC_OscConfig+0x236>
 8003568:	e000      	b.n	800356c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800356a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2208      	movs	r2, #8
 8003572:	4013      	ands	r3, r2
 8003574:	d047      	beq.n	8003606 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003576:	4b32      	ldr	r3, [pc, #200]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2238      	movs	r2, #56	; 0x38
 800357c:	4013      	ands	r3, r2
 800357e:	2b18      	cmp	r3, #24
 8003580:	d10a      	bne.n	8003598 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003582:	4b2f      	ldr	r3, [pc, #188]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 8003584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003586:	2202      	movs	r2, #2
 8003588:	4013      	ands	r3, r2
 800358a:	d03c      	beq.n	8003606 <HAL_RCC_OscConfig+0x2f2>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	699b      	ldr	r3, [r3, #24]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d138      	bne.n	8003606 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e1ba      	b.n	800390e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d019      	beq.n	80035d4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80035a0:	4b27      	ldr	r3, [pc, #156]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 80035a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035a4:	4b26      	ldr	r3, [pc, #152]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 80035a6:	2101      	movs	r1, #1
 80035a8:	430a      	orrs	r2, r1
 80035aa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ac:	f7fe f8d0 	bl	8001750 <HAL_GetTick>
 80035b0:	0003      	movs	r3, r0
 80035b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035b4:	e008      	b.n	80035c8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035b6:	f7fe f8cb 	bl	8001750 <HAL_GetTick>
 80035ba:	0002      	movs	r2, r0
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e1a2      	b.n	800390e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035c8:	4b1d      	ldr	r3, [pc, #116]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 80035ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035cc:	2202      	movs	r2, #2
 80035ce:	4013      	ands	r3, r2
 80035d0:	d0f1      	beq.n	80035b6 <HAL_RCC_OscConfig+0x2a2>
 80035d2:	e018      	b.n	8003606 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80035d4:	4b1a      	ldr	r3, [pc, #104]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 80035d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035d8:	4b19      	ldr	r3, [pc, #100]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 80035da:	2101      	movs	r1, #1
 80035dc:	438a      	bics	r2, r1
 80035de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e0:	f7fe f8b6 	bl	8001750 <HAL_GetTick>
 80035e4:	0003      	movs	r3, r0
 80035e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035e8:	e008      	b.n	80035fc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035ea:	f7fe f8b1 	bl	8001750 <HAL_GetTick>
 80035ee:	0002      	movs	r2, r0
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e188      	b.n	800390e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035fc:	4b10      	ldr	r3, [pc, #64]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 80035fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003600:	2202      	movs	r2, #2
 8003602:	4013      	ands	r3, r2
 8003604:	d1f1      	bne.n	80035ea <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2204      	movs	r2, #4
 800360c:	4013      	ands	r3, r2
 800360e:	d100      	bne.n	8003612 <HAL_RCC_OscConfig+0x2fe>
 8003610:	e0c6      	b.n	80037a0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003612:	231f      	movs	r3, #31
 8003614:	18fb      	adds	r3, r7, r3
 8003616:	2200      	movs	r2, #0
 8003618:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800361a:	4b09      	ldr	r3, [pc, #36]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	2238      	movs	r2, #56	; 0x38
 8003620:	4013      	ands	r3, r2
 8003622:	2b20      	cmp	r3, #32
 8003624:	d11e      	bne.n	8003664 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003626:	4b06      	ldr	r3, [pc, #24]	; (8003640 <HAL_RCC_OscConfig+0x32c>)
 8003628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362a:	2202      	movs	r2, #2
 800362c:	4013      	ands	r3, r2
 800362e:	d100      	bne.n	8003632 <HAL_RCC_OscConfig+0x31e>
 8003630:	e0b6      	b.n	80037a0 <HAL_RCC_OscConfig+0x48c>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d000      	beq.n	800363c <HAL_RCC_OscConfig+0x328>
 800363a:	e0b1      	b.n	80037a0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e166      	b.n	800390e <HAL_RCC_OscConfig+0x5fa>
 8003640:	40021000 	.word	0x40021000
 8003644:	fffeffff 	.word	0xfffeffff
 8003648:	fffbffff 	.word	0xfffbffff
 800364c:	ffff80ff 	.word	0xffff80ff
 8003650:	ffffc7ff 	.word	0xffffc7ff
 8003654:	00f42400 	.word	0x00f42400
 8003658:	20000004 	.word	0x20000004
 800365c:	20000010 	.word	0x20000010
 8003660:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003664:	4bac      	ldr	r3, [pc, #688]	; (8003918 <HAL_RCC_OscConfig+0x604>)
 8003666:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003668:	2380      	movs	r3, #128	; 0x80
 800366a:	055b      	lsls	r3, r3, #21
 800366c:	4013      	ands	r3, r2
 800366e:	d101      	bne.n	8003674 <HAL_RCC_OscConfig+0x360>
 8003670:	2301      	movs	r3, #1
 8003672:	e000      	b.n	8003676 <HAL_RCC_OscConfig+0x362>
 8003674:	2300      	movs	r3, #0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d011      	beq.n	800369e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800367a:	4ba7      	ldr	r3, [pc, #668]	; (8003918 <HAL_RCC_OscConfig+0x604>)
 800367c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800367e:	4ba6      	ldr	r3, [pc, #664]	; (8003918 <HAL_RCC_OscConfig+0x604>)
 8003680:	2180      	movs	r1, #128	; 0x80
 8003682:	0549      	lsls	r1, r1, #21
 8003684:	430a      	orrs	r2, r1
 8003686:	63da      	str	r2, [r3, #60]	; 0x3c
 8003688:	4ba3      	ldr	r3, [pc, #652]	; (8003918 <HAL_RCC_OscConfig+0x604>)
 800368a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800368c:	2380      	movs	r3, #128	; 0x80
 800368e:	055b      	lsls	r3, r3, #21
 8003690:	4013      	ands	r3, r2
 8003692:	60fb      	str	r3, [r7, #12]
 8003694:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003696:	231f      	movs	r3, #31
 8003698:	18fb      	adds	r3, r7, r3
 800369a:	2201      	movs	r2, #1
 800369c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800369e:	4b9f      	ldr	r3, [pc, #636]	; (800391c <HAL_RCC_OscConfig+0x608>)
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	2380      	movs	r3, #128	; 0x80
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	4013      	ands	r3, r2
 80036a8:	d11a      	bne.n	80036e0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036aa:	4b9c      	ldr	r3, [pc, #624]	; (800391c <HAL_RCC_OscConfig+0x608>)
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	4b9b      	ldr	r3, [pc, #620]	; (800391c <HAL_RCC_OscConfig+0x608>)
 80036b0:	2180      	movs	r1, #128	; 0x80
 80036b2:	0049      	lsls	r1, r1, #1
 80036b4:	430a      	orrs	r2, r1
 80036b6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80036b8:	f7fe f84a 	bl	8001750 <HAL_GetTick>
 80036bc:	0003      	movs	r3, r0
 80036be:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036c0:	e008      	b.n	80036d4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036c2:	f7fe f845 	bl	8001750 <HAL_GetTick>
 80036c6:	0002      	movs	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e11c      	b.n	800390e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036d4:	4b91      	ldr	r3, [pc, #580]	; (800391c <HAL_RCC_OscConfig+0x608>)
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	2380      	movs	r3, #128	; 0x80
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	4013      	ands	r3, r2
 80036de:	d0f0      	beq.n	80036c2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d106      	bne.n	80036f6 <HAL_RCC_OscConfig+0x3e2>
 80036e8:	4b8b      	ldr	r3, [pc, #556]	; (8003918 <HAL_RCC_OscConfig+0x604>)
 80036ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036ec:	4b8a      	ldr	r3, [pc, #552]	; (8003918 <HAL_RCC_OscConfig+0x604>)
 80036ee:	2101      	movs	r1, #1
 80036f0:	430a      	orrs	r2, r1
 80036f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80036f4:	e01c      	b.n	8003730 <HAL_RCC_OscConfig+0x41c>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	2b05      	cmp	r3, #5
 80036fc:	d10c      	bne.n	8003718 <HAL_RCC_OscConfig+0x404>
 80036fe:	4b86      	ldr	r3, [pc, #536]	; (8003918 <HAL_RCC_OscConfig+0x604>)
 8003700:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003702:	4b85      	ldr	r3, [pc, #532]	; (8003918 <HAL_RCC_OscConfig+0x604>)
 8003704:	2104      	movs	r1, #4
 8003706:	430a      	orrs	r2, r1
 8003708:	65da      	str	r2, [r3, #92]	; 0x5c
 800370a:	4b83      	ldr	r3, [pc, #524]	; (8003918 <HAL_RCC_OscConfig+0x604>)
 800370c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800370e:	4b82      	ldr	r3, [pc, #520]	; (8003918 <HAL_RCC_OscConfig+0x604>)
 8003710:	2101      	movs	r1, #1
 8003712:	430a      	orrs	r2, r1
 8003714:	65da      	str	r2, [r3, #92]	; 0x5c
 8003716:	e00b      	b.n	8003730 <HAL_RCC_OscConfig+0x41c>
 8003718:	4b7f      	ldr	r3, [pc, #508]	; (8003918 <HAL_RCC_OscConfig+0x604>)
 800371a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800371c:	4b7e      	ldr	r3, [pc, #504]	; (8003918 <HAL_RCC_OscConfig+0x604>)
 800371e:	2101      	movs	r1, #1
 8003720:	438a      	bics	r2, r1
 8003722:	65da      	str	r2, [r3, #92]	; 0x5c
 8003724:	4b7c      	ldr	r3, [pc, #496]	; (8003918 <HAL_RCC_OscConfig+0x604>)
 8003726:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003728:	4b7b      	ldr	r3, [pc, #492]	; (8003918 <HAL_RCC_OscConfig+0x604>)
 800372a:	2104      	movs	r1, #4
 800372c:	438a      	bics	r2, r1
 800372e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d014      	beq.n	8003762 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003738:	f7fe f80a 	bl	8001750 <HAL_GetTick>
 800373c:	0003      	movs	r3, r0
 800373e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003740:	e009      	b.n	8003756 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003742:	f7fe f805 	bl	8001750 <HAL_GetTick>
 8003746:	0002      	movs	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	4a74      	ldr	r2, [pc, #464]	; (8003920 <HAL_RCC_OscConfig+0x60c>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e0db      	b.n	800390e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003756:	4b70      	ldr	r3, [pc, #448]	; (8003918 <HAL_RCC_OscConfig+0x604>)
 8003758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375a:	2202      	movs	r2, #2
 800375c:	4013      	ands	r3, r2
 800375e:	d0f0      	beq.n	8003742 <HAL_RCC_OscConfig+0x42e>
 8003760:	e013      	b.n	800378a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003762:	f7fd fff5 	bl	8001750 <HAL_GetTick>
 8003766:	0003      	movs	r3, r0
 8003768:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800376a:	e009      	b.n	8003780 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800376c:	f7fd fff0 	bl	8001750 <HAL_GetTick>
 8003770:	0002      	movs	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	4a6a      	ldr	r2, [pc, #424]	; (8003920 <HAL_RCC_OscConfig+0x60c>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d901      	bls.n	8003780 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e0c6      	b.n	800390e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003780:	4b65      	ldr	r3, [pc, #404]	; (8003918 <HAL_RCC_OscConfig+0x604>)
 8003782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003784:	2202      	movs	r2, #2
 8003786:	4013      	ands	r3, r2
 8003788:	d1f0      	bne.n	800376c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800378a:	231f      	movs	r3, #31
 800378c:	18fb      	adds	r3, r7, r3
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d105      	bne.n	80037a0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003794:	4b60      	ldr	r3, [pc, #384]	; (8003918 <HAL_RCC_OscConfig+0x604>)
 8003796:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003798:	4b5f      	ldr	r3, [pc, #380]	; (8003918 <HAL_RCC_OscConfig+0x604>)
 800379a:	4962      	ldr	r1, [pc, #392]	; (8003924 <HAL_RCC_OscConfig+0x610>)
 800379c:	400a      	ands	r2, r1
 800379e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d100      	bne.n	80037aa <HAL_RCC_OscConfig+0x496>
 80037a8:	e0b0      	b.n	800390c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037aa:	4b5b      	ldr	r3, [pc, #364]	; (8003918 <HAL_RCC_OscConfig+0x604>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	2238      	movs	r2, #56	; 0x38
 80037b0:	4013      	ands	r3, r2
 80037b2:	2b10      	cmp	r3, #16
 80037b4:	d100      	bne.n	80037b8 <HAL_RCC_OscConfig+0x4a4>
 80037b6:	e078      	b.n	80038aa <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	69db      	ldr	r3, [r3, #28]
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d153      	bne.n	8003868 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c0:	4b55      	ldr	r3, [pc, #340]	; (8003918 <HAL_RCC_OscConfig+0x604>)
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	4b54      	ldr	r3, [pc, #336]	; (8003918 <HAL_RCC_OscConfig+0x604>)
 80037c6:	4958      	ldr	r1, [pc, #352]	; (8003928 <HAL_RCC_OscConfig+0x614>)
 80037c8:	400a      	ands	r2, r1
 80037ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037cc:	f7fd ffc0 	bl	8001750 <HAL_GetTick>
 80037d0:	0003      	movs	r3, r0
 80037d2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037d4:	e008      	b.n	80037e8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037d6:	f7fd ffbb 	bl	8001750 <HAL_GetTick>
 80037da:	0002      	movs	r2, r0
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	d901      	bls.n	80037e8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e092      	b.n	800390e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037e8:	4b4b      	ldr	r3, [pc, #300]	; (8003918 <HAL_RCC_OscConfig+0x604>)
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	2380      	movs	r3, #128	; 0x80
 80037ee:	049b      	lsls	r3, r3, #18
 80037f0:	4013      	ands	r3, r2
 80037f2:	d1f0      	bne.n	80037d6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037f4:	4b48      	ldr	r3, [pc, #288]	; (8003918 <HAL_RCC_OscConfig+0x604>)
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	4a4c      	ldr	r2, [pc, #304]	; (800392c <HAL_RCC_OscConfig+0x618>)
 80037fa:	4013      	ands	r3, r2
 80037fc:	0019      	movs	r1, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1a      	ldr	r2, [r3, #32]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003806:	431a      	orrs	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380c:	021b      	lsls	r3, r3, #8
 800380e:	431a      	orrs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381a:	431a      	orrs	r2, r3
 800381c:	4b3e      	ldr	r3, [pc, #248]	; (8003918 <HAL_RCC_OscConfig+0x604>)
 800381e:	430a      	orrs	r2, r1
 8003820:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003822:	4b3d      	ldr	r3, [pc, #244]	; (8003918 <HAL_RCC_OscConfig+0x604>)
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	4b3c      	ldr	r3, [pc, #240]	; (8003918 <HAL_RCC_OscConfig+0x604>)
 8003828:	2180      	movs	r1, #128	; 0x80
 800382a:	0449      	lsls	r1, r1, #17
 800382c:	430a      	orrs	r2, r1
 800382e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003830:	4b39      	ldr	r3, [pc, #228]	; (8003918 <HAL_RCC_OscConfig+0x604>)
 8003832:	68da      	ldr	r2, [r3, #12]
 8003834:	4b38      	ldr	r3, [pc, #224]	; (8003918 <HAL_RCC_OscConfig+0x604>)
 8003836:	2180      	movs	r1, #128	; 0x80
 8003838:	0549      	lsls	r1, r1, #21
 800383a:	430a      	orrs	r2, r1
 800383c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383e:	f7fd ff87 	bl	8001750 <HAL_GetTick>
 8003842:	0003      	movs	r3, r0
 8003844:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003848:	f7fd ff82 	bl	8001750 <HAL_GetTick>
 800384c:	0002      	movs	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e059      	b.n	800390e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800385a:	4b2f      	ldr	r3, [pc, #188]	; (8003918 <HAL_RCC_OscConfig+0x604>)
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	2380      	movs	r3, #128	; 0x80
 8003860:	049b      	lsls	r3, r3, #18
 8003862:	4013      	ands	r3, r2
 8003864:	d0f0      	beq.n	8003848 <HAL_RCC_OscConfig+0x534>
 8003866:	e051      	b.n	800390c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003868:	4b2b      	ldr	r3, [pc, #172]	; (8003918 <HAL_RCC_OscConfig+0x604>)
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	4b2a      	ldr	r3, [pc, #168]	; (8003918 <HAL_RCC_OscConfig+0x604>)
 800386e:	492e      	ldr	r1, [pc, #184]	; (8003928 <HAL_RCC_OscConfig+0x614>)
 8003870:	400a      	ands	r2, r1
 8003872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003874:	f7fd ff6c 	bl	8001750 <HAL_GetTick>
 8003878:	0003      	movs	r3, r0
 800387a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800387c:	e008      	b.n	8003890 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800387e:	f7fd ff67 	bl	8001750 <HAL_GetTick>
 8003882:	0002      	movs	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d901      	bls.n	8003890 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e03e      	b.n	800390e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003890:	4b21      	ldr	r3, [pc, #132]	; (8003918 <HAL_RCC_OscConfig+0x604>)
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	2380      	movs	r3, #128	; 0x80
 8003896:	049b      	lsls	r3, r3, #18
 8003898:	4013      	ands	r3, r2
 800389a:	d1f0      	bne.n	800387e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800389c:	4b1e      	ldr	r3, [pc, #120]	; (8003918 <HAL_RCC_OscConfig+0x604>)
 800389e:	68da      	ldr	r2, [r3, #12]
 80038a0:	4b1d      	ldr	r3, [pc, #116]	; (8003918 <HAL_RCC_OscConfig+0x604>)
 80038a2:	4923      	ldr	r1, [pc, #140]	; (8003930 <HAL_RCC_OscConfig+0x61c>)
 80038a4:	400a      	ands	r2, r1
 80038a6:	60da      	str	r2, [r3, #12]
 80038a8:	e030      	b.n	800390c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d101      	bne.n	80038b6 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e02b      	b.n	800390e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80038b6:	4b18      	ldr	r3, [pc, #96]	; (8003918 <HAL_RCC_OscConfig+0x604>)
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	2203      	movs	r2, #3
 80038c0:	401a      	ands	r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d11e      	bne.n	8003908 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	2270      	movs	r2, #112	; 0x70
 80038ce:	401a      	ands	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d117      	bne.n	8003908 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	23fe      	movs	r3, #254	; 0xfe
 80038dc:	01db      	lsls	r3, r3, #7
 80038de:	401a      	ands	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d10e      	bne.n	8003908 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80038ea:	697a      	ldr	r2, [r7, #20]
 80038ec:	23f8      	movs	r3, #248	; 0xf8
 80038ee:	039b      	lsls	r3, r3, #14
 80038f0:	401a      	ands	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d106      	bne.n	8003908 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	0f5b      	lsrs	r3, r3, #29
 80038fe:	075a      	lsls	r2, r3, #29
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003904:	429a      	cmp	r2, r3
 8003906:	d001      	beq.n	800390c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e000      	b.n	800390e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	0018      	movs	r0, r3
 8003910:	46bd      	mov	sp, r7
 8003912:	b008      	add	sp, #32
 8003914:	bd80      	pop	{r7, pc}
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	40021000 	.word	0x40021000
 800391c:	40007000 	.word	0x40007000
 8003920:	00001388 	.word	0x00001388
 8003924:	efffffff 	.word	0xefffffff
 8003928:	feffffff 	.word	0xfeffffff
 800392c:	1fc1808c 	.word	0x1fc1808c
 8003930:	effefffc 	.word	0xeffefffc

08003934 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e0e9      	b.n	8003b1c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003948:	4b76      	ldr	r3, [pc, #472]	; (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2207      	movs	r2, #7
 800394e:	4013      	ands	r3, r2
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	429a      	cmp	r2, r3
 8003954:	d91e      	bls.n	8003994 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003956:	4b73      	ldr	r3, [pc, #460]	; (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2207      	movs	r2, #7
 800395c:	4393      	bics	r3, r2
 800395e:	0019      	movs	r1, r3
 8003960:	4b70      	ldr	r3, [pc, #448]	; (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	430a      	orrs	r2, r1
 8003966:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003968:	f7fd fef2 	bl	8001750 <HAL_GetTick>
 800396c:	0003      	movs	r3, r0
 800396e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003970:	e009      	b.n	8003986 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003972:	f7fd feed 	bl	8001750 <HAL_GetTick>
 8003976:	0002      	movs	r2, r0
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	4a6a      	ldr	r2, [pc, #424]	; (8003b28 <HAL_RCC_ClockConfig+0x1f4>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e0ca      	b.n	8003b1c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003986:	4b67      	ldr	r3, [pc, #412]	; (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2207      	movs	r2, #7
 800398c:	4013      	ands	r3, r2
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	429a      	cmp	r2, r3
 8003992:	d1ee      	bne.n	8003972 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2202      	movs	r2, #2
 800399a:	4013      	ands	r3, r2
 800399c:	d015      	beq.n	80039ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2204      	movs	r2, #4
 80039a4:	4013      	ands	r3, r2
 80039a6:	d006      	beq.n	80039b6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80039a8:	4b60      	ldr	r3, [pc, #384]	; (8003b2c <HAL_RCC_ClockConfig+0x1f8>)
 80039aa:	689a      	ldr	r2, [r3, #8]
 80039ac:	4b5f      	ldr	r3, [pc, #380]	; (8003b2c <HAL_RCC_ClockConfig+0x1f8>)
 80039ae:	21e0      	movs	r1, #224	; 0xe0
 80039b0:	01c9      	lsls	r1, r1, #7
 80039b2:	430a      	orrs	r2, r1
 80039b4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039b6:	4b5d      	ldr	r3, [pc, #372]	; (8003b2c <HAL_RCC_ClockConfig+0x1f8>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	4a5d      	ldr	r2, [pc, #372]	; (8003b30 <HAL_RCC_ClockConfig+0x1fc>)
 80039bc:	4013      	ands	r3, r2
 80039be:	0019      	movs	r1, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	4b59      	ldr	r3, [pc, #356]	; (8003b2c <HAL_RCC_ClockConfig+0x1f8>)
 80039c6:	430a      	orrs	r2, r1
 80039c8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2201      	movs	r2, #1
 80039d0:	4013      	ands	r3, r2
 80039d2:	d057      	beq.n	8003a84 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d107      	bne.n	80039ec <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039dc:	4b53      	ldr	r3, [pc, #332]	; (8003b2c <HAL_RCC_ClockConfig+0x1f8>)
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	2380      	movs	r3, #128	; 0x80
 80039e2:	029b      	lsls	r3, r3, #10
 80039e4:	4013      	ands	r3, r2
 80039e6:	d12b      	bne.n	8003a40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e097      	b.n	8003b1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d107      	bne.n	8003a04 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039f4:	4b4d      	ldr	r3, [pc, #308]	; (8003b2c <HAL_RCC_ClockConfig+0x1f8>)
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	2380      	movs	r3, #128	; 0x80
 80039fa:	049b      	lsls	r3, r3, #18
 80039fc:	4013      	ands	r3, r2
 80039fe:	d11f      	bne.n	8003a40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e08b      	b.n	8003b1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d107      	bne.n	8003a1c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a0c:	4b47      	ldr	r3, [pc, #284]	; (8003b2c <HAL_RCC_ClockConfig+0x1f8>)
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	2380      	movs	r3, #128	; 0x80
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	4013      	ands	r3, r2
 8003a16:	d113      	bne.n	8003a40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e07f      	b.n	8003b1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	2b03      	cmp	r3, #3
 8003a22:	d106      	bne.n	8003a32 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a24:	4b41      	ldr	r3, [pc, #260]	; (8003b2c <HAL_RCC_ClockConfig+0x1f8>)
 8003a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a28:	2202      	movs	r2, #2
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	d108      	bne.n	8003a40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e074      	b.n	8003b1c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a32:	4b3e      	ldr	r3, [pc, #248]	; (8003b2c <HAL_RCC_ClockConfig+0x1f8>)
 8003a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a36:	2202      	movs	r2, #2
 8003a38:	4013      	ands	r3, r2
 8003a3a:	d101      	bne.n	8003a40 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e06d      	b.n	8003b1c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a40:	4b3a      	ldr	r3, [pc, #232]	; (8003b2c <HAL_RCC_ClockConfig+0x1f8>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	2207      	movs	r2, #7
 8003a46:	4393      	bics	r3, r2
 8003a48:	0019      	movs	r1, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685a      	ldr	r2, [r3, #4]
 8003a4e:	4b37      	ldr	r3, [pc, #220]	; (8003b2c <HAL_RCC_ClockConfig+0x1f8>)
 8003a50:	430a      	orrs	r2, r1
 8003a52:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a54:	f7fd fe7c 	bl	8001750 <HAL_GetTick>
 8003a58:	0003      	movs	r3, r0
 8003a5a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a5c:	e009      	b.n	8003a72 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a5e:	f7fd fe77 	bl	8001750 <HAL_GetTick>
 8003a62:	0002      	movs	r2, r0
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	4a2f      	ldr	r2, [pc, #188]	; (8003b28 <HAL_RCC_ClockConfig+0x1f4>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e054      	b.n	8003b1c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a72:	4b2e      	ldr	r3, [pc, #184]	; (8003b2c <HAL_RCC_ClockConfig+0x1f8>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	2238      	movs	r2, #56	; 0x38
 8003a78:	401a      	ands	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d1ec      	bne.n	8003a5e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a84:	4b27      	ldr	r3, [pc, #156]	; (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2207      	movs	r2, #7
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	683a      	ldr	r2, [r7, #0]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d21e      	bcs.n	8003ad0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a92:	4b24      	ldr	r3, [pc, #144]	; (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2207      	movs	r2, #7
 8003a98:	4393      	bics	r3, r2
 8003a9a:	0019      	movs	r1, r3
 8003a9c:	4b21      	ldr	r3, [pc, #132]	; (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003aa4:	f7fd fe54 	bl	8001750 <HAL_GetTick>
 8003aa8:	0003      	movs	r3, r0
 8003aaa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003aac:	e009      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aae:	f7fd fe4f 	bl	8001750 <HAL_GetTick>
 8003ab2:	0002      	movs	r2, r0
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	4a1b      	ldr	r2, [pc, #108]	; (8003b28 <HAL_RCC_ClockConfig+0x1f4>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e02c      	b.n	8003b1c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003ac2:	4b18      	ldr	r3, [pc, #96]	; (8003b24 <HAL_RCC_ClockConfig+0x1f0>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2207      	movs	r2, #7
 8003ac8:	4013      	ands	r3, r2
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d1ee      	bne.n	8003aae <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2204      	movs	r2, #4
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	d009      	beq.n	8003aee <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003ada:	4b14      	ldr	r3, [pc, #80]	; (8003b2c <HAL_RCC_ClockConfig+0x1f8>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	4a15      	ldr	r2, [pc, #84]	; (8003b34 <HAL_RCC_ClockConfig+0x200>)
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	0019      	movs	r1, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68da      	ldr	r2, [r3, #12]
 8003ae8:	4b10      	ldr	r3, [pc, #64]	; (8003b2c <HAL_RCC_ClockConfig+0x1f8>)
 8003aea:	430a      	orrs	r2, r1
 8003aec:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003aee:	f000 f829 	bl	8003b44 <HAL_RCC_GetSysClockFreq>
 8003af2:	0001      	movs	r1, r0
 8003af4:	4b0d      	ldr	r3, [pc, #52]	; (8003b2c <HAL_RCC_ClockConfig+0x1f8>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	0a1b      	lsrs	r3, r3, #8
 8003afa:	220f      	movs	r2, #15
 8003afc:	401a      	ands	r2, r3
 8003afe:	4b0e      	ldr	r3, [pc, #56]	; (8003b38 <HAL_RCC_ClockConfig+0x204>)
 8003b00:	0092      	lsls	r2, r2, #2
 8003b02:	58d3      	ldr	r3, [r2, r3]
 8003b04:	221f      	movs	r2, #31
 8003b06:	4013      	ands	r3, r2
 8003b08:	000a      	movs	r2, r1
 8003b0a:	40da      	lsrs	r2, r3
 8003b0c:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <HAL_RCC_ClockConfig+0x208>)
 8003b0e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003b10:	4b0b      	ldr	r3, [pc, #44]	; (8003b40 <HAL_RCC_ClockConfig+0x20c>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	0018      	movs	r0, r3
 8003b16:	f7fd fa51 	bl	8000fbc <HAL_InitTick>
 8003b1a:	0003      	movs	r3, r0
}
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	b004      	add	sp, #16
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40022000 	.word	0x40022000
 8003b28:	00001388 	.word	0x00001388
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	fffff0ff 	.word	0xfffff0ff
 8003b34:	ffff8fff 	.word	0xffff8fff
 8003b38:	08005a7c 	.word	0x08005a7c
 8003b3c:	20000004 	.word	0x20000004
 8003b40:	20000010 	.word	0x20000010

08003b44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b4a:	4b3c      	ldr	r3, [pc, #240]	; (8003c3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	2238      	movs	r2, #56	; 0x38
 8003b50:	4013      	ands	r3, r2
 8003b52:	d10f      	bne.n	8003b74 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003b54:	4b39      	ldr	r3, [pc, #228]	; (8003c3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	0adb      	lsrs	r3, r3, #11
 8003b5a:	2207      	movs	r2, #7
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	2201      	movs	r2, #1
 8003b60:	409a      	lsls	r2, r3
 8003b62:	0013      	movs	r3, r2
 8003b64:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003b66:	6839      	ldr	r1, [r7, #0]
 8003b68:	4835      	ldr	r0, [pc, #212]	; (8003c40 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003b6a:	f7fc fad3 	bl	8000114 <__udivsi3>
 8003b6e:	0003      	movs	r3, r0
 8003b70:	613b      	str	r3, [r7, #16]
 8003b72:	e05d      	b.n	8003c30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b74:	4b31      	ldr	r3, [pc, #196]	; (8003c3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	2238      	movs	r2, #56	; 0x38
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	2b08      	cmp	r3, #8
 8003b7e:	d102      	bne.n	8003b86 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b80:	4b30      	ldr	r3, [pc, #192]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x100>)
 8003b82:	613b      	str	r3, [r7, #16]
 8003b84:	e054      	b.n	8003c30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b86:	4b2d      	ldr	r3, [pc, #180]	; (8003c3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	2238      	movs	r2, #56	; 0x38
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	2b10      	cmp	r3, #16
 8003b90:	d138      	bne.n	8003c04 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003b92:	4b2a      	ldr	r3, [pc, #168]	; (8003c3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	2203      	movs	r2, #3
 8003b98:	4013      	ands	r3, r2
 8003b9a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b9c:	4b27      	ldr	r3, [pc, #156]	; (8003c3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	091b      	lsrs	r3, r3, #4
 8003ba2:	2207      	movs	r2, #7
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2b03      	cmp	r3, #3
 8003bae:	d10d      	bne.n	8003bcc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bb0:	68b9      	ldr	r1, [r7, #8]
 8003bb2:	4824      	ldr	r0, [pc, #144]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x100>)
 8003bb4:	f7fc faae 	bl	8000114 <__udivsi3>
 8003bb8:	0003      	movs	r3, r0
 8003bba:	0019      	movs	r1, r3
 8003bbc:	4b1f      	ldr	r3, [pc, #124]	; (8003c3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	0a1b      	lsrs	r3, r3, #8
 8003bc2:	227f      	movs	r2, #127	; 0x7f
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	434b      	muls	r3, r1
 8003bc8:	617b      	str	r3, [r7, #20]
        break;
 8003bca:	e00d      	b.n	8003be8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003bcc:	68b9      	ldr	r1, [r7, #8]
 8003bce:	481c      	ldr	r0, [pc, #112]	; (8003c40 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003bd0:	f7fc faa0 	bl	8000114 <__udivsi3>
 8003bd4:	0003      	movs	r3, r0
 8003bd6:	0019      	movs	r1, r3
 8003bd8:	4b18      	ldr	r3, [pc, #96]	; (8003c3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	0a1b      	lsrs	r3, r3, #8
 8003bde:	227f      	movs	r2, #127	; 0x7f
 8003be0:	4013      	ands	r3, r2
 8003be2:	434b      	muls	r3, r1
 8003be4:	617b      	str	r3, [r7, #20]
        break;
 8003be6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003be8:	4b14      	ldr	r3, [pc, #80]	; (8003c3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	0f5b      	lsrs	r3, r3, #29
 8003bee:	2207      	movs	r2, #7
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	6978      	ldr	r0, [r7, #20]
 8003bfa:	f7fc fa8b 	bl	8000114 <__udivsi3>
 8003bfe:	0003      	movs	r3, r0
 8003c00:	613b      	str	r3, [r7, #16]
 8003c02:	e015      	b.n	8003c30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003c04:	4b0d      	ldr	r3, [pc, #52]	; (8003c3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	2238      	movs	r2, #56	; 0x38
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	2b20      	cmp	r3, #32
 8003c0e:	d103      	bne.n	8003c18 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003c10:	2380      	movs	r3, #128	; 0x80
 8003c12:	021b      	lsls	r3, r3, #8
 8003c14:	613b      	str	r3, [r7, #16]
 8003c16:	e00b      	b.n	8003c30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003c18:	4b08      	ldr	r3, [pc, #32]	; (8003c3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	2238      	movs	r2, #56	; 0x38
 8003c1e:	4013      	ands	r3, r2
 8003c20:	2b18      	cmp	r3, #24
 8003c22:	d103      	bne.n	8003c2c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003c24:	23fa      	movs	r3, #250	; 0xfa
 8003c26:	01db      	lsls	r3, r3, #7
 8003c28:	613b      	str	r3, [r7, #16]
 8003c2a:	e001      	b.n	8003c30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003c30:	693b      	ldr	r3, [r7, #16]
}
 8003c32:	0018      	movs	r0, r3
 8003c34:	46bd      	mov	sp, r7
 8003c36:	b006      	add	sp, #24
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	46c0      	nop			; (mov r8, r8)
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	00f42400 	.word	0x00f42400
 8003c44:	007a1200 	.word	0x007a1200

08003c48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c4c:	4b02      	ldr	r3, [pc, #8]	; (8003c58 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
}
 8003c50:	0018      	movs	r0, r3
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	46c0      	nop			; (mov r8, r8)
 8003c58:	20000004 	.word	0x20000004

08003c5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c5c:	b5b0      	push	{r4, r5, r7, lr}
 8003c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003c60:	f7ff fff2 	bl	8003c48 <HAL_RCC_GetHCLKFreq>
 8003c64:	0004      	movs	r4, r0
 8003c66:	f7ff fb49 	bl	80032fc <LL_RCC_GetAPB1Prescaler>
 8003c6a:	0003      	movs	r3, r0
 8003c6c:	0b1a      	lsrs	r2, r3, #12
 8003c6e:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c70:	0092      	lsls	r2, r2, #2
 8003c72:	58d3      	ldr	r3, [r2, r3]
 8003c74:	221f      	movs	r2, #31
 8003c76:	4013      	ands	r3, r2
 8003c78:	40dc      	lsrs	r4, r3
 8003c7a:	0023      	movs	r3, r4
}
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bdb0      	pop	{r4, r5, r7, pc}
 8003c82:	46c0      	nop			; (mov r8, r8)
 8003c84:	08005abc 	.word	0x08005abc

08003c88 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2207      	movs	r2, #7
 8003c96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c98:	4b0e      	ldr	r3, [pc, #56]	; (8003cd4 <HAL_RCC_GetClockConfig+0x4c>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	2207      	movs	r2, #7
 8003c9e:	401a      	ands	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ca4:	4b0b      	ldr	r3, [pc, #44]	; (8003cd4 <HAL_RCC_GetClockConfig+0x4c>)
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	23f0      	movs	r3, #240	; 0xf0
 8003caa:	011b      	lsls	r3, r3, #4
 8003cac:	401a      	ands	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8003cb2:	4b08      	ldr	r3, [pc, #32]	; (8003cd4 <HAL_RCC_GetClockConfig+0x4c>)
 8003cb4:	689a      	ldr	r2, [r3, #8]
 8003cb6:	23e0      	movs	r3, #224	; 0xe0
 8003cb8:	01db      	lsls	r3, r3, #7
 8003cba:	401a      	ands	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003cc0:	4b05      	ldr	r3, [pc, #20]	; (8003cd8 <HAL_RCC_GetClockConfig+0x50>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2207      	movs	r2, #7
 8003cc6:	401a      	ands	r2, r3
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	601a      	str	r2, [r3, #0]
}
 8003ccc:	46c0      	nop			; (mov r8, r8)
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	b002      	add	sp, #8
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	40022000 	.word	0x40022000

08003cdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003ce4:	2313      	movs	r3, #19
 8003ce6:	18fb      	adds	r3, r7, r3
 8003ce8:	2200      	movs	r2, #0
 8003cea:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003cec:	2312      	movs	r3, #18
 8003cee:	18fb      	adds	r3, r7, r3
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	2380      	movs	r3, #128	; 0x80
 8003cfa:	029b      	lsls	r3, r3, #10
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	d100      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003d00:	e0a3      	b.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d02:	2011      	movs	r0, #17
 8003d04:	183b      	adds	r3, r7, r0
 8003d06:	2200      	movs	r2, #0
 8003d08:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d0a:	4b7f      	ldr	r3, [pc, #508]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003d0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d0e:	2380      	movs	r3, #128	; 0x80
 8003d10:	055b      	lsls	r3, r3, #21
 8003d12:	4013      	ands	r3, r2
 8003d14:	d110      	bne.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d16:	4b7c      	ldr	r3, [pc, #496]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003d18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d1a:	4b7b      	ldr	r3, [pc, #492]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003d1c:	2180      	movs	r1, #128	; 0x80
 8003d1e:	0549      	lsls	r1, r1, #21
 8003d20:	430a      	orrs	r2, r1
 8003d22:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d24:	4b78      	ldr	r3, [pc, #480]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003d26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d28:	2380      	movs	r3, #128	; 0x80
 8003d2a:	055b      	lsls	r3, r3, #21
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	60bb      	str	r3, [r7, #8]
 8003d30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d32:	183b      	adds	r3, r7, r0
 8003d34:	2201      	movs	r2, #1
 8003d36:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d38:	4b74      	ldr	r3, [pc, #464]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	4b73      	ldr	r3, [pc, #460]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003d3e:	2180      	movs	r1, #128	; 0x80
 8003d40:	0049      	lsls	r1, r1, #1
 8003d42:	430a      	orrs	r2, r1
 8003d44:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d46:	f7fd fd03 	bl	8001750 <HAL_GetTick>
 8003d4a:	0003      	movs	r3, r0
 8003d4c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d4e:	e00b      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d50:	f7fd fcfe 	bl	8001750 <HAL_GetTick>
 8003d54:	0002      	movs	r2, r0
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d904      	bls.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003d5e:	2313      	movs	r3, #19
 8003d60:	18fb      	adds	r3, r7, r3
 8003d62:	2203      	movs	r2, #3
 8003d64:	701a      	strb	r2, [r3, #0]
        break;
 8003d66:	e005      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d68:	4b68      	ldr	r3, [pc, #416]	; (8003f0c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	2380      	movs	r3, #128	; 0x80
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	4013      	ands	r3, r2
 8003d72:	d0ed      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003d74:	2313      	movs	r3, #19
 8003d76:	18fb      	adds	r3, r7, r3
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d154      	bne.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d7e:	4b62      	ldr	r3, [pc, #392]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003d80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d82:	23c0      	movs	r3, #192	; 0xc0
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4013      	ands	r3, r2
 8003d88:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d019      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d014      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d9a:	4b5b      	ldr	r3, [pc, #364]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9e:	4a5c      	ldr	r2, [pc, #368]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003da0:	4013      	ands	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003da4:	4b58      	ldr	r3, [pc, #352]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003da6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003da8:	4b57      	ldr	r3, [pc, #348]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003daa:	2180      	movs	r1, #128	; 0x80
 8003dac:	0249      	lsls	r1, r1, #9
 8003dae:	430a      	orrs	r2, r1
 8003db0:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003db2:	4b55      	ldr	r3, [pc, #340]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003db4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003db6:	4b54      	ldr	r3, [pc, #336]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003db8:	4956      	ldr	r1, [pc, #344]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8003dba:	400a      	ands	r2, r1
 8003dbc:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003dbe:	4b52      	ldr	r3, [pc, #328]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003dc0:	697a      	ldr	r2, [r7, #20]
 8003dc2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	4013      	ands	r3, r2
 8003dca:	d016      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dcc:	f7fd fcc0 	bl	8001750 <HAL_GetTick>
 8003dd0:	0003      	movs	r3, r0
 8003dd2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dd4:	e00c      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dd6:	f7fd fcbb 	bl	8001750 <HAL_GetTick>
 8003dda:	0002      	movs	r2, r0
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	4a4d      	ldr	r2, [pc, #308]	; (8003f18 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d904      	bls.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003de6:	2313      	movs	r3, #19
 8003de8:	18fb      	adds	r3, r7, r3
 8003dea:	2203      	movs	r2, #3
 8003dec:	701a      	strb	r2, [r3, #0]
            break;
 8003dee:	e004      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003df0:	4b45      	ldr	r3, [pc, #276]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df4:	2202      	movs	r2, #2
 8003df6:	4013      	ands	r3, r2
 8003df8:	d0ed      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003dfa:	2313      	movs	r3, #19
 8003dfc:	18fb      	adds	r3, r7, r3
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10a      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e04:	4b40      	ldr	r3, [pc, #256]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e08:	4a41      	ldr	r2, [pc, #260]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	0019      	movs	r1, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	695a      	ldr	r2, [r3, #20]
 8003e12:	4b3d      	ldr	r3, [pc, #244]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003e14:	430a      	orrs	r2, r1
 8003e16:	65da      	str	r2, [r3, #92]	; 0x5c
 8003e18:	e00c      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e1a:	2312      	movs	r3, #18
 8003e1c:	18fb      	adds	r3, r7, r3
 8003e1e:	2213      	movs	r2, #19
 8003e20:	18ba      	adds	r2, r7, r2
 8003e22:	7812      	ldrb	r2, [r2, #0]
 8003e24:	701a      	strb	r2, [r3, #0]
 8003e26:	e005      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e28:	2312      	movs	r3, #18
 8003e2a:	18fb      	adds	r3, r7, r3
 8003e2c:	2213      	movs	r2, #19
 8003e2e:	18ba      	adds	r2, r7, r2
 8003e30:	7812      	ldrb	r2, [r2, #0]
 8003e32:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e34:	2311      	movs	r3, #17
 8003e36:	18fb      	adds	r3, r7, r3
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d105      	bne.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e3e:	4b32      	ldr	r3, [pc, #200]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003e40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e42:	4b31      	ldr	r3, [pc, #196]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003e44:	4935      	ldr	r1, [pc, #212]	; (8003f1c <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003e46:	400a      	ands	r2, r1
 8003e48:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	4013      	ands	r3, r2
 8003e52:	d009      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e54:	4b2c      	ldr	r3, [pc, #176]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e58:	2203      	movs	r2, #3
 8003e5a:	4393      	bics	r3, r2
 8003e5c:	0019      	movs	r1, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	4b29      	ldr	r3, [pc, #164]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003e64:	430a      	orrs	r2, r1
 8003e66:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	4013      	ands	r3, r2
 8003e70:	d009      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e72:	4b25      	ldr	r3, [pc, #148]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e76:	4a2a      	ldr	r2, [pc, #168]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003e78:	4013      	ands	r3, r2
 8003e7a:	0019      	movs	r1, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	4b21      	ldr	r3, [pc, #132]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003e82:	430a      	orrs	r2, r1
 8003e84:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	2380      	movs	r3, #128	; 0x80
 8003e8c:	01db      	lsls	r3, r3, #7
 8003e8e:	4013      	ands	r3, r2
 8003e90:	d015      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e92:	4b1d      	ldr	r3, [pc, #116]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003e94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	0899      	lsrs	r1, r3, #2
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691a      	ldr	r2, [r3, #16]
 8003e9e:	4b1a      	ldr	r3, [pc, #104]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	691a      	ldr	r2, [r3, #16]
 8003ea8:	2380      	movs	r3, #128	; 0x80
 8003eaa:	05db      	lsls	r3, r3, #23
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d106      	bne.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003eb0:	4b15      	ldr	r3, [pc, #84]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003eb2:	68da      	ldr	r2, [r3, #12]
 8003eb4:	4b14      	ldr	r3, [pc, #80]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003eb6:	2180      	movs	r1, #128	; 0x80
 8003eb8:	0249      	lsls	r1, r1, #9
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	2380      	movs	r3, #128	; 0x80
 8003ec4:	011b      	lsls	r3, r3, #4
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	d016      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003eca:	4b0f      	ldr	r3, [pc, #60]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ece:	4a15      	ldr	r2, [pc, #84]	; (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	0019      	movs	r1, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68da      	ldr	r2, [r3, #12]
 8003ed8:	4b0b      	ldr	r3, [pc, #44]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003eda:	430a      	orrs	r2, r1
 8003edc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	68da      	ldr	r2, [r3, #12]
 8003ee2:	2380      	movs	r3, #128	; 0x80
 8003ee4:	01db      	lsls	r3, r3, #7
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d106      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003eea:	4b07      	ldr	r3, [pc, #28]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003eec:	68da      	ldr	r2, [r3, #12]
 8003eee:	4b06      	ldr	r3, [pc, #24]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8003ef0:	2180      	movs	r1, #128	; 0x80
 8003ef2:	0249      	lsls	r1, r1, #9
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003ef8:	2312      	movs	r3, #18
 8003efa:	18fb      	adds	r3, r7, r3
 8003efc:	781b      	ldrb	r3, [r3, #0]
}
 8003efe:	0018      	movs	r0, r3
 8003f00:	46bd      	mov	sp, r7
 8003f02:	b006      	add	sp, #24
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	46c0      	nop			; (mov r8, r8)
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	40007000 	.word	0x40007000
 8003f10:	fffffcff 	.word	0xfffffcff
 8003f14:	fffeffff 	.word	0xfffeffff
 8003f18:	00001388 	.word	0x00001388
 8003f1c:	efffffff 	.word	0xefffffff
 8003f20:	ffffcfff 	.word	0xffffcfff
 8003f24:	ffff3fff 	.word	0xffff3fff

08003f28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e04a      	b.n	8003fd0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	223d      	movs	r2, #61	; 0x3d
 8003f3e:	5c9b      	ldrb	r3, [r3, r2]
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d107      	bne.n	8003f56 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	223c      	movs	r2, #60	; 0x3c
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	0018      	movs	r0, r3
 8003f52:	f7fc ffd9 	bl	8000f08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	223d      	movs	r2, #61	; 0x3d
 8003f5a:	2102      	movs	r1, #2
 8003f5c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	3304      	adds	r3, #4
 8003f66:	0019      	movs	r1, r3
 8003f68:	0010      	movs	r0, r2
 8003f6a:	f000 fc0b 	bl	8004784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2248      	movs	r2, #72	; 0x48
 8003f72:	2101      	movs	r1, #1
 8003f74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	223e      	movs	r2, #62	; 0x3e
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	5499      	strb	r1, [r3, r2]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	223f      	movs	r2, #63	; 0x3f
 8003f82:	2101      	movs	r1, #1
 8003f84:	5499      	strb	r1, [r3, r2]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2240      	movs	r2, #64	; 0x40
 8003f8a:	2101      	movs	r1, #1
 8003f8c:	5499      	strb	r1, [r3, r2]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2241      	movs	r2, #65	; 0x41
 8003f92:	2101      	movs	r1, #1
 8003f94:	5499      	strb	r1, [r3, r2]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2242      	movs	r2, #66	; 0x42
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	5499      	strb	r1, [r3, r2]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2243      	movs	r2, #67	; 0x43
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2244      	movs	r2, #68	; 0x44
 8003faa:	2101      	movs	r1, #1
 8003fac:	5499      	strb	r1, [r3, r2]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2245      	movs	r2, #69	; 0x45
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	5499      	strb	r1, [r3, r2]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2246      	movs	r2, #70	; 0x46
 8003fba:	2101      	movs	r1, #1
 8003fbc:	5499      	strb	r1, [r3, r2]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2247      	movs	r2, #71	; 0x47
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	223d      	movs	r2, #61	; 0x3d
 8003fca:	2101      	movs	r1, #1
 8003fcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	0018      	movs	r0, r3
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	b002      	add	sp, #8
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	223d      	movs	r2, #61	; 0x3d
 8003fe4:	5c9b      	ldrb	r3, [r3, r2]
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d001      	beq.n	8003ff0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e037      	b.n	8004060 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	223d      	movs	r2, #61	; 0x3d
 8003ff4:	2102      	movs	r1, #2
 8003ff6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2101      	movs	r1, #1
 8004004:	430a      	orrs	r2, r1
 8004006:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a16      	ldr	r2, [pc, #88]	; (8004068 <HAL_TIM_Base_Start_IT+0x90>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d004      	beq.n	800401c <HAL_TIM_Base_Start_IT+0x44>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a15      	ldr	r2, [pc, #84]	; (800406c <HAL_TIM_Base_Start_IT+0x94>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d116      	bne.n	800404a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	4a13      	ldr	r2, [pc, #76]	; (8004070 <HAL_TIM_Base_Start_IT+0x98>)
 8004024:	4013      	ands	r3, r2
 8004026:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2b06      	cmp	r3, #6
 800402c:	d016      	beq.n	800405c <HAL_TIM_Base_Start_IT+0x84>
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	2380      	movs	r3, #128	; 0x80
 8004032:	025b      	lsls	r3, r3, #9
 8004034:	429a      	cmp	r2, r3
 8004036:	d011      	beq.n	800405c <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2101      	movs	r1, #1
 8004044:	430a      	orrs	r2, r1
 8004046:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004048:	e008      	b.n	800405c <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2101      	movs	r1, #1
 8004056:	430a      	orrs	r2, r1
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	e000      	b.n	800405e <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800405c:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800405e:	2300      	movs	r3, #0
}
 8004060:	0018      	movs	r0, r3
 8004062:	46bd      	mov	sp, r7
 8004064:	b004      	add	sp, #16
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40012c00 	.word	0x40012c00
 800406c:	40000400 	.word	0x40000400
 8004070:	00010007 	.word	0x00010007

08004074 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e04a      	b.n	800411c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	223d      	movs	r2, #61	; 0x3d
 800408a:	5c9b      	ldrb	r3, [r3, r2]
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d107      	bne.n	80040a2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	223c      	movs	r2, #60	; 0x3c
 8004096:	2100      	movs	r1, #0
 8004098:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	0018      	movs	r0, r3
 800409e:	f000 f841 	bl	8004124 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	223d      	movs	r2, #61	; 0x3d
 80040a6:	2102      	movs	r1, #2
 80040a8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	3304      	adds	r3, #4
 80040b2:	0019      	movs	r1, r3
 80040b4:	0010      	movs	r0, r2
 80040b6:	f000 fb65 	bl	8004784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2248      	movs	r2, #72	; 0x48
 80040be:	2101      	movs	r1, #1
 80040c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	223e      	movs	r2, #62	; 0x3e
 80040c6:	2101      	movs	r1, #1
 80040c8:	5499      	strb	r1, [r3, r2]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	223f      	movs	r2, #63	; 0x3f
 80040ce:	2101      	movs	r1, #1
 80040d0:	5499      	strb	r1, [r3, r2]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2240      	movs	r2, #64	; 0x40
 80040d6:	2101      	movs	r1, #1
 80040d8:	5499      	strb	r1, [r3, r2]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2241      	movs	r2, #65	; 0x41
 80040de:	2101      	movs	r1, #1
 80040e0:	5499      	strb	r1, [r3, r2]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2242      	movs	r2, #66	; 0x42
 80040e6:	2101      	movs	r1, #1
 80040e8:	5499      	strb	r1, [r3, r2]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2243      	movs	r2, #67	; 0x43
 80040ee:	2101      	movs	r1, #1
 80040f0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2244      	movs	r2, #68	; 0x44
 80040f6:	2101      	movs	r1, #1
 80040f8:	5499      	strb	r1, [r3, r2]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2245      	movs	r2, #69	; 0x45
 80040fe:	2101      	movs	r1, #1
 8004100:	5499      	strb	r1, [r3, r2]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2246      	movs	r2, #70	; 0x46
 8004106:	2101      	movs	r1, #1
 8004108:	5499      	strb	r1, [r3, r2]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2247      	movs	r2, #71	; 0x47
 800410e:	2101      	movs	r1, #1
 8004110:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	223d      	movs	r2, #61	; 0x3d
 8004116:	2101      	movs	r1, #1
 8004118:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	0018      	movs	r0, r3
 800411e:	46bd      	mov	sp, r7
 8004120:	b002      	add	sp, #8
 8004122:	bd80      	pop	{r7, pc}

08004124 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800412c:	46c0      	nop			; (mov r8, r8)
 800412e:	46bd      	mov	sp, r7
 8004130:	b002      	add	sp, #8
 8004132:	bd80      	pop	{r7, pc}

08004134 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	2202      	movs	r2, #2
 8004144:	4013      	ands	r3, r2
 8004146:	2b02      	cmp	r3, #2
 8004148:	d124      	bne.n	8004194 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	2202      	movs	r2, #2
 8004152:	4013      	ands	r3, r2
 8004154:	2b02      	cmp	r3, #2
 8004156:	d11d      	bne.n	8004194 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2203      	movs	r2, #3
 800415e:	4252      	negs	r2, r2
 8004160:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	2203      	movs	r2, #3
 8004170:	4013      	ands	r3, r2
 8004172:	d004      	beq.n	800417e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	0018      	movs	r0, r3
 8004178:	f000 faec 	bl	8004754 <HAL_TIM_IC_CaptureCallback>
 800417c:	e007      	b.n	800418e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	0018      	movs	r0, r3
 8004182:	f000 fadf 	bl	8004744 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	0018      	movs	r0, r3
 800418a:	f000 faeb 	bl	8004764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	2204      	movs	r2, #4
 800419c:	4013      	ands	r3, r2
 800419e:	2b04      	cmp	r3, #4
 80041a0:	d125      	bne.n	80041ee <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	2204      	movs	r2, #4
 80041aa:	4013      	ands	r3, r2
 80041ac:	2b04      	cmp	r3, #4
 80041ae:	d11e      	bne.n	80041ee <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2205      	movs	r2, #5
 80041b6:	4252      	negs	r2, r2
 80041b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2202      	movs	r2, #2
 80041be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699a      	ldr	r2, [r3, #24]
 80041c6:	23c0      	movs	r3, #192	; 0xc0
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4013      	ands	r3, r2
 80041cc:	d004      	beq.n	80041d8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	0018      	movs	r0, r3
 80041d2:	f000 fabf 	bl	8004754 <HAL_TIM_IC_CaptureCallback>
 80041d6:	e007      	b.n	80041e8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	0018      	movs	r0, r3
 80041dc:	f000 fab2 	bl	8004744 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	0018      	movs	r0, r3
 80041e4:	f000 fabe 	bl	8004764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	2208      	movs	r2, #8
 80041f6:	4013      	ands	r3, r2
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	d124      	bne.n	8004246 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	2208      	movs	r2, #8
 8004204:	4013      	ands	r3, r2
 8004206:	2b08      	cmp	r3, #8
 8004208:	d11d      	bne.n	8004246 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2209      	movs	r2, #9
 8004210:	4252      	negs	r2, r2
 8004212:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2204      	movs	r2, #4
 8004218:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	69db      	ldr	r3, [r3, #28]
 8004220:	2203      	movs	r2, #3
 8004222:	4013      	ands	r3, r2
 8004224:	d004      	beq.n	8004230 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	0018      	movs	r0, r3
 800422a:	f000 fa93 	bl	8004754 <HAL_TIM_IC_CaptureCallback>
 800422e:	e007      	b.n	8004240 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	0018      	movs	r0, r3
 8004234:	f000 fa86 	bl	8004744 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	0018      	movs	r0, r3
 800423c:	f000 fa92 	bl	8004764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	2210      	movs	r2, #16
 800424e:	4013      	ands	r3, r2
 8004250:	2b10      	cmp	r3, #16
 8004252:	d125      	bne.n	80042a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	2210      	movs	r2, #16
 800425c:	4013      	ands	r3, r2
 800425e:	2b10      	cmp	r3, #16
 8004260:	d11e      	bne.n	80042a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2211      	movs	r2, #17
 8004268:	4252      	negs	r2, r2
 800426a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2208      	movs	r2, #8
 8004270:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	69da      	ldr	r2, [r3, #28]
 8004278:	23c0      	movs	r3, #192	; 0xc0
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4013      	ands	r3, r2
 800427e:	d004      	beq.n	800428a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	0018      	movs	r0, r3
 8004284:	f000 fa66 	bl	8004754 <HAL_TIM_IC_CaptureCallback>
 8004288:	e007      	b.n	800429a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	0018      	movs	r0, r3
 800428e:	f000 fa59 	bl	8004744 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	0018      	movs	r0, r3
 8004296:	f000 fa65 	bl	8004764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	2201      	movs	r2, #1
 80042a8:	4013      	ands	r3, r2
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d10f      	bne.n	80042ce <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	2201      	movs	r2, #1
 80042b6:	4013      	ands	r3, r2
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d108      	bne.n	80042ce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2202      	movs	r2, #2
 80042c2:	4252      	negs	r2, r2
 80042c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	0018      	movs	r0, r3
 80042ca:	f7fc fd25 	bl	8000d18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	2280      	movs	r2, #128	; 0x80
 80042d6:	4013      	ands	r3, r2
 80042d8:	2b80      	cmp	r3, #128	; 0x80
 80042da:	d10f      	bne.n	80042fc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	2280      	movs	r2, #128	; 0x80
 80042e4:	4013      	ands	r3, r2
 80042e6:	2b80      	cmp	r3, #128	; 0x80
 80042e8:	d108      	bne.n	80042fc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2281      	movs	r2, #129	; 0x81
 80042f0:	4252      	negs	r2, r2
 80042f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	0018      	movs	r0, r3
 80042f8:	f000 fe52 	bl	8004fa0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	691a      	ldr	r2, [r3, #16]
 8004302:	2380      	movs	r3, #128	; 0x80
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	401a      	ands	r2, r3
 8004308:	2380      	movs	r3, #128	; 0x80
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	429a      	cmp	r2, r3
 800430e:	d10e      	bne.n	800432e <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	2280      	movs	r2, #128	; 0x80
 8004318:	4013      	ands	r3, r2
 800431a:	2b80      	cmp	r3, #128	; 0x80
 800431c:	d107      	bne.n	800432e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a1c      	ldr	r2, [pc, #112]	; (8004394 <HAL_TIM_IRQHandler+0x260>)
 8004324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	0018      	movs	r0, r3
 800432a:	f000 fe41 	bl	8004fb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	2240      	movs	r2, #64	; 0x40
 8004336:	4013      	ands	r3, r2
 8004338:	2b40      	cmp	r3, #64	; 0x40
 800433a:	d10f      	bne.n	800435c <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	2240      	movs	r2, #64	; 0x40
 8004344:	4013      	ands	r3, r2
 8004346:	2b40      	cmp	r3, #64	; 0x40
 8004348:	d108      	bne.n	800435c <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2241      	movs	r2, #65	; 0x41
 8004350:	4252      	negs	r2, r2
 8004352:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	0018      	movs	r0, r3
 8004358:	f000 fa0c 	bl	8004774 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	2220      	movs	r2, #32
 8004364:	4013      	ands	r3, r2
 8004366:	2b20      	cmp	r3, #32
 8004368:	d10f      	bne.n	800438a <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	2220      	movs	r2, #32
 8004372:	4013      	ands	r3, r2
 8004374:	2b20      	cmp	r3, #32
 8004376:	d108      	bne.n	800438a <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2221      	movs	r2, #33	; 0x21
 800437e:	4252      	negs	r2, r2
 8004380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	0018      	movs	r0, r3
 8004386:	f000 fe03 	bl	8004f90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800438a:	46c0      	nop			; (mov r8, r8)
 800438c:	46bd      	mov	sp, r7
 800438e:	b002      	add	sp, #8
 8004390:	bd80      	pop	{r7, pc}
 8004392:	46c0      	nop			; (mov r8, r8)
 8004394:	fffffeff 	.word	0xfffffeff

08004398 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043a4:	2317      	movs	r3, #23
 80043a6:	18fb      	adds	r3, r7, r3
 80043a8:	2200      	movs	r2, #0
 80043aa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	223c      	movs	r2, #60	; 0x3c
 80043b0:	5c9b      	ldrb	r3, [r3, r2]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d101      	bne.n	80043ba <HAL_TIM_PWM_ConfigChannel+0x22>
 80043b6:	2302      	movs	r3, #2
 80043b8:	e0e5      	b.n	8004586 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	223c      	movs	r2, #60	; 0x3c
 80043be:	2101      	movs	r1, #1
 80043c0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2b14      	cmp	r3, #20
 80043c6:	d900      	bls.n	80043ca <HAL_TIM_PWM_ConfigChannel+0x32>
 80043c8:	e0d1      	b.n	800456e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	009a      	lsls	r2, r3, #2
 80043ce:	4b70      	ldr	r3, [pc, #448]	; (8004590 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80043d0:	18d3      	adds	r3, r2, r3
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	0011      	movs	r1, r2
 80043de:	0018      	movs	r0, r3
 80043e0:	f000 fa3c 	bl	800485c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	699a      	ldr	r2, [r3, #24]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2108      	movs	r1, #8
 80043f0:	430a      	orrs	r2, r1
 80043f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	699a      	ldr	r2, [r3, #24]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2104      	movs	r1, #4
 8004400:	438a      	bics	r2, r1
 8004402:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6999      	ldr	r1, [r3, #24]
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	691a      	ldr	r2, [r3, #16]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	619a      	str	r2, [r3, #24]
      break;
 8004416:	e0af      	b.n	8004578 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68ba      	ldr	r2, [r7, #8]
 800441e:	0011      	movs	r1, r2
 8004420:	0018      	movs	r0, r3
 8004422:	f000 fa9b 	bl	800495c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	699a      	ldr	r2, [r3, #24]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	2180      	movs	r1, #128	; 0x80
 8004432:	0109      	lsls	r1, r1, #4
 8004434:	430a      	orrs	r2, r1
 8004436:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	699a      	ldr	r2, [r3, #24]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4954      	ldr	r1, [pc, #336]	; (8004594 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004444:	400a      	ands	r2, r1
 8004446:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6999      	ldr	r1, [r3, #24]
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	021a      	lsls	r2, r3, #8
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	430a      	orrs	r2, r1
 800445a:	619a      	str	r2, [r3, #24]
      break;
 800445c:	e08c      	b.n	8004578 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	0011      	movs	r1, r2
 8004466:	0018      	movs	r0, r3
 8004468:	f000 faf6 	bl	8004a58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	69da      	ldr	r2, [r3, #28]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2108      	movs	r1, #8
 8004478:	430a      	orrs	r2, r1
 800447a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	69da      	ldr	r2, [r3, #28]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2104      	movs	r1, #4
 8004488:	438a      	bics	r2, r1
 800448a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	69d9      	ldr	r1, [r3, #28]
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	691a      	ldr	r2, [r3, #16]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	61da      	str	r2, [r3, #28]
      break;
 800449e:	e06b      	b.n	8004578 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	0011      	movs	r1, r2
 80044a8:	0018      	movs	r0, r3
 80044aa:	f000 fb57 	bl	8004b5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	69da      	ldr	r2, [r3, #28]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2180      	movs	r1, #128	; 0x80
 80044ba:	0109      	lsls	r1, r1, #4
 80044bc:	430a      	orrs	r2, r1
 80044be:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	69da      	ldr	r2, [r3, #28]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4932      	ldr	r1, [pc, #200]	; (8004594 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80044cc:	400a      	ands	r2, r1
 80044ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	69d9      	ldr	r1, [r3, #28]
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	021a      	lsls	r2, r3, #8
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	430a      	orrs	r2, r1
 80044e2:	61da      	str	r2, [r3, #28]
      break;
 80044e4:	e048      	b.n	8004578 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	0011      	movs	r1, r2
 80044ee:	0018      	movs	r0, r3
 80044f0:	f000 fb98 	bl	8004c24 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2108      	movs	r1, #8
 8004500:	430a      	orrs	r2, r1
 8004502:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2104      	movs	r1, #4
 8004510:	438a      	bics	r2, r1
 8004512:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	691a      	ldr	r2, [r3, #16]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004526:	e027      	b.n	8004578 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	0011      	movs	r1, r2
 8004530:	0018      	movs	r0, r3
 8004532:	f000 fbd1 	bl	8004cd8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2180      	movs	r1, #128	; 0x80
 8004542:	0109      	lsls	r1, r1, #4
 8004544:	430a      	orrs	r2, r1
 8004546:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4910      	ldr	r1, [pc, #64]	; (8004594 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004554:	400a      	ands	r2, r1
 8004556:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	021a      	lsls	r2, r3, #8
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	430a      	orrs	r2, r1
 800456a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800456c:	e004      	b.n	8004578 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800456e:	2317      	movs	r3, #23
 8004570:	18fb      	adds	r3, r7, r3
 8004572:	2201      	movs	r2, #1
 8004574:	701a      	strb	r2, [r3, #0]
      break;
 8004576:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	223c      	movs	r2, #60	; 0x3c
 800457c:	2100      	movs	r1, #0
 800457e:	5499      	strb	r1, [r3, r2]

  return status;
 8004580:	2317      	movs	r3, #23
 8004582:	18fb      	adds	r3, r7, r3
 8004584:	781b      	ldrb	r3, [r3, #0]
}
 8004586:	0018      	movs	r0, r3
 8004588:	46bd      	mov	sp, r7
 800458a:	b006      	add	sp, #24
 800458c:	bd80      	pop	{r7, pc}
 800458e:	46c0      	nop			; (mov r8, r8)
 8004590:	08006838 	.word	0x08006838
 8004594:	fffffbff 	.word	0xfffffbff

08004598 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b084      	sub	sp, #16
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045a2:	230f      	movs	r3, #15
 80045a4:	18fb      	adds	r3, r7, r3
 80045a6:	2200      	movs	r2, #0
 80045a8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	223c      	movs	r2, #60	; 0x3c
 80045ae:	5c9b      	ldrb	r3, [r3, r2]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d101      	bne.n	80045b8 <HAL_TIM_ConfigClockSource+0x20>
 80045b4:	2302      	movs	r3, #2
 80045b6:	e0bc      	b.n	8004732 <HAL_TIM_ConfigClockSource+0x19a>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	223c      	movs	r2, #60	; 0x3c
 80045bc:	2101      	movs	r1, #1
 80045be:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	223d      	movs	r2, #61	; 0x3d
 80045c4:	2102      	movs	r1, #2
 80045c6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	4a5a      	ldr	r2, [pc, #360]	; (800473c <HAL_TIM_ConfigClockSource+0x1a4>)
 80045d4:	4013      	ands	r3, r2
 80045d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	4a59      	ldr	r2, [pc, #356]	; (8004740 <HAL_TIM_ConfigClockSource+0x1a8>)
 80045dc:	4013      	ands	r3, r2
 80045de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2280      	movs	r2, #128	; 0x80
 80045ee:	0192      	lsls	r2, r2, #6
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d040      	beq.n	8004676 <HAL_TIM_ConfigClockSource+0xde>
 80045f4:	2280      	movs	r2, #128	; 0x80
 80045f6:	0192      	lsls	r2, r2, #6
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d900      	bls.n	80045fe <HAL_TIM_ConfigClockSource+0x66>
 80045fc:	e088      	b.n	8004710 <HAL_TIM_ConfigClockSource+0x178>
 80045fe:	2280      	movs	r2, #128	; 0x80
 8004600:	0152      	lsls	r2, r2, #5
 8004602:	4293      	cmp	r3, r2
 8004604:	d100      	bne.n	8004608 <HAL_TIM_ConfigClockSource+0x70>
 8004606:	e088      	b.n	800471a <HAL_TIM_ConfigClockSource+0x182>
 8004608:	2280      	movs	r2, #128	; 0x80
 800460a:	0152      	lsls	r2, r2, #5
 800460c:	4293      	cmp	r3, r2
 800460e:	d900      	bls.n	8004612 <HAL_TIM_ConfigClockSource+0x7a>
 8004610:	e07e      	b.n	8004710 <HAL_TIM_ConfigClockSource+0x178>
 8004612:	2b70      	cmp	r3, #112	; 0x70
 8004614:	d018      	beq.n	8004648 <HAL_TIM_ConfigClockSource+0xb0>
 8004616:	d900      	bls.n	800461a <HAL_TIM_ConfigClockSource+0x82>
 8004618:	e07a      	b.n	8004710 <HAL_TIM_ConfigClockSource+0x178>
 800461a:	2b60      	cmp	r3, #96	; 0x60
 800461c:	d04f      	beq.n	80046be <HAL_TIM_ConfigClockSource+0x126>
 800461e:	d900      	bls.n	8004622 <HAL_TIM_ConfigClockSource+0x8a>
 8004620:	e076      	b.n	8004710 <HAL_TIM_ConfigClockSource+0x178>
 8004622:	2b50      	cmp	r3, #80	; 0x50
 8004624:	d03b      	beq.n	800469e <HAL_TIM_ConfigClockSource+0x106>
 8004626:	d900      	bls.n	800462a <HAL_TIM_ConfigClockSource+0x92>
 8004628:	e072      	b.n	8004710 <HAL_TIM_ConfigClockSource+0x178>
 800462a:	2b40      	cmp	r3, #64	; 0x40
 800462c:	d057      	beq.n	80046de <HAL_TIM_ConfigClockSource+0x146>
 800462e:	d900      	bls.n	8004632 <HAL_TIM_ConfigClockSource+0x9a>
 8004630:	e06e      	b.n	8004710 <HAL_TIM_ConfigClockSource+0x178>
 8004632:	2b30      	cmp	r3, #48	; 0x30
 8004634:	d063      	beq.n	80046fe <HAL_TIM_ConfigClockSource+0x166>
 8004636:	d86b      	bhi.n	8004710 <HAL_TIM_ConfigClockSource+0x178>
 8004638:	2b20      	cmp	r3, #32
 800463a:	d060      	beq.n	80046fe <HAL_TIM_ConfigClockSource+0x166>
 800463c:	d868      	bhi.n	8004710 <HAL_TIM_ConfigClockSource+0x178>
 800463e:	2b00      	cmp	r3, #0
 8004640:	d05d      	beq.n	80046fe <HAL_TIM_ConfigClockSource+0x166>
 8004642:	2b10      	cmp	r3, #16
 8004644:	d05b      	beq.n	80046fe <HAL_TIM_ConfigClockSource+0x166>
 8004646:	e063      	b.n	8004710 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6818      	ldr	r0, [r3, #0]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	6899      	ldr	r1, [r3, #8]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	f000 fc18 	bl	8004e8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	2277      	movs	r2, #119	; 0x77
 8004668:	4313      	orrs	r3, r2
 800466a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	609a      	str	r2, [r3, #8]
      break;
 8004674:	e052      	b.n	800471c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6818      	ldr	r0, [r3, #0]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	6899      	ldr	r1, [r3, #8]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	f000 fc01 	bl	8004e8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	689a      	ldr	r2, [r3, #8]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2180      	movs	r1, #128	; 0x80
 8004696:	01c9      	lsls	r1, r1, #7
 8004698:	430a      	orrs	r2, r1
 800469a:	609a      	str	r2, [r3, #8]
      break;
 800469c:	e03e      	b.n	800471c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6818      	ldr	r0, [r3, #0]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	6859      	ldr	r1, [r3, #4]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	001a      	movs	r2, r3
 80046ac:	f000 fb72 	bl	8004d94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2150      	movs	r1, #80	; 0x50
 80046b6:	0018      	movs	r0, r3
 80046b8:	f000 fbcc 	bl	8004e54 <TIM_ITRx_SetConfig>
      break;
 80046bc:	e02e      	b.n	800471c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6818      	ldr	r0, [r3, #0]
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	6859      	ldr	r1, [r3, #4]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	001a      	movs	r2, r3
 80046cc:	f000 fb90 	bl	8004df0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2160      	movs	r1, #96	; 0x60
 80046d6:	0018      	movs	r0, r3
 80046d8:	f000 fbbc 	bl	8004e54 <TIM_ITRx_SetConfig>
      break;
 80046dc:	e01e      	b.n	800471c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6818      	ldr	r0, [r3, #0]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	6859      	ldr	r1, [r3, #4]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	001a      	movs	r2, r3
 80046ec:	f000 fb52 	bl	8004d94 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2140      	movs	r1, #64	; 0x40
 80046f6:	0018      	movs	r0, r3
 80046f8:	f000 fbac 	bl	8004e54 <TIM_ITRx_SetConfig>
      break;
 80046fc:	e00e      	b.n	800471c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	0019      	movs	r1, r3
 8004708:	0010      	movs	r0, r2
 800470a:	f000 fba3 	bl	8004e54 <TIM_ITRx_SetConfig>
      break;
 800470e:	e005      	b.n	800471c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004710:	230f      	movs	r3, #15
 8004712:	18fb      	adds	r3, r7, r3
 8004714:	2201      	movs	r2, #1
 8004716:	701a      	strb	r2, [r3, #0]
      break;
 8004718:	e000      	b.n	800471c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800471a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	223d      	movs	r2, #61	; 0x3d
 8004720:	2101      	movs	r1, #1
 8004722:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	223c      	movs	r2, #60	; 0x3c
 8004728:	2100      	movs	r1, #0
 800472a:	5499      	strb	r1, [r3, r2]

  return status;
 800472c:	230f      	movs	r3, #15
 800472e:	18fb      	adds	r3, r7, r3
 8004730:	781b      	ldrb	r3, [r3, #0]
}
 8004732:	0018      	movs	r0, r3
 8004734:	46bd      	mov	sp, r7
 8004736:	b004      	add	sp, #16
 8004738:	bd80      	pop	{r7, pc}
 800473a:	46c0      	nop			; (mov r8, r8)
 800473c:	ffceff88 	.word	0xffceff88
 8004740:	ffff00ff 	.word	0xffff00ff

08004744 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800474c:	46c0      	nop			; (mov r8, r8)
 800474e:	46bd      	mov	sp, r7
 8004750:	b002      	add	sp, #8
 8004752:	bd80      	pop	{r7, pc}

08004754 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800475c:	46c0      	nop			; (mov r8, r8)
 800475e:	46bd      	mov	sp, r7
 8004760:	b002      	add	sp, #8
 8004762:	bd80      	pop	{r7, pc}

08004764 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800476c:	46c0      	nop			; (mov r8, r8)
 800476e:	46bd      	mov	sp, r7
 8004770:	b002      	add	sp, #8
 8004772:	bd80      	pop	{r7, pc}

08004774 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800477c:	46c0      	nop			; (mov r8, r8)
 800477e:	46bd      	mov	sp, r7
 8004780:	b002      	add	sp, #8
 8004782:	bd80      	pop	{r7, pc}

08004784 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a2b      	ldr	r2, [pc, #172]	; (8004844 <TIM_Base_SetConfig+0xc0>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d003      	beq.n	80047a4 <TIM_Base_SetConfig+0x20>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a2a      	ldr	r2, [pc, #168]	; (8004848 <TIM_Base_SetConfig+0xc4>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d108      	bne.n	80047b6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2270      	movs	r2, #112	; 0x70
 80047a8:	4393      	bics	r3, r2
 80047aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a22      	ldr	r2, [pc, #136]	; (8004844 <TIM_Base_SetConfig+0xc0>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d00f      	beq.n	80047de <TIM_Base_SetConfig+0x5a>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a21      	ldr	r2, [pc, #132]	; (8004848 <TIM_Base_SetConfig+0xc4>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d00b      	beq.n	80047de <TIM_Base_SetConfig+0x5a>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a20      	ldr	r2, [pc, #128]	; (800484c <TIM_Base_SetConfig+0xc8>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d007      	beq.n	80047de <TIM_Base_SetConfig+0x5a>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a1f      	ldr	r2, [pc, #124]	; (8004850 <TIM_Base_SetConfig+0xcc>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d003      	beq.n	80047de <TIM_Base_SetConfig+0x5a>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a1e      	ldr	r2, [pc, #120]	; (8004854 <TIM_Base_SetConfig+0xd0>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d108      	bne.n	80047f0 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	4a1d      	ldr	r2, [pc, #116]	; (8004858 <TIM_Base_SetConfig+0xd4>)
 80047e2:	4013      	ands	r3, r2
 80047e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2280      	movs	r2, #128	; 0x80
 80047f4:	4393      	bics	r3, r2
 80047f6:	001a      	movs	r2, r3
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	689a      	ldr	r2, [r3, #8]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a0a      	ldr	r2, [pc, #40]	; (8004844 <TIM_Base_SetConfig+0xc0>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d007      	beq.n	800482e <TIM_Base_SetConfig+0xaa>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a0b      	ldr	r2, [pc, #44]	; (8004850 <TIM_Base_SetConfig+0xcc>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d003      	beq.n	800482e <TIM_Base_SetConfig+0xaa>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a0a      	ldr	r2, [pc, #40]	; (8004854 <TIM_Base_SetConfig+0xd0>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d103      	bne.n	8004836 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	691a      	ldr	r2, [r3, #16]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	615a      	str	r2, [r3, #20]
}
 800483c:	46c0      	nop			; (mov r8, r8)
 800483e:	46bd      	mov	sp, r7
 8004840:	b004      	add	sp, #16
 8004842:	bd80      	pop	{r7, pc}
 8004844:	40012c00 	.word	0x40012c00
 8004848:	40000400 	.word	0x40000400
 800484c:	40002000 	.word	0x40002000
 8004850:	40014400 	.word	0x40014400
 8004854:	40014800 	.word	0x40014800
 8004858:	fffffcff 	.word	0xfffffcff

0800485c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	2201      	movs	r2, #1
 800486c:	4393      	bics	r3, r2
 800486e:	001a      	movs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a1b      	ldr	r3, [r3, #32]
 8004878:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	4a2e      	ldr	r2, [pc, #184]	; (8004944 <TIM_OC1_SetConfig+0xe8>)
 800488a:	4013      	ands	r3, r2
 800488c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2203      	movs	r2, #3
 8004892:	4393      	bics	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	4313      	orrs	r3, r2
 800489e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	2202      	movs	r2, #2
 80048a4:	4393      	bics	r3, r2
 80048a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a24      	ldr	r2, [pc, #144]	; (8004948 <TIM_OC1_SetConfig+0xec>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d007      	beq.n	80048ca <TIM_OC1_SetConfig+0x6e>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a23      	ldr	r2, [pc, #140]	; (800494c <TIM_OC1_SetConfig+0xf0>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d003      	beq.n	80048ca <TIM_OC1_SetConfig+0x6e>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a22      	ldr	r2, [pc, #136]	; (8004950 <TIM_OC1_SetConfig+0xf4>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d10c      	bne.n	80048e4 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	2208      	movs	r2, #8
 80048ce:	4393      	bics	r3, r2
 80048d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	4313      	orrs	r3, r2
 80048da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	2204      	movs	r2, #4
 80048e0:	4393      	bics	r3, r2
 80048e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a18      	ldr	r2, [pc, #96]	; (8004948 <TIM_OC1_SetConfig+0xec>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d007      	beq.n	80048fc <TIM_OC1_SetConfig+0xa0>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a17      	ldr	r2, [pc, #92]	; (800494c <TIM_OC1_SetConfig+0xf0>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d003      	beq.n	80048fc <TIM_OC1_SetConfig+0xa0>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a16      	ldr	r2, [pc, #88]	; (8004950 <TIM_OC1_SetConfig+0xf4>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d111      	bne.n	8004920 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	4a15      	ldr	r2, [pc, #84]	; (8004954 <TIM_OC1_SetConfig+0xf8>)
 8004900:	4013      	ands	r3, r2
 8004902:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	4a14      	ldr	r2, [pc, #80]	; (8004958 <TIM_OC1_SetConfig+0xfc>)
 8004908:	4013      	ands	r3, r2
 800490a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	4313      	orrs	r3, r2
 8004914:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	4313      	orrs	r3, r2
 800491e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	621a      	str	r2, [r3, #32]
}
 800493a:	46c0      	nop			; (mov r8, r8)
 800493c:	46bd      	mov	sp, r7
 800493e:	b006      	add	sp, #24
 8004940:	bd80      	pop	{r7, pc}
 8004942:	46c0      	nop			; (mov r8, r8)
 8004944:	fffeff8f 	.word	0xfffeff8f
 8004948:	40012c00 	.word	0x40012c00
 800494c:	40014400 	.word	0x40014400
 8004950:	40014800 	.word	0x40014800
 8004954:	fffffeff 	.word	0xfffffeff
 8004958:	fffffdff 	.word	0xfffffdff

0800495c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	2210      	movs	r2, #16
 800496c:	4393      	bics	r3, r2
 800496e:	001a      	movs	r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a1b      	ldr	r3, [r3, #32]
 8004978:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	4a2c      	ldr	r2, [pc, #176]	; (8004a3c <TIM_OC2_SetConfig+0xe0>)
 800498a:	4013      	ands	r3, r2
 800498c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4a2b      	ldr	r2, [pc, #172]	; (8004a40 <TIM_OC2_SetConfig+0xe4>)
 8004992:	4013      	ands	r3, r2
 8004994:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	021b      	lsls	r3, r3, #8
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	4313      	orrs	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	2220      	movs	r2, #32
 80049a6:	4393      	bics	r3, r2
 80049a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	011b      	lsls	r3, r3, #4
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a22      	ldr	r2, [pc, #136]	; (8004a44 <TIM_OC2_SetConfig+0xe8>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d10d      	bne.n	80049da <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	2280      	movs	r2, #128	; 0x80
 80049c2:	4393      	bics	r3, r2
 80049c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	011b      	lsls	r3, r3, #4
 80049cc:	697a      	ldr	r2, [r7, #20]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2240      	movs	r2, #64	; 0x40
 80049d6:	4393      	bics	r3, r2
 80049d8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a19      	ldr	r2, [pc, #100]	; (8004a44 <TIM_OC2_SetConfig+0xe8>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d007      	beq.n	80049f2 <TIM_OC2_SetConfig+0x96>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a18      	ldr	r2, [pc, #96]	; (8004a48 <TIM_OC2_SetConfig+0xec>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d003      	beq.n	80049f2 <TIM_OC2_SetConfig+0x96>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a17      	ldr	r2, [pc, #92]	; (8004a4c <TIM_OC2_SetConfig+0xf0>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d113      	bne.n	8004a1a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	4a16      	ldr	r2, [pc, #88]	; (8004a50 <TIM_OC2_SetConfig+0xf4>)
 80049f6:	4013      	ands	r3, r2
 80049f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	4a15      	ldr	r2, [pc, #84]	; (8004a54 <TIM_OC2_SetConfig+0xf8>)
 80049fe:	4013      	ands	r3, r2
 8004a00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	621a      	str	r2, [r3, #32]
}
 8004a34:	46c0      	nop			; (mov r8, r8)
 8004a36:	46bd      	mov	sp, r7
 8004a38:	b006      	add	sp, #24
 8004a3a:	bd80      	pop	{r7, pc}
 8004a3c:	feff8fff 	.word	0xfeff8fff
 8004a40:	fffffcff 	.word	0xfffffcff
 8004a44:	40012c00 	.word	0x40012c00
 8004a48:	40014400 	.word	0x40014400
 8004a4c:	40014800 	.word	0x40014800
 8004a50:	fffffbff 	.word	0xfffffbff
 8004a54:	fffff7ff 	.word	0xfffff7ff

08004a58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	4a33      	ldr	r2, [pc, #204]	; (8004b34 <TIM_OC3_SetConfig+0xdc>)
 8004a68:	401a      	ands	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	4a2d      	ldr	r2, [pc, #180]	; (8004b38 <TIM_OC3_SetConfig+0xe0>)
 8004a84:	4013      	ands	r3, r2
 8004a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2203      	movs	r2, #3
 8004a8c:	4393      	bics	r3, r2
 8004a8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	4a27      	ldr	r2, [pc, #156]	; (8004b3c <TIM_OC3_SetConfig+0xe4>)
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	021b      	lsls	r3, r3, #8
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a23      	ldr	r2, [pc, #140]	; (8004b40 <TIM_OC3_SetConfig+0xe8>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d10d      	bne.n	8004ad2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	4a22      	ldr	r2, [pc, #136]	; (8004b44 <TIM_OC3_SetConfig+0xec>)
 8004aba:	4013      	ands	r3, r2
 8004abc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	021b      	lsls	r3, r3, #8
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	4a1e      	ldr	r2, [pc, #120]	; (8004b48 <TIM_OC3_SetConfig+0xf0>)
 8004ace:	4013      	ands	r3, r2
 8004ad0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a1a      	ldr	r2, [pc, #104]	; (8004b40 <TIM_OC3_SetConfig+0xe8>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d007      	beq.n	8004aea <TIM_OC3_SetConfig+0x92>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a1b      	ldr	r2, [pc, #108]	; (8004b4c <TIM_OC3_SetConfig+0xf4>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d003      	beq.n	8004aea <TIM_OC3_SetConfig+0x92>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a1a      	ldr	r2, [pc, #104]	; (8004b50 <TIM_OC3_SetConfig+0xf8>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d113      	bne.n	8004b12 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	4a19      	ldr	r2, [pc, #100]	; (8004b54 <TIM_OC3_SetConfig+0xfc>)
 8004aee:	4013      	ands	r3, r2
 8004af0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	4a18      	ldr	r2, [pc, #96]	; (8004b58 <TIM_OC3_SetConfig+0x100>)
 8004af6:	4013      	ands	r3, r2
 8004af8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	011b      	lsls	r3, r3, #4
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	011b      	lsls	r3, r3, #4
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	621a      	str	r2, [r3, #32]
}
 8004b2c:	46c0      	nop			; (mov r8, r8)
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	b006      	add	sp, #24
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	fffffeff 	.word	0xfffffeff
 8004b38:	fffeff8f 	.word	0xfffeff8f
 8004b3c:	fffffdff 	.word	0xfffffdff
 8004b40:	40012c00 	.word	0x40012c00
 8004b44:	fffff7ff 	.word	0xfffff7ff
 8004b48:	fffffbff 	.word	0xfffffbff
 8004b4c:	40014400 	.word	0x40014400
 8004b50:	40014800 	.word	0x40014800
 8004b54:	ffffefff 	.word	0xffffefff
 8004b58:	ffffdfff 	.word	0xffffdfff

08004b5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	4a26      	ldr	r2, [pc, #152]	; (8004c04 <TIM_OC4_SetConfig+0xa8>)
 8004b6c:	401a      	ands	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4a20      	ldr	r2, [pc, #128]	; (8004c08 <TIM_OC4_SetConfig+0xac>)
 8004b88:	4013      	ands	r3, r2
 8004b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	4a1f      	ldr	r2, [pc, #124]	; (8004c0c <TIM_OC4_SetConfig+0xb0>)
 8004b90:	4013      	ands	r3, r2
 8004b92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	021b      	lsls	r3, r3, #8
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	4a1b      	ldr	r2, [pc, #108]	; (8004c10 <TIM_OC4_SetConfig+0xb4>)
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	031b      	lsls	r3, r3, #12
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a17      	ldr	r2, [pc, #92]	; (8004c14 <TIM_OC4_SetConfig+0xb8>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d007      	beq.n	8004bcc <TIM_OC4_SetConfig+0x70>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a16      	ldr	r2, [pc, #88]	; (8004c18 <TIM_OC4_SetConfig+0xbc>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d003      	beq.n	8004bcc <TIM_OC4_SetConfig+0x70>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a15      	ldr	r2, [pc, #84]	; (8004c1c <TIM_OC4_SetConfig+0xc0>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d109      	bne.n	8004be0 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	4a14      	ldr	r2, [pc, #80]	; (8004c20 <TIM_OC4_SetConfig+0xc4>)
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	695b      	ldr	r3, [r3, #20]
 8004bd8:	019b      	lsls	r3, r3, #6
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	621a      	str	r2, [r3, #32]
}
 8004bfa:	46c0      	nop			; (mov r8, r8)
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	b006      	add	sp, #24
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	46c0      	nop			; (mov r8, r8)
 8004c04:	ffffefff 	.word	0xffffefff
 8004c08:	feff8fff 	.word	0xfeff8fff
 8004c0c:	fffffcff 	.word	0xfffffcff
 8004c10:	ffffdfff 	.word	0xffffdfff
 8004c14:	40012c00 	.word	0x40012c00
 8004c18:	40014400 	.word	0x40014400
 8004c1c:	40014800 	.word	0x40014800
 8004c20:	ffffbfff 	.word	0xffffbfff

08004c24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b086      	sub	sp, #24
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	4a23      	ldr	r2, [pc, #140]	; (8004cc0 <TIM_OC5_SetConfig+0x9c>)
 8004c34:	401a      	ands	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	4a1d      	ldr	r2, [pc, #116]	; (8004cc4 <TIM_OC5_SetConfig+0xa0>)
 8004c50:	4013      	ands	r3, r2
 8004c52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	4a19      	ldr	r2, [pc, #100]	; (8004cc8 <TIM_OC5_SetConfig+0xa4>)
 8004c62:	4013      	ands	r3, r2
 8004c64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	041b      	lsls	r3, r3, #16
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a15      	ldr	r2, [pc, #84]	; (8004ccc <TIM_OC5_SetConfig+0xa8>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d007      	beq.n	8004c8a <TIM_OC5_SetConfig+0x66>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a14      	ldr	r2, [pc, #80]	; (8004cd0 <TIM_OC5_SetConfig+0xac>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d003      	beq.n	8004c8a <TIM_OC5_SetConfig+0x66>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a13      	ldr	r2, [pc, #76]	; (8004cd4 <TIM_OC5_SetConfig+0xb0>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d109      	bne.n	8004c9e <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	4a0c      	ldr	r2, [pc, #48]	; (8004cc0 <TIM_OC5_SetConfig+0x9c>)
 8004c8e:	4013      	ands	r3, r2
 8004c90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	021b      	lsls	r3, r3, #8
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	697a      	ldr	r2, [r7, #20]
 8004ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	621a      	str	r2, [r3, #32]
}
 8004cb8:	46c0      	nop			; (mov r8, r8)
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	b006      	add	sp, #24
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	fffeffff 	.word	0xfffeffff
 8004cc4:	fffeff8f 	.word	0xfffeff8f
 8004cc8:	fffdffff 	.word	0xfffdffff
 8004ccc:	40012c00 	.word	0x40012c00
 8004cd0:	40014400 	.word	0x40014400
 8004cd4:	40014800 	.word	0x40014800

08004cd8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	4a24      	ldr	r2, [pc, #144]	; (8004d78 <TIM_OC6_SetConfig+0xa0>)
 8004ce8:	401a      	ands	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4a1e      	ldr	r2, [pc, #120]	; (8004d7c <TIM_OC6_SetConfig+0xa4>)
 8004d04:	4013      	ands	r3, r2
 8004d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	021b      	lsls	r3, r3, #8
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	4a1a      	ldr	r2, [pc, #104]	; (8004d80 <TIM_OC6_SetConfig+0xa8>)
 8004d18:	4013      	ands	r3, r2
 8004d1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	051b      	lsls	r3, r3, #20
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a16      	ldr	r2, [pc, #88]	; (8004d84 <TIM_OC6_SetConfig+0xac>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d007      	beq.n	8004d40 <TIM_OC6_SetConfig+0x68>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a15      	ldr	r2, [pc, #84]	; (8004d88 <TIM_OC6_SetConfig+0xb0>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d003      	beq.n	8004d40 <TIM_OC6_SetConfig+0x68>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a14      	ldr	r2, [pc, #80]	; (8004d8c <TIM_OC6_SetConfig+0xb4>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d109      	bne.n	8004d54 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	4a13      	ldr	r2, [pc, #76]	; (8004d90 <TIM_OC6_SetConfig+0xb8>)
 8004d44:	4013      	ands	r3, r2
 8004d46:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	029b      	lsls	r3, r3, #10
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	697a      	ldr	r2, [r7, #20]
 8004d58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	621a      	str	r2, [r3, #32]
}
 8004d6e:	46c0      	nop			; (mov r8, r8)
 8004d70:	46bd      	mov	sp, r7
 8004d72:	b006      	add	sp, #24
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	46c0      	nop			; (mov r8, r8)
 8004d78:	ffefffff 	.word	0xffefffff
 8004d7c:	feff8fff 	.word	0xfeff8fff
 8004d80:	ffdfffff 	.word	0xffdfffff
 8004d84:	40012c00 	.word	0x40012c00
 8004d88:	40014400 	.word	0x40014400
 8004d8c:	40014800 	.word	0x40014800
 8004d90:	fffbffff 	.word	0xfffbffff

08004d94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	2201      	movs	r2, #1
 8004dac:	4393      	bics	r3, r2
 8004dae:	001a      	movs	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	22f0      	movs	r2, #240	; 0xf0
 8004dbe:	4393      	bics	r3, r2
 8004dc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	011b      	lsls	r3, r3, #4
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	220a      	movs	r2, #10
 8004dd0:	4393      	bics	r3, r2
 8004dd2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	621a      	str	r2, [r3, #32]
}
 8004de8:	46c0      	nop			; (mov r8, r8)
 8004dea:	46bd      	mov	sp, r7
 8004dec:	b006      	add	sp, #24
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b086      	sub	sp, #24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	2210      	movs	r2, #16
 8004e02:	4393      	bics	r3, r2
 8004e04:	001a      	movs	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	4a0d      	ldr	r2, [pc, #52]	; (8004e50 <TIM_TI2_ConfigInputStage+0x60>)
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	031b      	lsls	r3, r3, #12
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	22a0      	movs	r2, #160	; 0xa0
 8004e2c:	4393      	bics	r3, r2
 8004e2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	011b      	lsls	r3, r3, #4
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	621a      	str	r2, [r3, #32]
}
 8004e46:	46c0      	nop			; (mov r8, r8)
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	b006      	add	sp, #24
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	46c0      	nop			; (mov r8, r8)
 8004e50:	ffff0fff 	.word	0xffff0fff

08004e54 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4a08      	ldr	r2, [pc, #32]	; (8004e88 <TIM_ITRx_SetConfig+0x34>)
 8004e68:	4013      	ands	r3, r2
 8004e6a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e6c:	683a      	ldr	r2, [r7, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	2207      	movs	r2, #7
 8004e74:	4313      	orrs	r3, r2
 8004e76:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	609a      	str	r2, [r3, #8]
}
 8004e7e:	46c0      	nop			; (mov r8, r8)
 8004e80:	46bd      	mov	sp, r7
 8004e82:	b004      	add	sp, #16
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	46c0      	nop			; (mov r8, r8)
 8004e88:	ffcfff8f 	.word	0xffcfff8f

08004e8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
 8004e98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	4a09      	ldr	r2, [pc, #36]	; (8004ec8 <TIM_ETR_SetConfig+0x3c>)
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	021a      	lsls	r2, r3, #8
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	609a      	str	r2, [r3, #8]
}
 8004ec0:	46c0      	nop			; (mov r8, r8)
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	b006      	add	sp, #24
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	ffff00ff 	.word	0xffff00ff

08004ecc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	223c      	movs	r2, #60	; 0x3c
 8004eda:	5c9b      	ldrb	r3, [r3, r2]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d101      	bne.n	8004ee4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	e04a      	b.n	8004f7a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	223c      	movs	r2, #60	; 0x3c
 8004ee8:	2101      	movs	r1, #1
 8004eea:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	223d      	movs	r2, #61	; 0x3d
 8004ef0:	2102      	movs	r1, #2
 8004ef2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a1e      	ldr	r2, [pc, #120]	; (8004f84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d108      	bne.n	8004f20 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	4a1d      	ldr	r2, [pc, #116]	; (8004f88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8004f12:	4013      	ands	r3, r2
 8004f14:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2270      	movs	r2, #112	; 0x70
 8004f24:	4393      	bics	r3, r2
 8004f26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a11      	ldr	r2, [pc, #68]	; (8004f84 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d004      	beq.n	8004f4e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a10      	ldr	r2, [pc, #64]	; (8004f8c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d10c      	bne.n	8004f68 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	2280      	movs	r2, #128	; 0x80
 8004f52:	4393      	bics	r3, r2
 8004f54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	223d      	movs	r2, #61	; 0x3d
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	223c      	movs	r2, #60	; 0x3c
 8004f74:	2100      	movs	r1, #0
 8004f76:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	0018      	movs	r0, r3
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	b004      	add	sp, #16
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	46c0      	nop			; (mov r8, r8)
 8004f84:	40012c00 	.word	0x40012c00
 8004f88:	ff0fffff 	.word	0xff0fffff
 8004f8c:	40000400 	.word	0x40000400

08004f90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b082      	sub	sp, #8
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f98:	46c0      	nop			; (mov r8, r8)
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	b002      	add	sp, #8
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fa8:	46c0      	nop			; (mov r8, r8)
 8004faa:	46bd      	mov	sp, r7
 8004fac:	b002      	add	sp, #8
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004fb8:	46c0      	nop			; (mov r8, r8)
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	b002      	add	sp, #8
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <__errno>:
 8004fc0:	4b01      	ldr	r3, [pc, #4]	; (8004fc8 <__errno+0x8>)
 8004fc2:	6818      	ldr	r0, [r3, #0]
 8004fc4:	4770      	bx	lr
 8004fc6:	46c0      	nop			; (mov r8, r8)
 8004fc8:	20000018 	.word	0x20000018

08004fcc <__libc_init_array>:
 8004fcc:	b570      	push	{r4, r5, r6, lr}
 8004fce:	2600      	movs	r6, #0
 8004fd0:	4d0c      	ldr	r5, [pc, #48]	; (8005004 <__libc_init_array+0x38>)
 8004fd2:	4c0d      	ldr	r4, [pc, #52]	; (8005008 <__libc_init_array+0x3c>)
 8004fd4:	1b64      	subs	r4, r4, r5
 8004fd6:	10a4      	asrs	r4, r4, #2
 8004fd8:	42a6      	cmp	r6, r4
 8004fda:	d109      	bne.n	8004ff0 <__libc_init_array+0x24>
 8004fdc:	2600      	movs	r6, #0
 8004fde:	f000 fc8b 	bl	80058f8 <_init>
 8004fe2:	4d0a      	ldr	r5, [pc, #40]	; (800500c <__libc_init_array+0x40>)
 8004fe4:	4c0a      	ldr	r4, [pc, #40]	; (8005010 <__libc_init_array+0x44>)
 8004fe6:	1b64      	subs	r4, r4, r5
 8004fe8:	10a4      	asrs	r4, r4, #2
 8004fea:	42a6      	cmp	r6, r4
 8004fec:	d105      	bne.n	8004ffa <__libc_init_array+0x2e>
 8004fee:	bd70      	pop	{r4, r5, r6, pc}
 8004ff0:	00b3      	lsls	r3, r6, #2
 8004ff2:	58eb      	ldr	r3, [r5, r3]
 8004ff4:	4798      	blx	r3
 8004ff6:	3601      	adds	r6, #1
 8004ff8:	e7ee      	b.n	8004fd8 <__libc_init_array+0xc>
 8004ffa:	00b3      	lsls	r3, r6, #2
 8004ffc:	58eb      	ldr	r3, [r5, r3]
 8004ffe:	4798      	blx	r3
 8005000:	3601      	adds	r6, #1
 8005002:	e7f2      	b.n	8004fea <__libc_init_array+0x1e>
 8005004:	080068c0 	.word	0x080068c0
 8005008:	080068c0 	.word	0x080068c0
 800500c:	080068c0 	.word	0x080068c0
 8005010:	080068c4 	.word	0x080068c4

08005014 <memcpy>:
 8005014:	2300      	movs	r3, #0
 8005016:	b510      	push	{r4, lr}
 8005018:	429a      	cmp	r2, r3
 800501a:	d100      	bne.n	800501e <memcpy+0xa>
 800501c:	bd10      	pop	{r4, pc}
 800501e:	5ccc      	ldrb	r4, [r1, r3]
 8005020:	54c4      	strb	r4, [r0, r3]
 8005022:	3301      	adds	r3, #1
 8005024:	e7f8      	b.n	8005018 <memcpy+0x4>

08005026 <memset>:
 8005026:	0003      	movs	r3, r0
 8005028:	1882      	adds	r2, r0, r2
 800502a:	4293      	cmp	r3, r2
 800502c:	d100      	bne.n	8005030 <memset+0xa>
 800502e:	4770      	bx	lr
 8005030:	7019      	strb	r1, [r3, #0]
 8005032:	3301      	adds	r3, #1
 8005034:	e7f9      	b.n	800502a <memset+0x4>
	...

08005038 <siprintf>:
 8005038:	b40e      	push	{r1, r2, r3}
 800503a:	b500      	push	{lr}
 800503c:	490b      	ldr	r1, [pc, #44]	; (800506c <siprintf+0x34>)
 800503e:	b09c      	sub	sp, #112	; 0x70
 8005040:	ab1d      	add	r3, sp, #116	; 0x74
 8005042:	9002      	str	r0, [sp, #8]
 8005044:	9006      	str	r0, [sp, #24]
 8005046:	9107      	str	r1, [sp, #28]
 8005048:	9104      	str	r1, [sp, #16]
 800504a:	4809      	ldr	r0, [pc, #36]	; (8005070 <siprintf+0x38>)
 800504c:	4909      	ldr	r1, [pc, #36]	; (8005074 <siprintf+0x3c>)
 800504e:	cb04      	ldmia	r3!, {r2}
 8005050:	9105      	str	r1, [sp, #20]
 8005052:	6800      	ldr	r0, [r0, #0]
 8005054:	a902      	add	r1, sp, #8
 8005056:	9301      	str	r3, [sp, #4]
 8005058:	f000 f870 	bl	800513c <_svfiprintf_r>
 800505c:	2300      	movs	r3, #0
 800505e:	9a02      	ldr	r2, [sp, #8]
 8005060:	7013      	strb	r3, [r2, #0]
 8005062:	b01c      	add	sp, #112	; 0x70
 8005064:	bc08      	pop	{r3}
 8005066:	b003      	add	sp, #12
 8005068:	4718      	bx	r3
 800506a:	46c0      	nop			; (mov r8, r8)
 800506c:	7fffffff 	.word	0x7fffffff
 8005070:	20000018 	.word	0x20000018
 8005074:	ffff0208 	.word	0xffff0208

08005078 <__ssputs_r>:
 8005078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800507a:	688e      	ldr	r6, [r1, #8]
 800507c:	b085      	sub	sp, #20
 800507e:	0007      	movs	r7, r0
 8005080:	000c      	movs	r4, r1
 8005082:	9203      	str	r2, [sp, #12]
 8005084:	9301      	str	r3, [sp, #4]
 8005086:	429e      	cmp	r6, r3
 8005088:	d83c      	bhi.n	8005104 <__ssputs_r+0x8c>
 800508a:	2390      	movs	r3, #144	; 0x90
 800508c:	898a      	ldrh	r2, [r1, #12]
 800508e:	00db      	lsls	r3, r3, #3
 8005090:	421a      	tst	r2, r3
 8005092:	d034      	beq.n	80050fe <__ssputs_r+0x86>
 8005094:	6909      	ldr	r1, [r1, #16]
 8005096:	6823      	ldr	r3, [r4, #0]
 8005098:	6960      	ldr	r0, [r4, #20]
 800509a:	1a5b      	subs	r3, r3, r1
 800509c:	9302      	str	r3, [sp, #8]
 800509e:	2303      	movs	r3, #3
 80050a0:	4343      	muls	r3, r0
 80050a2:	0fdd      	lsrs	r5, r3, #31
 80050a4:	18ed      	adds	r5, r5, r3
 80050a6:	9b01      	ldr	r3, [sp, #4]
 80050a8:	9802      	ldr	r0, [sp, #8]
 80050aa:	3301      	adds	r3, #1
 80050ac:	181b      	adds	r3, r3, r0
 80050ae:	106d      	asrs	r5, r5, #1
 80050b0:	42ab      	cmp	r3, r5
 80050b2:	d900      	bls.n	80050b6 <__ssputs_r+0x3e>
 80050b4:	001d      	movs	r5, r3
 80050b6:	0553      	lsls	r3, r2, #21
 80050b8:	d532      	bpl.n	8005120 <__ssputs_r+0xa8>
 80050ba:	0029      	movs	r1, r5
 80050bc:	0038      	movs	r0, r7
 80050be:	f000 fb49 	bl	8005754 <_malloc_r>
 80050c2:	1e06      	subs	r6, r0, #0
 80050c4:	d109      	bne.n	80050da <__ssputs_r+0x62>
 80050c6:	230c      	movs	r3, #12
 80050c8:	603b      	str	r3, [r7, #0]
 80050ca:	2340      	movs	r3, #64	; 0x40
 80050cc:	2001      	movs	r0, #1
 80050ce:	89a2      	ldrh	r2, [r4, #12]
 80050d0:	4240      	negs	r0, r0
 80050d2:	4313      	orrs	r3, r2
 80050d4:	81a3      	strh	r3, [r4, #12]
 80050d6:	b005      	add	sp, #20
 80050d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050da:	9a02      	ldr	r2, [sp, #8]
 80050dc:	6921      	ldr	r1, [r4, #16]
 80050de:	f7ff ff99 	bl	8005014 <memcpy>
 80050e2:	89a3      	ldrh	r3, [r4, #12]
 80050e4:	4a14      	ldr	r2, [pc, #80]	; (8005138 <__ssputs_r+0xc0>)
 80050e6:	401a      	ands	r2, r3
 80050e8:	2380      	movs	r3, #128	; 0x80
 80050ea:	4313      	orrs	r3, r2
 80050ec:	81a3      	strh	r3, [r4, #12]
 80050ee:	9b02      	ldr	r3, [sp, #8]
 80050f0:	6126      	str	r6, [r4, #16]
 80050f2:	18f6      	adds	r6, r6, r3
 80050f4:	6026      	str	r6, [r4, #0]
 80050f6:	6165      	str	r5, [r4, #20]
 80050f8:	9e01      	ldr	r6, [sp, #4]
 80050fa:	1aed      	subs	r5, r5, r3
 80050fc:	60a5      	str	r5, [r4, #8]
 80050fe:	9b01      	ldr	r3, [sp, #4]
 8005100:	429e      	cmp	r6, r3
 8005102:	d900      	bls.n	8005106 <__ssputs_r+0x8e>
 8005104:	9e01      	ldr	r6, [sp, #4]
 8005106:	0032      	movs	r2, r6
 8005108:	9903      	ldr	r1, [sp, #12]
 800510a:	6820      	ldr	r0, [r4, #0]
 800510c:	f000 faa3 	bl	8005656 <memmove>
 8005110:	68a3      	ldr	r3, [r4, #8]
 8005112:	2000      	movs	r0, #0
 8005114:	1b9b      	subs	r3, r3, r6
 8005116:	60a3      	str	r3, [r4, #8]
 8005118:	6823      	ldr	r3, [r4, #0]
 800511a:	199e      	adds	r6, r3, r6
 800511c:	6026      	str	r6, [r4, #0]
 800511e:	e7da      	b.n	80050d6 <__ssputs_r+0x5e>
 8005120:	002a      	movs	r2, r5
 8005122:	0038      	movs	r0, r7
 8005124:	f000 fb8c 	bl	8005840 <_realloc_r>
 8005128:	1e06      	subs	r6, r0, #0
 800512a:	d1e0      	bne.n	80050ee <__ssputs_r+0x76>
 800512c:	0038      	movs	r0, r7
 800512e:	6921      	ldr	r1, [r4, #16]
 8005130:	f000 faa4 	bl	800567c <_free_r>
 8005134:	e7c7      	b.n	80050c6 <__ssputs_r+0x4e>
 8005136:	46c0      	nop			; (mov r8, r8)
 8005138:	fffffb7f 	.word	0xfffffb7f

0800513c <_svfiprintf_r>:
 800513c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800513e:	b0a1      	sub	sp, #132	; 0x84
 8005140:	9003      	str	r0, [sp, #12]
 8005142:	001d      	movs	r5, r3
 8005144:	898b      	ldrh	r3, [r1, #12]
 8005146:	000f      	movs	r7, r1
 8005148:	0016      	movs	r6, r2
 800514a:	061b      	lsls	r3, r3, #24
 800514c:	d511      	bpl.n	8005172 <_svfiprintf_r+0x36>
 800514e:	690b      	ldr	r3, [r1, #16]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10e      	bne.n	8005172 <_svfiprintf_r+0x36>
 8005154:	2140      	movs	r1, #64	; 0x40
 8005156:	f000 fafd 	bl	8005754 <_malloc_r>
 800515a:	6038      	str	r0, [r7, #0]
 800515c:	6138      	str	r0, [r7, #16]
 800515e:	2800      	cmp	r0, #0
 8005160:	d105      	bne.n	800516e <_svfiprintf_r+0x32>
 8005162:	230c      	movs	r3, #12
 8005164:	9a03      	ldr	r2, [sp, #12]
 8005166:	3801      	subs	r0, #1
 8005168:	6013      	str	r3, [r2, #0]
 800516a:	b021      	add	sp, #132	; 0x84
 800516c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800516e:	2340      	movs	r3, #64	; 0x40
 8005170:	617b      	str	r3, [r7, #20]
 8005172:	2300      	movs	r3, #0
 8005174:	ac08      	add	r4, sp, #32
 8005176:	6163      	str	r3, [r4, #20]
 8005178:	3320      	adds	r3, #32
 800517a:	7663      	strb	r3, [r4, #25]
 800517c:	3310      	adds	r3, #16
 800517e:	76a3      	strb	r3, [r4, #26]
 8005180:	9507      	str	r5, [sp, #28]
 8005182:	0035      	movs	r5, r6
 8005184:	782b      	ldrb	r3, [r5, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <_svfiprintf_r+0x52>
 800518a:	2b25      	cmp	r3, #37	; 0x25
 800518c:	d147      	bne.n	800521e <_svfiprintf_r+0xe2>
 800518e:	1bab      	subs	r3, r5, r6
 8005190:	9305      	str	r3, [sp, #20]
 8005192:	42b5      	cmp	r5, r6
 8005194:	d00c      	beq.n	80051b0 <_svfiprintf_r+0x74>
 8005196:	0032      	movs	r2, r6
 8005198:	0039      	movs	r1, r7
 800519a:	9803      	ldr	r0, [sp, #12]
 800519c:	f7ff ff6c 	bl	8005078 <__ssputs_r>
 80051a0:	1c43      	adds	r3, r0, #1
 80051a2:	d100      	bne.n	80051a6 <_svfiprintf_r+0x6a>
 80051a4:	e0ae      	b.n	8005304 <_svfiprintf_r+0x1c8>
 80051a6:	6962      	ldr	r2, [r4, #20]
 80051a8:	9b05      	ldr	r3, [sp, #20]
 80051aa:	4694      	mov	ip, r2
 80051ac:	4463      	add	r3, ip
 80051ae:	6163      	str	r3, [r4, #20]
 80051b0:	782b      	ldrb	r3, [r5, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d100      	bne.n	80051b8 <_svfiprintf_r+0x7c>
 80051b6:	e0a5      	b.n	8005304 <_svfiprintf_r+0x1c8>
 80051b8:	2201      	movs	r2, #1
 80051ba:	2300      	movs	r3, #0
 80051bc:	4252      	negs	r2, r2
 80051be:	6062      	str	r2, [r4, #4]
 80051c0:	a904      	add	r1, sp, #16
 80051c2:	3254      	adds	r2, #84	; 0x54
 80051c4:	1852      	adds	r2, r2, r1
 80051c6:	1c6e      	adds	r6, r5, #1
 80051c8:	6023      	str	r3, [r4, #0]
 80051ca:	60e3      	str	r3, [r4, #12]
 80051cc:	60a3      	str	r3, [r4, #8]
 80051ce:	7013      	strb	r3, [r2, #0]
 80051d0:	65a3      	str	r3, [r4, #88]	; 0x58
 80051d2:	2205      	movs	r2, #5
 80051d4:	7831      	ldrb	r1, [r6, #0]
 80051d6:	4854      	ldr	r0, [pc, #336]	; (8005328 <_svfiprintf_r+0x1ec>)
 80051d8:	f000 fa32 	bl	8005640 <memchr>
 80051dc:	1c75      	adds	r5, r6, #1
 80051de:	2800      	cmp	r0, #0
 80051e0:	d11f      	bne.n	8005222 <_svfiprintf_r+0xe6>
 80051e2:	6822      	ldr	r2, [r4, #0]
 80051e4:	06d3      	lsls	r3, r2, #27
 80051e6:	d504      	bpl.n	80051f2 <_svfiprintf_r+0xb6>
 80051e8:	2353      	movs	r3, #83	; 0x53
 80051ea:	a904      	add	r1, sp, #16
 80051ec:	185b      	adds	r3, r3, r1
 80051ee:	2120      	movs	r1, #32
 80051f0:	7019      	strb	r1, [r3, #0]
 80051f2:	0713      	lsls	r3, r2, #28
 80051f4:	d504      	bpl.n	8005200 <_svfiprintf_r+0xc4>
 80051f6:	2353      	movs	r3, #83	; 0x53
 80051f8:	a904      	add	r1, sp, #16
 80051fa:	185b      	adds	r3, r3, r1
 80051fc:	212b      	movs	r1, #43	; 0x2b
 80051fe:	7019      	strb	r1, [r3, #0]
 8005200:	7833      	ldrb	r3, [r6, #0]
 8005202:	2b2a      	cmp	r3, #42	; 0x2a
 8005204:	d016      	beq.n	8005234 <_svfiprintf_r+0xf8>
 8005206:	0035      	movs	r5, r6
 8005208:	2100      	movs	r1, #0
 800520a:	200a      	movs	r0, #10
 800520c:	68e3      	ldr	r3, [r4, #12]
 800520e:	782a      	ldrb	r2, [r5, #0]
 8005210:	1c6e      	adds	r6, r5, #1
 8005212:	3a30      	subs	r2, #48	; 0x30
 8005214:	2a09      	cmp	r2, #9
 8005216:	d94e      	bls.n	80052b6 <_svfiprintf_r+0x17a>
 8005218:	2900      	cmp	r1, #0
 800521a:	d111      	bne.n	8005240 <_svfiprintf_r+0x104>
 800521c:	e017      	b.n	800524e <_svfiprintf_r+0x112>
 800521e:	3501      	adds	r5, #1
 8005220:	e7b0      	b.n	8005184 <_svfiprintf_r+0x48>
 8005222:	4b41      	ldr	r3, [pc, #260]	; (8005328 <_svfiprintf_r+0x1ec>)
 8005224:	6822      	ldr	r2, [r4, #0]
 8005226:	1ac0      	subs	r0, r0, r3
 8005228:	2301      	movs	r3, #1
 800522a:	4083      	lsls	r3, r0
 800522c:	4313      	orrs	r3, r2
 800522e:	002e      	movs	r6, r5
 8005230:	6023      	str	r3, [r4, #0]
 8005232:	e7ce      	b.n	80051d2 <_svfiprintf_r+0x96>
 8005234:	9b07      	ldr	r3, [sp, #28]
 8005236:	1d19      	adds	r1, r3, #4
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	9107      	str	r1, [sp, #28]
 800523c:	2b00      	cmp	r3, #0
 800523e:	db01      	blt.n	8005244 <_svfiprintf_r+0x108>
 8005240:	930b      	str	r3, [sp, #44]	; 0x2c
 8005242:	e004      	b.n	800524e <_svfiprintf_r+0x112>
 8005244:	425b      	negs	r3, r3
 8005246:	60e3      	str	r3, [r4, #12]
 8005248:	2302      	movs	r3, #2
 800524a:	4313      	orrs	r3, r2
 800524c:	6023      	str	r3, [r4, #0]
 800524e:	782b      	ldrb	r3, [r5, #0]
 8005250:	2b2e      	cmp	r3, #46	; 0x2e
 8005252:	d10a      	bne.n	800526a <_svfiprintf_r+0x12e>
 8005254:	786b      	ldrb	r3, [r5, #1]
 8005256:	2b2a      	cmp	r3, #42	; 0x2a
 8005258:	d135      	bne.n	80052c6 <_svfiprintf_r+0x18a>
 800525a:	9b07      	ldr	r3, [sp, #28]
 800525c:	3502      	adds	r5, #2
 800525e:	1d1a      	adds	r2, r3, #4
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	9207      	str	r2, [sp, #28]
 8005264:	2b00      	cmp	r3, #0
 8005266:	db2b      	blt.n	80052c0 <_svfiprintf_r+0x184>
 8005268:	9309      	str	r3, [sp, #36]	; 0x24
 800526a:	4e30      	ldr	r6, [pc, #192]	; (800532c <_svfiprintf_r+0x1f0>)
 800526c:	2203      	movs	r2, #3
 800526e:	0030      	movs	r0, r6
 8005270:	7829      	ldrb	r1, [r5, #0]
 8005272:	f000 f9e5 	bl	8005640 <memchr>
 8005276:	2800      	cmp	r0, #0
 8005278:	d006      	beq.n	8005288 <_svfiprintf_r+0x14c>
 800527a:	2340      	movs	r3, #64	; 0x40
 800527c:	1b80      	subs	r0, r0, r6
 800527e:	4083      	lsls	r3, r0
 8005280:	6822      	ldr	r2, [r4, #0]
 8005282:	3501      	adds	r5, #1
 8005284:	4313      	orrs	r3, r2
 8005286:	6023      	str	r3, [r4, #0]
 8005288:	7829      	ldrb	r1, [r5, #0]
 800528a:	2206      	movs	r2, #6
 800528c:	4828      	ldr	r0, [pc, #160]	; (8005330 <_svfiprintf_r+0x1f4>)
 800528e:	1c6e      	adds	r6, r5, #1
 8005290:	7621      	strb	r1, [r4, #24]
 8005292:	f000 f9d5 	bl	8005640 <memchr>
 8005296:	2800      	cmp	r0, #0
 8005298:	d03c      	beq.n	8005314 <_svfiprintf_r+0x1d8>
 800529a:	4b26      	ldr	r3, [pc, #152]	; (8005334 <_svfiprintf_r+0x1f8>)
 800529c:	2b00      	cmp	r3, #0
 800529e:	d125      	bne.n	80052ec <_svfiprintf_r+0x1b0>
 80052a0:	2207      	movs	r2, #7
 80052a2:	9b07      	ldr	r3, [sp, #28]
 80052a4:	3307      	adds	r3, #7
 80052a6:	4393      	bics	r3, r2
 80052a8:	3308      	adds	r3, #8
 80052aa:	9307      	str	r3, [sp, #28]
 80052ac:	6963      	ldr	r3, [r4, #20]
 80052ae:	9a04      	ldr	r2, [sp, #16]
 80052b0:	189b      	adds	r3, r3, r2
 80052b2:	6163      	str	r3, [r4, #20]
 80052b4:	e765      	b.n	8005182 <_svfiprintf_r+0x46>
 80052b6:	4343      	muls	r3, r0
 80052b8:	0035      	movs	r5, r6
 80052ba:	2101      	movs	r1, #1
 80052bc:	189b      	adds	r3, r3, r2
 80052be:	e7a6      	b.n	800520e <_svfiprintf_r+0xd2>
 80052c0:	2301      	movs	r3, #1
 80052c2:	425b      	negs	r3, r3
 80052c4:	e7d0      	b.n	8005268 <_svfiprintf_r+0x12c>
 80052c6:	2300      	movs	r3, #0
 80052c8:	200a      	movs	r0, #10
 80052ca:	001a      	movs	r2, r3
 80052cc:	3501      	adds	r5, #1
 80052ce:	6063      	str	r3, [r4, #4]
 80052d0:	7829      	ldrb	r1, [r5, #0]
 80052d2:	1c6e      	adds	r6, r5, #1
 80052d4:	3930      	subs	r1, #48	; 0x30
 80052d6:	2909      	cmp	r1, #9
 80052d8:	d903      	bls.n	80052e2 <_svfiprintf_r+0x1a6>
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d0c5      	beq.n	800526a <_svfiprintf_r+0x12e>
 80052de:	9209      	str	r2, [sp, #36]	; 0x24
 80052e0:	e7c3      	b.n	800526a <_svfiprintf_r+0x12e>
 80052e2:	4342      	muls	r2, r0
 80052e4:	0035      	movs	r5, r6
 80052e6:	2301      	movs	r3, #1
 80052e8:	1852      	adds	r2, r2, r1
 80052ea:	e7f1      	b.n	80052d0 <_svfiprintf_r+0x194>
 80052ec:	ab07      	add	r3, sp, #28
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	003a      	movs	r2, r7
 80052f2:	0021      	movs	r1, r4
 80052f4:	4b10      	ldr	r3, [pc, #64]	; (8005338 <_svfiprintf_r+0x1fc>)
 80052f6:	9803      	ldr	r0, [sp, #12]
 80052f8:	e000      	b.n	80052fc <_svfiprintf_r+0x1c0>
 80052fa:	bf00      	nop
 80052fc:	9004      	str	r0, [sp, #16]
 80052fe:	9b04      	ldr	r3, [sp, #16]
 8005300:	3301      	adds	r3, #1
 8005302:	d1d3      	bne.n	80052ac <_svfiprintf_r+0x170>
 8005304:	89bb      	ldrh	r3, [r7, #12]
 8005306:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005308:	065b      	lsls	r3, r3, #25
 800530a:	d400      	bmi.n	800530e <_svfiprintf_r+0x1d2>
 800530c:	e72d      	b.n	800516a <_svfiprintf_r+0x2e>
 800530e:	2001      	movs	r0, #1
 8005310:	4240      	negs	r0, r0
 8005312:	e72a      	b.n	800516a <_svfiprintf_r+0x2e>
 8005314:	ab07      	add	r3, sp, #28
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	003a      	movs	r2, r7
 800531a:	0021      	movs	r1, r4
 800531c:	4b06      	ldr	r3, [pc, #24]	; (8005338 <_svfiprintf_r+0x1fc>)
 800531e:	9803      	ldr	r0, [sp, #12]
 8005320:	f000 f87c 	bl	800541c <_printf_i>
 8005324:	e7ea      	b.n	80052fc <_svfiprintf_r+0x1c0>
 8005326:	46c0      	nop			; (mov r8, r8)
 8005328:	0800688c 	.word	0x0800688c
 800532c:	08006892 	.word	0x08006892
 8005330:	08006896 	.word	0x08006896
 8005334:	00000000 	.word	0x00000000
 8005338:	08005079 	.word	0x08005079

0800533c <_printf_common>:
 800533c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800533e:	0015      	movs	r5, r2
 8005340:	9301      	str	r3, [sp, #4]
 8005342:	688a      	ldr	r2, [r1, #8]
 8005344:	690b      	ldr	r3, [r1, #16]
 8005346:	000c      	movs	r4, r1
 8005348:	9000      	str	r0, [sp, #0]
 800534a:	4293      	cmp	r3, r2
 800534c:	da00      	bge.n	8005350 <_printf_common+0x14>
 800534e:	0013      	movs	r3, r2
 8005350:	0022      	movs	r2, r4
 8005352:	602b      	str	r3, [r5, #0]
 8005354:	3243      	adds	r2, #67	; 0x43
 8005356:	7812      	ldrb	r2, [r2, #0]
 8005358:	2a00      	cmp	r2, #0
 800535a:	d001      	beq.n	8005360 <_printf_common+0x24>
 800535c:	3301      	adds	r3, #1
 800535e:	602b      	str	r3, [r5, #0]
 8005360:	6823      	ldr	r3, [r4, #0]
 8005362:	069b      	lsls	r3, r3, #26
 8005364:	d502      	bpl.n	800536c <_printf_common+0x30>
 8005366:	682b      	ldr	r3, [r5, #0]
 8005368:	3302      	adds	r3, #2
 800536a:	602b      	str	r3, [r5, #0]
 800536c:	6822      	ldr	r2, [r4, #0]
 800536e:	2306      	movs	r3, #6
 8005370:	0017      	movs	r7, r2
 8005372:	401f      	ands	r7, r3
 8005374:	421a      	tst	r2, r3
 8005376:	d027      	beq.n	80053c8 <_printf_common+0x8c>
 8005378:	0023      	movs	r3, r4
 800537a:	3343      	adds	r3, #67	; 0x43
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	1e5a      	subs	r2, r3, #1
 8005380:	4193      	sbcs	r3, r2
 8005382:	6822      	ldr	r2, [r4, #0]
 8005384:	0692      	lsls	r2, r2, #26
 8005386:	d430      	bmi.n	80053ea <_printf_common+0xae>
 8005388:	0022      	movs	r2, r4
 800538a:	9901      	ldr	r1, [sp, #4]
 800538c:	9800      	ldr	r0, [sp, #0]
 800538e:	9e08      	ldr	r6, [sp, #32]
 8005390:	3243      	adds	r2, #67	; 0x43
 8005392:	47b0      	blx	r6
 8005394:	1c43      	adds	r3, r0, #1
 8005396:	d025      	beq.n	80053e4 <_printf_common+0xa8>
 8005398:	2306      	movs	r3, #6
 800539a:	6820      	ldr	r0, [r4, #0]
 800539c:	682a      	ldr	r2, [r5, #0]
 800539e:	68e1      	ldr	r1, [r4, #12]
 80053a0:	2500      	movs	r5, #0
 80053a2:	4003      	ands	r3, r0
 80053a4:	2b04      	cmp	r3, #4
 80053a6:	d103      	bne.n	80053b0 <_printf_common+0x74>
 80053a8:	1a8d      	subs	r5, r1, r2
 80053aa:	43eb      	mvns	r3, r5
 80053ac:	17db      	asrs	r3, r3, #31
 80053ae:	401d      	ands	r5, r3
 80053b0:	68a3      	ldr	r3, [r4, #8]
 80053b2:	6922      	ldr	r2, [r4, #16]
 80053b4:	4293      	cmp	r3, r2
 80053b6:	dd01      	ble.n	80053bc <_printf_common+0x80>
 80053b8:	1a9b      	subs	r3, r3, r2
 80053ba:	18ed      	adds	r5, r5, r3
 80053bc:	2700      	movs	r7, #0
 80053be:	42bd      	cmp	r5, r7
 80053c0:	d120      	bne.n	8005404 <_printf_common+0xc8>
 80053c2:	2000      	movs	r0, #0
 80053c4:	e010      	b.n	80053e8 <_printf_common+0xac>
 80053c6:	3701      	adds	r7, #1
 80053c8:	68e3      	ldr	r3, [r4, #12]
 80053ca:	682a      	ldr	r2, [r5, #0]
 80053cc:	1a9b      	subs	r3, r3, r2
 80053ce:	42bb      	cmp	r3, r7
 80053d0:	ddd2      	ble.n	8005378 <_printf_common+0x3c>
 80053d2:	0022      	movs	r2, r4
 80053d4:	2301      	movs	r3, #1
 80053d6:	9901      	ldr	r1, [sp, #4]
 80053d8:	9800      	ldr	r0, [sp, #0]
 80053da:	9e08      	ldr	r6, [sp, #32]
 80053dc:	3219      	adds	r2, #25
 80053de:	47b0      	blx	r6
 80053e0:	1c43      	adds	r3, r0, #1
 80053e2:	d1f0      	bne.n	80053c6 <_printf_common+0x8a>
 80053e4:	2001      	movs	r0, #1
 80053e6:	4240      	negs	r0, r0
 80053e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80053ea:	2030      	movs	r0, #48	; 0x30
 80053ec:	18e1      	adds	r1, r4, r3
 80053ee:	3143      	adds	r1, #67	; 0x43
 80053f0:	7008      	strb	r0, [r1, #0]
 80053f2:	0021      	movs	r1, r4
 80053f4:	1c5a      	adds	r2, r3, #1
 80053f6:	3145      	adds	r1, #69	; 0x45
 80053f8:	7809      	ldrb	r1, [r1, #0]
 80053fa:	18a2      	adds	r2, r4, r2
 80053fc:	3243      	adds	r2, #67	; 0x43
 80053fe:	3302      	adds	r3, #2
 8005400:	7011      	strb	r1, [r2, #0]
 8005402:	e7c1      	b.n	8005388 <_printf_common+0x4c>
 8005404:	0022      	movs	r2, r4
 8005406:	2301      	movs	r3, #1
 8005408:	9901      	ldr	r1, [sp, #4]
 800540a:	9800      	ldr	r0, [sp, #0]
 800540c:	9e08      	ldr	r6, [sp, #32]
 800540e:	321a      	adds	r2, #26
 8005410:	47b0      	blx	r6
 8005412:	1c43      	adds	r3, r0, #1
 8005414:	d0e6      	beq.n	80053e4 <_printf_common+0xa8>
 8005416:	3701      	adds	r7, #1
 8005418:	e7d1      	b.n	80053be <_printf_common+0x82>
	...

0800541c <_printf_i>:
 800541c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800541e:	b08b      	sub	sp, #44	; 0x2c
 8005420:	9206      	str	r2, [sp, #24]
 8005422:	000a      	movs	r2, r1
 8005424:	3243      	adds	r2, #67	; 0x43
 8005426:	9307      	str	r3, [sp, #28]
 8005428:	9005      	str	r0, [sp, #20]
 800542a:	9204      	str	r2, [sp, #16]
 800542c:	7e0a      	ldrb	r2, [r1, #24]
 800542e:	000c      	movs	r4, r1
 8005430:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005432:	2a78      	cmp	r2, #120	; 0x78
 8005434:	d807      	bhi.n	8005446 <_printf_i+0x2a>
 8005436:	2a62      	cmp	r2, #98	; 0x62
 8005438:	d809      	bhi.n	800544e <_printf_i+0x32>
 800543a:	2a00      	cmp	r2, #0
 800543c:	d100      	bne.n	8005440 <_printf_i+0x24>
 800543e:	e0c1      	b.n	80055c4 <_printf_i+0x1a8>
 8005440:	2a58      	cmp	r2, #88	; 0x58
 8005442:	d100      	bne.n	8005446 <_printf_i+0x2a>
 8005444:	e08c      	b.n	8005560 <_printf_i+0x144>
 8005446:	0026      	movs	r6, r4
 8005448:	3642      	adds	r6, #66	; 0x42
 800544a:	7032      	strb	r2, [r6, #0]
 800544c:	e022      	b.n	8005494 <_printf_i+0x78>
 800544e:	0010      	movs	r0, r2
 8005450:	3863      	subs	r0, #99	; 0x63
 8005452:	2815      	cmp	r0, #21
 8005454:	d8f7      	bhi.n	8005446 <_printf_i+0x2a>
 8005456:	f7fa fe53 	bl	8000100 <__gnu_thumb1_case_shi>
 800545a:	0016      	.short	0x0016
 800545c:	fff6001f 	.word	0xfff6001f
 8005460:	fff6fff6 	.word	0xfff6fff6
 8005464:	001ffff6 	.word	0x001ffff6
 8005468:	fff6fff6 	.word	0xfff6fff6
 800546c:	fff6fff6 	.word	0xfff6fff6
 8005470:	003600a8 	.word	0x003600a8
 8005474:	fff6009a 	.word	0xfff6009a
 8005478:	00b9fff6 	.word	0x00b9fff6
 800547c:	0036fff6 	.word	0x0036fff6
 8005480:	fff6fff6 	.word	0xfff6fff6
 8005484:	009e      	.short	0x009e
 8005486:	0026      	movs	r6, r4
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	3642      	adds	r6, #66	; 0x42
 800548c:	1d11      	adds	r1, r2, #4
 800548e:	6019      	str	r1, [r3, #0]
 8005490:	6813      	ldr	r3, [r2, #0]
 8005492:	7033      	strb	r3, [r6, #0]
 8005494:	2301      	movs	r3, #1
 8005496:	e0a7      	b.n	80055e8 <_printf_i+0x1cc>
 8005498:	6808      	ldr	r0, [r1, #0]
 800549a:	6819      	ldr	r1, [r3, #0]
 800549c:	1d0a      	adds	r2, r1, #4
 800549e:	0605      	lsls	r5, r0, #24
 80054a0:	d50b      	bpl.n	80054ba <_printf_i+0x9e>
 80054a2:	680d      	ldr	r5, [r1, #0]
 80054a4:	601a      	str	r2, [r3, #0]
 80054a6:	2d00      	cmp	r5, #0
 80054a8:	da03      	bge.n	80054b2 <_printf_i+0x96>
 80054aa:	232d      	movs	r3, #45	; 0x2d
 80054ac:	9a04      	ldr	r2, [sp, #16]
 80054ae:	426d      	negs	r5, r5
 80054b0:	7013      	strb	r3, [r2, #0]
 80054b2:	4b61      	ldr	r3, [pc, #388]	; (8005638 <_printf_i+0x21c>)
 80054b4:	270a      	movs	r7, #10
 80054b6:	9303      	str	r3, [sp, #12]
 80054b8:	e01b      	b.n	80054f2 <_printf_i+0xd6>
 80054ba:	680d      	ldr	r5, [r1, #0]
 80054bc:	601a      	str	r2, [r3, #0]
 80054be:	0641      	lsls	r1, r0, #25
 80054c0:	d5f1      	bpl.n	80054a6 <_printf_i+0x8a>
 80054c2:	b22d      	sxth	r5, r5
 80054c4:	e7ef      	b.n	80054a6 <_printf_i+0x8a>
 80054c6:	680d      	ldr	r5, [r1, #0]
 80054c8:	6819      	ldr	r1, [r3, #0]
 80054ca:	1d08      	adds	r0, r1, #4
 80054cc:	6018      	str	r0, [r3, #0]
 80054ce:	062e      	lsls	r6, r5, #24
 80054d0:	d501      	bpl.n	80054d6 <_printf_i+0xba>
 80054d2:	680d      	ldr	r5, [r1, #0]
 80054d4:	e003      	b.n	80054de <_printf_i+0xc2>
 80054d6:	066d      	lsls	r5, r5, #25
 80054d8:	d5fb      	bpl.n	80054d2 <_printf_i+0xb6>
 80054da:	680d      	ldr	r5, [r1, #0]
 80054dc:	b2ad      	uxth	r5, r5
 80054de:	4b56      	ldr	r3, [pc, #344]	; (8005638 <_printf_i+0x21c>)
 80054e0:	2708      	movs	r7, #8
 80054e2:	9303      	str	r3, [sp, #12]
 80054e4:	2a6f      	cmp	r2, #111	; 0x6f
 80054e6:	d000      	beq.n	80054ea <_printf_i+0xce>
 80054e8:	3702      	adds	r7, #2
 80054ea:	0023      	movs	r3, r4
 80054ec:	2200      	movs	r2, #0
 80054ee:	3343      	adds	r3, #67	; 0x43
 80054f0:	701a      	strb	r2, [r3, #0]
 80054f2:	6863      	ldr	r3, [r4, #4]
 80054f4:	60a3      	str	r3, [r4, #8]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	db03      	blt.n	8005502 <_printf_i+0xe6>
 80054fa:	2204      	movs	r2, #4
 80054fc:	6821      	ldr	r1, [r4, #0]
 80054fe:	4391      	bics	r1, r2
 8005500:	6021      	str	r1, [r4, #0]
 8005502:	2d00      	cmp	r5, #0
 8005504:	d102      	bne.n	800550c <_printf_i+0xf0>
 8005506:	9e04      	ldr	r6, [sp, #16]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00c      	beq.n	8005526 <_printf_i+0x10a>
 800550c:	9e04      	ldr	r6, [sp, #16]
 800550e:	0028      	movs	r0, r5
 8005510:	0039      	movs	r1, r7
 8005512:	f7fa fe85 	bl	8000220 <__aeabi_uidivmod>
 8005516:	9b03      	ldr	r3, [sp, #12]
 8005518:	3e01      	subs	r6, #1
 800551a:	5c5b      	ldrb	r3, [r3, r1]
 800551c:	7033      	strb	r3, [r6, #0]
 800551e:	002b      	movs	r3, r5
 8005520:	0005      	movs	r5, r0
 8005522:	429f      	cmp	r7, r3
 8005524:	d9f3      	bls.n	800550e <_printf_i+0xf2>
 8005526:	2f08      	cmp	r7, #8
 8005528:	d109      	bne.n	800553e <_printf_i+0x122>
 800552a:	6823      	ldr	r3, [r4, #0]
 800552c:	07db      	lsls	r3, r3, #31
 800552e:	d506      	bpl.n	800553e <_printf_i+0x122>
 8005530:	6863      	ldr	r3, [r4, #4]
 8005532:	6922      	ldr	r2, [r4, #16]
 8005534:	4293      	cmp	r3, r2
 8005536:	dc02      	bgt.n	800553e <_printf_i+0x122>
 8005538:	2330      	movs	r3, #48	; 0x30
 800553a:	3e01      	subs	r6, #1
 800553c:	7033      	strb	r3, [r6, #0]
 800553e:	9b04      	ldr	r3, [sp, #16]
 8005540:	1b9b      	subs	r3, r3, r6
 8005542:	6123      	str	r3, [r4, #16]
 8005544:	9b07      	ldr	r3, [sp, #28]
 8005546:	0021      	movs	r1, r4
 8005548:	9300      	str	r3, [sp, #0]
 800554a:	9805      	ldr	r0, [sp, #20]
 800554c:	9b06      	ldr	r3, [sp, #24]
 800554e:	aa09      	add	r2, sp, #36	; 0x24
 8005550:	f7ff fef4 	bl	800533c <_printf_common>
 8005554:	1c43      	adds	r3, r0, #1
 8005556:	d14c      	bne.n	80055f2 <_printf_i+0x1d6>
 8005558:	2001      	movs	r0, #1
 800555a:	4240      	negs	r0, r0
 800555c:	b00b      	add	sp, #44	; 0x2c
 800555e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005560:	3145      	adds	r1, #69	; 0x45
 8005562:	700a      	strb	r2, [r1, #0]
 8005564:	4a34      	ldr	r2, [pc, #208]	; (8005638 <_printf_i+0x21c>)
 8005566:	9203      	str	r2, [sp, #12]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	6821      	ldr	r1, [r4, #0]
 800556c:	ca20      	ldmia	r2!, {r5}
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	0608      	lsls	r0, r1, #24
 8005572:	d516      	bpl.n	80055a2 <_printf_i+0x186>
 8005574:	07cb      	lsls	r3, r1, #31
 8005576:	d502      	bpl.n	800557e <_printf_i+0x162>
 8005578:	2320      	movs	r3, #32
 800557a:	4319      	orrs	r1, r3
 800557c:	6021      	str	r1, [r4, #0]
 800557e:	2710      	movs	r7, #16
 8005580:	2d00      	cmp	r5, #0
 8005582:	d1b2      	bne.n	80054ea <_printf_i+0xce>
 8005584:	2320      	movs	r3, #32
 8005586:	6822      	ldr	r2, [r4, #0]
 8005588:	439a      	bics	r2, r3
 800558a:	6022      	str	r2, [r4, #0]
 800558c:	e7ad      	b.n	80054ea <_printf_i+0xce>
 800558e:	2220      	movs	r2, #32
 8005590:	6809      	ldr	r1, [r1, #0]
 8005592:	430a      	orrs	r2, r1
 8005594:	6022      	str	r2, [r4, #0]
 8005596:	0022      	movs	r2, r4
 8005598:	2178      	movs	r1, #120	; 0x78
 800559a:	3245      	adds	r2, #69	; 0x45
 800559c:	7011      	strb	r1, [r2, #0]
 800559e:	4a27      	ldr	r2, [pc, #156]	; (800563c <_printf_i+0x220>)
 80055a0:	e7e1      	b.n	8005566 <_printf_i+0x14a>
 80055a2:	0648      	lsls	r0, r1, #25
 80055a4:	d5e6      	bpl.n	8005574 <_printf_i+0x158>
 80055a6:	b2ad      	uxth	r5, r5
 80055a8:	e7e4      	b.n	8005574 <_printf_i+0x158>
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	680d      	ldr	r5, [r1, #0]
 80055ae:	1d10      	adds	r0, r2, #4
 80055b0:	6949      	ldr	r1, [r1, #20]
 80055b2:	6018      	str	r0, [r3, #0]
 80055b4:	6813      	ldr	r3, [r2, #0]
 80055b6:	062e      	lsls	r6, r5, #24
 80055b8:	d501      	bpl.n	80055be <_printf_i+0x1a2>
 80055ba:	6019      	str	r1, [r3, #0]
 80055bc:	e002      	b.n	80055c4 <_printf_i+0x1a8>
 80055be:	066d      	lsls	r5, r5, #25
 80055c0:	d5fb      	bpl.n	80055ba <_printf_i+0x19e>
 80055c2:	8019      	strh	r1, [r3, #0]
 80055c4:	2300      	movs	r3, #0
 80055c6:	9e04      	ldr	r6, [sp, #16]
 80055c8:	6123      	str	r3, [r4, #16]
 80055ca:	e7bb      	b.n	8005544 <_printf_i+0x128>
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	1d11      	adds	r1, r2, #4
 80055d0:	6019      	str	r1, [r3, #0]
 80055d2:	6816      	ldr	r6, [r2, #0]
 80055d4:	2100      	movs	r1, #0
 80055d6:	0030      	movs	r0, r6
 80055d8:	6862      	ldr	r2, [r4, #4]
 80055da:	f000 f831 	bl	8005640 <memchr>
 80055de:	2800      	cmp	r0, #0
 80055e0:	d001      	beq.n	80055e6 <_printf_i+0x1ca>
 80055e2:	1b80      	subs	r0, r0, r6
 80055e4:	6060      	str	r0, [r4, #4]
 80055e6:	6863      	ldr	r3, [r4, #4]
 80055e8:	6123      	str	r3, [r4, #16]
 80055ea:	2300      	movs	r3, #0
 80055ec:	9a04      	ldr	r2, [sp, #16]
 80055ee:	7013      	strb	r3, [r2, #0]
 80055f0:	e7a8      	b.n	8005544 <_printf_i+0x128>
 80055f2:	6923      	ldr	r3, [r4, #16]
 80055f4:	0032      	movs	r2, r6
 80055f6:	9906      	ldr	r1, [sp, #24]
 80055f8:	9805      	ldr	r0, [sp, #20]
 80055fa:	9d07      	ldr	r5, [sp, #28]
 80055fc:	47a8      	blx	r5
 80055fe:	1c43      	adds	r3, r0, #1
 8005600:	d0aa      	beq.n	8005558 <_printf_i+0x13c>
 8005602:	6823      	ldr	r3, [r4, #0]
 8005604:	079b      	lsls	r3, r3, #30
 8005606:	d415      	bmi.n	8005634 <_printf_i+0x218>
 8005608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800560a:	68e0      	ldr	r0, [r4, #12]
 800560c:	4298      	cmp	r0, r3
 800560e:	daa5      	bge.n	800555c <_printf_i+0x140>
 8005610:	0018      	movs	r0, r3
 8005612:	e7a3      	b.n	800555c <_printf_i+0x140>
 8005614:	0022      	movs	r2, r4
 8005616:	2301      	movs	r3, #1
 8005618:	9906      	ldr	r1, [sp, #24]
 800561a:	9805      	ldr	r0, [sp, #20]
 800561c:	9e07      	ldr	r6, [sp, #28]
 800561e:	3219      	adds	r2, #25
 8005620:	47b0      	blx	r6
 8005622:	1c43      	adds	r3, r0, #1
 8005624:	d098      	beq.n	8005558 <_printf_i+0x13c>
 8005626:	3501      	adds	r5, #1
 8005628:	68e3      	ldr	r3, [r4, #12]
 800562a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800562c:	1a9b      	subs	r3, r3, r2
 800562e:	42ab      	cmp	r3, r5
 8005630:	dcf0      	bgt.n	8005614 <_printf_i+0x1f8>
 8005632:	e7e9      	b.n	8005608 <_printf_i+0x1ec>
 8005634:	2500      	movs	r5, #0
 8005636:	e7f7      	b.n	8005628 <_printf_i+0x20c>
 8005638:	0800689d 	.word	0x0800689d
 800563c:	080068ae 	.word	0x080068ae

08005640 <memchr>:
 8005640:	b2c9      	uxtb	r1, r1
 8005642:	1882      	adds	r2, r0, r2
 8005644:	4290      	cmp	r0, r2
 8005646:	d101      	bne.n	800564c <memchr+0xc>
 8005648:	2000      	movs	r0, #0
 800564a:	4770      	bx	lr
 800564c:	7803      	ldrb	r3, [r0, #0]
 800564e:	428b      	cmp	r3, r1
 8005650:	d0fb      	beq.n	800564a <memchr+0xa>
 8005652:	3001      	adds	r0, #1
 8005654:	e7f6      	b.n	8005644 <memchr+0x4>

08005656 <memmove>:
 8005656:	b510      	push	{r4, lr}
 8005658:	4288      	cmp	r0, r1
 800565a:	d902      	bls.n	8005662 <memmove+0xc>
 800565c:	188b      	adds	r3, r1, r2
 800565e:	4298      	cmp	r0, r3
 8005660:	d303      	bcc.n	800566a <memmove+0x14>
 8005662:	2300      	movs	r3, #0
 8005664:	e007      	b.n	8005676 <memmove+0x20>
 8005666:	5c8b      	ldrb	r3, [r1, r2]
 8005668:	5483      	strb	r3, [r0, r2]
 800566a:	3a01      	subs	r2, #1
 800566c:	d2fb      	bcs.n	8005666 <memmove+0x10>
 800566e:	bd10      	pop	{r4, pc}
 8005670:	5ccc      	ldrb	r4, [r1, r3]
 8005672:	54c4      	strb	r4, [r0, r3]
 8005674:	3301      	adds	r3, #1
 8005676:	429a      	cmp	r2, r3
 8005678:	d1fa      	bne.n	8005670 <memmove+0x1a>
 800567a:	e7f8      	b.n	800566e <memmove+0x18>

0800567c <_free_r>:
 800567c:	b570      	push	{r4, r5, r6, lr}
 800567e:	0005      	movs	r5, r0
 8005680:	2900      	cmp	r1, #0
 8005682:	d010      	beq.n	80056a6 <_free_r+0x2a>
 8005684:	1f0c      	subs	r4, r1, #4
 8005686:	6823      	ldr	r3, [r4, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	da00      	bge.n	800568e <_free_r+0x12>
 800568c:	18e4      	adds	r4, r4, r3
 800568e:	0028      	movs	r0, r5
 8005690:	f000 f918 	bl	80058c4 <__malloc_lock>
 8005694:	4a1d      	ldr	r2, [pc, #116]	; (800570c <_free_r+0x90>)
 8005696:	6813      	ldr	r3, [r2, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d105      	bne.n	80056a8 <_free_r+0x2c>
 800569c:	6063      	str	r3, [r4, #4]
 800569e:	6014      	str	r4, [r2, #0]
 80056a0:	0028      	movs	r0, r5
 80056a2:	f000 f917 	bl	80058d4 <__malloc_unlock>
 80056a6:	bd70      	pop	{r4, r5, r6, pc}
 80056a8:	42a3      	cmp	r3, r4
 80056aa:	d908      	bls.n	80056be <_free_r+0x42>
 80056ac:	6821      	ldr	r1, [r4, #0]
 80056ae:	1860      	adds	r0, r4, r1
 80056b0:	4283      	cmp	r3, r0
 80056b2:	d1f3      	bne.n	800569c <_free_r+0x20>
 80056b4:	6818      	ldr	r0, [r3, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	1841      	adds	r1, r0, r1
 80056ba:	6021      	str	r1, [r4, #0]
 80056bc:	e7ee      	b.n	800569c <_free_r+0x20>
 80056be:	001a      	movs	r2, r3
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d001      	beq.n	80056ca <_free_r+0x4e>
 80056c6:	42a3      	cmp	r3, r4
 80056c8:	d9f9      	bls.n	80056be <_free_r+0x42>
 80056ca:	6811      	ldr	r1, [r2, #0]
 80056cc:	1850      	adds	r0, r2, r1
 80056ce:	42a0      	cmp	r0, r4
 80056d0:	d10b      	bne.n	80056ea <_free_r+0x6e>
 80056d2:	6820      	ldr	r0, [r4, #0]
 80056d4:	1809      	adds	r1, r1, r0
 80056d6:	1850      	adds	r0, r2, r1
 80056d8:	6011      	str	r1, [r2, #0]
 80056da:	4283      	cmp	r3, r0
 80056dc:	d1e0      	bne.n	80056a0 <_free_r+0x24>
 80056de:	6818      	ldr	r0, [r3, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	1841      	adds	r1, r0, r1
 80056e4:	6011      	str	r1, [r2, #0]
 80056e6:	6053      	str	r3, [r2, #4]
 80056e8:	e7da      	b.n	80056a0 <_free_r+0x24>
 80056ea:	42a0      	cmp	r0, r4
 80056ec:	d902      	bls.n	80056f4 <_free_r+0x78>
 80056ee:	230c      	movs	r3, #12
 80056f0:	602b      	str	r3, [r5, #0]
 80056f2:	e7d5      	b.n	80056a0 <_free_r+0x24>
 80056f4:	6821      	ldr	r1, [r4, #0]
 80056f6:	1860      	adds	r0, r4, r1
 80056f8:	4283      	cmp	r3, r0
 80056fa:	d103      	bne.n	8005704 <_free_r+0x88>
 80056fc:	6818      	ldr	r0, [r3, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	1841      	adds	r1, r0, r1
 8005702:	6021      	str	r1, [r4, #0]
 8005704:	6063      	str	r3, [r4, #4]
 8005706:	6054      	str	r4, [r2, #4]
 8005708:	e7ca      	b.n	80056a0 <_free_r+0x24>
 800570a:	46c0      	nop			; (mov r8, r8)
 800570c:	20000650 	.word	0x20000650

08005710 <sbrk_aligned>:
 8005710:	b570      	push	{r4, r5, r6, lr}
 8005712:	4e0f      	ldr	r6, [pc, #60]	; (8005750 <sbrk_aligned+0x40>)
 8005714:	000d      	movs	r5, r1
 8005716:	6831      	ldr	r1, [r6, #0]
 8005718:	0004      	movs	r4, r0
 800571a:	2900      	cmp	r1, #0
 800571c:	d102      	bne.n	8005724 <sbrk_aligned+0x14>
 800571e:	f000 f8bf 	bl	80058a0 <_sbrk_r>
 8005722:	6030      	str	r0, [r6, #0]
 8005724:	0029      	movs	r1, r5
 8005726:	0020      	movs	r0, r4
 8005728:	f000 f8ba 	bl	80058a0 <_sbrk_r>
 800572c:	1c43      	adds	r3, r0, #1
 800572e:	d00a      	beq.n	8005746 <sbrk_aligned+0x36>
 8005730:	2303      	movs	r3, #3
 8005732:	1cc5      	adds	r5, r0, #3
 8005734:	439d      	bics	r5, r3
 8005736:	42a8      	cmp	r0, r5
 8005738:	d007      	beq.n	800574a <sbrk_aligned+0x3a>
 800573a:	1a29      	subs	r1, r5, r0
 800573c:	0020      	movs	r0, r4
 800573e:	f000 f8af 	bl	80058a0 <_sbrk_r>
 8005742:	1c43      	adds	r3, r0, #1
 8005744:	d101      	bne.n	800574a <sbrk_aligned+0x3a>
 8005746:	2501      	movs	r5, #1
 8005748:	426d      	negs	r5, r5
 800574a:	0028      	movs	r0, r5
 800574c:	bd70      	pop	{r4, r5, r6, pc}
 800574e:	46c0      	nop			; (mov r8, r8)
 8005750:	20000654 	.word	0x20000654

08005754 <_malloc_r>:
 8005754:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005756:	2203      	movs	r2, #3
 8005758:	1ccb      	adds	r3, r1, #3
 800575a:	4393      	bics	r3, r2
 800575c:	3308      	adds	r3, #8
 800575e:	0006      	movs	r6, r0
 8005760:	001f      	movs	r7, r3
 8005762:	2b0c      	cmp	r3, #12
 8005764:	d232      	bcs.n	80057cc <_malloc_r+0x78>
 8005766:	270c      	movs	r7, #12
 8005768:	42b9      	cmp	r1, r7
 800576a:	d831      	bhi.n	80057d0 <_malloc_r+0x7c>
 800576c:	0030      	movs	r0, r6
 800576e:	f000 f8a9 	bl	80058c4 <__malloc_lock>
 8005772:	4d32      	ldr	r5, [pc, #200]	; (800583c <_malloc_r+0xe8>)
 8005774:	682b      	ldr	r3, [r5, #0]
 8005776:	001c      	movs	r4, r3
 8005778:	2c00      	cmp	r4, #0
 800577a:	d12e      	bne.n	80057da <_malloc_r+0x86>
 800577c:	0039      	movs	r1, r7
 800577e:	0030      	movs	r0, r6
 8005780:	f7ff ffc6 	bl	8005710 <sbrk_aligned>
 8005784:	0004      	movs	r4, r0
 8005786:	1c43      	adds	r3, r0, #1
 8005788:	d11e      	bne.n	80057c8 <_malloc_r+0x74>
 800578a:	682c      	ldr	r4, [r5, #0]
 800578c:	0025      	movs	r5, r4
 800578e:	2d00      	cmp	r5, #0
 8005790:	d14a      	bne.n	8005828 <_malloc_r+0xd4>
 8005792:	6823      	ldr	r3, [r4, #0]
 8005794:	0029      	movs	r1, r5
 8005796:	18e3      	adds	r3, r4, r3
 8005798:	0030      	movs	r0, r6
 800579a:	9301      	str	r3, [sp, #4]
 800579c:	f000 f880 	bl	80058a0 <_sbrk_r>
 80057a0:	9b01      	ldr	r3, [sp, #4]
 80057a2:	4283      	cmp	r3, r0
 80057a4:	d143      	bne.n	800582e <_malloc_r+0xda>
 80057a6:	6823      	ldr	r3, [r4, #0]
 80057a8:	3703      	adds	r7, #3
 80057aa:	1aff      	subs	r7, r7, r3
 80057ac:	2303      	movs	r3, #3
 80057ae:	439f      	bics	r7, r3
 80057b0:	3708      	adds	r7, #8
 80057b2:	2f0c      	cmp	r7, #12
 80057b4:	d200      	bcs.n	80057b8 <_malloc_r+0x64>
 80057b6:	270c      	movs	r7, #12
 80057b8:	0039      	movs	r1, r7
 80057ba:	0030      	movs	r0, r6
 80057bc:	f7ff ffa8 	bl	8005710 <sbrk_aligned>
 80057c0:	1c43      	adds	r3, r0, #1
 80057c2:	d034      	beq.n	800582e <_malloc_r+0xda>
 80057c4:	6823      	ldr	r3, [r4, #0]
 80057c6:	19df      	adds	r7, r3, r7
 80057c8:	6027      	str	r7, [r4, #0]
 80057ca:	e013      	b.n	80057f4 <_malloc_r+0xa0>
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	dacb      	bge.n	8005768 <_malloc_r+0x14>
 80057d0:	230c      	movs	r3, #12
 80057d2:	2500      	movs	r5, #0
 80057d4:	6033      	str	r3, [r6, #0]
 80057d6:	0028      	movs	r0, r5
 80057d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80057da:	6822      	ldr	r2, [r4, #0]
 80057dc:	1bd1      	subs	r1, r2, r7
 80057de:	d420      	bmi.n	8005822 <_malloc_r+0xce>
 80057e0:	290b      	cmp	r1, #11
 80057e2:	d917      	bls.n	8005814 <_malloc_r+0xc0>
 80057e4:	19e2      	adds	r2, r4, r7
 80057e6:	6027      	str	r7, [r4, #0]
 80057e8:	42a3      	cmp	r3, r4
 80057ea:	d111      	bne.n	8005810 <_malloc_r+0xbc>
 80057ec:	602a      	str	r2, [r5, #0]
 80057ee:	6863      	ldr	r3, [r4, #4]
 80057f0:	6011      	str	r1, [r2, #0]
 80057f2:	6053      	str	r3, [r2, #4]
 80057f4:	0030      	movs	r0, r6
 80057f6:	0025      	movs	r5, r4
 80057f8:	f000 f86c 	bl	80058d4 <__malloc_unlock>
 80057fc:	2207      	movs	r2, #7
 80057fe:	350b      	adds	r5, #11
 8005800:	1d23      	adds	r3, r4, #4
 8005802:	4395      	bics	r5, r2
 8005804:	1aea      	subs	r2, r5, r3
 8005806:	429d      	cmp	r5, r3
 8005808:	d0e5      	beq.n	80057d6 <_malloc_r+0x82>
 800580a:	1b5b      	subs	r3, r3, r5
 800580c:	50a3      	str	r3, [r4, r2]
 800580e:	e7e2      	b.n	80057d6 <_malloc_r+0x82>
 8005810:	605a      	str	r2, [r3, #4]
 8005812:	e7ec      	b.n	80057ee <_malloc_r+0x9a>
 8005814:	6862      	ldr	r2, [r4, #4]
 8005816:	42a3      	cmp	r3, r4
 8005818:	d101      	bne.n	800581e <_malloc_r+0xca>
 800581a:	602a      	str	r2, [r5, #0]
 800581c:	e7ea      	b.n	80057f4 <_malloc_r+0xa0>
 800581e:	605a      	str	r2, [r3, #4]
 8005820:	e7e8      	b.n	80057f4 <_malloc_r+0xa0>
 8005822:	0023      	movs	r3, r4
 8005824:	6864      	ldr	r4, [r4, #4]
 8005826:	e7a7      	b.n	8005778 <_malloc_r+0x24>
 8005828:	002c      	movs	r4, r5
 800582a:	686d      	ldr	r5, [r5, #4]
 800582c:	e7af      	b.n	800578e <_malloc_r+0x3a>
 800582e:	230c      	movs	r3, #12
 8005830:	0030      	movs	r0, r6
 8005832:	6033      	str	r3, [r6, #0]
 8005834:	f000 f84e 	bl	80058d4 <__malloc_unlock>
 8005838:	e7cd      	b.n	80057d6 <_malloc_r+0x82>
 800583a:	46c0      	nop			; (mov r8, r8)
 800583c:	20000650 	.word	0x20000650

08005840 <_realloc_r>:
 8005840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005842:	0007      	movs	r7, r0
 8005844:	000e      	movs	r6, r1
 8005846:	0014      	movs	r4, r2
 8005848:	2900      	cmp	r1, #0
 800584a:	d105      	bne.n	8005858 <_realloc_r+0x18>
 800584c:	0011      	movs	r1, r2
 800584e:	f7ff ff81 	bl	8005754 <_malloc_r>
 8005852:	0005      	movs	r5, r0
 8005854:	0028      	movs	r0, r5
 8005856:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005858:	2a00      	cmp	r2, #0
 800585a:	d103      	bne.n	8005864 <_realloc_r+0x24>
 800585c:	f7ff ff0e 	bl	800567c <_free_r>
 8005860:	0025      	movs	r5, r4
 8005862:	e7f7      	b.n	8005854 <_realloc_r+0x14>
 8005864:	f000 f83e 	bl	80058e4 <_malloc_usable_size_r>
 8005868:	9001      	str	r0, [sp, #4]
 800586a:	4284      	cmp	r4, r0
 800586c:	d803      	bhi.n	8005876 <_realloc_r+0x36>
 800586e:	0035      	movs	r5, r6
 8005870:	0843      	lsrs	r3, r0, #1
 8005872:	42a3      	cmp	r3, r4
 8005874:	d3ee      	bcc.n	8005854 <_realloc_r+0x14>
 8005876:	0021      	movs	r1, r4
 8005878:	0038      	movs	r0, r7
 800587a:	f7ff ff6b 	bl	8005754 <_malloc_r>
 800587e:	1e05      	subs	r5, r0, #0
 8005880:	d0e8      	beq.n	8005854 <_realloc_r+0x14>
 8005882:	9b01      	ldr	r3, [sp, #4]
 8005884:	0022      	movs	r2, r4
 8005886:	429c      	cmp	r4, r3
 8005888:	d900      	bls.n	800588c <_realloc_r+0x4c>
 800588a:	001a      	movs	r2, r3
 800588c:	0031      	movs	r1, r6
 800588e:	0028      	movs	r0, r5
 8005890:	f7ff fbc0 	bl	8005014 <memcpy>
 8005894:	0031      	movs	r1, r6
 8005896:	0038      	movs	r0, r7
 8005898:	f7ff fef0 	bl	800567c <_free_r>
 800589c:	e7da      	b.n	8005854 <_realloc_r+0x14>
	...

080058a0 <_sbrk_r>:
 80058a0:	2300      	movs	r3, #0
 80058a2:	b570      	push	{r4, r5, r6, lr}
 80058a4:	4d06      	ldr	r5, [pc, #24]	; (80058c0 <_sbrk_r+0x20>)
 80058a6:	0004      	movs	r4, r0
 80058a8:	0008      	movs	r0, r1
 80058aa:	602b      	str	r3, [r5, #0]
 80058ac:	f7fb fc44 	bl	8001138 <_sbrk>
 80058b0:	1c43      	adds	r3, r0, #1
 80058b2:	d103      	bne.n	80058bc <_sbrk_r+0x1c>
 80058b4:	682b      	ldr	r3, [r5, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d000      	beq.n	80058bc <_sbrk_r+0x1c>
 80058ba:	6023      	str	r3, [r4, #0]
 80058bc:	bd70      	pop	{r4, r5, r6, pc}
 80058be:	46c0      	nop			; (mov r8, r8)
 80058c0:	20000658 	.word	0x20000658

080058c4 <__malloc_lock>:
 80058c4:	b510      	push	{r4, lr}
 80058c6:	4802      	ldr	r0, [pc, #8]	; (80058d0 <__malloc_lock+0xc>)
 80058c8:	f000 f814 	bl	80058f4 <__retarget_lock_acquire_recursive>
 80058cc:	bd10      	pop	{r4, pc}
 80058ce:	46c0      	nop			; (mov r8, r8)
 80058d0:	2000065c 	.word	0x2000065c

080058d4 <__malloc_unlock>:
 80058d4:	b510      	push	{r4, lr}
 80058d6:	4802      	ldr	r0, [pc, #8]	; (80058e0 <__malloc_unlock+0xc>)
 80058d8:	f000 f80d 	bl	80058f6 <__retarget_lock_release_recursive>
 80058dc:	bd10      	pop	{r4, pc}
 80058de:	46c0      	nop			; (mov r8, r8)
 80058e0:	2000065c 	.word	0x2000065c

080058e4 <_malloc_usable_size_r>:
 80058e4:	1f0b      	subs	r3, r1, #4
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	1f18      	subs	r0, r3, #4
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	da01      	bge.n	80058f2 <_malloc_usable_size_r+0xe>
 80058ee:	580b      	ldr	r3, [r1, r0]
 80058f0:	18c0      	adds	r0, r0, r3
 80058f2:	4770      	bx	lr

080058f4 <__retarget_lock_acquire_recursive>:
 80058f4:	4770      	bx	lr

080058f6 <__retarget_lock_release_recursive>:
 80058f6:	4770      	bx	lr

080058f8 <_init>:
 80058f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058fa:	46c0      	nop			; (mov r8, r8)
 80058fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058fe:	bc08      	pop	{r3}
 8005900:	469e      	mov	lr, r3
 8005902:	4770      	bx	lr

08005904 <_fini>:
 8005904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005906:	46c0      	nop			; (mov r8, r8)
 8005908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800590a:	bc08      	pop	{r3}
 800590c:	469e      	mov	lr, r3
 800590e:	4770      	bx	lr
